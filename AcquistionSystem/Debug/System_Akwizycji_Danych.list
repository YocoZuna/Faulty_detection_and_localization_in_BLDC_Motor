
System_Akwizycji_Danych.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cf24  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003848  0801d128  0801d128  0002d128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020970  08020970  00040340  2**0
                  CONTENTS
  4 .ARM          00000008  08020970  08020970  00030970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020978  08020978  00040340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020978  08020978  00030978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802097c  0802097c  0003097c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08020980  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000200  08020b80  00040200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002a0  08020c20  000402a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001dc50  20000340  08020cc0  00040340  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2001df90  08020cc0  0004df90  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00040340  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0004036e  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003f99f  00000000  00000000  000403b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00009bc6  00000000  00000000  0007fd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002cf0  00000000  00000000  00089918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000237f  00000000  00000000  0008c608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003cf72  00000000  00000000  0008e987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00048f52  00000000  00000000  000cb8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0012bda0  00000000  00000000  0011484b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000c6a4  00000000  00000000  002405ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000073  00000000  00000000  0024cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000340 	.word	0x20000340
 800021c:	00000000 	.word	0x00000000
 8000220:	0801d10c 	.word	0x0801d10c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000344 	.word	0x20000344
 800023c:	0801d10c 	.word	0x0801d10c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
}
 80005f4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <__NVIC_SystemReset+0x24>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005fe:	4904      	ldr	r1, [pc, #16]	; (8000610 <__NVIC_SystemReset+0x24>)
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <__NVIC_SystemReset+0x28>)
 8000602:	4313      	orrs	r3, r2
 8000604:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000606:	f3bf 8f4f 	dsb	sy
}
 800060a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <__NVIC_SystemReset+0x20>
 8000610:	e000ed00 	.word	0xe000ed00
 8000614:	05fa0004 	.word	0x05fa0004

08000618 <MPU6050_Init>:

	}MPU6050_Config_TypeDef;
  *
  */
void MPU6050_Init(I2C_HandleTypeDef* I2C,MPU6050_Config_TypeDef* mpu6050)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af04      	add	r7, sp, #16
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	uint8_t temp = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	73fb      	strb	r3, [r7, #15]

	/* Check if MPU6050 is present under 0x68 slave address */
	HAL_I2C_Mem_Read(I2C, MPU6050_DEV_ADDRESS, MPU6050_WHOAMI, 1, &temp, 1, 1000);
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	9302      	str	r3, [sp, #8]
 800062c:	2301      	movs	r3, #1
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	f107 030f 	add.w	r3, r7, #15
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2301      	movs	r3, #1
 8000638:	2275      	movs	r2, #117	; 0x75
 800063a:	21d0      	movs	r1, #208	; 0xd0
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f004 fc55 	bl	8004eec <HAL_I2C_Mem_Read>
	if (temp == 0x68)
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b68      	cmp	r3, #104	; 0x68
 8000646:	f040 80a4 	bne.w	8000792 <MPU6050_Init+0x17a>
	{
		/* Restart of the device */
		uint8_t write_temp = 0xFF;
 800064a:	23ff      	movs	r3, #255	; 0xff
 800064c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Read(I2C, MPU6050_DEV_ADDRESS, MPU6050_POWER_MANAGMENT_1, 1, &temp, 1, 1000);
 800064e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000652:	9302      	str	r3, [sp, #8]
 8000654:	2301      	movs	r3, #1
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	f107 030f 	add.w	r3, r7, #15
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	226b      	movs	r2, #107	; 0x6b
 8000662:	21d0      	movs	r1, #208	; 0xd0
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f004 fc41 	bl	8004eec <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_POWER_MANAGMENT_1, 1,&write_temp,1, 1000);
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	2301      	movs	r3, #1
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	f107 030e 	add.w	r3, r7, #14
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2301      	movs	r3, #1
 800067c:	226b      	movs	r2, #107	; 0x6b
 800067e:	21d0      	movs	r1, #208	; 0xd0
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f004 fb2b 	bl	8004cdc <HAL_I2C_Mem_Write>

		HAL_Delay(100);
 8000686:	2064      	movs	r0, #100	; 0x64
 8000688:	f001 fd42 	bl	8002110 <HAL_Delay>
		write_temp = 0x00;
 800068c:	2300      	movs	r3, #0
 800068e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_POWER_MANAGMENT_1, 1,&write_temp,1, 1000);
 8000690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000694:	9302      	str	r3, [sp, #8]
 8000696:	2301      	movs	r3, #1
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	f107 030e 	add.w	r3, r7, #14
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2301      	movs	r3, #1
 80006a2:	226b      	movs	r2, #107	; 0x6b
 80006a4:	21d0      	movs	r1, #208	; 0xd0
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f004 fb18 	bl	8004cdc <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Read(I2C, MPU6050_DEV_ADDRESS, MPU6050_POWER_MANAGMENT_1, 1, &temp, 1, 1000);
 80006ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b0:	9302      	str	r3, [sp, #8]
 80006b2:	2301      	movs	r3, #1
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	f107 030f 	add.w	r3, r7, #15
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	226b      	movs	r2, #107	; 0x6b
 80006c0:	21d0      	movs	r1, #208	; 0xd0
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f004 fc12 	bl	8004eec <HAL_I2C_Mem_Read>

		HAL_Delay(100);
 80006c8:	2064      	movs	r0, #100	; 0x64
 80006ca:	f001 fd21 	bl	8002110 <HAL_Delay>
		/* Initialization of clock and tempr sensor */
		if (mpu6050->TEMP_ON_OFF == DISABLE)
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10b      	bne.n	80006ee <MPU6050_Init+0xd6>
		{
			temp  |= mpu6050->CLOCK + MPU6050_TEMP_DIS;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	3308      	adds	r3, #8
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	b25a      	sxtb	r2, r3
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b25b      	sxtb	r3, r3
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e002      	b.n	80006f4 <MPU6050_Init+0xdc>
		}
		else
		{
			temp  = mpu6050->CLOCK;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	73fb      	strb	r3, [r7, #15]
		}
		/* Restart all sensors */
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_USER_CONTROL, 1,(uint8_t*) MPU6050_USER_RESET_ALL_SENS, 1, 1000);
 80006f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f8:	9302      	str	r3, [sp, #8]
 80006fa:	2301      	movs	r3, #1
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	2301      	movs	r3, #1
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2301      	movs	r3, #1
 8000704:	226a      	movs	r2, #106	; 0x6a
 8000706:	21d0      	movs	r1, #208	; 0xd0
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f004 fae7 	bl	8004cdc <HAL_I2C_Mem_Write>
		/* Set lowpass filter ad dpfl */
		temp = mpu6050->FILTER;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	785b      	ldrb	r3, [r3, #1]
 8000712:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_LOW_PASS_FILTER, 1,&temp, 1, 1000);
 8000714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2301      	movs	r3, #1
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	f107 030f 	add.w	r3, r7, #15
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2301      	movs	r3, #1
 8000726:	221a      	movs	r2, #26
 8000728:	21d0      	movs	r1, #208	; 0xd0
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f004 fad6 	bl	8004cdc <HAL_I2C_Mem_Write>

		/* Setting range for accelerometer and gyroscope */
		temp = mpu6050->ACC_RANGE;
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	78db      	ldrb	r3, [r3, #3]
 8000734:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_ACC_CONFIG, 1,&temp, 1, 1000);
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	9302      	str	r3, [sp, #8]
 800073c:	2301      	movs	r3, #1
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	f107 030f 	add.w	r3, r7, #15
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2301      	movs	r3, #1
 8000748:	221c      	movs	r2, #28
 800074a:	21d0      	movs	r1, #208	; 0xd0
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f004 fac5 	bl	8004cdc <HAL_I2C_Mem_Write>
		temp = mpu6050->GYRO_RANGE;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C, MPU6050_DEV_ADDRESS, MPU6050_GYRO_CONFIG, 1,&temp, 1, 1000);
 8000758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075c:	9302      	str	r3, [sp, #8]
 800075e:	2301      	movs	r3, #1
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	f107 030f 	add.w	r3, r7, #15
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	221b      	movs	r2, #27
 800076c:	21d0      	movs	r1, #208	; 0xd0
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f004 fab4 	bl	8004cdc <HAL_I2C_Mem_Write>

		HAL_I2C_Mem_Read(I2C, MPU6050_DEV_ADDRESS, MPU6050_POWER_MANAGMENT_1, 1, &temp, 1, 1000);
 8000774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000778:	9302      	str	r3, [sp, #8]
 800077a:	2301      	movs	r3, #1
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	f107 030f 	add.w	r3, r7, #15
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	226b      	movs	r2, #107	; 0x6b
 8000788:	21d0      	movs	r1, #208	; 0xd0
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f004 fbae 	bl	8004eec <HAL_I2C_Mem_Read>
	}
	else
	{
		NVIC_SystemReset();
	}
}
 8000790:	e001      	b.n	8000796 <MPU6050_Init+0x17e>
		NVIC_SystemReset();
 8000792:	f7ff ff2b 	bl	80005ec <__NVIC_SystemReset>
}
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <MPU6050_Burst_Read_Acc_Gyro_Read>:
	rollpitch[1] = pitch;

}

void MPU6050_Burst_Read_Acc_Gyro_Read(I2C_HandleTypeDef* I2C,MPU6050_Config_TypeDef* mpu6050,uint8_t* temp)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af02      	add	r7, sp, #8
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]




	HAL_I2C_Mem_Read_IT(I2C, MPU6050_DEV_ADDRESS, MPU6050_ACC_MEAS, 1, temp, 14);
 80007a8:	230e      	movs	r3, #14
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2301      	movs	r3, #1
 80007b2:	223b      	movs	r2, #59	; 0x3b
 80007b4:	21d0      	movs	r1, #208	; 0xd0
 80007b6:	68f8      	ldr	r0, [r7, #12]
 80007b8:	f004 fca6 	bl	8005108 <HAL_I2C_Mem_Read_IT>

}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <MPU6050_Burst_Read_Acc_Gyro_Convert>:
void MPU6050_Burst_Read_Acc_Gyro_Convert(MPU6050_Config_TypeDef* mpu6050,uint8_t* temp,uint16_t* gyroXvalue,uint16_t* accXvalue,uint16_t* gyroYvalue,uint16_t* accYvalue,uint16_t* gyroZvalue,uint16_t* accZvalue,uint8_t countSamples)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b089      	sub	sp, #36	; 0x24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	603b      	str	r3, [r7, #0]

	static uint8_t  countSampless=0;
	countSampless +=1;
 80007d2:	4b54      	ldr	r3, [pc, #336]	; (8000924 <MPU6050_Burst_Read_Acc_Gyro_Convert+0x160>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b52      	ldr	r3, [pc, #328]	; (8000924 <MPU6050_Burst_Read_Acc_Gyro_Convert+0x160>)
 80007dc:	701a      	strb	r2, [r3, #0]
	int16_t gyroBuff[3],accBuff[3];
	accBuff[0] = (int16_t) (temp[0]<<8) | temp[1];
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	3301      	adds	r3, #1
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	823b      	strh	r3, [r7, #16]
	accBuff[1] = (int16_t) (temp[2]<<8) | temp[3];
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	3302      	adds	r3, #2
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	021b      	lsls	r3, r3, #8
 80007fc:	b21a      	sxth	r2, r3
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	3303      	adds	r3, #3
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b21b      	sxth	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b21b      	sxth	r3, r3
 800080a:	827b      	strh	r3, [r7, #18]
	accBuff[2] = (int16_t) (temp[4]<<8) | temp[5];
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	3304      	adds	r3, #4
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	3305      	adds	r3, #5
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b21b      	sxth	r3, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	b21b      	sxth	r3, r3
 8000822:	82bb      	strh	r3, [r7, #20]
	gyroBuff[0] = (int16_t) (temp[8]<<8) | temp[9];
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	3308      	adds	r3, #8
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	021b      	lsls	r3, r3, #8
 800082c:	b21a      	sxth	r2, r3
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	3309      	adds	r3, #9
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b21b      	sxth	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b21b      	sxth	r3, r3
 800083a:	833b      	strh	r3, [r7, #24]
	gyroBuff[1] = (int16_t) (temp[10]<<8) | temp[11];
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	330a      	adds	r3, #10
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	b21a      	sxth	r2, r3
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	330b      	adds	r3, #11
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b21b      	sxth	r3, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	b21b      	sxth	r3, r3
 8000852:	837b      	strh	r3, [r7, #26]
	gyroBuff[2] = (int16_t) (temp[12]<<8) | temp[13];
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	330c      	adds	r3, #12
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	330d      	adds	r3, #13
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b21b      	sxth	r3, r3
 8000866:	4313      	orrs	r3, r2
 8000868:	b21b      	sxth	r3, r3
 800086a:	83bb      	strh	r3, [r7, #28]
//
	if (countSampless==MPU6050_BUFF_LEN+1)
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MPU6050_Burst_Read_Acc_Gyro_Convert+0x160>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b09      	cmp	r3, #9
 8000872:	d102      	bne.n	800087a <MPU6050_Burst_Read_Acc_Gyro_Convert+0xb6>
	{
		countSampless =1;
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <MPU6050_Burst_Read_Acc_Gyro_Convert+0x160>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
	}
	accXvalue[countSampless-1] = accBuff[0];
 800087a:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800087e:	4b29      	ldr	r3, [pc, #164]	; (8000924 <MPU6050_Burst_Read_Acc_Gyro_Convert+0x160>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000888:	4413      	add	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	4413      	add	r3, r2
 8000890:	b28a      	uxth	r2, r1
 8000892:	801a      	strh	r2, [r3, #0]
	accYvalue[countSampless-1] = accBuff[1];
 8000894:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <MPU6050_Burst_Read_Acc_Gyro_Convert+0x160>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80008a2:	4413      	add	r3, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008a8:	4413      	add	r3, r2
 80008aa:	b28a      	uxth	r2, r1
 80008ac:	801a      	strh	r2, [r3, #0]
	accZvalue[countSampless-1] = accBuff[2];
 80008ae:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MPU6050_Burst_Read_Acc_Gyro_Convert+0x160>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80008bc:	4413      	add	r3, r2
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008c2:	4413      	add	r3, r2
 80008c4:	b28a      	uxth	r2, r1
 80008c6:	801a      	strh	r2, [r3, #0]

	gyroXvalue[countSampless-1] = gyroBuff[0];
 80008c8:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MPU6050_Burst_Read_Acc_Gyro_Convert+0x160>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80008d6:	4413      	add	r3, r2
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	b28a      	uxth	r2, r1
 80008e0:	801a      	strh	r2, [r3, #0]
	gyroYvalue[countSampless-1] = gyroBuff[1];
 80008e2:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MPU6050_Burst_Read_Acc_Gyro_Convert+0x160>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80008f0:	4413      	add	r3, r2
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008f6:	4413      	add	r3, r2
 80008f8:	b28a      	uxth	r2, r1
 80008fa:	801a      	strh	r2, [r3, #0]
	gyroZvalue[countSampless-1] = gyroBuff[2];
 80008fc:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MPU6050_Burst_Read_Acc_Gyro_Convert+0x160>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800090a:	4413      	add	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000910:	4413      	add	r3, r2
 8000912:	b28a      	uxth	r2, r1
 8000914:	801a      	strh	r2, [r3, #0]


}
 8000916:	bf00      	nop
 8000918:	3724      	adds	r7, #36	; 0x24
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	2000035c 	.word	0x2000035c

08000928 <MQTT_do_connect>:

ip4_addr_t mqtt_broker;


void MQTT_do_connect(mqtt_client_t *client)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af02      	add	r7, sp, #8
 800092e:	6078      	str	r0, [r7, #4]
  struct mqtt_connect_client_info_t ci;


  err_t err;
  /* IP brokera */
  IP4_ADDR(&mqtt_broker,192,168,1,6);
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MQTT_do_connect+0x4c>)
 8000932:	4a11      	ldr	r2, [pc, #68]	; (8000978 <MQTT_do_connect+0x50>)
 8000934:	601a      	str	r2, [r3, #0]

  memset(&ci, 0, sizeof(ci));
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	221c      	movs	r2, #28
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f01a fcc7 	bl	801b2d2 <memset>

  /* Nazwa klienta */

  ci.client_id = "motor_failure_analzys";
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <MQTT_do_connect+0x54>)
 8000946:	60bb      	str	r3, [r7, #8]
  ci.keep_alive = 60;
 8000948:	233c      	movs	r3, #60	; 0x3c
 800094a:	82bb      	strh	r3, [r7, #20]



  err = mqtt_client_connect(client, &mqtt_broker, MQTT_PORT, NULL, 0, &ci);
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	2300      	movs	r3, #0
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2300      	movs	r3, #0
 8000958:	f240 725b 	movw	r2, #1883	; 0x75b
 800095c:	4905      	ldr	r1, [pc, #20]	; (8000974 <MQTT_do_connect+0x4c>)
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f00e fdd0 	bl	800f504 <mqtt_client_connect>
 8000964:	4603      	mov	r3, r0
 8000966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000360 	.word	0x20000360
 8000978:	0601a8c0 	.word	0x0601a8c0
 800097c:	0801d128 	.word	0x0801d128

08000980 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000992:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_ADC1_Init+0x9c>)
 8000994:	4a22      	ldr	r2, [pc, #136]	; (8000a20 <MX_ADC1_Init+0xa0>)
 8000996:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000998:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MX_ADC1_Init+0x9c>)
 800099a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800099e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_ADC1_Init+0x9c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_ADC1_Init+0x9c>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_ADC1_Init+0x9c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_ADC1_Init+0x9c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_ADC1_Init+0x9c>)
 80009bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_ADC1_Init+0x9c>)
 80009c4:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_ADC1_Init+0x9c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_ADC1_Init+0x9c>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_ADC1_Init+0x9c>)
 80009d8:	2201      	movs	r2, #1
 80009da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_ADC1_Init+0x9c>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_ADC1_Init+0x9c>)
 80009e6:	f001 fbb7 	bl	8002158 <HAL_ADC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80009f0:	f000 fdf0 	bl	80015d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009f4:	2304      	movs	r3, #4
 80009f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80009fc:	2303      	movs	r3, #3
 80009fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_ADC1_Init+0x9c>)
 8000a06:	f001 fcf9 	bl	80023fc <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000a10:	f000 fde0 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000364 	.word	0x20000364
 8000a20:	40012000 	.word	0x40012000

08000a24 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000a38:	4a22      	ldr	r2, [pc, #136]	; (8000ac4 <MX_ADC2_Init+0xa0>)
 8000a3a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000a3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a42:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000a68:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000a8a:	f001 fb65 	bl	8002158 <HAL_ADC_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000a94:	f000 fd9e 	bl	80015d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES; //480
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_ADC2_Init+0x9c>)
 8000aaa:	f001 fca7 	bl	80023fc <HAL_ADC_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000ab4:	f000 fd8e 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200003ac 	.word	0x200003ac
 8000ac4:	40012100 	.word	0x40012100

08000ac8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000ada:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000adc:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <MX_ADC3_Init+0xa0>)
 8000ade:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ae0:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000ae2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ae6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000b0c:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000b2e:	f001 fb13 	bl	8002158 <HAL_ADC_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8000b38:	f000 fd4c 	bl	80015d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b3c:	2305      	movs	r3, #5
 8000b3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000b44:	2303      	movs	r3, #3
 8000b46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_ADC3_Init+0x9c>)
 8000b4e:	f001 fc55 	bl	80023fc <HAL_ADC_ConfigChannel>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000b58:	f000 fd3c 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200003f4 	.word	0x200003f4
 8000b68:	40012200 	.word	0x40012200

08000b6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	; 0x38
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a88      	ldr	r2, [pc, #544]	; (8000dac <HAL_ADC_MspInit+0x240>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d154      	bne.n	8000c38 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8e:	4b88      	ldr	r3, [pc, #544]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a87      	ldr	r2, [pc, #540]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b85      	ldr	r3, [pc, #532]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba2:	623b      	str	r3, [r7, #32]
 8000ba4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b82      	ldr	r3, [pc, #520]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a81      	ldr	r2, [pc, #516]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b7f      	ldr	r3, [pc, #508]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	61fb      	str	r3, [r7, #28]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bbe:	2310      	movs	r3, #16
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4878      	ldr	r0, [pc, #480]	; (8000db4 <HAL_ADC_MspInit+0x248>)
 8000bd2:	f003 fe2d 	bl	8004830 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bd6:	4b78      	ldr	r3, [pc, #480]	; (8000db8 <HAL_ADC_MspInit+0x24c>)
 8000bd8:	4a78      	ldr	r2, [pc, #480]	; (8000dbc <HAL_ADC_MspInit+0x250>)
 8000bda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bdc:	4b76      	ldr	r3, [pc, #472]	; (8000db8 <HAL_ADC_MspInit+0x24c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be2:	4b75      	ldr	r3, [pc, #468]	; (8000db8 <HAL_ADC_MspInit+0x24c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be8:	4b73      	ldr	r3, [pc, #460]	; (8000db8 <HAL_ADC_MspInit+0x24c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bee:	4b72      	ldr	r3, [pc, #456]	; (8000db8 <HAL_ADC_MspInit+0x24c>)
 8000bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bf6:	4b70      	ldr	r3, [pc, #448]	; (8000db8 <HAL_ADC_MspInit+0x24c>)
 8000bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bfc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bfe:	4b6e      	ldr	r3, [pc, #440]	; (8000db8 <HAL_ADC_MspInit+0x24c>)
 8000c00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c06:	4b6c      	ldr	r3, [pc, #432]	; (8000db8 <HAL_ADC_MspInit+0x24c>)
 8000c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c0e:	4b6a      	ldr	r3, [pc, #424]	; (8000db8 <HAL_ADC_MspInit+0x24c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c14:	4b68      	ldr	r3, [pc, #416]	; (8000db8 <HAL_ADC_MspInit+0x24c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c1a:	4867      	ldr	r0, [pc, #412]	; (8000db8 <HAL_ADC_MspInit+0x24c>)
 8000c1c:	f001 ffa2 	bl	8002b64 <HAL_DMA_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000c26:	f000 fcd5 	bl	80015d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a62      	ldr	r2, [pc, #392]	; (8000db8 <HAL_ADC_MspInit+0x24c>)
 8000c2e:	639a      	str	r2, [r3, #56]	; 0x38
 8000c30:	4a61      	ldr	r2, [pc, #388]	; (8000db8 <HAL_ADC_MspInit+0x24c>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c36:	e0b4      	b.n	8000da2 <HAL_ADC_MspInit+0x236>
  else if(adcHandle->Instance==ADC2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a60      	ldr	r2, [pc, #384]	; (8000dc0 <HAL_ADC_MspInit+0x254>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d155      	bne.n	8000cee <HAL_ADC_MspInit+0x182>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c42:	4b5b      	ldr	r3, [pc, #364]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a5a      	ldr	r2, [pc, #360]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000c48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b58      	ldr	r3, [pc, #352]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c56:	61bb      	str	r3, [r7, #24]
 8000c58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b55      	ldr	r3, [pc, #340]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a54      	ldr	r2, [pc, #336]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b52      	ldr	r3, [pc, #328]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c72:	2308      	movs	r3, #8
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c76:	2303      	movs	r3, #3
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	484b      	ldr	r0, [pc, #300]	; (8000db4 <HAL_ADC_MspInit+0x248>)
 8000c86:	f003 fdd3 	bl	8004830 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000c8a:	4b4e      	ldr	r3, [pc, #312]	; (8000dc4 <HAL_ADC_MspInit+0x258>)
 8000c8c:	4a4e      	ldr	r2, [pc, #312]	; (8000dc8 <HAL_ADC_MspInit+0x25c>)
 8000c8e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000c90:	4b4c      	ldr	r3, [pc, #304]	; (8000dc4 <HAL_ADC_MspInit+0x258>)
 8000c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c96:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c98:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <HAL_ADC_MspInit+0x258>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9e:	4b49      	ldr	r3, [pc, #292]	; (8000dc4 <HAL_ADC_MspInit+0x258>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000ca4:	4b47      	ldr	r3, [pc, #284]	; (8000dc4 <HAL_ADC_MspInit+0x258>)
 8000ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000caa:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cac:	4b45      	ldr	r3, [pc, #276]	; (8000dc4 <HAL_ADC_MspInit+0x258>)
 8000cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb4:	4b43      	ldr	r3, [pc, #268]	; (8000dc4 <HAL_ADC_MspInit+0x258>)
 8000cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cba:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000cbc:	4b41      	ldr	r3, [pc, #260]	; (8000dc4 <HAL_ADC_MspInit+0x258>)
 8000cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000cc4:	4b3f      	ldr	r3, [pc, #252]	; (8000dc4 <HAL_ADC_MspInit+0x258>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cca:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <HAL_ADC_MspInit+0x258>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000cd0:	483c      	ldr	r0, [pc, #240]	; (8000dc4 <HAL_ADC_MspInit+0x258>)
 8000cd2:	f001 ff47 	bl	8002b64 <HAL_DMA_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_ADC_MspInit+0x174>
      Error_Handler();
 8000cdc:	f000 fc7a 	bl	80015d4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a38      	ldr	r2, [pc, #224]	; (8000dc4 <HAL_ADC_MspInit+0x258>)
 8000ce4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ce6:	4a37      	ldr	r2, [pc, #220]	; (8000dc4 <HAL_ADC_MspInit+0x258>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000cec:	e059      	b.n	8000da2 <HAL_ADC_MspInit+0x236>
  else if(adcHandle->Instance==ADC3)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <HAL_ADC_MspInit+0x260>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d154      	bne.n	8000da2 <HAL_ADC_MspInit+0x236>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfc:	4a2c      	ldr	r2, [pc, #176]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000cfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d02:	6453      	str	r3, [r2, #68]	; 0x44
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000d16:	f043 0320 	orr.w	r3, r3, #32
 8000d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <HAL_ADC_MspInit+0x244>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	f003 0320 	and.w	r3, r3, #32
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4825      	ldr	r0, [pc, #148]	; (8000dd0 <HAL_ADC_MspInit+0x264>)
 8000d3c:	f003 fd78 	bl	8004830 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <HAL_ADC_MspInit+0x268>)
 8000d42:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <HAL_ADC_MspInit+0x26c>)
 8000d44:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <HAL_ADC_MspInit+0x268>)
 8000d48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d4c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <HAL_ADC_MspInit+0x268>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <HAL_ADC_MspInit+0x268>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <HAL_ADC_MspInit+0x268>)
 8000d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d60:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_ADC_MspInit+0x268>)
 8000d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d68:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <HAL_ADC_MspInit+0x268>)
 8000d6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d70:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_ADC_MspInit+0x268>)
 8000d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d78:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_ADC_MspInit+0x268>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_ADC_MspInit+0x268>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000d86:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <HAL_ADC_MspInit+0x268>)
 8000d88:	f001 feec 	bl	8002b64 <HAL_DMA_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 8000d92:	f000 fc1f 	bl	80015d4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_ADC_MspInit+0x268>)
 8000d9a:	639a      	str	r2, [r3, #56]	; 0x38
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <HAL_ADC_MspInit+0x268>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000da2:	bf00      	nop
 8000da4:	3738      	adds	r7, #56	; 0x38
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40012000 	.word	0x40012000
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	2000043c 	.word	0x2000043c
 8000dbc:	40026410 	.word	0x40026410
 8000dc0:	40012100 	.word	0x40012100
 8000dc4:	2000049c 	.word	0x2000049c
 8000dc8:	40026440 	.word	0x40026440
 8000dcc:	40012200 	.word	0x40012200
 8000dd0:	40021400 	.word	0x40021400
 8000dd4:	200004fc 	.word	0x200004fc
 8000dd8:	40026428 	.word	0x40026428

08000ddc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_DMA_Init+0x58>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <MX_DMA_Init+0x58>)
 8000de8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_DMA_Init+0x58>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	2038      	movs	r0, #56	; 0x38
 8000e00:	f001 fe86 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e04:	2038      	movs	r0, #56	; 0x38
 8000e06:	f001 fe9f 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2105      	movs	r1, #5
 8000e0e:	2039      	movs	r0, #57	; 0x39
 8000e10:	f001 fe7e 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e14:	2039      	movs	r0, #57	; 0x39
 8000e16:	f001 fe97 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	203a      	movs	r0, #58	; 0x3a
 8000e20:	f001 fe76 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e24:	203a      	movs	r0, #58	; 0x3a
 8000e26:	f001 fe8f 	bl	8002b48 <HAL_NVIC_EnableIRQ>

}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e44:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d013      	beq.n	8000e78 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e54:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e58:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00b      	beq.n	8000e78 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e60:	e000      	b.n	8000e64 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e62:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f9      	beq.n	8000e62 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e6e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <__io_putchar>:
osThreadId defaultTaskHandle;
osThreadId IMUTaskHandle;
/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
extern int __io_putchar(int ch)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ffd1 	bl	8000e38 <ITM_SendChar>
	return ch;
 8000e96:	687b      	ldr	r3, [r7, #4]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x30>)
 8000eb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000560 	.word	0x20000560
 8000ed0:	20000600 	.word	0x20000600

08000ed4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ed4:	b5b0      	push	{r4, r5, r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1800);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <MX_FREERTOS_Init+0x30>)
 8000edc:	1d3c      	adds	r4, r7, #4
 8000ede:	461d      	mov	r5, r3
 8000ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f009 fded 	bl	800aad0 <osThreadCreate>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <MX_FREERTOS_Init+0x34>)
 8000efa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bdb0      	pop	{r4, r5, r7, pc}
 8000f04:	0801d14c 	.word	0x0801d14c
 8000f08:	2000055c 	.word	0x2000055c

08000f0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af04      	add	r7, sp, #16
 8000f12:	6178      	str	r0, [r7, #20]
  /* init code for LWIP */

  MX_LWIP_Init();
 8000f14:	f008 ff6a 	bl	8009dec <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
   clientt = mqtt_client_new();
 8000f18:	f00e faea 	bl	800f4f0 <mqtt_client_new>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a27      	ldr	r2, [pc, #156]	; (8000fbc <StartDefaultTask+0xb0>)
 8000f20:	6013      	str	r3, [r2, #0]



  if(clientt!=NULL)
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <StartDefaultTask+0xb0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d004      	beq.n	8000f34 <StartDefaultTask+0x28>
	 	 MQTT_do_connect(clientt);
 8000f2a:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <StartDefaultTask+0xb0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fcfa 	bl	8000928 <MQTT_do_connect>

  HAL_TIM_Base_Start_IT(&htim14);
 8000f34:	4822      	ldr	r0, [pc, #136]	; (8000fc0 <StartDefaultTask+0xb4>)
 8000f36:	f007 f93b 	bl	80081b0 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*) Data_Struct.a, ADC_BUFF_LEN);
 8000f3a:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000f3e:	4921      	ldr	r1, [pc, #132]	; (8000fc4 <StartDefaultTask+0xb8>)
 8000f40:	4821      	ldr	r0, [pc, #132]	; (8000fc8 <StartDefaultTask+0xbc>)
 8000f42:	f001 f94d 	bl	80021e0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)Data_Struct.b, ADC_BUFF_LEN);
 8000f46:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000f4a:	4920      	ldr	r1, [pc, #128]	; (8000fcc <StartDefaultTask+0xc0>)
 8000f4c:	4820      	ldr	r0, [pc, #128]	; (8000fd0 <StartDefaultTask+0xc4>)
 8000f4e:	f001 f947 	bl	80021e0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3,(uint32_t*)Data_Struct.c, ADC_BUFF_LEN);
 8000f52:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000f56:	491f      	ldr	r1, [pc, #124]	; (8000fd4 <StartDefaultTask+0xc8>)
 8000f58:	481f      	ldr	r0, [pc, #124]	; (8000fd8 <StartDefaultTask+0xcc>)
 8000f5a:	f001 f941 	bl	80021e0 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim6);
 8000f5e:	481f      	ldr	r0, [pc, #124]	; (8000fdc <StartDefaultTask+0xd0>)
 8000f60:	f007 f926 	bl	80081b0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2101      	movs	r1, #1
 8000f68:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <StartDefaultTask+0xd4>)
 8000f6a:	f003 fe0d 	bl	8004b88 <HAL_GPIO_WritePin>
 // /* Infinite loop */
  for(;;)
  {
	  osSignalWait(1, osWaitForever);
 8000f6e:	463b      	mov	r3, r7
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	2101      	movs	r1, #1
 8000f76:	4618      	mov	r0, r3
 8000f78:	f009 fe4a 	bl	800ac10 <osSignalWait>
	  if(clientt!=NULL)
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <StartDefaultTask+0xb0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d004      	beq.n	8000f8e <StartDefaultTask+0x82>
		 	 MQTT_do_connect(clientt);
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <StartDefaultTask+0xb0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fccd 	bl	8000928 <MQTT_do_connect>




	   err_t err;
	   u8_t qos = 0; /* 0 1 or 2, see MQTT specification */
 8000f8e:	2300      	movs	r3, #0
 8000f90:	77fb      	strb	r3, [r7, #31]
	   u8_t retain = 0; /* No don't retain such crappy payload... */
 8000f92:	2300      	movs	r3, #0
 8000f94:	77bb      	strb	r3, [r7, #30]

	   err = mqtt_publish(clientt, "Motor",&Data_Struct,sizeof(CurrentToSend), qos, retain, NULL, NULL);
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <StartDefaultTask+0xb0>)
 8000f98:	6818      	ldr	r0, [r3, #0]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9303      	str	r3, [sp, #12]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	7fbb      	ldrb	r3, [r7, #30]
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	7ffb      	ldrb	r3, [r7, #31]
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	f644 3370 	movw	r3, #19312	; 0x4b70
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <StartDefaultTask+0xb8>)
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <StartDefaultTask+0xd8>)
 8000fb2:	f00e f9c9 	bl	800f348 <mqtt_publish>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	777b      	strb	r3, [r7, #29]
  {
 8000fba:	e7d8      	b.n	8000f6e <StartDefaultTask+0x62>
 8000fbc:	200053c4 	.word	0x200053c4
 8000fc0:	20005478 	.word	0x20005478
 8000fc4:	20000854 	.word	0x20000854
 8000fc8:	20000364 	.word	0x20000364
 8000fcc:	20002156 	.word	0x20002156
 8000fd0:	200003ac 	.word	0x200003ac
 8000fd4:	20003a58 	.word	0x20003a58
 8000fd8:	200003f4 	.word	0x200003f4
 8000fdc:	2000542c 	.word	0x2000542c
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	0801d168 	.word	0x0801d168

08000fe8 <HAL_ADC_ConvCpltCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

 if (hadc->Instance == ADC3)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a06      	ldr	r2, [pc, #24]	; (8001010 <HAL_ADC_ConvCpltCallback+0x28>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d105      	bne.n	8001006 <HAL_ADC_ConvCpltCallback+0x1e>
 {


		 osSignalSet(defaultTaskHandle, 1);
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2101      	movs	r1, #1
 8001000:	4618      	mov	r0, r3
 8001002:	f009 fdc5 	bl	800ab90 <osSignalSet>
	 	 }
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40012200 	.word	0x40012200
 8001014:	2000055c 	.word	0x2000055c

08001018 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <MX_GPIO_Init+0x14c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <MX_GPIO_Init+0x14c>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <MX_GPIO_Init+0x14c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001046:	4b47      	ldr	r3, [pc, #284]	; (8001164 <MX_GPIO_Init+0x14c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a46      	ldr	r2, [pc, #280]	; (8001164 <MX_GPIO_Init+0x14c>)
 800104c:	f043 0320 	orr.w	r3, r3, #32
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b44      	ldr	r3, [pc, #272]	; (8001164 <MX_GPIO_Init+0x14c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0320 	and.w	r3, r3, #32
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105e:	4b41      	ldr	r3, [pc, #260]	; (8001164 <MX_GPIO_Init+0x14c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a40      	ldr	r2, [pc, #256]	; (8001164 <MX_GPIO_Init+0x14c>)
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <MX_GPIO_Init+0x14c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <MX_GPIO_Init+0x14c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a3a      	ldr	r2, [pc, #232]	; (8001164 <MX_GPIO_Init+0x14c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <MX_GPIO_Init+0x14c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b35      	ldr	r3, [pc, #212]	; (8001164 <MX_GPIO_Init+0x14c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a34      	ldr	r2, [pc, #208]	; (8001164 <MX_GPIO_Init+0x14c>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b32      	ldr	r3, [pc, #200]	; (8001164 <MX_GPIO_Init+0x14c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a6:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <MX_GPIO_Init+0x14c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a2e      	ldr	r2, [pc, #184]	; (8001164 <MX_GPIO_Init+0x14c>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <MX_GPIO_Init+0x14c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <MX_GPIO_Init+0x14c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a28      	ldr	r2, [pc, #160]	; (8001164 <MX_GPIO_Init+0x14c>)
 80010c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_GPIO_Init+0x14c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80010dc:	4822      	ldr	r0, [pc, #136]	; (8001168 <MX_GPIO_Init+0x150>)
 80010de:	f003 fd53 	bl	8004b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2140      	movs	r1, #64	; 0x40
 80010e6:	4821      	ldr	r0, [pc, #132]	; (800116c <MX_GPIO_Init+0x154>)
 80010e8:	f003 fd4e 	bl	8004b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	481b      	ldr	r0, [pc, #108]	; (8001170 <MX_GPIO_Init+0x158>)
 8001104:	f003 fb94 	bl	8004830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001108:	f244 0381 	movw	r3, #16513	; 0x4081
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	4811      	ldr	r0, [pc, #68]	; (8001168 <MX_GPIO_Init+0x150>)
 8001122:	f003 fb85 	bl	8004830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001126:	2340      	movs	r3, #64	; 0x40
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <MX_GPIO_Init+0x154>)
 800113e:	f003 fb77 	bl	8004830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_GPIO_Init+0x154>)
 8001156:	f003 fb6b 	bl	8004830 <HAL_GPIO_Init>

}
 800115a:	bf00      	nop
 800115c:	3730      	adds	r7, #48	; 0x30
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40020400 	.word	0x40020400
 800116c:	40021800 	.word	0x40021800
 8001170:	40020800 	.word	0x40020800

08001174 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_I2C1_Init+0x74>)
 800117a:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <MX_I2C1_Init+0x78>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E01A4D;
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_I2C1_Init+0x74>)
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <MX_I2C1_Init+0x7c>)
 8001182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_I2C1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_I2C1_Init+0x74>)
 800118c:	2201      	movs	r2, #1
 800118e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_I2C1_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_I2C1_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_I2C1_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_I2C1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_I2C1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ae:	480e      	ldr	r0, [pc, #56]	; (80011e8 <MX_I2C1_Init+0x74>)
 80011b0:	f003 fd04 	bl	8004bbc <HAL_I2C_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011ba:	f000 fa0b 	bl	80015d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80011be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c2:	4809      	ldr	r0, [pc, #36]	; (80011e8 <MX_I2C1_Init+0x74>)
 80011c4:	f005 fc2e 	bl	8006a24 <HAL_I2CEx_ConfigAnalogFilter>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80011ce:	f000 fa01 	bl	80015d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011d2:	2100      	movs	r1, #0
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_I2C1_Init+0x74>)
 80011d6:	f005 fc70 	bl	8006aba <HAL_I2CEx_ConfigDigitalFilter>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80011e0:	f000 f9f8 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000800 	.word	0x20000800
 80011ec:	40005400 	.word	0x40005400
 80011f0:	00e01a4d 	.word	0x00e01a4d

080011f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0ae      	sub	sp, #184	; 0xb8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2290      	movs	r2, #144	; 0x90
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f01a f85c 	bl	801b2d2 <memset>
  if(i2cHandle->Instance==I2C1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <HAL_I2C_MspInit+0xc4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d144      	bne.n	80012ae <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001228:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800122a:	2300      	movs	r3, #0
 800122c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4618      	mov	r0, r3
 8001234:	f006 fb3c 	bl	80078b0 <HAL_RCCEx_PeriphCLKConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800123e:	f000 f9c9 	bl	80015d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_I2C_MspInit+0xc8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <HAL_I2C_MspInit+0xc8>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_I2C_MspInit+0xc8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800125a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800125e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001262:	2312      	movs	r3, #18
 8001264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001268:	2301      	movs	r3, #1
 800126a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001274:	2304      	movs	r3, #4
 8001276:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800127e:	4619      	mov	r1, r3
 8001280:	480f      	ldr	r0, [pc, #60]	; (80012c0 <HAL_I2C_MspInit+0xcc>)
 8001282:	f003 fad5 	bl	8004830 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_I2C_MspInit+0xc8>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_I2C_MspInit+0xc8>)
 800128c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_I2C_MspInit+0xc8>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2105      	movs	r1, #5
 80012a2:	201f      	movs	r0, #31
 80012a4:	f001 fc34 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012a8:	201f      	movs	r0, #31
 80012aa:	f001 fc4d 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012ae:	bf00      	nop
 80012b0:	37b8      	adds	r7, #184	; 0xb8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40005400 	.word	0x40005400
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020400 	.word	0x40020400

080012c4 <SCB_EnableICache>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80012c8:	f3bf 8f4f 	dsb	sy
}
 80012cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ce:	f3bf 8f6f 	isb	sy
}
 80012d2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <SCB_EnableICache+0x48>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012dc:	f3bf 8f4f 	dsb	sy
}
 80012e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012e2:	f3bf 8f6f 	isb	sy
}
 80012e6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <SCB_EnableICache+0x48>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <SCB_EnableICache+0x48>)
 80012ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012f4:	f3bf 8f4f 	dsb	sy
}
 80012f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012fa:	f3bf 8f6f 	isb	sy
}
 80012fe:	bf00      	nop
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <SCB_EnableDCache>:
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <SCB_EnableDCache+0x84>)
 8001318:	2200      	movs	r2, #0
 800131a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800131e:	f3bf 8f4f 	dsb	sy
}
 8001322:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <SCB_EnableDCache+0x84>)
 8001326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800132a:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	0b5b      	lsrs	r3, r3, #13
 8001330:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001334:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	08db      	lsrs	r3, r3, #3
 800133a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800133e:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	015a      	lsls	r2, r3, #5
 8001344:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001348:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800134e:	4911      	ldr	r1, [pc, #68]	; (8001394 <SCB_EnableDCache+0x84>)
 8001350:	4313      	orrs	r3, r2
 8001352:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1e5a      	subs	r2, r3, #1
 800135a:	60ba      	str	r2, [r7, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1ef      	bne.n	8001340 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	1e5a      	subs	r2, r3, #1
 8001364:	60fa      	str	r2, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1e5      	bne.n	8001336 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800136a:	f3bf 8f4f 	dsb	sy
}
 800136e:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <SCB_EnableDCache+0x84>)
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <SCB_EnableDCache+0x84>)
 8001376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800137c:	f3bf 8f4f 	dsb	sy
}
 8001380:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001382:	f3bf 8f6f 	isb	sy
}
 8001386:	bf00      	nop
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */



	Data_Struct.delim1 = 'x';
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <main+0xb0>)
 800139e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a2:	2278      	movs	r2, #120	; 0x78
 80013a4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
	Data_Struct.delim2 = 'x';
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <main+0xb0>)
 80013aa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80013ae:	2278      	movs	r2, #120	; 0x78
 80013b0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	Data_Struct.delim3 = 'x';
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <main+0xb0>)
 80013b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013ba:	2278      	movs	r2, #120	; 0x78
 80013bc:	f883 2b04 	strb.w	r2, [r3, #2820]	; 0xb04
	Data_Struct.delim4 = 'x';
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <main+0xb0>)
 80013c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013c6:	2278      	movs	r2, #120	; 0x78
 80013c8:	f883 2b16 	strb.w	r2, [r3, #2838]	; 0xb16
	Data_Struct.delim5 = 'x';
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <main+0xb0>)
 80013ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013d2:	2278      	movs	r2, #120	; 0x78
 80013d4:	f883 2b28 	strb.w	r2, [r3, #2856]	; 0xb28
	Data_Struct.delim6 = 'x';
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <main+0xb0>)
 80013da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013de:	2278      	movs	r2, #120	; 0x78
 80013e0:	f883 2b3a 	strb.w	r2, [r3, #2874]	; 0xb3a
	Data_Struct.delim7 = 'x';
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <main+0xb0>)
 80013e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013ea:	2278      	movs	r2, #120	; 0x78
 80013ec:	f883 2b4c 	strb.w	r2, [r3, #2892]	; 0xb4c
	Data_Struct.delim8 = 'x';
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <main+0xb0>)
 80013f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013f6:	2278      	movs	r2, #120	; 0x78
 80013f8:	f883 2b5e 	strb.w	r2, [r3, #2910]	; 0xb5e
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80013fc:	f7ff ff62 	bl	80012c4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001400:	f7ff ff86 	bl	8001310 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001404:	f000 fe4e 	bl	80020a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001408:	f000 f824 	bl	8001454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140c:	f7ff fe04 	bl	8001018 <MX_GPIO_Init>
  MX_DMA_Init();
 8001410:	f7ff fce4 	bl	8000ddc <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001414:	f000 fc14 	bl	8001c40 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001418:	f7ff feac 	bl	8001174 <MX_I2C1_Init>
  MX_ADC1_Init();
 800141c:	f7ff fab0 	bl	8000980 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001420:	f000 fb76 	bl	8001b10 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001424:	f000 fac2 	bl	80019ac <MX_TIM6_Init>
  MX_ADC2_Init();
 8001428:	f7ff fafc 	bl	8000a24 <MX_ADC2_Init>
  MX_ADC3_Init();
 800142c:	f7ff fb4c 	bl	8000ac8 <MX_ADC3_Init>
  MX_TIM14_Init();
 8001430:	f000 faf2 	bl	8001a18 <MX_TIM14_Init>
  MPU6050_Init(&hi2c1, &mpu6050);
 8001434:	4905      	ldr	r1, [pc, #20]	; (800144c <main+0xb4>)
 8001436:	4806      	ldr	r0, [pc, #24]	; (8001450 <main+0xb8>)
 8001438:	f7ff f8ee 	bl	8000618 <MPU6050_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800143c:	f7ff fd4a 	bl	8000ed4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001440:	f009 fb2f 	bl	800aaa2 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001444:	e7fe      	b.n	8001444 <main+0xac>
 8001446:	bf00      	nop
 8001448:	20000854 	.word	0x20000854
 800144c:	20000000 	.word	0x20000000
 8001450:	20000800 	.word	0x20000800

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b094      	sub	sp, #80	; 0x50
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	2234      	movs	r2, #52	; 0x34
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f019 ff35 	bl	801b2d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001478:	f005 fcb4 	bl	8006de4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <SystemClock_Config+0xd8>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	4a2a      	ldr	r2, [pc, #168]	; (800152c <SystemClock_Config+0xd8>)
 8001482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001486:	6413      	str	r3, [r2, #64]	; 0x40
 8001488:	4b28      	ldr	r3, [pc, #160]	; (800152c <SystemClock_Config+0xd8>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001494:	4b26      	ldr	r3, [pc, #152]	; (8001530 <SystemClock_Config+0xdc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a25      	ldr	r2, [pc, #148]	; (8001530 <SystemClock_Config+0xdc>)
 800149a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <SystemClock_Config+0xdc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b6:	2302      	movs	r3, #2
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014c0:	2304      	movs	r3, #4
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80014c4:	23d8      	movs	r3, #216	; 0xd8
 80014c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80014cc:	2309      	movs	r3, #9
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014d0:	2302      	movs	r3, #2
 80014d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4618      	mov	r0, r3
 80014da:	f005 fce3 	bl	8006ea4 <HAL_RCC_OscConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014e4:	f000 f876 	bl	80015d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014e8:	f005 fc8c 	bl	8006e04 <HAL_PWREx_EnableOverDrive>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80014f2:	f000 f86f 	bl	80015d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f6:	230f      	movs	r3, #15
 80014f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fa:	2302      	movs	r3, #2
 80014fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001502:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001506:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	2107      	movs	r1, #7
 8001514:	4618      	mov	r0, r3
 8001516:	f005 ff73 	bl	8007400 <HAL_RCC_ClockConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001520:	f000 f858 	bl	80015d4 <Error_Handler>
  }
}
 8001524:	bf00      	nop
 8001526:	3750      	adds	r7, #80	; 0x50
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40007000 	.word	0x40007000

08001534 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d101      	bne.n	800154a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001546:	f000 fdc3 	bl	80020d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM14) {
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d104      	bne.n	800155e <HAL_TIM_PeriodElapsedCallback+0x2a>


	 MPU6050_Burst_Read_Acc_Gyro_Read(&hi2c1, &mpu6050, i2cbuff);
 8001554:	4a06      	ldr	r2, [pc, #24]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001556:	4907      	ldr	r1, [pc, #28]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001558:	4807      	ldr	r0, [pc, #28]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800155a:	f7ff f91f 	bl	800079c <MPU6050_Burst_Read_Acc_Gyro_Read>

  }
  /* USER CODE END Callback 1 */
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40010000 	.word	0x40010000
 800156c:	40002000 	.word	0x40002000
 8001570:	200053cc 	.word	0x200053cc
 8001574:	20000000 	.word	0x20000000
 8001578:	20000800 	.word	0x20000800

0800157c <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af06      	add	r7, sp, #24
 8001582:	6078      	str	r0, [r7, #4]
	MPU6050_Burst_Read_Acc_Gyro_Convert(&mpu6050,i2cbuff, Data_Struct.gyroX, Data_Struct.accX, Data_Struct.gyroY, Data_Struct.accY, Data_Struct.gyroZ, Data_Struct.accZ,countSamples);
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_I2C_MemRxCpltCallback+0x34>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	9304      	str	r3, [sp, #16]
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_I2C_MemRxCpltCallback+0x38>)
 800158c:	9303      	str	r3, [sp, #12]
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8001590:	9302      	str	r3, [sp, #8]
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_I2C_MemRxCpltCallback+0x40>)
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_I2C_MemRxCpltCallback+0x44>)
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_I2C_MemRxCpltCallback+0x48>)
 800159c:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <HAL_I2C_MemRxCpltCallback+0x4c>)
 800159e:	490b      	ldr	r1, [pc, #44]	; (80015cc <HAL_I2C_MemRxCpltCallback+0x50>)
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <HAL_I2C_MemRxCpltCallback+0x54>)
 80015a2:	f7ff f90f 	bl	80007c4 <MPU6050_Burst_Read_Acc_Gyro_Convert>

}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200053c8 	.word	0x200053c8
 80015b4:	200053b4 	.word	0x200053b4
 80015b8:	2000537e 	.word	0x2000537e
 80015bc:	200053a2 	.word	0x200053a2
 80015c0:	2000536c 	.word	0x2000536c
 80015c4:	20005390 	.word	0x20005390
 80015c8:	2000535a 	.word	0x2000535a
 80015cc:	200053cc 	.word	0x200053cc
 80015d0:	20000000 	.word	0x20000000

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	e7fe      	b.n	80015dc <Error_Handler+0x8>
	...

080015e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <HAL_MspInit+0x4c>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_MspInit+0x4c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_MspInit+0x4c>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_MspInit+0x4c>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	210f      	movs	r1, #15
 800161a:	f06f 0001 	mvn.w	r0, #1
 800161e:	f001 fa77 	bl	8002b10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <HAL_InitTick+0xd0>)
 8001642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001644:	4a2e      	ldr	r2, [pc, #184]	; (8001700 <HAL_InitTick+0xd0>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6453      	str	r3, [r2, #68]	; 0x44
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_InitTick+0xd0>)
 800164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001658:	f107 020c 	add.w	r2, r7, #12
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f006 f8f2 	bl	800784c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001668:	f006 f8dc 	bl	8007824 <HAL_RCC_GetPCLK2Freq>
 800166c:	4603      	mov	r3, r0
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001674:	4a23      	ldr	r2, [pc, #140]	; (8001704 <HAL_InitTick+0xd4>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0c9b      	lsrs	r3, r3, #18
 800167c:	3b01      	subs	r3, #1
 800167e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_InitTick+0xd8>)
 8001682:	4a22      	ldr	r2, [pc, #136]	; (800170c <HAL_InitTick+0xdc>)
 8001684:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_InitTick+0xd8>)
 8001688:	f240 32e7 	movw	r2, #999	; 0x3e7
 800168c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800168e:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_InitTick+0xd8>)
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_InitTick+0xd8>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_InitTick+0xd8>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_InitTick+0xd8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80016a6:	4818      	ldr	r0, [pc, #96]	; (8001708 <HAL_InitTick+0xd8>)
 80016a8:	f006 fd2a 	bl	8008100 <HAL_TIM_Base_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80016b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11b      	bne.n	80016f2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80016ba:	4813      	ldr	r0, [pc, #76]	; (8001708 <HAL_InitTick+0xd8>)
 80016bc:	f006 fd78 	bl	80081b0 <HAL_TIM_Base_Start_IT>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80016c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d111      	bne.n	80016f2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016ce:	2019      	movs	r0, #25
 80016d0:	f001 fa3a 	bl	8002b48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b0f      	cmp	r3, #15
 80016d8:	d808      	bhi.n	80016ec <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80016da:	2200      	movs	r2, #0
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	2019      	movs	r0, #25
 80016e0:	f001 fa16 	bl	8002b10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016e4:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <HAL_InitTick+0xe0>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e002      	b.n	80016f2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3730      	adds	r7, #48	; 0x30
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	431bde83 	.word	0x431bde83
 8001708:	200053dc 	.word	0x200053dc
 800170c:	40010000 	.word	0x40010000
 8001710:	2000000c 	.word	0x2000000c

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001746:	f006 fdab 	bl	80082a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200053dc 	.word	0x200053dc

08001754 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <TIM6_DAC_IRQHandler+0x10>)
 800175a:	f006 fda1 	bl	80082a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000542c 	.word	0x2000542c

08001768 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800176e:	f006 fd97 	bl	80082a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20005478 	.word	0x20005478

0800177c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <DMA2_Stream0_IRQHandler+0x10>)
 8001782:	f001 fb8f 	bl	8002ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000043c 	.word	0x2000043c

08001790 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <DMA2_Stream1_IRQHandler+0x10>)
 8001796:	f001 fb85 	bl	8002ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200004fc 	.word	0x200004fc

080017a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <DMA2_Stream2_IRQHandler+0x10>)
 80017aa:	f001 fb7b 	bl	8002ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000049c 	.word	0x2000049c

080017b8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <ETH_IRQHandler+0x10>)
 80017be:	f002 f963 	bl	8003a88 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000a438 	.word	0x2000a438

080017cc <I2C1_EV_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <I2C1_EV_IRQHandler+0x10>)
 80017d2:	f003 fd1f 	bl	8005214 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000800 	.word	0x20000800

080017e0 <USART3_IRQHandler>:
/* USER CODE END 1 */
void USART3_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <USART3_IRQHandler+0x10>)
 80017e6:	f007 f83d 	bl	8008864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200054c4 	.word	0x200054c4

080017f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return 1;
 80017f8:	2301      	movs	r3, #1
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_kill>:

int _kill(int pid, int sig)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <_kill+0x20>)
 8001810:	2216      	movs	r2, #22
 8001812:	601a      	str	r2, [r3, #0]
  return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	2001df80 	.word	0x2001df80

08001828 <_exit>:

void _exit (int status)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ffe5 	bl	8001804 <_kill>
  while (1) {}    /* Make sure we hang here */
 800183a:	e7fe      	b.n	800183a <_exit+0x12>

0800183c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e00a      	b.n	8001864 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800184e:	f3af 8000 	nop.w
 8001852:	4601      	mov	r1, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	60ba      	str	r2, [r7, #8]
 800185a:	b2ca      	uxtb	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbf0      	blt.n	800184e <_read+0x12>
  }

  return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e009      	b.n	800189c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	60ba      	str	r2, [r7, #8]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff faf8 	bl	8000e86 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbf1      	blt.n	8001888 <_write+0x12>
  }
  return len;
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_close>:

int _close(int file)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d6:	605a      	str	r2, [r3, #4]
  return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_isatty>:

int _isatty(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d205      	bcs.n	8001954 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <_sbrk+0x6c>)
 800194a:	220c      	movs	r2, #12
 800194c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	e009      	b.n	8001968 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	4a06      	ldr	r2, [pc, #24]	; (800197c <_sbrk+0x64>)
 8001964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	4618      	mov	r0, r3
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	20080000 	.word	0x20080000
 8001978:	00000300 	.word	0x00000300
 800197c:	20005428 	.word	0x20005428
 8001980:	2001df90 	.word	0x2001df90
 8001984:	2001df80 	.word	0x2001df80

08001988 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim14;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_TIM6_Init+0x64>)
 80019be:	4a15      	ldr	r2, [pc, #84]	; (8001a14 <MX_TIM6_Init+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2; //2
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_TIM6_Init+0x64>)
 80019c4:	2202      	movs	r2, #2
 80019c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_TIM6_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 196; //13456
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <MX_TIM6_Init+0x64>)
 80019d0:	22c4      	movs	r2, #196	; 0xc4
 80019d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_TIM6_Init+0x64>)
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019da:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MX_TIM6_Init+0x64>)
 80019dc:	f006 fb90 	bl	8008100 <HAL_TIM_Base_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80019e6:	f7ff fdf5 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019ea:	2320      	movs	r3, #32
 80019ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4806      	ldr	r0, [pc, #24]	; (8001a10 <MX_TIM6_Init+0x64>)
 80019f8:	f006 fe3a 	bl	8008670 <HAL_TIMEx_MasterConfigSynchronization>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001a02:	f7ff fde7 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000542c 	.word	0x2000542c
 8001a14:	40001000 	.word	0x40001000

08001a18 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim14.Instance = TIM14;
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_TIM14_Init+0x6c>)
 8001a2a:	4a17      	ldr	r2, [pc, #92]	; (8001a88 <MX_TIM14_Init+0x70>)
 8001a2c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 3;
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_TIM14_Init+0x6c>)
 8001a30:	2203      	movs	r2, #3
 8001a32:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <MX_TIM14_Init+0x6c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 26995;
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_TIM14_Init+0x6c>)
 8001a3c:	f646 1273 	movw	r2, #26995	; 0x6973
 8001a40:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_TIM14_Init+0x6c>)
 8001a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a48:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_TIM14_Init+0x6c>)
 8001a4c:	2280      	movs	r2, #128	; 0x80
 8001a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <MX_TIM14_Init+0x6c>)
 8001a52:	f006 fb55 	bl	8008100 <HAL_TIM_Base_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001a5c:	f7ff fdba 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a60:	2320      	movs	r3, #32
 8001a62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_TIM14_Init+0x6c>)
 8001a6e:	f006 fdff 	bl	8008670 <HAL_TIMEx_MasterConfigSynchronization>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM14_Init+0x64>
  {
    Error_Handler();
 8001a78:	f7ff fdac 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20005478 	.word	0x20005478
 8001a88:	40002000 	.word	0x40002000

08001a8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1a      	ldr	r2, [pc, #104]	; (8001b04 <HAL_TIM_Base_MspInit+0x78>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d114      	bne.n	8001ac8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_TIM_Base_MspInit+0x7c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_TIM_Base_MspInit+0x7c>)
 8001aa4:	f043 0310 	orr.w	r3, r3, #16
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_TIM_Base_MspInit+0x7c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2105      	movs	r1, #5
 8001aba:	2036      	movs	r0, #54	; 0x36
 8001abc:	f001 f828 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ac0:	2036      	movs	r0, #54	; 0x36
 8001ac2:	f001 f841 	bl	8002b48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001ac6:	e018      	b.n	8001afa <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM14)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <HAL_TIM_Base_MspInit+0x80>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d113      	bne.n	8001afa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_TIM_Base_MspInit+0x7c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a0c      	ldr	r2, [pc, #48]	; (8001b08 <HAL_TIM_Base_MspInit+0x7c>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_TIM_Base_MspInit+0x7c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2105      	movs	r1, #5
 8001aee:	202d      	movs	r0, #45	; 0x2d
 8001af0:	f001 f80e 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001af4:	202d      	movs	r0, #45	; 0x2d
 8001af6:	f001 f827 	bl	8002b48 <HAL_NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40001000 	.word	0x40001000
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40002000 	.word	0x40002000

08001b10 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_USART3_UART_Init+0x68>)
 8001b16:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <MX_USART3_UART_Init+0x6c>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <MX_USART3_UART_Init+0x68>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <MX_USART3_UART_Init+0x68>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <MX_USART3_UART_Init+0x68>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_USART3_UART_Init+0x68>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_USART3_UART_Init+0x68>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_USART3_UART_Init+0x68>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <MX_USART3_UART_Init+0x68>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USART3_UART_Init+0x68>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_USART3_UART_Init+0x68>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b52:	4809      	ldr	r0, [pc, #36]	; (8001b78 <MX_USART3_UART_Init+0x68>)
 8001b54:	f006 fe38 	bl	80087c8 <HAL_UART_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b5e:	f7ff fd39 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	2027      	movs	r0, #39	; 0x27
 8001b68:	f000 ffd2 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b6c:	2027      	movs	r0, #39	; 0x27
 8001b6e:	f000 ffeb 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART3_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200054c4 	.word	0x200054c4
 8001b7c:	40004800 	.word	0x40004800

08001b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0ae      	sub	sp, #184	; 0xb8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2290      	movs	r2, #144	; 0x90
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f019 fb96 	bl	801b2d2 <memset>
  if(uartHandle->Instance==USART3)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <HAL_UART_MspInit+0xb4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d13c      	bne.n	8001c2a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f005 fe76 	bl	80078b0 <HAL_RCCEx_PeriphCLKConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bca:	f7ff fd03 	bl	80015d4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bce:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <HAL_UART_MspInit+0xb8>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <HAL_UART_MspInit+0xb8>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_UART_MspInit+0xb8>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_UART_MspInit+0xb8>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <HAL_UART_MspInit+0xb8>)
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_UART_MspInit+0xb8>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c18:	2307      	movs	r3, #7
 8001c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_UART_MspInit+0xbc>)
 8001c26:	f002 fe03 	bl	8004830 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	37b8      	adds	r7, #184	; 0xb8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40004800 	.word	0x40004800
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020c00 	.word	0x40020c00

08001c40 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c4e:	2206      	movs	r2, #6
 8001c50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c54:	2202      	movs	r2, #2
 8001c56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c60:	2202      	movs	r2, #2
 8001c62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c84:	f004 ff65 	bl	8006b52 <HAL_PCD_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c8e:	f7ff fca1 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000554c 	.word	0x2000554c

08001c9c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b0ae      	sub	sp, #184	; 0xb8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2290      	movs	r2, #144	; 0x90
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f019 fb08 	bl	801b2d2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cca:	d159      	bne.n	8001d80 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ccc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cd0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f005 fde7 	bl	80078b0 <HAL_RCCEx_PeriphCLKConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001ce8:	f7ff fc74 	bl	80015d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cec:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_PCD_MspInit+0xec>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <HAL_PCD_MspInit+0xec>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf8:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_PCD_MspInit+0xec>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d04:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001d08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d1e:	230a      	movs	r3, #10
 8001d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4818      	ldr	r0, [pc, #96]	; (8001d8c <HAL_PCD_MspInit+0xf0>)
 8001d2c:	f002 fd80 	bl	8004830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4810      	ldr	r0, [pc, #64]	; (8001d8c <HAL_PCD_MspInit+0xf0>)
 8001d4c:	f002 fd70 	bl	8004830 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d50:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_PCD_MspInit+0xec>)
 8001d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <HAL_PCD_MspInit+0xec>)
 8001d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d5a:	6353      	str	r3, [r2, #52]	; 0x34
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_PCD_MspInit+0xec>)
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_PCD_MspInit+0xec>)
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6c:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <HAL_PCD_MspInit+0xec>)
 8001d6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d72:	6453      	str	r3, [r2, #68]	; 0x44
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <HAL_PCD_MspInit+0xec>)
 8001d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001d80:	bf00      	nop
 8001d82:	37b8      	adds	r7, #184	; 0xb8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000

08001d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d94:	480d      	ldr	r0, [pc, #52]	; (8001dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d96:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dac:	4c0b      	ldr	r4, [pc, #44]	; (8001ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dba:	f7ff fde5 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f019 fb31 	bl	801b424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc2:	f7ff fae9 	bl	8001398 <main>
  bx  lr    
 8001dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dc8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001dd4:	08020980 	.word	0x08020980
  ldr r2, =_sbss
 8001dd8:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8001ddc:	2001df90 	.word	0x2001df90

08001de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC_IRQHandler>

08001de2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <LAN8742_RegisterBusIO+0x28>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <LAN8742_RegisterBusIO+0x28>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <LAN8742_RegisterBusIO+0x28>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	e014      	b.n	8001e3a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d17c      	bne.n	8001f60 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e01c      	b.n	8001eba <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	f107 0208 	add.w	r2, r7, #8
 8001e88:	2112      	movs	r1, #18
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	4798      	blx	r3
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	da03      	bge.n	8001e9c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001e94:	f06f 0304 	mvn.w	r3, #4
 8001e98:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001e9a:	e00b      	b.n	8001eb4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d105      	bne.n	8001eb4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
         break;
 8001eb2:	e005      	b.n	8001ec0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2b1f      	cmp	r3, #31
 8001ebe:	d9df      	bls.n	8001e80 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b1f      	cmp	r3, #31
 8001ec6:	d902      	bls.n	8001ece <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001ec8:	f06f 0302 	mvn.w	r3, #2
 8001ecc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d145      	bne.n	8001f60 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6810      	ldr	r0, [r2, #0]
 8001edc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4798      	blx	r3
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db37      	blt.n	8001f5a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6810      	ldr	r0, [r2, #0]
 8001ef2:	f107 0208 	add.w	r2, r7, #8
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4798      	blx	r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db28      	blt.n	8001f52 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4798      	blx	r3
 8001f06:	4603      	mov	r3, r0
 8001f08:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001f0a:	e01c      	b.n	8001f46 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4798      	blx	r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	461a      	mov	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f1e:	d80e      	bhi.n	8001f3e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6810      	ldr	r0, [r2, #0]
 8001f28:	f107 0208 	add.w	r2, r7, #8
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4798      	blx	r3
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	da07      	bge.n	8001f46 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001f36:	f06f 0304 	mvn.w	r3, #4
 8001f3a:	613b      	str	r3, [r7, #16]
                 break;
 8001f3c:	e010      	b.n	8001f60 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001f3e:	f06f 0301 	mvn.w	r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
               break;
 8001f44:	e00c      	b.n	8001f60 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1dd      	bne.n	8001f0c <LAN8742_Init+0xc6>
 8001f50:	e006      	b.n	8001f60 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001f52:	f06f 0304 	mvn.w	r3, #4
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	e002      	b.n	8001f60 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001f5a:	f06f 0303 	mvn.w	r3, #3
 8001f5e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d112      	bne.n	8001f8c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	4798      	blx	r3
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001f70:	bf00      	nop
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	4798      	blx	r3
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f84:	d9f5      	bls.n	8001f72 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 }
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6810      	ldr	r0, [r2, #0]
 8001faa:	f107 020c 	add.w	r2, r7, #12
 8001fae:	2101      	movs	r1, #1
 8001fb0:	4798      	blx	r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da02      	bge.n	8001fbe <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001fb8:	f06f 0304 	mvn.w	r3, #4
 8001fbc:	e06e      	b.n	800209c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6810      	ldr	r0, [r2, #0]
 8001fc6:	f107 020c 	add.w	r2, r7, #12
 8001fca:	2101      	movs	r1, #1
 8001fcc:	4798      	blx	r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	da02      	bge.n	8001fda <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001fd4:	f06f 0304 	mvn.w	r3, #4
 8001fd8:	e060      	b.n	800209c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e059      	b.n	800209c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6810      	ldr	r0, [r2, #0]
 8001ff0:	f107 020c 	add.w	r2, r7, #12
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4798      	blx	r3
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	da02      	bge.n	8002004 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ffe:	f06f 0304 	mvn.w	r3, #4
 8002002:	e04b      	b.n	800209c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d11b      	bne.n	8002046 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <LAN8742_GetLinkState+0x90>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002022:	2302      	movs	r3, #2
 8002024:	e03a      	b.n	800209c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002030:	2303      	movs	r3, #3
 8002032:	e033      	b.n	800209c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800203e:	2304      	movs	r3, #4
 8002040:	e02c      	b.n	800209c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002042:	2305      	movs	r3, #5
 8002044:	e02a      	b.n	800209c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6810      	ldr	r0, [r2, #0]
 800204e:	f107 020c 	add.w	r2, r7, #12
 8002052:	211f      	movs	r1, #31
 8002054:	4798      	blx	r3
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	da02      	bge.n	8002062 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800205c:	f06f 0304 	mvn.w	r3, #4
 8002060:	e01c      	b.n	800209c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800206c:	2306      	movs	r3, #6
 800206e:	e015      	b.n	800209c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 031c 	and.w	r3, r3, #28
 8002076:	2b18      	cmp	r3, #24
 8002078:	d101      	bne.n	800207e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800207a:	2302      	movs	r3, #2
 800207c:	e00e      	b.n	800209c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 031c 	and.w	r3, r3, #28
 8002084:	2b08      	cmp	r3, #8
 8002086:	d101      	bne.n	800208c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002088:	2303      	movs	r3, #3
 800208a:	e007      	b.n	800209c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 031c 	and.w	r3, r3, #28
 8002092:	2b14      	cmp	r3, #20
 8002094:	d101      	bne.n	800209a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002096:	2304      	movs	r3, #4
 8002098:	e000      	b.n	800209c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800209a:	2305      	movs	r3, #5
    }				
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_Init+0x28>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a07      	ldr	r2, [pc, #28]	; (80020cc <HAL_Init+0x28>)
 80020ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b4:	2003      	movs	r0, #3
 80020b6:	f000 fd20 	bl	8002afa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ba:	2005      	movs	r0, #5
 80020bc:	f7ff fab8 	bl	8001630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c0:	f7ff fa8e 	bl	80015e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023c00 	.word	0x40023c00

080020d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x20>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_IncTick+0x24>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_IncTick+0x24>)
 80020e2:	6013      	str	r3, [r2, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000010 	.word	0x20000010
 80020f4:	20005a54 	.word	0x20005a54

080020f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <HAL_GetTick+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20005a54 	.word	0x20005a54

08002110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff ffee 	bl	80020f8 <HAL_GetTick>
 800211c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d005      	beq.n	8002136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_Delay+0x44>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002136:	bf00      	nop
 8002138:	f7ff ffde 	bl	80020f8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	429a      	cmp	r2, r3
 8002146:	d8f7      	bhi.n	8002138 <HAL_Delay+0x28>
  {
  }
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000010 	.word	0x20000010

08002158 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e031      	b.n	80021d2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe fcf8 	bl	8000b6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	d116      	bne.n	80021c4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_ADC_Init+0x84>)
 800219c:	4013      	ands	r3, r2
 800219e:	f043 0202 	orr.w	r2, r3, #2
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fa7e 	bl	80026a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f023 0303 	bic.w	r3, r3, #3
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40
 80021c2:	e001      	b.n	80021c8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	ffffeefd 	.word	0xffffeefd

080021e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_Start_DMA+0x1e>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e0d4      	b.n	80023a8 <HAL_ADC_Start_DMA+0x1c8>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b01      	cmp	r3, #1
 8002212:	d018      	beq.n	8002246 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002224:	4b62      	ldr	r3, [pc, #392]	; (80023b0 <HAL_ADC_Start_DMA+0x1d0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a62      	ldr	r2, [pc, #392]	; (80023b4 <HAL_ADC_Start_DMA+0x1d4>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0c9a      	lsrs	r2, r3, #18
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002238:	e002      	b.n	8002240 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3b01      	subs	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f9      	bne.n	800223a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	f040 809c 	bne.w	800238e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800225a:	4b57      	ldr	r3, [pc, #348]	; (80023b8 <HAL_ADC_Start_DMA+0x1d8>)
 800225c:	4013      	ands	r3, r2
 800225e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800227c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002290:	d106      	bne.n	80022a0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f023 0206 	bic.w	r2, r3, #6
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	645a      	str	r2, [r3, #68]	; 0x44
 800229e:	e002      	b.n	80022a6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	4a42      	ldr	r2, [pc, #264]	; (80023bc <HAL_ADC_Start_DMA+0x1dc>)
 80022b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	4a41      	ldr	r2, [pc, #260]	; (80023c0 <HAL_ADC_Start_DMA+0x1e0>)
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	4a40      	ldr	r2, [pc, #256]	; (80023c4 <HAL_ADC_Start_DMA+0x1e4>)
 80022c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80022de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	334c      	adds	r3, #76	; 0x4c
 80022fa:	4619      	mov	r1, r3
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f000 fcde 	bl	8002cc0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002304:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <HAL_ADC_Start_DMA+0x1e8>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10f      	bne.n	8002330 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d143      	bne.n	80023a6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	e03a      	b.n	80023a6 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a25      	ldr	r2, [pc, #148]	; (80023cc <HAL_ADC_Start_DMA+0x1ec>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d10e      	bne.n	8002358 <HAL_ADC_Start_DMA+0x178>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d107      	bne.n	8002358 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002356:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_ADC_Start_DMA+0x1e8>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b00      	cmp	r3, #0
 8002362:	d120      	bne.n	80023a6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <HAL_ADC_Start_DMA+0x1f0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d11b      	bne.n	80023a6 <HAL_ADC_Start_DMA+0x1c6>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d114      	bne.n	80023a6 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	e00b      	b.n	80023a6 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f043 0210 	orr.w	r2, r3, #16
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000008 	.word	0x20000008
 80023b4:	431bde83 	.word	0x431bde83
 80023b8:	fffff8fe 	.word	0xfffff8fe
 80023bc:	0800289d 	.word	0x0800289d
 80023c0:	08002957 	.word	0x08002957
 80023c4:	08002973 	.word	0x08002973
 80023c8:	40012300 	.word	0x40012300
 80023cc:	40012000 	.word	0x40012000
 80023d0:	40012200 	.word	0x40012200

080023d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1c>
 8002414:	2302      	movs	r3, #2
 8002416:	e136      	b.n	8002686 <HAL_ADC_ConfigChannel+0x28a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b09      	cmp	r3, #9
 8002426:	d93a      	bls.n	800249e <HAL_ADC_ConfigChannel+0xa2>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002430:	d035      	beq.n	800249e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68d9      	ldr	r1, [r3, #12]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b29b      	uxth	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	3b1e      	subs	r3, #30
 8002448:	2207      	movs	r2, #7
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	400a      	ands	r2, r1
 8002456:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a8d      	ldr	r2, [pc, #564]	; (8002694 <HAL_ADC_ConfigChannel+0x298>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10a      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68d9      	ldr	r1, [r3, #12]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	061a      	lsls	r2, r3, #24
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002476:	e035      	b.n	80024e4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68d9      	ldr	r1, [r3, #12]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	4618      	mov	r0, r3
 800248a:	4603      	mov	r3, r0
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4403      	add	r3, r0
 8002490:	3b1e      	subs	r3, #30
 8002492:	409a      	lsls	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800249c:	e022      	b.n	80024e4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6919      	ldr	r1, [r3, #16]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	2207      	movs	r2, #7
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43da      	mvns	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	400a      	ands	r2, r1
 80024c0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6919      	ldr	r1, [r3, #16]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	4603      	mov	r3, r0
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4403      	add	r3, r0
 80024da:	409a      	lsls	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b06      	cmp	r3, #6
 80024ea:	d824      	bhi.n	8002536 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	3b05      	subs	r3, #5
 80024fe:	221f      	movs	r2, #31
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43da      	mvns	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	400a      	ands	r2, r1
 800250c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	4618      	mov	r0, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	3b05      	subs	r3, #5
 8002528:	fa00 f203 	lsl.w	r2, r0, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	635a      	str	r2, [r3, #52]	; 0x34
 8002534:	e04c      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d824      	bhi.n	8002588 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	3b23      	subs	r3, #35	; 0x23
 8002550:	221f      	movs	r2, #31
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	400a      	ands	r2, r1
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	4618      	mov	r0, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	3b23      	subs	r3, #35	; 0x23
 800257a:	fa00 f203 	lsl.w	r2, r0, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
 8002586:	e023      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	3b41      	subs	r3, #65	; 0x41
 800259a:	221f      	movs	r2, #31
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43da      	mvns	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	400a      	ands	r2, r1
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	3b41      	subs	r3, #65	; 0x41
 80025c4:	fa00 f203 	lsl.w	r2, r0, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a30      	ldr	r2, [pc, #192]	; (8002698 <HAL_ADC_ConfigChannel+0x29c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d10a      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x1f4>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025e2:	d105      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a2c      	ldr	r2, [pc, #176]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 80025ea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025ee:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a28      	ldr	r2, [pc, #160]	; (8002698 <HAL_ADC_ConfigChannel+0x29c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10f      	bne.n	800261a <HAL_ADC_ConfigChannel+0x21e>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b12      	cmp	r3, #18
 8002600:	d10b      	bne.n	800261a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a25      	ldr	r2, [pc, #148]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002608:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800260c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800260e:	4b23      	ldr	r3, [pc, #140]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4a22      	ldr	r2, [pc, #136]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002618:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <HAL_ADC_ConfigChannel+0x29c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d12b      	bne.n	800267c <HAL_ADC_ConfigChannel+0x280>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1a      	ldr	r2, [pc, #104]	; (8002694 <HAL_ADC_ConfigChannel+0x298>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x23a>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b11      	cmp	r3, #17
 8002634:	d122      	bne.n	800267c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a18      	ldr	r2, [pc, #96]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 800263c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002640:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a15      	ldr	r2, [pc, #84]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002648:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800264c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a10      	ldr	r2, [pc, #64]	; (8002694 <HAL_ADC_ConfigChannel+0x298>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d111      	bne.n	800267c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_ADC_ConfigChannel+0x2a4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <HAL_ADC_ConfigChannel+0x2a8>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0c9a      	lsrs	r2, r3, #18
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800266e:	e002      	b.n	8002676 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3b01      	subs	r3, #1
 8002674:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f9      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	10000012 	.word	0x10000012
 8002698:	40012000 	.word	0x40012000
 800269c:	40012300 	.word	0x40012300
 80026a0:	20000008 	.word	0x20000008
 80026a4:	431bde83 	.word	0x431bde83

080026a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80026b0:	4b78      	ldr	r3, [pc, #480]	; (8002894 <ADC_Init+0x1ec>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a77      	ldr	r2, [pc, #476]	; (8002894 <ADC_Init+0x1ec>)
 80026b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80026ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80026bc:	4b75      	ldr	r3, [pc, #468]	; (8002894 <ADC_Init+0x1ec>)
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4973      	ldr	r1, [pc, #460]	; (8002894 <ADC_Init+0x1ec>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	021a      	lsls	r2, r3, #8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6899      	ldr	r1, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	4a58      	ldr	r2, [pc, #352]	; (8002898 <ADC_Init+0x1f0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d022      	beq.n	8002782 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800274a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800276c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	e00f      	b.n	80027a2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0202 	bic.w	r2, r2, #2
 80027b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6899      	ldr	r1, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	005a      	lsls	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01b      	beq.n	8002808 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	3b01      	subs	r3, #1
 80027fc:	035a      	lsls	r2, r3, #13
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	e007      	b.n	8002818 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002816:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	3b01      	subs	r3, #1
 8002834:	051a      	lsls	r2, r3, #20
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800284c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6899      	ldr	r1, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800285a:	025a      	lsls	r2, r3, #9
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6899      	ldr	r1, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	029a      	lsls	r2, r3, #10
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	40012300 	.word	0x40012300
 8002898:	0f000001 	.word	0x0f000001

0800289c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d13c      	bne.n	8002930 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d12b      	bne.n	8002928 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d127      	bne.n	8002928 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d119      	bne.n	8002928 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0220 	bic.w	r2, r2, #32
 8002902:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d105      	bne.n	8002928 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7fe fb5d 	bl	8000fe8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800292e:	e00e      	b.n	800294e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f7ff fd53 	bl	80023e8 <HAL_ADC_ErrorCallback>
}
 8002942:	e004      	b.n	800294e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff fd35 	bl	80023d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2240      	movs	r2, #64	; 0x40
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f043 0204 	orr.w	r2, r3, #4
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f7ff fd28 	bl	80023e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <__NVIC_SetPriorityGrouping>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <__NVIC_SetPriorityGrouping+0x40>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029bc:	4013      	ands	r3, r2
 80029be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <__NVIC_SetPriorityGrouping+0x44>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ce:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <__NVIC_SetPriorityGrouping+0x40>)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	60d3      	str	r3, [r2, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00
 80029e4:	05fa0000 	.word	0x05fa0000

080029e8 <__NVIC_GetPriorityGrouping>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029ec:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <__NVIC_GetPriorityGrouping+0x18>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	0a1b      	lsrs	r3, r3, #8
 80029f2:	f003 0307 	and.w	r3, r3, #7
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <__NVIC_EnableIRQ>:
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	db0b      	blt.n	8002a2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	f003 021f 	and.w	r2, r3, #31
 8002a1c:	4907      	ldr	r1, [pc, #28]	; (8002a3c <__NVIC_EnableIRQ+0x38>)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	2001      	movs	r0, #1
 8002a26:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000e100 	.word	0xe000e100

08002a40 <__NVIC_SetPriority>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	db0a      	blt.n	8002a6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	490c      	ldr	r1, [pc, #48]	; (8002a8c <__NVIC_SetPriority+0x4c>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	440b      	add	r3, r1
 8002a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a68:	e00a      	b.n	8002a80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4908      	ldr	r1, [pc, #32]	; (8002a90 <__NVIC_SetPriority+0x50>)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	3b04      	subs	r3, #4
 8002a78:	0112      	lsls	r2, r2, #4
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	761a      	strb	r2, [r3, #24]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000e100 	.word	0xe000e100
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <NVIC_EncodePriority>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	; 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f1c3 0307 	rsb	r3, r3, #7
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	bf28      	it	cs
 8002ab2:	2304      	movcs	r3, #4
 8002ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d902      	bls.n	8002ac4 <NVIC_EncodePriority+0x30>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3b03      	subs	r3, #3
 8002ac2:	e000      	b.n	8002ac6 <NVIC_EncodePriority+0x32>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	43d9      	mvns	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	4313      	orrs	r3, r2
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3724      	adds	r7, #36	; 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ff4c 	bl	80029a0 <__NVIC_SetPriorityGrouping>
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b22:	f7ff ff61 	bl	80029e8 <__NVIC_GetPriorityGrouping>
 8002b26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	6978      	ldr	r0, [r7, #20]
 8002b2e:	f7ff ffb1 	bl	8002a94 <NVIC_EncodePriority>
 8002b32:	4602      	mov	r2, r0
 8002b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ff80 	bl	8002a40 <__NVIC_SetPriority>
}
 8002b40:	bf00      	nop
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff54 	bl	8002a04 <__NVIC_EnableIRQ>
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b70:	f7ff fac2 	bl	80020f8 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e099      	b.n	8002cb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0201 	bic.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba0:	e00f      	b.n	8002bc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ba2:	f7ff faa9 	bl	80020f8 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d908      	bls.n	8002bc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e078      	b.n	8002cb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e8      	bne.n	8002ba2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4b38      	ldr	r3, [pc, #224]	; (8002cbc <HAL_DMA_Init+0x158>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d107      	bne.n	8002c2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	4313      	orrs	r3, r2
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f023 0307 	bic.w	r3, r3, #7
 8002c42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d117      	bne.n	8002c86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00e      	beq.n	8002c86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fb17 	bl	800329c <DMA_CheckFifoParam>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2240      	movs	r2, #64	; 0x40
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c82:	2301      	movs	r3, #1
 8002c84:	e016      	b.n	8002cb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 face 	bl	8003230 <DMA_CalcBaseAndBitshift>
 8002c94:	4603      	mov	r3, r0
 8002c96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	223f      	movs	r2, #63	; 0x3f
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	e010803f 	.word	0xe010803f

08002cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_DMA_Start_IT+0x26>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e048      	b.n	8002d78 <HAL_DMA_Start_IT+0xb8>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d137      	bne.n	8002d6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fa60 	bl	80031d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	223f      	movs	r2, #63	; 0x3f
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0216 	orr.w	r2, r2, #22
 8002d2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d3e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0208 	orr.w	r2, r2, #8
 8002d56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	e005      	b.n	8002d76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
 8002d74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d8e:	f7ff f9b3 	bl	80020f8 <HAL_GetTick>
 8002d92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d008      	beq.n	8002db2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e052      	b.n	8002e58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0216 	bic.w	r2, r2, #22
 8002dc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <HAL_DMA_Abort+0x62>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0208 	bic.w	r2, r2, #8
 8002df0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e02:	e013      	b.n	8002e2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e04:	f7ff f978 	bl	80020f8 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b05      	cmp	r3, #5
 8002e10:	d90c      	bls.n	8002e2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2220      	movs	r2, #32
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e015      	b.n	8002e58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1e4      	bne.n	8002e04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3e:	223f      	movs	r2, #63	; 0x3f
 8002e40:	409a      	lsls	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d004      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2280      	movs	r2, #128	; 0x80
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00c      	b.n	8002e98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2205      	movs	r2, #5
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002eb0:	4b8e      	ldr	r3, [pc, #568]	; (80030ec <HAL_DMA_IRQHandler+0x248>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a8e      	ldr	r2, [pc, #568]	; (80030f0 <HAL_DMA_IRQHandler+0x24c>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	0a9b      	lsrs	r3, r3, #10
 8002ebc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	2208      	movs	r2, #8
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01a      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0204 	bic.w	r2, r2, #4
 8002ef6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	2208      	movs	r2, #8
 8002efe:	409a      	lsls	r2, r3
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	2201      	movs	r2, #1
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d012      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	2201      	movs	r2, #1
 8002f34:	409a      	lsls	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	f043 0202 	orr.w	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d012      	beq.n	8002f7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	2204      	movs	r2, #4
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f74:	f043 0204 	orr.w	r2, r3, #4
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	2210      	movs	r2, #16
 8002f82:	409a      	lsls	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d043      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d03c      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d018      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d108      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d024      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
 8002fd2:	e01f      	b.n	8003014 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01b      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
 8002fe4:	e016      	b.n	8003014 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d107      	bne.n	8003004 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0208 	bic.w	r2, r2, #8
 8003002:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003018:	2220      	movs	r2, #32
 800301a:	409a      	lsls	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 808f 	beq.w	8003144 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8087 	beq.w	8003144 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303a:	2220      	movs	r2, #32
 800303c:	409a      	lsls	r2, r3
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b05      	cmp	r3, #5
 800304c:	d136      	bne.n	80030bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0216 	bic.w	r2, r2, #22
 800305c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800306c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <HAL_DMA_IRQHandler+0x1da>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0208 	bic.w	r2, r2, #8
 800308c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	223f      	movs	r2, #63	; 0x3f
 8003094:	409a      	lsls	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d07e      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
        }
        return;
 80030ba:	e079      	b.n	80031b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d01d      	beq.n	8003106 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10d      	bne.n	80030f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d031      	beq.n	8003144 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
 80030e8:	e02c      	b.n	8003144 <HAL_DMA_IRQHandler+0x2a0>
 80030ea:	bf00      	nop
 80030ec:	20000008 	.word	0x20000008
 80030f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d023      	beq.n	8003144 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	4798      	blx	r3
 8003104:	e01e      	b.n	8003144 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10f      	bne.n	8003134 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0210 	bic.w	r2, r2, #16
 8003122:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	2b00      	cmp	r3, #0
 800314a:	d032      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d022      	beq.n	800319e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2205      	movs	r2, #5
 800315c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	3301      	adds	r3, #1
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	429a      	cmp	r2, r3
 800317a:	d307      	bcc.n	800318c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f2      	bne.n	8003170 <HAL_DMA_IRQHandler+0x2cc>
 800318a:	e000      	b.n	800318e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800318c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
 80031ae:	e000      	b.n	80031b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80031b0:	bf00      	nop
    }
  }
}
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c6:	b2db      	uxtb	r3, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d108      	bne.n	8003214 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003212:	e007      	b.n	8003224 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	60da      	str	r2, [r3, #12]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	3b10      	subs	r3, #16
 8003240:	4a13      	ldr	r2, [pc, #76]	; (8003290 <DMA_CalcBaseAndBitshift+0x60>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800324a:	4a12      	ldr	r2, [pc, #72]	; (8003294 <DMA_CalcBaseAndBitshift+0x64>)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b03      	cmp	r3, #3
 800325c:	d908      	bls.n	8003270 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <DMA_CalcBaseAndBitshift+0x68>)
 8003266:	4013      	ands	r3, r2
 8003268:	1d1a      	adds	r2, r3, #4
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	659a      	str	r2, [r3, #88]	; 0x58
 800326e:	e006      	b.n	800327e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <DMA_CalcBaseAndBitshift+0x68>)
 8003278:	4013      	ands	r3, r2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	aaaaaaab 	.word	0xaaaaaaab
 8003294:	08020464 	.word	0x08020464
 8003298:	fffffc00 	.word	0xfffffc00

0800329c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d11f      	bne.n	80032f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d856      	bhi.n	800336a <DMA_CheckFifoParam+0xce>
 80032bc:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <DMA_CheckFifoParam+0x28>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032e7 	.word	0x080032e7
 80032cc:	080032d5 	.word	0x080032d5
 80032d0:	0800336b 	.word	0x0800336b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d046      	beq.n	800336e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e4:	e043      	b.n	800336e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032ee:	d140      	bne.n	8003372 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f4:	e03d      	b.n	8003372 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fe:	d121      	bne.n	8003344 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d837      	bhi.n	8003376 <DMA_CheckFifoParam+0xda>
 8003306:	a201      	add	r2, pc, #4	; (adr r2, 800330c <DMA_CheckFifoParam+0x70>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	0800331d 	.word	0x0800331d
 8003310:	08003323 	.word	0x08003323
 8003314:	0800331d 	.word	0x0800331d
 8003318:	08003335 	.word	0x08003335
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
      break;
 8003320:	e030      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d025      	beq.n	800337a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003332:	e022      	b.n	800337a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800333c:	d11f      	bne.n	800337e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003342:	e01c      	b.n	800337e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d903      	bls.n	8003352 <DMA_CheckFifoParam+0xb6>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d003      	beq.n	8003358 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003350:	e018      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      break;
 8003356:	e015      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00e      	beq.n	8003382 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      break;
 8003368:	e00b      	b.n	8003382 <DMA_CheckFifoParam+0xe6>
      break;
 800336a:	bf00      	nop
 800336c:	e00a      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e008      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
 8003374:	e006      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
 8003378:	e004      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 800337a:	bf00      	nop
 800337c:	e002      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;   
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 8003382:	bf00      	nop
    }
  } 
  
  return status; 
 8003384:	7bfb      	ldrb	r3, [r7, #15]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop

08003394 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e06a      	b.n	800347c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d106      	bne.n	80033be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2223      	movs	r2, #35	; 0x23
 80033b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f007 f92f 	bl	800a61c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033be:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_ETH_Init+0xf0>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	4a30      	ldr	r2, [pc, #192]	; (8003484 <HAL_ETH_Init+0xf0>)
 80033c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ca:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <HAL_ETH_Init+0xf0>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80033d6:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <HAL_ETH_Init+0xf4>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	4a2b      	ldr	r2, [pc, #172]	; (8003488 <HAL_ETH_Init+0xf4>)
 80033dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <HAL_ETH_Init+0xf4>)
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4927      	ldr	r1, [pc, #156]	; (8003488 <HAL_ETH_Init+0xf4>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <HAL_ETH_Init+0xf4>)
 80033f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800340a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800340c:	f7fe fe74 	bl	80020f8 <HAL_GetTick>
 8003410:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003412:	e011      	b.n	8003438 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003414:	f7fe fe70 	bl	80020f8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003422:	d909      	bls.n	8003438 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2204      	movs	r2, #4
 8003428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	22e0      	movs	r2, #224	; 0xe0
 8003430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e021      	b.n	800347c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e4      	bne.n	8003414 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 ff4c 	bl	80042e8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fff3 	bl	800443c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f001 f849 	bl	80044ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	461a      	mov	r2, r3
 8003462:	2100      	movs	r1, #0
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 ffb1 	bl	80043cc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2210      	movs	r2, #16
 8003476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	40013800 	.word	0x40013800

0800348c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349a:	2b10      	cmp	r3, #16
 800349c:	d17b      	bne.n	8003596 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2223      	movs	r2, #35	; 0x23
 80034a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80034ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <HAL_ETH_Start_IT+0x114>)
 80034ca:	430b      	orrs	r3, r1
 80034cc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80034e0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2204      	movs	r2, #4
 80034e8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f9fc 	bl	80038e8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0208 	orr.w	r2, r2, #8
 80034fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003508:	2001      	movs	r0, #1
 800350a:	f7fe fe01 	bl	8002110 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0204 	orr.w	r2, r2, #4
 8003524:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800352e:	2001      	movs	r0, #1
 8003530:	f7fe fdee 	bl	8002110 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fd74 	bl	800402a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003554:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003558:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	f043 0302 	orr.w	r3, r3, #2
 800356c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003570:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800357a:	69d9      	ldr	r1, [r3, #28]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <HAL_ETH_Start_IT+0x118>)
 8003582:	430b      	orrs	r3, r1
 8003584:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003588:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2223      	movs	r2, #35	; 0x23
 800358e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	e000      	b.n	8003598 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
  }
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	00020060 	.word	0x00020060
 80035a4:	0001a0c1 	.word	0x0001a0c1

080035a8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b6:	2b23      	cmp	r3, #35	; 0x23
 80035b8:	d16e      	bne.n	8003698 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2223      	movs	r2, #35	; 0x23
 80035be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ca:	69d9      	ldr	r1, [r3, #28]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4b34      	ldr	r3, [pc, #208]	; (80036a4 <HAL_ETH_Stop_IT+0xfc>)
 80035d2:	400b      	ands	r3, r1
 80035d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035d8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035f0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	f023 0302 	bic.w	r3, r3, #2
 8003604:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003608:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0204 	bic.w	r2, r2, #4
 8003618:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003622:	2001      	movs	r0, #1
 8003624:	f7fe fd74 	bl	8002110 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fcfa 	bl	800402a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0208 	bic.w	r2, r2, #8
 8003644:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800364e:	2001      	movs	r0, #1
 8003650:	f7fe fd5e 	bl	8002110 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	e00e      	b.n	8003680 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	3212      	adds	r2, #18
 8003668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800366c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	3301      	adds	r3, #1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d9ed      	bls.n	8003662 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2210      	movs	r2, #16
 8003690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
  }
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	fffe5f3e 	.word	0xfffe5f3e

080036a8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f043 0201 	orr.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e045      	b.n	8003758 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d2:	2b23      	cmp	r3, #35	; 0x23
 80036d4:	d13f      	bne.n	8003756 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80036de:	2201      	movs	r2, #1
 80036e0:	6839      	ldr	r1, [r7, #0]
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 ff70 	bl	80045c8 <ETH_Prepare_Tx_Descriptors>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f043 0202 	orr.w	r2, r3, #2
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e02a      	b.n	8003758 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8003702:	f3bf 8f4f 	dsb	sy
}
 8003706:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	629a      	str	r2, [r3, #40]	; 0x28
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	2b03      	cmp	r3, #3
 8003718:	d904      	bls.n	8003724 <HAL_ETH_Transmit_IT+0x7c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	1f1a      	subs	r2, r3, #4
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373e:	461a      	mov	r2, r3
 8003740:	2304      	movs	r3, #4
 8003742:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800374c:	461a      	mov	r2, r3
 800374e:	2300      	movs	r3, #0
 8003750:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
  }
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0a8      	b.n	80038de <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003792:	2b23      	cmp	r3, #35	; 0x23
 8003794:	d001      	beq.n	800379a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0a1      	b.n	80038de <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	3212      	adds	r2, #18
 80037a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037aa:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b0:	f1c3 0304 	rsb	r3, r3, #4
 80037b4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80037b6:	e06a      	b.n	800388e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	699a      	ldr	r2, [r3, #24]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d103      	bne.n	80037e8 <HAL_ETH_ReadData+0x88>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d040      	beq.n	800386a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00c      	beq.n	800382c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	0c1b      	lsrs	r3, r3, #16
 8003818:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800381c:	3b04      	subs	r3, #4
 800381e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003844:	461a      	mov	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	b29b      	uxth	r3, r3
 800384a:	f007 f8b3 	bl	800a9b4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	441a      	add	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2200      	movs	r2, #0
 8003868:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3301      	adds	r3, #1
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b03      	cmp	r3, #3
 8003874:	d902      	bls.n	800387c <HAL_ETH_ReadData+0x11c>
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3b04      	subs	r3, #4
 800387a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	3212      	adds	r2, #18
 8003882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003886:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	3301      	adds	r3, #1
 800388c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003892:	2b00      	cmp	r3, #0
 8003894:	db06      	blt.n	80038a4 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	429a      	cmp	r2, r3
 800389c:	d202      	bcs.n	80038a4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d089      	beq.n	80037b8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	441a      	add	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f815 	bl	80038e8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d108      	bne.n	80038dc <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	e000      	b.n	80038de <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80038f4:	2301      	movs	r3, #1
 80038f6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	3212      	adds	r2, #18
 8003904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003908:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800390e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003910:	e040      	b.n	8003994 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d112      	bne.n	8003940 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800391a:	f107 030c 	add.w	r3, r7, #12
 800391e:	4618      	mov	r0, r3
 8003920:	f007 f818 	bl	800a954 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	74fb      	strb	r3, [r7, #19]
 800392e:	e007      	b.n	8003940 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	461a      	mov	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	461a      	mov	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d026      	beq.n	8003994 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	4a1e      	ldr	r2, [pc, #120]	; (80039cc <ETH_UpdateDescriptor+0xe4>)
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	e003      	b.n	800395e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800395c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800395e:	f3bf 8f5f 	dmb	sy
}
 8003962:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	3301      	adds	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d902      	bls.n	8003982 <ETH_UpdateDescriptor+0x9a>
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	3b04      	subs	r3, #4
 8003980:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	3212      	adds	r2, #18
 8003988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398c:	617b      	str	r3, [r7, #20]
      desccount--;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3b01      	subs	r3, #1
 8003992:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <ETH_UpdateDescriptor+0xb8>
 800399a:	7cfb      	ldrb	r3, [r7, #19]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1b8      	bne.n	8003912 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d00c      	beq.n	80039c4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b2:	461a      	mov	r2, r3
 80039b4:	2300      	movs	r3, #0
 80039b6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80039c4:	bf00      	nop
 80039c6:	3720      	adds	r7, #32
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	80004600 	.word	0x80004600

080039d0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3318      	adds	r3, #24
 80039dc:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80039ee:	e03f      	b.n	8003a70 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	3304      	adds	r3, #4
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8003a18:	7bbb      	ldrb	r3, [r7, #14]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d028      	beq.n	8003a70 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68d9      	ldr	r1, [r3, #12]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	440b      	add	r3, r1
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	db1b      	blt.n	8003a6c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f006 fff9 	bl	800aa38 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	2200      	movs	r2, #0
 8003a52:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	3301      	adds	r3, #1
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a6a:	e001      	b.n	8003a70 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_ETH_ReleaseTxPacket+0xac>
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1b9      	bne.n	80039f0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d112      	bne.n	8003ac8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d109      	bne.n	8003ac8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b50      	ldr	r3, [pc, #320]	; (8003c00 <HAL_ETH_IRQHandler+0x178>)
 8003ac0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f006 fb0e 	bl	800a0e4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d113      	bne.n	8003b02 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d10a      	bne.n	8003b02 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af4:	461a      	mov	r2, r3
 8003af6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003afa:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f006 fb01 	bl	800a104 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b14:	d14c      	bne.n	8003bb0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b28:	d142      	bne.n	8003bb0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f043 0208 	orr.w	r2, r3, #8
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4c:	d11a      	bne.n	8003b84 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b56:	695a      	ldr	r2, [r3, #20]
 8003b58:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <HAL_ETH_IRQHandler+0x17c>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003b74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b78:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	22e0      	movs	r2, #224	; 0xe0
 8003b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003b82:	e012      	b.n	8003baa <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	f248 6380 	movw	r3, #34432	; 0x8680
 8003b92:	4013      	ands	r3, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f248 6380 	movw	r3, #34432	; 0x8680
 8003ba8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f006 faba 	bl	800a124 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d10e      	bne.n	8003bdc <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f81c 	bl	8003c0c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <HAL_ETH_IRQHandler+0x180>)
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d006      	beq.n	8003bf6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003be8:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <HAL_ETH_IRQHandler+0x180>)
 8003bea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003bee:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f815 	bl	8003c20 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	00010040 	.word	0x00010040
 8003c04:	007e2000 	.word	0x007e2000
 8003c08:	40013c00 	.word	0x40013c00

08003c0c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 031c 	and.w	r3, r3, #28
 8003c50:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	02db      	lsls	r3, r3, #11
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	019b      	lsls	r3, r3, #6
 8003c62:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0302 	bic.w	r3, r3, #2
 8003c72:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003c84:	f7fe fa38 	bl	80020f8 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c8a:	e00d      	b.n	8003ca8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003c8c:	f7fe fa34 	bl	80020f8 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9a:	d301      	bcc.n	8003ca0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e010      	b.n	8003cc2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1ec      	bne.n	8003c8c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f003 031c 	and.w	r3, r3, #28
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	02db      	lsls	r3, r3, #11
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	019b      	lsls	r3, r3, #6
 8003cf8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d24:	f7fe f9e8 	bl	80020f8 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d2a:	e00d      	b.n	8003d48 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003d2c:	f7fe f9e4 	bl	80020f8 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3a:	d301      	bcc.n	8003d40 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e009      	b.n	8003d54 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1ec      	bne.n	8003d2c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0d9      	b.n	8003f24 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bf14      	ite	ne
 8003d7e:	2301      	movne	r3, #1
 8003d80:	2300      	moveq	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bf0c      	ite	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	2300      	movne	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	461a      	mov	r2, r3
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bf0c      	ite	eq
 8003e2e:	2301      	moveq	r3, #1
 8003e30:	2300      	movne	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bf14      	ite	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	2300      	moveq	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bf14      	ite	ne
 8003e8a:	2301      	movne	r3, #1
 8003e8c:	2300      	moveq	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf14      	ite	ne
 8003ea4:	2301      	movne	r3, #1
 8003ea6:	2300      	moveq	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	0c1b      	lsrs	r3, r3, #16
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf14      	ite	ne
 8003ef8:	2301      	movne	r3, #1
 8003efa:	2300      	moveq	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e00b      	b.n	8003f5c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d105      	bne.n	8003f5a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003f4e:	6839      	ldr	r1, [r7, #0]
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f88f 	bl	8004074 <ETH_SetMACConfig>

    return HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e000      	b.n	8003f5c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
  }
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 031c 	bic.w	r3, r3, #28
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003f7c:	f003 fc32 	bl	80077e4 <HAL_RCC_GetHCLKFreq>
 8003f80:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <HAL_ETH_SetMDIOClockRange+0x98>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d908      	bls.n	8003f9c <HAL_ETH_SetMDIOClockRange+0x38>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d804      	bhi.n	8003f9c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f043 0308 	orr.w	r3, r3, #8
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e027      	b.n	8003fec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4a18      	ldr	r2, [pc, #96]	; (8004000 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d908      	bls.n	8003fb6 <HAL_ETH_SetMDIOClockRange+0x52>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4a17      	ldr	r2, [pc, #92]	; (8004004 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d204      	bcs.n	8003fb6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f043 030c 	orr.w	r3, r3, #12
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e01a      	b.n	8003fec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4a12      	ldr	r2, [pc, #72]	; (8004004 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d303      	bcc.n	8003fc6 <HAL_ETH_SetMDIOClockRange+0x62>
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4a11      	ldr	r2, [pc, #68]	; (8004008 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d911      	bls.n	8003fea <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4a0f      	ldr	r2, [pc, #60]	; (8004008 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d908      	bls.n	8003fe0 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4a0e      	ldr	r2, [pc, #56]	; (800400c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d804      	bhi.n	8003fe0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f043 0304 	orr.w	r3, r3, #4
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	e005      	b.n	8003fec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f043 0310 	orr.w	r3, r3, #16
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e000      	b.n	8003fec <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003fea:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	611a      	str	r2, [r3, #16]
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	01312cff 	.word	0x01312cff
 8004000:	02160ebf 	.word	0x02160ebf
 8004004:	03938700 	.word	0x03938700
 8004008:	05f5e0ff 	.word	0x05f5e0ff
 800400c:	08f0d17f 	.word	0x08f0d17f

08004010 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004048:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800404c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800405a:	2001      	movs	r0, #1
 800405c:	f7fe f858 	bl	8002110 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800406a:	6193      	str	r3, [r2, #24]
}
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4b51      	ldr	r3, [pc, #324]	; (80041d0 <ETH_SetMACConfig+0x15c>)
 800408a:	4013      	ands	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	7c1b      	ldrb	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <ETH_SetMACConfig+0x28>
 8004096:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800409a:	e000      	b.n	800409e <ETH_SetMACConfig+0x2a>
 800409c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	7c5b      	ldrb	r3, [r3, #17]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d102      	bne.n	80040ac <ETH_SetMACConfig+0x38>
 80040a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040aa:	e000      	b.n	80040ae <ETH_SetMACConfig+0x3a>
 80040ac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80040ae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80040b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	7fdb      	ldrb	r3, [r3, #31]
 80040ba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80040bc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	7f92      	ldrb	r2, [r2, #30]
 80040c8:	2a00      	cmp	r2, #0
 80040ca:	d102      	bne.n	80040d2 <ETH_SetMACConfig+0x5e>
 80040cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040d0:	e000      	b.n	80040d4 <ETH_SetMACConfig+0x60>
 80040d2:	2200      	movs	r2, #0
                        macconf->Speed |
 80040d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	7f1b      	ldrb	r3, [r3, #28]
 80040da:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040dc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	791b      	ldrb	r3, [r3, #4]
 80040e8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80040ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 80040f2:	2a00      	cmp	r2, #0
 80040f4:	d102      	bne.n	80040fc <ETH_SetMACConfig+0x88>
 80040f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040fa:	e000      	b.n	80040fe <ETH_SetMACConfig+0x8a>
 80040fc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80040fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	7bdb      	ldrb	r3, [r3, #15]
 8004104:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004106:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800410c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004114:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004116:	4313      	orrs	r3, r2
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800412e:	2001      	movs	r0, #1
 8004130:	f7fd ffee 	bl	8002110 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	f64f 7341 	movw	r3, #65345	; 0xff41
 800414a:	4013      	ands	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004152:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800415a:	2a00      	cmp	r2, #0
 800415c:	d101      	bne.n	8004162 <ETH_SetMACConfig+0xee>
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	e000      	b.n	8004164 <ETH_SetMACConfig+0xf0>
 8004162:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004164:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800416a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004172:	2a01      	cmp	r2, #1
 8004174:	d101      	bne.n	800417a <ETH_SetMACConfig+0x106>
 8004176:	2208      	movs	r2, #8
 8004178:	e000      	b.n	800417c <ETH_SetMACConfig+0x108>
 800417a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800417c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004184:	2a01      	cmp	r2, #1
 8004186:	d101      	bne.n	800418c <ETH_SetMACConfig+0x118>
 8004188:	2204      	movs	r2, #4
 800418a:	e000      	b.n	800418e <ETH_SetMACConfig+0x11a>
 800418c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800418e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004196:	2a01      	cmp	r2, #1
 8004198:	d101      	bne.n	800419e <ETH_SetMACConfig+0x12a>
 800419a:	2202      	movs	r2, #2
 800419c:	e000      	b.n	80041a0 <ETH_SetMACConfig+0x12c>
 800419e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80041a0:	4313      	orrs	r3, r2
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041b8:	2001      	movs	r0, #1
 80041ba:	f7fd ffa9 	bl	8002110 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	619a      	str	r2, [r3, #24]
}
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	ff20810f 	.word	0xff20810f

080041d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <ETH_SetDMAConfig+0x110>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	7b1b      	ldrb	r3, [r3, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d102      	bne.n	8004200 <ETH_SetDMAConfig+0x2c>
 80041fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80041fe:	e000      	b.n	8004202 <ETH_SetDMAConfig+0x2e>
 8004200:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	7b5b      	ldrb	r3, [r3, #13]
 8004206:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004208:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	7f52      	ldrb	r2, [r2, #29]
 800420e:	2a00      	cmp	r2, #0
 8004210:	d102      	bne.n	8004218 <ETH_SetDMAConfig+0x44>
 8004212:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004216:	e000      	b.n	800421a <ETH_SetDMAConfig+0x46>
 8004218:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800421a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	7b9b      	ldrb	r3, [r3, #14]
 8004220:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004222:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004228:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	7f1b      	ldrb	r3, [r3, #28]
 800422e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004230:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	7f9b      	ldrb	r3, [r3, #30]
 8004236:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004238:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800423e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004246:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004248:	4313      	orrs	r3, r2
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004258:	461a      	mov	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800426a:	2001      	movs	r0, #1
 800426c:	f7fd ff50 	bl	8002110 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004278:	461a      	mov	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	791b      	ldrb	r3, [r3, #4]
 8004282:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004288:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800428e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004294:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800429c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800429e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80042a6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80042ac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042ba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042c8:	2001      	movs	r0, #1
 80042ca:	f7fd ff21 	bl	8002110 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d6:	461a      	mov	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6013      	str	r3, [r2, #0]
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	f8de3f23 	.word	0xf8de3f23

080042e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b0a6      	sub	sp, #152	; 0x98
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80042fc:	2300      	movs	r3, #0
 80042fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004300:	2300      	movs	r3, #0
 8004302:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800430c:	2300      	movs	r3, #0
 800430e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004318:	2300      	movs	r3, #0
 800431a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800431e:	2300      	movs	r3, #0
 8004320:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004324:	2300      	movs	r3, #0
 8004326:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004328:	2300      	movs	r3, #0
 800432a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800432e:	2300      	movs	r3, #0
 8004330:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004338:	2300      	movs	r3, #0
 800433a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800433e:	2300      	movs	r3, #0
 8004340:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800434a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800434e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004354:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004356:	2300      	movs	r3, #0
 8004358:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800435c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004360:	4619      	mov	r1, r3
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fe86 	bl	8004074 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004368:	2301      	movs	r3, #1
 800436a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800436c:	2301      	movs	r3, #1
 800436e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004376:	2301      	movs	r3, #1
 8004378:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800437e:	2300      	movs	r3, #0
 8004380:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004384:	2300      	movs	r3, #0
 8004386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800438a:	2300      	movs	r3, #0
 800438c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800438e:	2301      	movs	r3, #1
 8004390:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004394:	2301      	movs	r3, #1
 8004396:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800439c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800439e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80043a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80043b8:	f107 0308 	add.w	r3, r7, #8
 80043bc:	4619      	mov	r1, r3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff ff08 	bl	80041d4 <ETH_SetDMAConfig>
}
 80043c4:	bf00      	nop
 80043c6:	3798      	adds	r7, #152	; 0x98
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3305      	adds	r3, #5
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	3204      	adds	r2, #4
 80043e4:	7812      	ldrb	r2, [r2, #0]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	4b11      	ldr	r3, [pc, #68]	; (8004434 <ETH_MACAddressConfig+0x68>)
 80043ee:	4413      	add	r3, r2
 80043f0:	461a      	mov	r2, r3
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3303      	adds	r3, #3
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	061a      	lsls	r2, r3, #24
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3302      	adds	r3, #2
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	041b      	lsls	r3, r3, #16
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3301      	adds	r3, #1
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	4313      	orrs	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <ETH_MACAddressConfig+0x6c>)
 800441e:	4413      	add	r3, r2
 8004420:	461a      	mov	r2, r3
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	6013      	str	r3, [r2, #0]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40028040 	.word	0x40028040
 8004438:	40028044 	.word	0x40028044

0800443c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e03e      	b.n	80044c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68d9      	ldr	r1, [r3, #12]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	440b      	add	r3, r1
 800445a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2200      	movs	r2, #0
 8004466:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2200      	movs	r2, #0
 800446c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2200      	movs	r2, #0
 8004472:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	3206      	adds	r2, #6
 800447c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d80c      	bhi.n	80044ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68d9      	ldr	r1, [r3, #12]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	440b      	add	r3, r1
 80044a4:	461a      	mov	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	60da      	str	r2, [r3, #12]
 80044aa:	e004      	b.n	80044b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	461a      	mov	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3301      	adds	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d9bd      	bls.n	800444a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e0:	611a      	str	r2, [r3, #16]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b085      	sub	sp, #20
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e046      	b.n	800458a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6919      	ldr	r1, [r3, #16]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	440b      	add	r3, r1
 800450c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2200      	movs	r2, #0
 8004518:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2200      	movs	r2, #0
 800451e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2200      	movs	r2, #0
 8004524:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2200      	movs	r2, #0
 800452a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2200      	movs	r2, #0
 8004530:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004538:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004540:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	3212      	adds	r2, #18
 8004556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d80c      	bhi.n	800457a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6919      	ldr	r1, [r3, #16]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	440b      	add	r3, r1
 8004572:	461a      	mov	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	e004      	b.n	8004584 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	461a      	mov	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3301      	adds	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b03      	cmp	r3, #3
 800458e:	d9b5      	bls.n	80044fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ba:	60da      	str	r2, [r3, #12]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b08d      	sub	sp, #52	; 0x34
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3318      	adds	r3, #24
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800460a:	d007      	beq.n	800461c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	3304      	adds	r3, #4
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800461c:	2302      	movs	r3, #2
 800461e:	e0ff      	b.n	8004820 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	3301      	adds	r3, #1
 8004624:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	4b7d      	ldr	r3, [pc, #500]	; (800482c <ETH_Prepare_Tx_Descriptors+0x264>)
 8004636:	4013      	ands	r3, r2
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	6852      	ldr	r2, [r2, #4]
 800463c:	431a      	orrs	r2, r3
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	431a      	orrs	r2, r3
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	431a      	orrs	r2, r3
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80046a2:	f3bf 8f5f 	dmb	sy
}
 80046a6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80046b4:	e082      	b.n	80047bc <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d006      	beq.n	80046d6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	e005      	b.n	80046e2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	3301      	adds	r3, #1
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d902      	bls.n	80046f4 <ETH_Prepare_Tx_Descriptors+0x12c>
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	3b04      	subs	r3, #4
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046fc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004716:	d007      	beq.n	8004728 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	3304      	adds	r3, #4
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d029      	beq.n	800477c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004734:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004736:	2300      	movs	r3, #0
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
 800473a:	e019      	b.n	8004770 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800473c:	f3bf 8f5f 	dmb	sy
}
 8004740:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	3301      	adds	r3, #1
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	2b03      	cmp	r3, #3
 8004758:	d902      	bls.n	8004760 <ETH_Prepare_Tx_Descriptors+0x198>
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	3b04      	subs	r3, #4
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004768:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	3301      	adds	r3, #1
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	429a      	cmp	r2, r3
 8004776:	d3e1      	bcc.n	800473c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004778:	2302      	movs	r3, #2
 800477a:	e051      	b.n	8004820 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	3301      	adds	r3, #1
 8004780:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	4b25      	ldr	r3, [pc, #148]	; (800482c <ETH_Prepare_Tx_Descriptors+0x264>)
 8004798:	4013      	ands	r3, r2
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	6852      	ldr	r2, [r2, #4]
 800479e:	431a      	orrs	r2, r3
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	3301      	adds	r3, #1
 80047a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80047aa:	f3bf 8f5f 	dmb	sy
}
 80047ae:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f47f af78 	bne.w	80046b6 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d006      	beq.n	80047da <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e005      	b.n	80047e6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047f6:	6979      	ldr	r1, [r7, #20]
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	3304      	adds	r3, #4
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004806:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004808:	b672      	cpsid	i
}
 800480a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	4413      	add	r3, r2
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800481a:	b662      	cpsie	i
}
 800481c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3734      	adds	r7, #52	; 0x34
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	ffffe000 	.word	0xffffe000

08004830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004830:	b480      	push	{r7}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	e175      	b.n	8004b3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004850:	2201      	movs	r2, #1
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4013      	ands	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	429a      	cmp	r2, r3
 800486a:	f040 8164 	bne.w	8004b36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d005      	beq.n	8004886 <HAL_GPIO_Init+0x56>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d130      	bne.n	80048e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	2203      	movs	r2, #3
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048bc:	2201      	movs	r2, #1
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 0201 	and.w	r2, r3, #1
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d017      	beq.n	8004924 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	2203      	movs	r2, #3
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d123      	bne.n	8004978 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	08da      	lsrs	r2, r3, #3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3208      	adds	r2, #8
 8004938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	220f      	movs	r2, #15
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	08da      	lsrs	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3208      	adds	r2, #8
 8004972:	69b9      	ldr	r1, [r7, #24]
 8004974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	2203      	movs	r2, #3
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4013      	ands	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 0203 	and.w	r2, r3, #3
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80be 	beq.w	8004b36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ba:	4b66      	ldr	r3, [pc, #408]	; (8004b54 <HAL_GPIO_Init+0x324>)
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	4a65      	ldr	r2, [pc, #404]	; (8004b54 <HAL_GPIO_Init+0x324>)
 80049c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049c4:	6453      	str	r3, [r2, #68]	; 0x44
 80049c6:	4b63      	ldr	r3, [pc, #396]	; (8004b54 <HAL_GPIO_Init+0x324>)
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80049d2:	4a61      	ldr	r2, [pc, #388]	; (8004b58 <HAL_GPIO_Init+0x328>)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	089b      	lsrs	r3, r3, #2
 80049d8:	3302      	adds	r3, #2
 80049da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	220f      	movs	r2, #15
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4013      	ands	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a58      	ldr	r2, [pc, #352]	; (8004b5c <HAL_GPIO_Init+0x32c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d037      	beq.n	8004a6e <HAL_GPIO_Init+0x23e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a57      	ldr	r2, [pc, #348]	; (8004b60 <HAL_GPIO_Init+0x330>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d031      	beq.n	8004a6a <HAL_GPIO_Init+0x23a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a56      	ldr	r2, [pc, #344]	; (8004b64 <HAL_GPIO_Init+0x334>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d02b      	beq.n	8004a66 <HAL_GPIO_Init+0x236>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a55      	ldr	r2, [pc, #340]	; (8004b68 <HAL_GPIO_Init+0x338>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d025      	beq.n	8004a62 <HAL_GPIO_Init+0x232>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a54      	ldr	r2, [pc, #336]	; (8004b6c <HAL_GPIO_Init+0x33c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01f      	beq.n	8004a5e <HAL_GPIO_Init+0x22e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a53      	ldr	r2, [pc, #332]	; (8004b70 <HAL_GPIO_Init+0x340>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d019      	beq.n	8004a5a <HAL_GPIO_Init+0x22a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a52      	ldr	r2, [pc, #328]	; (8004b74 <HAL_GPIO_Init+0x344>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <HAL_GPIO_Init+0x226>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a51      	ldr	r2, [pc, #324]	; (8004b78 <HAL_GPIO_Init+0x348>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00d      	beq.n	8004a52 <HAL_GPIO_Init+0x222>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a50      	ldr	r2, [pc, #320]	; (8004b7c <HAL_GPIO_Init+0x34c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <HAL_GPIO_Init+0x21e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a4f      	ldr	r2, [pc, #316]	; (8004b80 <HAL_GPIO_Init+0x350>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d101      	bne.n	8004a4a <HAL_GPIO_Init+0x21a>
 8004a46:	2309      	movs	r3, #9
 8004a48:	e012      	b.n	8004a70 <HAL_GPIO_Init+0x240>
 8004a4a:	230a      	movs	r3, #10
 8004a4c:	e010      	b.n	8004a70 <HAL_GPIO_Init+0x240>
 8004a4e:	2308      	movs	r3, #8
 8004a50:	e00e      	b.n	8004a70 <HAL_GPIO_Init+0x240>
 8004a52:	2307      	movs	r3, #7
 8004a54:	e00c      	b.n	8004a70 <HAL_GPIO_Init+0x240>
 8004a56:	2306      	movs	r3, #6
 8004a58:	e00a      	b.n	8004a70 <HAL_GPIO_Init+0x240>
 8004a5a:	2305      	movs	r3, #5
 8004a5c:	e008      	b.n	8004a70 <HAL_GPIO_Init+0x240>
 8004a5e:	2304      	movs	r3, #4
 8004a60:	e006      	b.n	8004a70 <HAL_GPIO_Init+0x240>
 8004a62:	2303      	movs	r3, #3
 8004a64:	e004      	b.n	8004a70 <HAL_GPIO_Init+0x240>
 8004a66:	2302      	movs	r3, #2
 8004a68:	e002      	b.n	8004a70 <HAL_GPIO_Init+0x240>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <HAL_GPIO_Init+0x240>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	f002 0203 	and.w	r2, r2, #3
 8004a76:	0092      	lsls	r2, r2, #2
 8004a78:	4093      	lsls	r3, r2
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a80:	4935      	ldr	r1, [pc, #212]	; (8004b58 <HAL_GPIO_Init+0x328>)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	089b      	lsrs	r3, r3, #2
 8004a86:	3302      	adds	r3, #2
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a8e:	4b3d      	ldr	r3, [pc, #244]	; (8004b84 <HAL_GPIO_Init+0x354>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	43db      	mvns	r3, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ab2:	4a34      	ldr	r2, [pc, #208]	; (8004b84 <HAL_GPIO_Init+0x354>)
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ab8:	4b32      	ldr	r3, [pc, #200]	; (8004b84 <HAL_GPIO_Init+0x354>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004adc:	4a29      	ldr	r2, [pc, #164]	; (8004b84 <HAL_GPIO_Init+0x354>)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ae2:	4b28      	ldr	r3, [pc, #160]	; (8004b84 <HAL_GPIO_Init+0x354>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	43db      	mvns	r3, r3
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4013      	ands	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b06:	4a1f      	ldr	r2, [pc, #124]	; (8004b84 <HAL_GPIO_Init+0x354>)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b0c:	4b1d      	ldr	r3, [pc, #116]	; (8004b84 <HAL_GPIO_Init+0x354>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	43db      	mvns	r3, r3
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b30:	4a14      	ldr	r2, [pc, #80]	; (8004b84 <HAL_GPIO_Init+0x354>)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	2b0f      	cmp	r3, #15
 8004b40:	f67f ae86 	bls.w	8004850 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	3724      	adds	r7, #36	; 0x24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40023800 	.word	0x40023800
 8004b58:	40013800 	.word	0x40013800
 8004b5c:	40020000 	.word	0x40020000
 8004b60:	40020400 	.word	0x40020400
 8004b64:	40020800 	.word	0x40020800
 8004b68:	40020c00 	.word	0x40020c00
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40021400 	.word	0x40021400
 8004b74:	40021800 	.word	0x40021800
 8004b78:	40021c00 	.word	0x40021c00
 8004b7c:	40022000 	.word	0x40022000
 8004b80:	40022400 	.word	0x40022400
 8004b84:	40013c00 	.word	0x40013c00

08004b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	807b      	strh	r3, [r7, #2]
 8004b94:	4613      	mov	r3, r2
 8004b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b98:	787b      	ldrb	r3, [r7, #1]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b9e:	887a      	ldrh	r2, [r7, #2]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ba4:	e003      	b.n	8004bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ba6:	887b      	ldrh	r3, [r7, #2]
 8004ba8:	041a      	lsls	r2, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	619a      	str	r2, [r3, #24]
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e07f      	b.n	8004cce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fc fb06 	bl	80011f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2224      	movs	r2, #36	; 0x24
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d107      	bne.n	8004c36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	e006      	b.n	8004c44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d104      	bne.n	8004c56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b1d      	ldr	r3, [pc, #116]	; (8004cd8 <HAL_I2C_Init+0x11c>)
 8004c62:	430b      	orrs	r3, r1
 8004c64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69d9      	ldr	r1, [r3, #28]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1a      	ldr	r2, [r3, #32]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	02008000 	.word	0x02008000

08004cdc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	817b      	strh	r3, [r7, #10]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	813b      	strh	r3, [r7, #8]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	f040 80ed 	bne.w	8004ede <HAL_I2C_Mem_Write+0x202>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
      return  HAL_ERROR;
    }
	*/
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_I2C_Mem_Write+0x36>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e0e6      	b.n	8004ee0 <HAL_I2C_Mem_Write+0x204>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d1a:	f7fd f9ed 	bl	80020f8 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	2319      	movs	r3, #25
 8004d26:	2201      	movs	r2, #1
 8004d28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f001 fbe2 	bl	80064f6 <I2C_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_I2C_Mem_Write+0x60>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0d1      	b.n	8004ee0 <HAL_I2C_Mem_Write+0x204>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2221      	movs	r2, #33	; 0x21
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2240      	movs	r2, #64	; 0x40
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a3a      	ldr	r2, [r7, #32]
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d64:	88f8      	ldrh	r0, [r7, #6]
 8004d66:	893a      	ldrh	r2, [r7, #8]
 8004d68:	8979      	ldrh	r1, [r7, #10]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	4603      	mov	r3, r0
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fe9d 	bl	8005ab4 <I2C_RequestMemoryWrite>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_I2C_Mem_Write+0xb0>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0a9      	b.n	8004ee0 <HAL_I2C_Mem_Write+0x204>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2bff      	cmp	r3, #255	; 0xff
 8004d94:	d90e      	bls.n	8004db4 <HAL_I2C_Mem_Write+0xd8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	22ff      	movs	r2, #255	; 0xff
 8004d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	8979      	ldrh	r1, [r7, #10]
 8004da4:	2300      	movs	r3, #0
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f001 fd3f 	bl	8006830 <I2C_TransferConfig>
 8004db2:	e00f      	b.n	8004dd4 <HAL_I2C_Mem_Write+0xf8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	8979      	ldrh	r1, [r7, #10]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f001 fd2e 	bl	8006830 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f001 fbcc 	bl	8006576 <I2C_WaitOnTXISFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_I2C_Mem_Write+0x10c>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e07b      	b.n	8004ee0 <HAL_I2C_Mem_Write+0x204>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d034      	beq.n	8004e8c <HAL_I2C_Mem_Write+0x1b0>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d130      	bne.n	8004e8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	2200      	movs	r2, #0
 8004e32:	2180      	movs	r1, #128	; 0x80
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f001 fb5e 	bl	80064f6 <I2C_WaitOnFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_I2C_Mem_Write+0x168>
        {
          return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e04d      	b.n	8004ee0 <HAL_I2C_Mem_Write+0x204>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2bff      	cmp	r3, #255	; 0xff
 8004e4c:	d90e      	bls.n	8004e6c <HAL_I2C_Mem_Write+0x190>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	22ff      	movs	r2, #255	; 0xff
 8004e52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	8979      	ldrh	r1, [r7, #10]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f001 fce3 	bl	8006830 <I2C_TransferConfig>
 8004e6a:	e00f      	b.n	8004e8c <HAL_I2C_Mem_Write+0x1b0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	8979      	ldrh	r1, [r7, #10]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f001 fcd2 	bl	8006830 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d19e      	bne.n	8004dd4 <HAL_I2C_Mem_Write+0xf8>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f001 fbab 	bl	80065f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_I2C_Mem_Write+0x1ce>
    {
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e01a      	b.n	8004ee0 <HAL_I2C_Mem_Write+0x204>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6859      	ldr	r1, [r3, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <HAL_I2C_Mem_Write+0x20c>)
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e000      	b.n	8004ee0 <HAL_I2C_Mem_Write+0x204>
  }
  else
  {
    return HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
  }
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	fe00e800 	.word	0xfe00e800

08004eec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4603      	mov	r3, r0
 8004efc:	817b      	strh	r3, [r7, #10]
 8004efe:	460b      	mov	r3, r1
 8004f00:	813b      	strh	r3, [r7, #8]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	f040 80f1 	bne.w	80050f6 <HAL_I2C_Mem_Read+0x20a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
      return  HAL_ERROR;
    }
*/
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_I2C_Mem_Read+0x36>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e0ea      	b.n	80050f8 <HAL_I2C_Mem_Read+0x20c>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f2a:	f7fd f8e5 	bl	80020f8 <HAL_GetTick>
 8004f2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	2319      	movs	r3, #25
 8004f36:	2201      	movs	r2, #1
 8004f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f001 fada 	bl	80064f6 <I2C_WaitOnFlagUntilTimeout>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_I2C_Mem_Read+0x60>
    {
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0d5      	b.n	80050f8 <HAL_I2C_Mem_Read+0x20c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2222      	movs	r2, #34	; 0x22
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2240      	movs	r2, #64	; 0x40
 8004f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a3a      	ldr	r2, [r7, #32]
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f74:	88f8      	ldrh	r0, [r7, #6]
 8004f76:	893a      	ldrh	r2, [r7, #8]
 8004f78:	8979      	ldrh	r1, [r7, #10]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	4603      	mov	r3, r0
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fde9 	bl	8005b5c <I2C_RequestMemoryRead>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <HAL_I2C_Mem_Read+0xb0>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0ad      	b.n	80050f8 <HAL_I2C_Mem_Read+0x20c>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2bff      	cmp	r3, #255	; 0xff
 8004fa4:	d90e      	bls.n	8004fc4 <HAL_I2C_Mem_Read+0xd8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	22ff      	movs	r2, #255	; 0xff
 8004faa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	8979      	ldrh	r1, [r7, #10]
 8004fb4:	4b52      	ldr	r3, [pc, #328]	; (8005100 <HAL_I2C_Mem_Read+0x214>)
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f001 fc37 	bl	8006830 <I2C_TransferConfig>
 8004fc2:	e00f      	b.n	8004fe4 <HAL_I2C_Mem_Read+0xf8>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	8979      	ldrh	r1, [r7, #10]
 8004fd6:	4b4a      	ldr	r3, [pc, #296]	; (8005100 <HAL_I2C_Mem_Read+0x214>)
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f001 fc26 	bl	8006830 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fea:	2200      	movs	r2, #0
 8004fec:	2104      	movs	r1, #4
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f001 fa81 	bl	80064f6 <I2C_WaitOnFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_I2C_Mem_Read+0x112>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e07c      	b.n	80050f8 <HAL_I2C_Mem_Read+0x20c>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d034      	beq.n	80050a4 <HAL_I2C_Mem_Read+0x1b8>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503e:	2b00      	cmp	r3, #0
 8005040:	d130      	bne.n	80050a4 <HAL_I2C_Mem_Read+0x1b8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	2200      	movs	r2, #0
 800504a:	2180      	movs	r1, #128	; 0x80
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f001 fa52 	bl	80064f6 <I2C_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_I2C_Mem_Read+0x170>
        {
          return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e04d      	b.n	80050f8 <HAL_I2C_Mem_Read+0x20c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	2bff      	cmp	r3, #255	; 0xff
 8005064:	d90e      	bls.n	8005084 <HAL_I2C_Mem_Read+0x198>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	22ff      	movs	r2, #255	; 0xff
 800506a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005070:	b2da      	uxtb	r2, r3
 8005072:	8979      	ldrh	r1, [r7, #10]
 8005074:	2300      	movs	r3, #0
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f001 fbd7 	bl	8006830 <I2C_TransferConfig>
 8005082:	e00f      	b.n	80050a4 <HAL_I2C_Mem_Read+0x1b8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005092:	b2da      	uxtb	r2, r3
 8005094:	8979      	ldrh	r1, [r7, #10]
 8005096:	2300      	movs	r3, #0
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f001 fbc6 	bl	8006830 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d19a      	bne.n	8004fe4 <HAL_I2C_Mem_Read+0xf8>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f001 fa9f 	bl	80065f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_I2C_Mem_Read+0x1d6>
    {
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e01a      	b.n	80050f8 <HAL_I2C_Mem_Read+0x20c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2220      	movs	r2, #32
 80050c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6859      	ldr	r1, [r3, #4]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <HAL_I2C_Mem_Read+0x218>)
 80050d6:	400b      	ands	r3, r1
 80050d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e000      	b.n	80050f8 <HAL_I2C_Mem_Read+0x20c>
  }
  else
  {
    return HAL_BUSY;
 80050f6:	2302      	movs	r3, #2
  }
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	80002400 	.word	0x80002400
 8005104:	fe00e800 	.word	0xfe00e800

08005108 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	4608      	mov	r0, r1
 8005112:	4611      	mov	r1, r2
 8005114:	461a      	mov	r2, r3
 8005116:	4603      	mov	r3, r0
 8005118:	817b      	strh	r3, [r7, #10]
 800511a:	460b      	mov	r3, r1
 800511c:	813b      	strh	r3, [r7, #8]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b20      	cmp	r3, #32
 800512c:	d166      	bne.n	80051fc <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_I2C_Mem_Read_IT+0x32>
 8005134:	8bbb      	ldrh	r3, [r7, #28]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d105      	bne.n	8005146 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005140:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e05b      	b.n	80051fe <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005154:	d101      	bne.n	800515a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8005156:	2302      	movs	r3, #2
 8005158:	e051      	b.n	80051fe <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_I2C_Mem_Read_IT+0x60>
 8005164:	2302      	movs	r3, #2
 8005166:	e04a      	b.n	80051fe <HAL_I2C_Mem_Read_IT+0xf6>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2222      	movs	r2, #34	; 0x22
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2240      	movs	r2, #64	; 0x40
 800517c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8bba      	ldrh	r2, [r7, #28]
 8005190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4a1c      	ldr	r2, [pc, #112]	; (8005208 <HAL_I2C_Mem_Read_IT+0x100>)
 8005196:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4a1c      	ldr	r2, [pc, #112]	; (800520c <HAL_I2C_Mem_Read_IT+0x104>)
 800519c:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 800519e:	897a      	ldrh	r2, [r7, #10]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d109      	bne.n	80051be <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051aa:	893b      	ldrh	r3, [r7, #8]
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ba:	651a      	str	r2, [r3, #80]	; 0x50
 80051bc:	e00b      	b.n	80051d6 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051be:	893b      	ldrh	r3, [r7, #8]
 80051c0:	0a1b      	lsrs	r3, r3, #8
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80051cc:	893b      	ldrh	r3, [r7, #8]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	461a      	mov	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	8979      	ldrh	r1, [r7, #10]
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <HAL_I2C_Mem_Read_IT+0x108>)
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	2300      	movs	r3, #0
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f001 fb24 	bl	8006830 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, (I2C_XFER_TX_IT | I2C_XFER_RX_IT));
 80051f0:	2103      	movs	r1, #3
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f001 fb4e 	bl	8006894 <I2C_Enable_IRQ>

    return HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e000      	b.n	80051fe <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 80051fc:	2302      	movs	r3, #2
  }
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	ffff0000 	.word	0xffff0000
 800520c:	08005305 	.word	0x08005305
 8005210:	80002000 	.word	0x80002000

08005214 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	68f9      	ldr	r1, [r7, #12]
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4798      	blx	r3
  }
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
 80052a4:	4613      	mov	r3, r2
 80052a6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af02      	add	r7, sp, #8
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005310:	4b89      	ldr	r3, [pc, #548]	; (8005538 <I2C_Mem_ISR_IT+0x234>)
 8005312:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <I2C_Mem_ISR_IT+0x22>
 8005322:	2302      	movs	r3, #2
 8005324:	e104      	b.n	8005530 <I2C_Mem_ISR_IT+0x22c>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	d012      	beq.n	800535e <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00d      	beq.n	800535e <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2210      	movs	r2, #16
 8005348:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	f043 0204 	orr.w	r2, r3, #4
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f001 f88b 	bl	8006472 <I2C_Flush_TXDR>
 800535c:	e0d5      	b.n	800550a <I2C_Mem_ISR_IT+0x206>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d022      	beq.n	80053ae <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01d      	beq.n	80053ae <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f023 0304 	bic.w	r3, r3, #4
 8005378:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053ac:	e0ad      	b.n	800550a <I2C_Mem_ISR_IT+0x206>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d02c      	beq.n	8005412 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d027      	beq.n	8005412 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ca:	d118      	bne.n	80053fe <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	781a      	ldrb	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80053fc:	e085      	b.n	800550a <I2C_Mem_ISR_IT+0x206>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005406:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f04f 32ff 	mov.w	r2, #4294967295
 800540e:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8005410:	e07b      	b.n	800550a <I2C_Mem_ISR_IT+0x206>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005418:	2b00      	cmp	r3, #0
 800541a:	d03c      	beq.n	8005496 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005422:	2b00      	cmp	r3, #0
 8005424:	d037      	beq.n	8005496 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d02c      	beq.n	800548a <I2C_Mem_ISR_IT+0x186>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005434:	2b00      	cmp	r3, #0
 8005436:	d128      	bne.n	800548a <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	2bff      	cmp	r3, #255	; 0xff
 8005440:	d910      	bls.n	8005464 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	22ff      	movs	r2, #255	; 0xff
 8005446:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544c:	b299      	uxth	r1, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005452:	b2da      	uxtb	r2, r3
 8005454:	2300      	movs	r3, #0
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f001 f9e7 	bl	8006830 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005462:	e017      	b.n	8005494 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005472:	b299      	uxth	r1, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005478:	b2da      	uxtb	r2, r3
 800547a:	2300      	movs	r3, #0
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f001 f9d4 	bl	8006830 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005488:	e004      	b.n	8005494 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800548a:	2140      	movs	r1, #64	; 0x40
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 fef9 	bl	8006284 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005492:	e03a      	b.n	800550a <I2C_Mem_ISR_IT+0x206>
 8005494:	e039      	b.n	800550a <I2C_Mem_ISR_IT+0x206>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	d034      	beq.n	800550a <I2C_Mem_ISR_IT+0x206>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d02f      	beq.n	800550a <I2C_Mem_ISR_IT+0x206>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b22      	cmp	r3, #34	; 0x22
 80054b4:	d101      	bne.n	80054ba <I2C_Mem_ISR_IT+0x1b6>
    {
      direction = I2C_GENERATE_START_READ;
 80054b6:	4b21      	ldr	r3, [pc, #132]	; (800553c <I2C_Mem_ISR_IT+0x238>)
 80054b8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2bff      	cmp	r3, #255	; 0xff
 80054c2:	d910      	bls.n	80054e6 <I2C_Mem_ISR_IT+0x1e2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	22ff      	movs	r2, #255	; 0xff
 80054c8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ce:	b299      	uxth	r1, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f001 f9a6 	bl	8006830 <I2C_TransferConfig>
 80054e4:	e011      	b.n	800550a <I2C_Mem_ISR_IT+0x206>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f4:	b299      	uxth	r1, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f001 f993 	bl	8006830 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <I2C_Mem_ISR_IT+0x222>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <I2C_Mem_ISR_IT+0x222>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800551e:	6939      	ldr	r1, [r7, #16]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 fc8d 	bl	8005e40 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	80002000 	.word	0x80002000
 800553c:	80002400 	.word	0x80002400

08005540 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <I2C_Slave_ISR_IT+0x24>
 8005560:	2302      	movs	r3, #2
 8005562:	e0e1      	b.n	8005728 <I2C_Slave_ISR_IT+0x1e8>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	d008      	beq.n	8005588 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005580:	6939      	ldr	r1, [r7, #16]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 fd24 	bl	8005fd0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b00      	cmp	r3, #0
 8005590:	d04b      	beq.n	800562a <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005598:	2b00      	cmp	r3, #0
 800559a:	d046      	beq.n	800562a <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d128      	bne.n	80055f8 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b28      	cmp	r3, #40	; 0x28
 80055b0:	d108      	bne.n	80055c4 <I2C_Slave_ISR_IT+0x84>
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055b8:	d104      	bne.n	80055c4 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80055ba:	6939      	ldr	r1, [r7, #16]
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 fe0d 	bl	80061dc <I2C_ITListenCplt>
 80055c2:	e031      	b.n	8005628 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b29      	cmp	r3, #41	; 0x29
 80055ce:	d10e      	bne.n	80055ee <I2C_Slave_ISR_IT+0xae>
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055d6:	d00a      	beq.n	80055ee <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2210      	movs	r2, #16
 80055de:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 ff46 	bl	8006472 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fbcd 	bl	8005d86 <I2C_ITSlaveSeqCplt>
 80055ec:	e01c      	b.n	8005628 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2210      	movs	r2, #16
 80055f4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80055f6:	e08f      	b.n	8005718 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2210      	movs	r2, #16
 80055fe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005604:	f043 0204 	orr.w	r2, r3, #4
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <I2C_Slave_ISR_IT+0xda>
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005618:	d17e      	bne.n	8005718 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	4619      	mov	r1, r3
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fe2f 	bl	8006284 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005626:	e077      	b.n	8005718 <I2C_Slave_ISR_IT+0x1d8>
 8005628:	e076      	b.n	8005718 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d02f      	beq.n	8005694 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800563a:	2b00      	cmp	r3, #0
 800563c:	d02a      	beq.n	8005694 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005642:	b29b      	uxth	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d018      	beq.n	800567a <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d14b      	bne.n	800571c <I2C_Slave_ISR_IT+0x1dc>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800568a:	d047      	beq.n	800571c <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fb7a 	bl	8005d86 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005692:	e043      	b.n	800571c <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80056a8:	6939      	ldr	r1, [r7, #16]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 faaa 	bl	8005c04 <I2C_ITAddrCplt>
 80056b0:	e035      	b.n	800571e <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d030      	beq.n	800571e <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d02b      	beq.n	800571e <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d018      	beq.n	8005702 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8005700:	e00d      	b.n	800571e <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005708:	d002      	beq.n	8005710 <I2C_Slave_ISR_IT+0x1d0>
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d106      	bne.n	800571e <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 fb38 	bl	8005d86 <I2C_ITSlaveSeqCplt>
 8005716:	e002      	b.n	800571e <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8005718:	bf00      	nop
 800571a:	e000      	b.n	800571e <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800571c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af02      	add	r7, sp, #8
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <I2C_Master_ISR_DMA+0x1a>
 8005746:	2302      	movs	r3, #2
 8005748:	e0d9      	b.n	80058fe <I2C_Master_ISR_DMA+0x1ce>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b00      	cmp	r3, #0
 800575a:	d016      	beq.n	800578a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005762:	2b00      	cmp	r3, #0
 8005764:	d011      	beq.n	800578a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2210      	movs	r2, #16
 800576c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005772:	f043 0204 	orr.w	r2, r3, #4
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800577a:	2120      	movs	r1, #32
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f001 f889 	bl	8006894 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fe75 	bl	8006472 <I2C_Flush_TXDR>
 8005788:	e0b4      	b.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005790:	2b00      	cmp	r3, #0
 8005792:	d071      	beq.n	8005878 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800579a:	2b00      	cmp	r3, #0
 800579c:	d06c      	beq.n	8005878 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ac:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d04e      	beq.n	8005856 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057c4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2bff      	cmp	r3, #255	; 0xff
 80057ce:	d906      	bls.n	80057de <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	22ff      	movs	r2, #255	; 0xff
 80057d4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80057d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e010      	b.n	8005800 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057f0:	d003      	beq.n	80057fa <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	e002      	b.n	8005800 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80057fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057fe:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005804:	b2da      	uxtb	r2, r3
 8005806:	8a79      	ldrh	r1, [r7, #18]
 8005808:	2300      	movs	r3, #0
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f001 f80e 	bl	8006830 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b22      	cmp	r3, #34	; 0x22
 8005830:	d108      	bne.n	8005844 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005840:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005842:	e057      	b.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005852:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005854:	e04e      	b.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005864:	d003      	beq.n	800586e <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fa50 	bl	8005d0c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800586c:	e042      	b.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800586e:	2140      	movs	r1, #64	; 0x40
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 fd07 	bl	8006284 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005876:	e03d      	b.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d028      	beq.n	80058d4 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005888:	2b00      	cmp	r3, #0
 800588a:	d023      	beq.n	80058d4 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d119      	bne.n	80058ca <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058a4:	d025      	beq.n	80058f2 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058ae:	d108      	bne.n	80058c2 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058be:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80058c0:	e017      	b.n	80058f2 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 fa22 	bl	8005d0c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80058c8:	e013      	b.n	80058f2 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80058ca:	2140      	movs	r1, #64	; 0x40
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fcd9 	bl	8006284 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80058d2:	e00e      	b.n	80058f2 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 faa8 	bl	8005e40 <I2C_ITMasterCplt>
 80058f0:	e000      	b.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80058f2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b088      	sub	sp, #32
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <I2C_Slave_ISR_DMA+0x24>
 8005926:	2302      	movs	r3, #2
 8005928:	e0bf      	b.n	8005aaa <I2C_Slave_ISR_DMA+0x1a4>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d008      	beq.n	800594e <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fb41 	bl	8005fd0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8095 	beq.w	8005a84 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 808f 	beq.w	8005a84 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005976:	2b00      	cmp	r3, #0
 8005978:	d07d      	beq.n	8005a76 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00c      	beq.n	800599c <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8005998:	2301      	movs	r3, #1
 800599a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00c      	beq.n	80059be <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80059ba:	2301      	movs	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d128      	bne.n	8005a16 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b28      	cmp	r3, #40	; 0x28
 80059ce:	d108      	bne.n	80059e2 <I2C_Slave_ISR_DMA+0xdc>
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059d6:	d104      	bne.n	80059e2 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fbfe 	bl	80061dc <I2C_ITListenCplt>
 80059e0:	e048      	b.n	8005a74 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b29      	cmp	r3, #41	; 0x29
 80059ec:	d10e      	bne.n	8005a0c <I2C_Slave_ISR_DMA+0x106>
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059f4:	d00a      	beq.n	8005a0c <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2210      	movs	r2, #16
 80059fc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 fd37 	bl	8006472 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f9be 	bl	8005d86 <I2C_ITSlaveSeqCplt>
 8005a0a:	e033      	b.n	8005a74 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2210      	movs	r2, #16
 8005a12:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005a14:	e034      	b.n	8005a80 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2210      	movs	r2, #16
 8005a1c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a22:	f043 0204 	orr.w	r2, r3, #4
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a30:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <I2C_Slave_ISR_DMA+0x13a>
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a3e:	d11f      	bne.n	8005a80 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	2b21      	cmp	r3, #33	; 0x21
 8005a44:	d002      	beq.n	8005a4c <I2C_Slave_ISR_DMA+0x146>
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
 8005a48:	2b29      	cmp	r3, #41	; 0x29
 8005a4a:	d103      	bne.n	8005a54 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2221      	movs	r2, #33	; 0x21
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30
 8005a52:	e008      	b.n	8005a66 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	2b22      	cmp	r3, #34	; 0x22
 8005a58:	d002      	beq.n	8005a60 <I2C_Slave_ISR_DMA+0x15a>
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
 8005a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a5e:	d102      	bne.n	8005a66 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2222      	movs	r2, #34	; 0x22
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fc09 	bl	8006284 <I2C_ITError>
      if (treatdmanack == 1U)
 8005a72:	e005      	b.n	8005a80 <I2C_Slave_ISR_DMA+0x17a>
 8005a74:	e004      	b.n	8005a80 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2210      	movs	r2, #16
 8005a7c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005a7e:	e00f      	b.n	8005aa0 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8005a80:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005a82:	e00d      	b.n	8005aa0 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d008      	beq.n	8005aa0 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 f8b2 	bl	8005c04 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	4608      	mov	r0, r1
 8005abe:	4611      	mov	r1, r2
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	817b      	strh	r3, [r7, #10]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	813b      	strh	r3, [r7, #8]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	8979      	ldrh	r1, [r7, #10]
 8005ad4:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <I2C_RequestMemoryWrite+0xa4>)
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 fea7 	bl	8006830 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	69b9      	ldr	r1, [r7, #24]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 fd45 	bl	8006576 <I2C_WaitOnTXISFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e02c      	b.n	8005b50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d105      	bne.n	8005b08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005afc:	893b      	ldrh	r3, [r7, #8]
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	629a      	str	r2, [r3, #40]	; 0x28
 8005b06:	e015      	b.n	8005b34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b08:	893b      	ldrh	r3, [r7, #8]
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	69b9      	ldr	r1, [r7, #24]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fd2b 	bl	8006576 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e012      	b.n	8005b50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b2a:	893b      	ldrh	r3, [r7, #8]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2180      	movs	r1, #128	; 0x80
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 fcd9 	bl	80064f6 <I2C_WaitOnFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	80002000 	.word	0x80002000

08005b5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	4608      	mov	r0, r1
 8005b66:	4611      	mov	r1, r2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	817b      	strh	r3, [r7, #10]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	813b      	strh	r3, [r7, #8]
 8005b72:	4613      	mov	r3, r2
 8005b74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	8979      	ldrh	r1, [r7, #10]
 8005b7c:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <I2C_RequestMemoryRead+0xa4>)
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	2300      	movs	r3, #0
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fe54 	bl	8006830 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	69b9      	ldr	r1, [r7, #24]
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fcf2 	bl	8006576 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e02c      	b.n	8005bf6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b9c:	88fb      	ldrh	r3, [r7, #6]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d105      	bne.n	8005bae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ba2:	893b      	ldrh	r3, [r7, #8]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	629a      	str	r2, [r3, #40]	; 0x28
 8005bac:	e015      	b.n	8005bda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bae:	893b      	ldrh	r3, [r7, #8]
 8005bb0:	0a1b      	lsrs	r3, r3, #8
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	69b9      	ldr	r1, [r7, #24]
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 fcd8 	bl	8006576 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e012      	b.n	8005bf6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bd0:	893b      	ldrh	r3, [r7, #8]
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2200      	movs	r2, #0
 8005be2:	2140      	movs	r1, #64	; 0x40
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fc86 	bl	80064f6 <I2C_WaitOnFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	80002000 	.word	0x80002000

08005c04 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c1a:	2b28      	cmp	r3, #40	; 0x28
 8005c1c:	d16a      	bne.n	8005cf4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005c3c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c4a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005c58:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d138      	bne.n	8005cd4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005c62:	897b      	ldrh	r3, [r7, #10]
 8005c64:	09db      	lsrs	r3, r3, #7
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	89bb      	ldrh	r3, [r7, #12]
 8005c6a:	4053      	eors	r3, r2
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f003 0306 	and.w	r3, r3, #6
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d11c      	bne.n	8005cb0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005c76:	897b      	ldrh	r3, [r7, #10]
 8005c78:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d13b      	bne.n	8005d04 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2208      	movs	r2, #8
 8005c98:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ca2:	89ba      	ldrh	r2, [r7, #12]
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff faf5 	bl	8005298 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005cae:	e029      	b.n	8005d04 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005cb0:	893b      	ldrh	r3, [r7, #8]
 8005cb2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fe55 	bl	8006968 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005cc6:	89ba      	ldrh	r2, [r7, #12]
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff fae3 	bl	8005298 <HAL_I2C_AddrCallback>
}
 8005cd2:	e017      	b.n	8005d04 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fe45 	bl	8006968 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ce6:	89ba      	ldrh	r2, [r7, #12]
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	4619      	mov	r1, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff fad3 	bl	8005298 <HAL_I2C_AddrCallback>
}
 8005cf2:	e007      	b.n	8005d04 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b21      	cmp	r3, #33	; 0x21
 8005d26:	d115      	bne.n	8005d54 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2211      	movs	r2, #17
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fe12 	bl	8006968 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff fa7b 	bl	8005248 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d52:	e014      	b.n	8005d7e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2212      	movs	r2, #18
 8005d60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005d68:	2102      	movs	r1, #2
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fdfc 	bl	8006968 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff fa6f 	bl	800525c <HAL_I2C_MasterRxCpltCallback>
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	e00c      	b.n	8005dd4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dd2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b29      	cmp	r3, #41	; 0x29
 8005dde:	d112      	bne.n	8005e06 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2228      	movs	r2, #40	; 0x28
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2221      	movs	r2, #33	; 0x21
 8005dec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005dee:	2101      	movs	r1, #1
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fdb9 	bl	8006968 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff fa36 	bl	8005270 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e04:	e017      	b.n	8005e36 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e10:	d111      	bne.n	8005e36 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2228      	movs	r2, #40	; 0x28
 8005e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2222      	movs	r2, #34	; 0x22
 8005e1e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005e20:	2102      	movs	r1, #2
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fda0 	bl	8006968 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff fa27 	bl	8005284 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e36:	bf00      	nop
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2220      	movs	r2, #32
 8005e54:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b21      	cmp	r3, #33	; 0x21
 8005e60:	d107      	bne.n	8005e72 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e62:	2101      	movs	r1, #1
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fd7f 	bl	8006968 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2211      	movs	r2, #17
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30
 8005e70:	e00c      	b.n	8005e8c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b22      	cmp	r3, #34	; 0x22
 8005e7c:	d106      	bne.n	8005e8c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005e7e:	2102      	movs	r1, #2
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fd71 	bl	8006968 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2212      	movs	r2, #18
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6859      	ldr	r1, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4b4c      	ldr	r3, [pc, #304]	; (8005fc8 <I2C_ITMasterCplt+0x188>)
 8005e98:	400b      	ands	r3, r1
 8005e9a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a49      	ldr	r2, [pc, #292]	; (8005fcc <I2C_ITMasterCplt+0x18c>)
 8005ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f003 0310 	and.w	r3, r3, #16
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2210      	movs	r2, #16
 8005eb8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebe:	f043 0204 	orr.w	r2, r3, #4
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b60      	cmp	r3, #96	; 0x60
 8005ed0:	d10a      	bne.n	8005ee8 <I2C_ITMasterCplt+0xa8>
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fac2 	bl	8006472 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b60      	cmp	r3, #96	; 0x60
 8005efe:	d002      	beq.n	8005f06 <I2C_ITMasterCplt+0xc6>
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d006      	beq.n	8005f14 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f9b9 	bl	8006284 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f12:	e054      	b.n	8005fbe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b21      	cmp	r3, #33	; 0x21
 8005f1e:	d124      	bne.n	8005f6a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d10b      	bne.n	8005f52 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff f9bc 	bl	80052c8 <HAL_I2C_MemTxCpltCallback>
}
 8005f50:	e035      	b.n	8005fbe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff f970 	bl	8005248 <HAL_I2C_MasterTxCpltCallback>
}
 8005f68:	e029      	b.n	8005fbe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b22      	cmp	r3, #34	; 0x22
 8005f74:	d123      	bne.n	8005fbe <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b40      	cmp	r3, #64	; 0x40
 8005f8e:	d10b      	bne.n	8005fa8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7fb faeb 	bl	800157c <HAL_I2C_MemRxCpltCallback>
}
 8005fa6:	e00a      	b.n	8005fbe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff f94f 	bl	800525c <HAL_I2C_MasterRxCpltCallback>
}
 8005fbe:	bf00      	nop
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	fe00e800 	.word	0xfe00e800
 8005fcc:	ffff0000 	.word	0xffff0000

08005fd0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	2b21      	cmp	r3, #33	; 0x21
 8005ffa:	d002      	beq.n	8006002 <I2C_ITSlaveCplt+0x32>
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	2b29      	cmp	r3, #41	; 0x29
 8006000:	d108      	bne.n	8006014 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006002:	f248 0101 	movw	r1, #32769	; 0x8001
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fcae 	bl	8006968 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2221      	movs	r2, #33	; 0x21
 8006010:	631a      	str	r2, [r3, #48]	; 0x30
 8006012:	e00d      	b.n	8006030 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b22      	cmp	r3, #34	; 0x22
 8006018:	d002      	beq.n	8006020 <I2C_ITSlaveCplt+0x50>
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	2b2a      	cmp	r3, #42	; 0x2a
 800601e:	d107      	bne.n	8006030 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006020:	f248 0102 	movw	r1, #32770	; 0x8002
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fc9f 	bl	8006968 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2222      	movs	r2, #34	; 0x22
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800603e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6859      	ldr	r1, [r3, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	4b62      	ldr	r3, [pc, #392]	; (80061d4 <I2C_ITSlaveCplt+0x204>)
 800604c:	400b      	ands	r3, r1
 800604e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fa0e 	bl	8006472 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d013      	beq.n	8006088 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800606e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01f      	beq.n	80060b8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	b29a      	uxth	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006086:	e017      	b.n	80060b8 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d012      	beq.n	80060b8 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060a0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d006      	beq.n	80060b8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d020      	beq.n	8006104 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 0304 	bic.w	r3, r3, #4
 80060c8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00c      	beq.n	8006104 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006112:	f043 0204 	orr.w	r2, r3, #4
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612c:	2b00      	cmp	r3, #0
 800612e:	d010      	beq.n	8006152 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f8a4 	bl	8006284 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b28      	cmp	r3, #40	; 0x28
 8006146:	d141      	bne.n	80061cc <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006148:	6979      	ldr	r1, [r7, #20]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f846 	bl	80061dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006150:	e03c      	b.n	80061cc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800615a:	d014      	beq.n	8006186 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff fe12 	bl	8005d86 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a1c      	ldr	r2, [pc, #112]	; (80061d8 <I2C_ITSlaveCplt+0x208>)
 8006166:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff f898 	bl	80052b4 <HAL_I2C_ListenCpltCallback>
}
 8006184:	e022      	b.n	80061cc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b22      	cmp	r3, #34	; 0x22
 8006190:	d10e      	bne.n	80061b0 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff f86b 	bl	8005284 <HAL_I2C_SlaveRxCpltCallback>
}
 80061ae:	e00d      	b.n	80061cc <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff f852 	bl	8005270 <HAL_I2C_SlaveTxCpltCallback>
}
 80061cc:	bf00      	nop
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	fe00e800 	.word	0xfe00e800
 80061d8:	ffff0000 	.word	0xffff0000

080061dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a25      	ldr	r2, [pc, #148]	; (8006280 <I2C_ITListenCplt+0xa4>)
 80061ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	d022      	beq.n	8006258 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622e:	2b00      	cmp	r3, #0
 8006230:	d012      	beq.n	8006258 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006250:	f043 0204 	orr.w	r2, r3, #4
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006258:	f248 0103 	movw	r1, #32771	; 0x8003
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fb83 	bl	8006968 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2210      	movs	r2, #16
 8006268:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff f81e 	bl	80052b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	ffff0000 	.word	0xffff0000

08006284 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006294:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a5d      	ldr	r2, [pc, #372]	; (8006418 <I2C_ITError+0x194>)
 80062a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	2b28      	cmp	r3, #40	; 0x28
 80062ba:	d005      	beq.n	80062c8 <I2C_ITError+0x44>
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	2b29      	cmp	r3, #41	; 0x29
 80062c0:	d002      	beq.n	80062c8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2b2a      	cmp	r3, #42	; 0x2a
 80062c6:	d10b      	bne.n	80062e0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80062c8:	2103      	movs	r1, #3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fb4c 	bl	8006968 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2228      	movs	r2, #40	; 0x28
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a50      	ldr	r2, [pc, #320]	; (800641c <I2C_ITError+0x198>)
 80062dc:	635a      	str	r2, [r3, #52]	; 0x34
 80062de:	e011      	b.n	8006304 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80062e0:	f248 0103 	movw	r1, #32771	; 0x8003
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fb3f 	bl	8006968 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b60      	cmp	r3, #96	; 0x60
 80062f4:	d003      	beq.n	80062fe <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006308:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	2b00      	cmp	r3, #0
 8006310:	d039      	beq.n	8006386 <I2C_ITError+0x102>
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b11      	cmp	r3, #17
 8006316:	d002      	beq.n	800631e <I2C_ITError+0x9a>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b21      	cmp	r3, #33	; 0x21
 800631c:	d133      	bne.n	8006386 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800632c:	d107      	bne.n	800633e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800633c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	4618      	mov	r0, r3
 8006344:	f7fc ff38 	bl	80031b8 <HAL_DMA_GetState>
 8006348:	4603      	mov	r3, r0
 800634a:	2b01      	cmp	r3, #1
 800634c:	d017      	beq.n	800637e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006352:	4a33      	ldr	r2, [pc, #204]	; (8006420 <I2C_ITError+0x19c>)
 8006354:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	4618      	mov	r0, r3
 8006364:	f7fc fd7c 	bl	8002e60 <HAL_DMA_Abort_IT>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d04d      	beq.n	800640a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006378:	4610      	mov	r0, r2
 800637a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800637c:	e045      	b.n	800640a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f850 	bl	8006424 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006384:	e041      	b.n	800640a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d039      	beq.n	8006402 <I2C_ITError+0x17e>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b12      	cmp	r3, #18
 8006392:	d002      	beq.n	800639a <I2C_ITError+0x116>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b22      	cmp	r3, #34	; 0x22
 8006398:	d133      	bne.n	8006402 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a8:	d107      	bne.n	80063ba <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063b8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fc fefa 	bl	80031b8 <HAL_DMA_GetState>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d017      	beq.n	80063fa <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ce:	4a14      	ldr	r2, [pc, #80]	; (8006420 <I2C_ITError+0x19c>)
 80063d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fc fd3e 	bl	8002e60 <HAL_DMA_Abort_IT>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d011      	beq.n	800640e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80063f4:	4610      	mov	r0, r2
 80063f6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063f8:	e009      	b.n	800640e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f812 	bl	8006424 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006400:	e005      	b.n	800640e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f80e 	bl	8006424 <I2C_TreatErrorCallback>
  }
}
 8006408:	e002      	b.n	8006410 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800640a:	bf00      	nop
 800640c:	e000      	b.n	8006410 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800640e:	bf00      	nop
}
 8006410:	bf00      	nop
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	ffff0000 	.word	0xffff0000
 800641c:	08005541 	.word	0x08005541
 8006420:	080064bb 	.word	0x080064bb

08006424 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b60      	cmp	r3, #96	; 0x60
 8006436:	d10e      	bne.n	8006456 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fe ff4e 	bl	80052f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006454:	e009      	b.n	800646a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7fe ff39 	bl	80052dc <HAL_I2C_ErrorCallback>
}
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b02      	cmp	r3, #2
 8006486:	d103      	bne.n	8006490 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2200      	movs	r2, #0
 800648e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b01      	cmp	r3, #1
 800649c:	d007      	beq.n	80064ae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699a      	ldr	r2, [r3, #24]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 0201 	orr.w	r2, r2, #1
 80064ac:	619a      	str	r2, [r3, #24]
  }
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	2200      	movs	r2, #0
 80064d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e4:	2200      	movs	r2, #0
 80064e6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff ff9b 	bl	8006424 <I2C_TreatErrorCallback>
}
 80064ee:	bf00      	nop
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	603b      	str	r3, [r7, #0]
 8006502:	4613      	mov	r3, r2
 8006504:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006506:	e022      	b.n	800654e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650e:	d01e      	beq.n	800654e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006510:	f7fb fdf2 	bl	80020f8 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d302      	bcc.n	8006526 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d113      	bne.n	800654e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652a:	f043 0220 	orr.w	r2, r3, #32
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e00f      	b.n	800656e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699a      	ldr	r2, [r3, #24]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4013      	ands	r3, r2
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	429a      	cmp	r2, r3
 800655c:	bf0c      	ite	eq
 800655e:	2301      	moveq	r3, #1
 8006560:	2300      	movne	r3, #0
 8006562:	b2db      	uxtb	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	429a      	cmp	r2, r3
 800656a:	d0cd      	beq.n	8006508 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006582:	e02c      	b.n	80065de <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f871 	bl	8006670 <I2C_IsErrorOccurred>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e02a      	b.n	80065ee <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659e:	d01e      	beq.n	80065de <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a0:	f7fb fdaa 	bl	80020f8 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d302      	bcc.n	80065b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d113      	bne.n	80065de <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ba:	f043 0220 	orr.w	r2, r3, #32
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e007      	b.n	80065ee <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d1cb      	bne.n	8006584 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006602:	e028      	b.n	8006656 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 f831 	bl	8006670 <I2C_IsErrorOccurred>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e026      	b.n	8006666 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006618:	f7fb fd6e 	bl	80020f8 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	429a      	cmp	r2, r3
 8006626:	d302      	bcc.n	800662e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d113      	bne.n	8006656 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006632:	f043 0220 	orr.w	r2, r3, #32
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2220      	movs	r2, #32
 800663e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e007      	b.n	8006666 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	f003 0320 	and.w	r3, r3, #32
 8006660:	2b20      	cmp	r3, #32
 8006662:	d1cf      	bne.n	8006604 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	; 0x28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b00      	cmp	r3, #0
 800669a:	d068      	beq.n	800676e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2210      	movs	r2, #16
 80066a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066a4:	e049      	b.n	800673a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d045      	beq.n	800673a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066ae:	f7fb fd23 	bl	80020f8 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d302      	bcc.n	80066c4 <I2C_IsErrorOccurred+0x54>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d13a      	bne.n	800673a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e6:	d121      	bne.n	800672c <I2C_IsErrorOccurred+0xbc>
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066ee:	d01d      	beq.n	800672c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80066f0:	7cfb      	ldrb	r3, [r7, #19]
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d01a      	beq.n	800672c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006704:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006706:	f7fb fcf7 	bl	80020f8 <HAL_GetTick>
 800670a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800670c:	e00e      	b.n	800672c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800670e:	f7fb fcf3 	bl	80020f8 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b19      	cmp	r3, #25
 800671a:	d907      	bls.n	800672c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	f043 0320 	orr.w	r3, r3, #32
 8006722:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800672a:	e006      	b.n	800673a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b20      	cmp	r3, #32
 8006738:	d1e9      	bne.n	800670e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b20      	cmp	r3, #32
 8006746:	d003      	beq.n	8006750 <I2C_IsErrorOccurred+0xe0>
 8006748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0aa      	beq.n	80066a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006754:	2b00      	cmp	r3, #0
 8006756:	d103      	bne.n	8006760 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2220      	movs	r2, #32
 800675e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	f043 0304 	orr.w	r3, r3, #4
 8006766:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	f043 0301 	orr.w	r3, r3, #1
 8006786:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006790:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	f043 0308 	orr.w	r3, r3, #8
 80067a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	f043 0302 	orr.w	r3, r3, #2
 80067ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80067dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01c      	beq.n	800681e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7ff fe44 	bl	8006472 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6859      	ldr	r1, [r3, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	4b0d      	ldr	r3, [pc, #52]	; (800682c <I2C_IsErrorOccurred+0x1bc>)
 80067f6:	400b      	ands	r3, r1
 80067f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	431a      	orrs	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800681e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006822:	4618      	mov	r0, r3
 8006824:	3728      	adds	r7, #40	; 0x28
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	fe00e800 	.word	0xfe00e800

08006830 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	607b      	str	r3, [r7, #4]
 800683a:	460b      	mov	r3, r1
 800683c:	817b      	strh	r3, [r7, #10]
 800683e:	4613      	mov	r3, r2
 8006840:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006842:	897b      	ldrh	r3, [r7, #10]
 8006844:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006848:	7a7b      	ldrb	r3, [r7, #9]
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006850:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	4313      	orrs	r3, r2
 800685a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800685e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	0d5b      	lsrs	r3, r3, #21
 800686a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800686e:	4b08      	ldr	r3, [pc, #32]	; (8006890 <I2C_TransferConfig+0x60>)
 8006870:	430b      	orrs	r3, r1
 8006872:	43db      	mvns	r3, r3
 8006874:	ea02 0103 	and.w	r1, r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006882:	bf00      	nop
 8006884:	371c      	adds	r7, #28
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	03ff63ff 	.word	0x03ff63ff

08006894 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a8:	4a2d      	ldr	r2, [pc, #180]	; (8006960 <I2C_Enable_IRQ+0xcc>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d004      	beq.n	80068b8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80068b2:	4a2c      	ldr	r2, [pc, #176]	; (8006964 <I2C_Enable_IRQ+0xd0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d11d      	bne.n	80068f4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80068b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	da03      	bge.n	80068c8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80068c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80068c8:	887b      	ldrh	r3, [r7, #2]
 80068ca:	2b10      	cmp	r3, #16
 80068cc:	d103      	bne.n	80068d6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80068d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80068d6:	887b      	ldrh	r3, [r7, #2]
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d103      	bne.n	80068e4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80068e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80068e4:	887b      	ldrh	r3, [r7, #2]
 80068e6:	2b40      	cmp	r3, #64	; 0x40
 80068e8:	d12c      	bne.n	8006944 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80068f2:	e027      	b.n	8006944 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80068f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	da03      	bge.n	8006904 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006902:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006904:	887b      	ldrh	r3, [r7, #2]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006914:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006916:	887b      	ldrh	r3, [r7, #2]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006926:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006928:	887b      	ldrh	r3, [r7, #2]
 800692a:	2b10      	cmp	r3, #16
 800692c:	d103      	bne.n	8006936 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006934:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006936:	887b      	ldrh	r3, [r7, #2]
 8006938:	2b20      	cmp	r3, #32
 800693a:	d103      	bne.n	8006944 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f043 0320 	orr.w	r3, r3, #32
 8006942:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6819      	ldr	r1, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	430a      	orrs	r2, r1
 8006952:	601a      	str	r2, [r3, #0]
}
 8006954:	bf00      	nop
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	08005731 	.word	0x08005731
 8006964:	08005907 	.word	0x08005907

08006968 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006978:	887b      	ldrh	r3, [r7, #2]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00f      	beq.n	80069a2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006988:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006996:	2b28      	cmp	r3, #40	; 0x28
 8006998:	d003      	beq.n	80069a2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80069a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80069a2:	887b      	ldrh	r3, [r7, #2]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00f      	beq.n	80069cc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80069b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069c0:	2b28      	cmp	r3, #40	; 0x28
 80069c2:	d003      	beq.n	80069cc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80069ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80069cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	da03      	bge.n	80069dc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80069da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80069dc:	887b      	ldrh	r3, [r7, #2]
 80069de:	2b10      	cmp	r3, #16
 80069e0:	d103      	bne.n	80069ea <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80069e8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80069ea:	887b      	ldrh	r3, [r7, #2]
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	d103      	bne.n	80069f8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f043 0320 	orr.w	r3, r3, #32
 80069f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80069f8:	887b      	ldrh	r3, [r7, #2]
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d103      	bne.n	8006a06 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a04:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6819      	ldr	r1, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	43da      	mvns	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	400a      	ands	r2, r1
 8006a16:	601a      	str	r2, [r3, #0]
}
 8006a18:	bf00      	nop
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	d138      	bne.n	8006aac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e032      	b.n	8006aae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2224      	movs	r2, #36	; 0x24
 8006a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0201 	bic.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6819      	ldr	r1, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e000      	b.n	8006aae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006aac:	2302      	movs	r3, #2
  }
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d139      	bne.n	8006b44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006ada:	2302      	movs	r3, #2
 8006adc:	e033      	b.n	8006b46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2224      	movs	r2, #36	; 0x24
 8006aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0201 	bic.w	r2, r2, #1
 8006afc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	021b      	lsls	r3, r3, #8
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0201 	orr.w	r2, r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	e000      	b.n	8006b46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b44:	2302      	movs	r3, #2
  }
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b54:	b08f      	sub	sp, #60	; 0x3c
 8006b56:	af0a      	add	r7, sp, #40	; 0x28
 8006b58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e116      	b.n	8006d92 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fb f88c 	bl	8001c9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2203      	movs	r2, #3
 8006b88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d102      	bne.n	8006b9e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f002 fe86 	bl	80098b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	603b      	str	r3, [r7, #0]
 8006bae:	687e      	ldr	r6, [r7, #4]
 8006bb0:	466d      	mov	r5, sp
 8006bb2:	f106 0410 	add.w	r4, r6, #16
 8006bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006bc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8006bc6:	1d33      	adds	r3, r6, #4
 8006bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bca:	6838      	ldr	r0, [r7, #0]
 8006bcc:	f002 fe1a 	bl	8009804 <USB_CoreInit>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e0d7      	b.n	8006d92 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2100      	movs	r1, #0
 8006be8:	4618      	mov	r0, r3
 8006bea:	f002 fe74 	bl	80098d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]
 8006bf2:	e04a      	b.n	8006c8a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006bf4:	7bfa      	ldrb	r2, [r7, #15]
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	440b      	add	r3, r1
 8006c02:	333d      	adds	r3, #61	; 0x3d
 8006c04:	2201      	movs	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c08:	7bfa      	ldrb	r2, [r7, #15]
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	440b      	add	r3, r1
 8006c16:	333c      	adds	r3, #60	; 0x3c
 8006c18:	7bfa      	ldrb	r2, [r7, #15]
 8006c1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c1c:	7bfa      	ldrb	r2, [r7, #15]
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	b298      	uxth	r0, r3
 8006c22:	6879      	ldr	r1, [r7, #4]
 8006c24:	4613      	mov	r3, r2
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	440b      	add	r3, r1
 8006c2e:	3344      	adds	r3, #68	; 0x44
 8006c30:	4602      	mov	r2, r0
 8006c32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c34:	7bfa      	ldrb	r2, [r7, #15]
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	00db      	lsls	r3, r3, #3
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	440b      	add	r3, r1
 8006c42:	3340      	adds	r3, #64	; 0x40
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c48:	7bfa      	ldrb	r2, [r7, #15]
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	3348      	adds	r3, #72	; 0x48
 8006c58:	2200      	movs	r2, #0
 8006c5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c5c:	7bfa      	ldrb	r2, [r7, #15]
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	4613      	mov	r3, r2
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	334c      	adds	r3, #76	; 0x4c
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c70:	7bfa      	ldrb	r2, [r7, #15]
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	3354      	adds	r3, #84	; 0x54
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	3301      	adds	r3, #1
 8006c88:	73fb      	strb	r3, [r7, #15]
 8006c8a:	7bfa      	ldrb	r2, [r7, #15]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d3af      	bcc.n	8006bf4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c94:	2300      	movs	r3, #0
 8006c96:	73fb      	strb	r3, [r7, #15]
 8006c98:	e044      	b.n	8006d24 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c9a:	7bfa      	ldrb	r2, [r7, #15]
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006cac:	2200      	movs	r2, #0
 8006cae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006cb0:	7bfa      	ldrb	r2, [r7, #15]
 8006cb2:	6879      	ldr	r1, [r7, #4]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	4413      	add	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006cc2:	7bfa      	ldrb	r2, [r7, #15]
 8006cc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006cc6:	7bfa      	ldrb	r2, [r7, #15]
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006cdc:	7bfa      	ldrb	r2, [r7, #15]
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006cf2:	7bfa      	ldrb	r2, [r7, #15]
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d08:	7bfa      	ldrb	r2, [r7, #15]
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	3301      	adds	r3, #1
 8006d22:	73fb      	strb	r3, [r7, #15]
 8006d24:	7bfa      	ldrb	r2, [r7, #15]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d3b5      	bcc.n	8006c9a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	687e      	ldr	r6, [r7, #4]
 8006d36:	466d      	mov	r5, sp
 8006d38:	f106 0410 	add.w	r4, r6, #16
 8006d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d48:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d4c:	1d33      	adds	r3, r6, #4
 8006d4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d50:	6838      	ldr	r0, [r7, #0]
 8006d52:	f002 fe0d 	bl	8009970 <USB_DevInit>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e014      	b.n	8006d92 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d102      	bne.n	8006d86 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f80b 	bl	8006d9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f002 ffcb 	bl	8009d26 <USB_DevDisconnect>

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006d9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dca:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <HAL_PCDEx_ActivateLPM+0x44>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	10000003 	.word	0x10000003

08006de4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006de8:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a04      	ldr	r2, [pc, #16]	; (8006e00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006df2:	6013      	str	r3, [r2, #0]
}
 8006df4:	bf00      	nop
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40007000 	.word	0x40007000

08006e04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006e0e:	4b23      	ldr	r3, [pc, #140]	; (8006e9c <HAL_PWREx_EnableOverDrive+0x98>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	4a22      	ldr	r2, [pc, #136]	; (8006e9c <HAL_PWREx_EnableOverDrive+0x98>)
 8006e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e18:	6413      	str	r3, [r2, #64]	; 0x40
 8006e1a:	4b20      	ldr	r3, [pc, #128]	; (8006e9c <HAL_PWREx_EnableOverDrive+0x98>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006e26:	4b1e      	ldr	r3, [pc, #120]	; (8006ea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1d      	ldr	r2, [pc, #116]	; (8006ea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e30:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e32:	f7fb f961 	bl	80020f8 <HAL_GetTick>
 8006e36:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e38:	e009      	b.n	8006e4e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e3a:	f7fb f95d 	bl	80020f8 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e48:	d901      	bls.n	8006e4e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e022      	b.n	8006e94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e4e:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e5a:	d1ee      	bne.n	8006e3a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006e5c:	4b10      	ldr	r3, [pc, #64]	; (8006ea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a0f      	ldr	r2, [pc, #60]	; (8006ea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e68:	f7fb f946 	bl	80020f8 <HAL_GetTick>
 8006e6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e6e:	e009      	b.n	8006e84 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e70:	f7fb f942 	bl	80020f8 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e7e:	d901      	bls.n	8006e84 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e007      	b.n	8006e94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e84:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e90:	d1ee      	bne.n	8006e70 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	40023800 	.word	0x40023800
 8006ea0:	40007000 	.word	0x40007000

08006ea4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006eac:	2300      	movs	r3, #0
 8006eae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e29b      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 8087 	beq.w	8006fd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ec8:	4b96      	ldr	r3, [pc, #600]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 030c 	and.w	r3, r3, #12
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	d00c      	beq.n	8006eee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ed4:	4b93      	ldr	r3, [pc, #588]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f003 030c 	and.w	r3, r3, #12
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d112      	bne.n	8006f06 <HAL_RCC_OscConfig+0x62>
 8006ee0:	4b90      	ldr	r3, [pc, #576]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ee8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eec:	d10b      	bne.n	8006f06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eee:	4b8d      	ldr	r3, [pc, #564]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d06c      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x130>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d168      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e275      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f0e:	d106      	bne.n	8006f1e <HAL_RCC_OscConfig+0x7a>
 8006f10:	4b84      	ldr	r3, [pc, #528]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a83      	ldr	r2, [pc, #524]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	e02e      	b.n	8006f7c <HAL_RCC_OscConfig+0xd8>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10c      	bne.n	8006f40 <HAL_RCC_OscConfig+0x9c>
 8006f26:	4b7f      	ldr	r3, [pc, #508]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a7e      	ldr	r2, [pc, #504]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	4b7c      	ldr	r3, [pc, #496]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a7b      	ldr	r2, [pc, #492]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	e01d      	b.n	8006f7c <HAL_RCC_OscConfig+0xd8>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f48:	d10c      	bne.n	8006f64 <HAL_RCC_OscConfig+0xc0>
 8006f4a:	4b76      	ldr	r3, [pc, #472]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a75      	ldr	r2, [pc, #468]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	4b73      	ldr	r3, [pc, #460]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a72      	ldr	r2, [pc, #456]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	e00b      	b.n	8006f7c <HAL_RCC_OscConfig+0xd8>
 8006f64:	4b6f      	ldr	r3, [pc, #444]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a6e      	ldr	r2, [pc, #440]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	4b6c      	ldr	r3, [pc, #432]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a6b      	ldr	r2, [pc, #428]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d013      	beq.n	8006fac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f84:	f7fb f8b8 	bl	80020f8 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f8c:	f7fb f8b4 	bl	80020f8 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b64      	cmp	r3, #100	; 0x64
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e229      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f9e:	4b61      	ldr	r3, [pc, #388]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f0      	beq.n	8006f8c <HAL_RCC_OscConfig+0xe8>
 8006faa:	e014      	b.n	8006fd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fac:	f7fb f8a4 	bl	80020f8 <HAL_GetTick>
 8006fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fb4:	f7fb f8a0 	bl	80020f8 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b64      	cmp	r3, #100	; 0x64
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e215      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fc6:	4b57      	ldr	r3, [pc, #348]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1f0      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x110>
 8006fd2:	e000      	b.n	8006fd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d069      	beq.n	80070b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fe2:	4b50      	ldr	r3, [pc, #320]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 030c 	and.w	r3, r3, #12
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00b      	beq.n	8007006 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fee:	4b4d      	ldr	r3, [pc, #308]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 030c 	and.w	r3, r3, #12
 8006ff6:	2b08      	cmp	r3, #8
 8006ff8:	d11c      	bne.n	8007034 <HAL_RCC_OscConfig+0x190>
 8006ffa:	4b4a      	ldr	r3, [pc, #296]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d116      	bne.n	8007034 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007006:	4b47      	ldr	r3, [pc, #284]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <HAL_RCC_OscConfig+0x17a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d001      	beq.n	800701e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e1e9      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800701e:	4b41      	ldr	r3, [pc, #260]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	493d      	ldr	r1, [pc, #244]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 800702e:	4313      	orrs	r3, r2
 8007030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007032:	e040      	b.n	80070b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d023      	beq.n	8007084 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800703c:	4b39      	ldr	r3, [pc, #228]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a38      	ldr	r2, [pc, #224]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007048:	f7fb f856 	bl	80020f8 <HAL_GetTick>
 800704c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800704e:	e008      	b.n	8007062 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007050:	f7fb f852 	bl	80020f8 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e1c7      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007062:	4b30      	ldr	r3, [pc, #192]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0f0      	beq.n	8007050 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800706e:	4b2d      	ldr	r3, [pc, #180]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	4929      	ldr	r1, [pc, #164]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 800707e:	4313      	orrs	r3, r2
 8007080:	600b      	str	r3, [r1, #0]
 8007082:	e018      	b.n	80070b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007084:	4b27      	ldr	r3, [pc, #156]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a26      	ldr	r2, [pc, #152]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 800708a:	f023 0301 	bic.w	r3, r3, #1
 800708e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007090:	f7fb f832 	bl	80020f8 <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007098:	f7fb f82e 	bl	80020f8 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e1a3      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070aa:	4b1e      	ldr	r3, [pc, #120]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f0      	bne.n	8007098 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0308 	and.w	r3, r3, #8
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d038      	beq.n	8007134 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d019      	beq.n	80070fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070ca:	4b16      	ldr	r3, [pc, #88]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 80070cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ce:	4a15      	ldr	r2, [pc, #84]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 80070d0:	f043 0301 	orr.w	r3, r3, #1
 80070d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070d6:	f7fb f80f 	bl	80020f8 <HAL_GetTick>
 80070da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070dc:	e008      	b.n	80070f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070de:	f7fb f80b 	bl	80020f8 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d901      	bls.n	80070f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e180      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070f0:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 80070f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d0f0      	beq.n	80070de <HAL_RCC_OscConfig+0x23a>
 80070fc:	e01a      	b.n	8007134 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070fe:	4b09      	ldr	r3, [pc, #36]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8007100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007102:	4a08      	ldr	r2, [pc, #32]	; (8007124 <HAL_RCC_OscConfig+0x280>)
 8007104:	f023 0301 	bic.w	r3, r3, #1
 8007108:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800710a:	f7fa fff5 	bl	80020f8 <HAL_GetTick>
 800710e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007110:	e00a      	b.n	8007128 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007112:	f7fa fff1 	bl	80020f8 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d903      	bls.n	8007128 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e166      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
 8007124:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007128:	4b92      	ldr	r3, [pc, #584]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 800712a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1ee      	bne.n	8007112 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 80a4 	beq.w	800728a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007142:	4b8c      	ldr	r3, [pc, #560]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10d      	bne.n	800716a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800714e:	4b89      	ldr	r3, [pc, #548]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	4a88      	ldr	r2, [pc, #544]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007158:	6413      	str	r3, [r2, #64]	; 0x40
 800715a:	4b86      	ldr	r3, [pc, #536]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007162:	60bb      	str	r3, [r7, #8]
 8007164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007166:	2301      	movs	r3, #1
 8007168:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800716a:	4b83      	ldr	r3, [pc, #524]	; (8007378 <HAL_RCC_OscConfig+0x4d4>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007172:	2b00      	cmp	r3, #0
 8007174:	d118      	bne.n	80071a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007176:	4b80      	ldr	r3, [pc, #512]	; (8007378 <HAL_RCC_OscConfig+0x4d4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a7f      	ldr	r2, [pc, #508]	; (8007378 <HAL_RCC_OscConfig+0x4d4>)
 800717c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007182:	f7fa ffb9 	bl	80020f8 <HAL_GetTick>
 8007186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007188:	e008      	b.n	800719c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800718a:	f7fa ffb5 	bl	80020f8 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b64      	cmp	r3, #100	; 0x64
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e12a      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800719c:	4b76      	ldr	r3, [pc, #472]	; (8007378 <HAL_RCC_OscConfig+0x4d4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0f0      	beq.n	800718a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d106      	bne.n	80071be <HAL_RCC_OscConfig+0x31a>
 80071b0:	4b70      	ldr	r3, [pc, #448]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 80071b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b4:	4a6f      	ldr	r2, [pc, #444]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 80071b6:	f043 0301 	orr.w	r3, r3, #1
 80071ba:	6713      	str	r3, [r2, #112]	; 0x70
 80071bc:	e02d      	b.n	800721a <HAL_RCC_OscConfig+0x376>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10c      	bne.n	80071e0 <HAL_RCC_OscConfig+0x33c>
 80071c6:	4b6b      	ldr	r3, [pc, #428]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 80071c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ca:	4a6a      	ldr	r2, [pc, #424]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 80071cc:	f023 0301 	bic.w	r3, r3, #1
 80071d0:	6713      	str	r3, [r2, #112]	; 0x70
 80071d2:	4b68      	ldr	r3, [pc, #416]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	4a67      	ldr	r2, [pc, #412]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 80071d8:	f023 0304 	bic.w	r3, r3, #4
 80071dc:	6713      	str	r3, [r2, #112]	; 0x70
 80071de:	e01c      	b.n	800721a <HAL_RCC_OscConfig+0x376>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	2b05      	cmp	r3, #5
 80071e6:	d10c      	bne.n	8007202 <HAL_RCC_OscConfig+0x35e>
 80071e8:	4b62      	ldr	r3, [pc, #392]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 80071ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ec:	4a61      	ldr	r2, [pc, #388]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 80071ee:	f043 0304 	orr.w	r3, r3, #4
 80071f2:	6713      	str	r3, [r2, #112]	; 0x70
 80071f4:	4b5f      	ldr	r3, [pc, #380]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 80071f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f8:	4a5e      	ldr	r2, [pc, #376]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 80071fa:	f043 0301 	orr.w	r3, r3, #1
 80071fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007200:	e00b      	b.n	800721a <HAL_RCC_OscConfig+0x376>
 8007202:	4b5c      	ldr	r3, [pc, #368]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007206:	4a5b      	ldr	r2, [pc, #364]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007208:	f023 0301 	bic.w	r3, r3, #1
 800720c:	6713      	str	r3, [r2, #112]	; 0x70
 800720e:	4b59      	ldr	r3, [pc, #356]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007212:	4a58      	ldr	r2, [pc, #352]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007214:	f023 0304 	bic.w	r3, r3, #4
 8007218:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d015      	beq.n	800724e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007222:	f7fa ff69 	bl	80020f8 <HAL_GetTick>
 8007226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007228:	e00a      	b.n	8007240 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800722a:	f7fa ff65 	bl	80020f8 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	f241 3288 	movw	r2, #5000	; 0x1388
 8007238:	4293      	cmp	r3, r2
 800723a:	d901      	bls.n	8007240 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e0d8      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007240:	4b4c      	ldr	r3, [pc, #304]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0ee      	beq.n	800722a <HAL_RCC_OscConfig+0x386>
 800724c:	e014      	b.n	8007278 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800724e:	f7fa ff53 	bl	80020f8 <HAL_GetTick>
 8007252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007254:	e00a      	b.n	800726c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007256:	f7fa ff4f 	bl	80020f8 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	f241 3288 	movw	r2, #5000	; 0x1388
 8007264:	4293      	cmp	r3, r2
 8007266:	d901      	bls.n	800726c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e0c2      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800726c:	4b41      	ldr	r3, [pc, #260]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 800726e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1ee      	bne.n	8007256 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007278:	7dfb      	ldrb	r3, [r7, #23]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d105      	bne.n	800728a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800727e:	4b3d      	ldr	r3, [pc, #244]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	4a3c      	ldr	r2, [pc, #240]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007288:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 80ae 	beq.w	80073f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007294:	4b37      	ldr	r3, [pc, #220]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 030c 	and.w	r3, r3, #12
 800729c:	2b08      	cmp	r3, #8
 800729e:	d06d      	beq.n	800737c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d14b      	bne.n	8007340 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072a8:	4b32      	ldr	r3, [pc, #200]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a31      	ldr	r2, [pc, #196]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 80072ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b4:	f7fa ff20 	bl	80020f8 <HAL_GetTick>
 80072b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072ba:	e008      	b.n	80072ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072bc:	f7fa ff1c 	bl	80020f8 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e091      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072ce:	4b29      	ldr	r3, [pc, #164]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1f0      	bne.n	80072bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69da      	ldr	r2, [r3, #28]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	019b      	lsls	r3, r3, #6
 80072ea:	431a      	orrs	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f0:	085b      	lsrs	r3, r3, #1
 80072f2:	3b01      	subs	r3, #1
 80072f4:	041b      	lsls	r3, r3, #16
 80072f6:	431a      	orrs	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	061b      	lsls	r3, r3, #24
 80072fe:	431a      	orrs	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	071b      	lsls	r3, r3, #28
 8007306:	491b      	ldr	r1, [pc, #108]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007308:	4313      	orrs	r3, r2
 800730a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800730c:	4b19      	ldr	r3, [pc, #100]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a18      	ldr	r2, [pc, #96]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007318:	f7fa feee 	bl	80020f8 <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007320:	f7fa feea 	bl	80020f8 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e05f      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007332:	4b10      	ldr	r3, [pc, #64]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f0      	beq.n	8007320 <HAL_RCC_OscConfig+0x47c>
 800733e:	e057      	b.n	80073f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007340:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a0b      	ldr	r2, [pc, #44]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800734a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734c:	f7fa fed4 	bl	80020f8 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007354:	f7fa fed0 	bl	80020f8 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e045      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007366:	4b03      	ldr	r3, [pc, #12]	; (8007374 <HAL_RCC_OscConfig+0x4d0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f0      	bne.n	8007354 <HAL_RCC_OscConfig+0x4b0>
 8007372:	e03d      	b.n	80073f0 <HAL_RCC_OscConfig+0x54c>
 8007374:	40023800 	.word	0x40023800
 8007378:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800737c:	4b1f      	ldr	r3, [pc, #124]	; (80073fc <HAL_RCC_OscConfig+0x558>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d030      	beq.n	80073ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007394:	429a      	cmp	r2, r3
 8007396:	d129      	bne.n	80073ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d122      	bne.n	80073ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073ac:	4013      	ands	r3, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d119      	bne.n	80073ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c2:	085b      	lsrs	r3, r3, #1
 80073c4:	3b01      	subs	r3, #1
 80073c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d10f      	bne.n	80073ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073d8:	429a      	cmp	r2, r3
 80073da:	d107      	bne.n	80073ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d001      	beq.n	80073f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e000      	b.n	80073f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	40023800 	.word	0x40023800

08007400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e0d0      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007418:	4b6a      	ldr	r3, [pc, #424]	; (80075c4 <HAL_RCC_ClockConfig+0x1c4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 030f 	and.w	r3, r3, #15
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d910      	bls.n	8007448 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007426:	4b67      	ldr	r3, [pc, #412]	; (80075c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f023 020f 	bic.w	r2, r3, #15
 800742e:	4965      	ldr	r1, [pc, #404]	; (80075c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	4313      	orrs	r3, r2
 8007434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007436:	4b63      	ldr	r3, [pc, #396]	; (80075c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 030f 	and.w	r3, r3, #15
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	429a      	cmp	r2, r3
 8007442:	d001      	beq.n	8007448 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e0b8      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d020      	beq.n	8007496 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d005      	beq.n	800746c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007460:	4b59      	ldr	r3, [pc, #356]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	4a58      	ldr	r2, [pc, #352]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800746a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007478:	4b53      	ldr	r3, [pc, #332]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	4a52      	ldr	r2, [pc, #328]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 800747e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007482:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007484:	4b50      	ldr	r3, [pc, #320]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	494d      	ldr	r1, [pc, #308]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007492:	4313      	orrs	r3, r2
 8007494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d040      	beq.n	8007524 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d107      	bne.n	80074ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074aa:	4b47      	ldr	r3, [pc, #284]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d115      	bne.n	80074e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e07f      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d107      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074c2:	4b41      	ldr	r3, [pc, #260]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d109      	bne.n	80074e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e073      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074d2:	4b3d      	ldr	r3, [pc, #244]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e06b      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074e2:	4b39      	ldr	r3, [pc, #228]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f023 0203 	bic.w	r2, r3, #3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	4936      	ldr	r1, [pc, #216]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f4:	f7fa fe00 	bl	80020f8 <HAL_GetTick>
 80074f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fa:	e00a      	b.n	8007512 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074fc:	f7fa fdfc 	bl	80020f8 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	f241 3288 	movw	r2, #5000	; 0x1388
 800750a:	4293      	cmp	r3, r2
 800750c:	d901      	bls.n	8007512 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e053      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007512:	4b2d      	ldr	r3, [pc, #180]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f003 020c 	and.w	r2, r3, #12
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	429a      	cmp	r2, r3
 8007522:	d1eb      	bne.n	80074fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007524:	4b27      	ldr	r3, [pc, #156]	; (80075c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 030f 	and.w	r3, r3, #15
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	429a      	cmp	r2, r3
 8007530:	d210      	bcs.n	8007554 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007532:	4b24      	ldr	r3, [pc, #144]	; (80075c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f023 020f 	bic.w	r2, r3, #15
 800753a:	4922      	ldr	r1, [pc, #136]	; (80075c4 <HAL_RCC_ClockConfig+0x1c4>)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	4313      	orrs	r3, r2
 8007540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007542:	4b20      	ldr	r3, [pc, #128]	; (80075c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 030f 	and.w	r3, r3, #15
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	429a      	cmp	r2, r3
 800754e:	d001      	beq.n	8007554 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e032      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b00      	cmp	r3, #0
 800755e:	d008      	beq.n	8007572 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007560:	4b19      	ldr	r3, [pc, #100]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4916      	ldr	r1, [pc, #88]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 800756e:	4313      	orrs	r3, r2
 8007570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800757e:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	490e      	ldr	r1, [pc, #56]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 800758e:	4313      	orrs	r3, r2
 8007590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007592:	f000 f821 	bl	80075d8 <HAL_RCC_GetSysClockFreq>
 8007596:	4602      	mov	r2, r0
 8007598:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <HAL_RCC_ClockConfig+0x1c8>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	091b      	lsrs	r3, r3, #4
 800759e:	f003 030f 	and.w	r3, r3, #15
 80075a2:	490a      	ldr	r1, [pc, #40]	; (80075cc <HAL_RCC_ClockConfig+0x1cc>)
 80075a4:	5ccb      	ldrb	r3, [r1, r3]
 80075a6:	fa22 f303 	lsr.w	r3, r2, r3
 80075aa:	4a09      	ldr	r2, [pc, #36]	; (80075d0 <HAL_RCC_ClockConfig+0x1d0>)
 80075ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075ae:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <HAL_RCC_ClockConfig+0x1d4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fa f83c 	bl	8001630 <HAL_InitTick>

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	40023c00 	.word	0x40023c00
 80075c8:	40023800 	.word	0x40023800
 80075cc:	0802044c 	.word	0x0802044c
 80075d0:	20000008 	.word	0x20000008
 80075d4:	2000000c 	.word	0x2000000c

080075d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075dc:	b094      	sub	sp, #80	; 0x50
 80075de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	647b      	str	r3, [r7, #68]	; 0x44
 80075e4:	2300      	movs	r3, #0
 80075e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075e8:	2300      	movs	r3, #0
 80075ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075f0:	4b79      	ldr	r3, [pc, #484]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f003 030c 	and.w	r3, r3, #12
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d00d      	beq.n	8007618 <HAL_RCC_GetSysClockFreq+0x40>
 80075fc:	2b08      	cmp	r3, #8
 80075fe:	f200 80e1 	bhi.w	80077c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_RCC_GetSysClockFreq+0x34>
 8007606:	2b04      	cmp	r3, #4
 8007608:	d003      	beq.n	8007612 <HAL_RCC_GetSysClockFreq+0x3a>
 800760a:	e0db      	b.n	80077c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800760c:	4b73      	ldr	r3, [pc, #460]	; (80077dc <HAL_RCC_GetSysClockFreq+0x204>)
 800760e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007610:	e0db      	b.n	80077ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007612:	4b73      	ldr	r3, [pc, #460]	; (80077e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007614:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007616:	e0d8      	b.n	80077ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007618:	4b6f      	ldr	r3, [pc, #444]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007620:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007622:	4b6d      	ldr	r3, [pc, #436]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d063      	beq.n	80076f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800762e:	4b6a      	ldr	r3, [pc, #424]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	099b      	lsrs	r3, r3, #6
 8007634:	2200      	movs	r2, #0
 8007636:	63bb      	str	r3, [r7, #56]	; 0x38
 8007638:	63fa      	str	r2, [r7, #60]	; 0x3c
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007640:	633b      	str	r3, [r7, #48]	; 0x30
 8007642:	2300      	movs	r3, #0
 8007644:	637b      	str	r3, [r7, #52]	; 0x34
 8007646:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800764a:	4622      	mov	r2, r4
 800764c:	462b      	mov	r3, r5
 800764e:	f04f 0000 	mov.w	r0, #0
 8007652:	f04f 0100 	mov.w	r1, #0
 8007656:	0159      	lsls	r1, r3, #5
 8007658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800765c:	0150      	lsls	r0, r2, #5
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4621      	mov	r1, r4
 8007664:	1a51      	subs	r1, r2, r1
 8007666:	6139      	str	r1, [r7, #16]
 8007668:	4629      	mov	r1, r5
 800766a:	eb63 0301 	sbc.w	r3, r3, r1
 800766e:	617b      	str	r3, [r7, #20]
 8007670:	f04f 0200 	mov.w	r2, #0
 8007674:	f04f 0300 	mov.w	r3, #0
 8007678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800767c:	4659      	mov	r1, fp
 800767e:	018b      	lsls	r3, r1, #6
 8007680:	4651      	mov	r1, sl
 8007682:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007686:	4651      	mov	r1, sl
 8007688:	018a      	lsls	r2, r1, #6
 800768a:	4651      	mov	r1, sl
 800768c:	ebb2 0801 	subs.w	r8, r2, r1
 8007690:	4659      	mov	r1, fp
 8007692:	eb63 0901 	sbc.w	r9, r3, r1
 8007696:	f04f 0200 	mov.w	r2, #0
 800769a:	f04f 0300 	mov.w	r3, #0
 800769e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076aa:	4690      	mov	r8, r2
 80076ac:	4699      	mov	r9, r3
 80076ae:	4623      	mov	r3, r4
 80076b0:	eb18 0303 	adds.w	r3, r8, r3
 80076b4:	60bb      	str	r3, [r7, #8]
 80076b6:	462b      	mov	r3, r5
 80076b8:	eb49 0303 	adc.w	r3, r9, r3
 80076bc:	60fb      	str	r3, [r7, #12]
 80076be:	f04f 0200 	mov.w	r2, #0
 80076c2:	f04f 0300 	mov.w	r3, #0
 80076c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80076ca:	4629      	mov	r1, r5
 80076cc:	024b      	lsls	r3, r1, #9
 80076ce:	4621      	mov	r1, r4
 80076d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80076d4:	4621      	mov	r1, r4
 80076d6:	024a      	lsls	r2, r1, #9
 80076d8:	4610      	mov	r0, r2
 80076da:	4619      	mov	r1, r3
 80076dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076de:	2200      	movs	r2, #0
 80076e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80076e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076e8:	f7f8 fe02 	bl	80002f0 <__aeabi_uldivmod>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	4613      	mov	r3, r2
 80076f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076f4:	e058      	b.n	80077a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076f6:	4b38      	ldr	r3, [pc, #224]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	099b      	lsrs	r3, r3, #6
 80076fc:	2200      	movs	r2, #0
 80076fe:	4618      	mov	r0, r3
 8007700:	4611      	mov	r1, r2
 8007702:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007706:	623b      	str	r3, [r7, #32]
 8007708:	2300      	movs	r3, #0
 800770a:	627b      	str	r3, [r7, #36]	; 0x24
 800770c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007710:	4642      	mov	r2, r8
 8007712:	464b      	mov	r3, r9
 8007714:	f04f 0000 	mov.w	r0, #0
 8007718:	f04f 0100 	mov.w	r1, #0
 800771c:	0159      	lsls	r1, r3, #5
 800771e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007722:	0150      	lsls	r0, r2, #5
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4641      	mov	r1, r8
 800772a:	ebb2 0a01 	subs.w	sl, r2, r1
 800772e:	4649      	mov	r1, r9
 8007730:	eb63 0b01 	sbc.w	fp, r3, r1
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007740:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007744:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007748:	ebb2 040a 	subs.w	r4, r2, sl
 800774c:	eb63 050b 	sbc.w	r5, r3, fp
 8007750:	f04f 0200 	mov.w	r2, #0
 8007754:	f04f 0300 	mov.w	r3, #0
 8007758:	00eb      	lsls	r3, r5, #3
 800775a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800775e:	00e2      	lsls	r2, r4, #3
 8007760:	4614      	mov	r4, r2
 8007762:	461d      	mov	r5, r3
 8007764:	4643      	mov	r3, r8
 8007766:	18e3      	adds	r3, r4, r3
 8007768:	603b      	str	r3, [r7, #0]
 800776a:	464b      	mov	r3, r9
 800776c:	eb45 0303 	adc.w	r3, r5, r3
 8007770:	607b      	str	r3, [r7, #4]
 8007772:	f04f 0200 	mov.w	r2, #0
 8007776:	f04f 0300 	mov.w	r3, #0
 800777a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800777e:	4629      	mov	r1, r5
 8007780:	028b      	lsls	r3, r1, #10
 8007782:	4621      	mov	r1, r4
 8007784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007788:	4621      	mov	r1, r4
 800778a:	028a      	lsls	r2, r1, #10
 800778c:	4610      	mov	r0, r2
 800778e:	4619      	mov	r1, r3
 8007790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007792:	2200      	movs	r2, #0
 8007794:	61bb      	str	r3, [r7, #24]
 8007796:	61fa      	str	r2, [r7, #28]
 8007798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800779c:	f7f8 fda8 	bl	80002f0 <__aeabi_uldivmod>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4613      	mov	r3, r2
 80077a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80077a8:	4b0b      	ldr	r3, [pc, #44]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	0c1b      	lsrs	r3, r3, #16
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	3301      	adds	r3, #1
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80077b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80077c2:	e002      	b.n	80077ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077c4:	4b05      	ldr	r3, [pc, #20]	; (80077dc <HAL_RCC_GetSysClockFreq+0x204>)
 80077c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80077c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3750      	adds	r7, #80	; 0x50
 80077d0:	46bd      	mov	sp, r7
 80077d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077d6:	bf00      	nop
 80077d8:	40023800 	.word	0x40023800
 80077dc:	00f42400 	.word	0x00f42400
 80077e0:	007a1200 	.word	0x007a1200

080077e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077e4:	b480      	push	{r7}
 80077e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077e8:	4b03      	ldr	r3, [pc, #12]	; (80077f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80077ea:	681b      	ldr	r3, [r3, #0]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	20000008 	.word	0x20000008

080077fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007800:	f7ff fff0 	bl	80077e4 <HAL_RCC_GetHCLKFreq>
 8007804:	4602      	mov	r2, r0
 8007806:	4b05      	ldr	r3, [pc, #20]	; (800781c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	0a9b      	lsrs	r3, r3, #10
 800780c:	f003 0307 	and.w	r3, r3, #7
 8007810:	4903      	ldr	r1, [pc, #12]	; (8007820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007812:	5ccb      	ldrb	r3, [r1, r3]
 8007814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007818:	4618      	mov	r0, r3
 800781a:	bd80      	pop	{r7, pc}
 800781c:	40023800 	.word	0x40023800
 8007820:	0802045c 	.word	0x0802045c

08007824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007828:	f7ff ffdc 	bl	80077e4 <HAL_RCC_GetHCLKFreq>
 800782c:	4602      	mov	r2, r0
 800782e:	4b05      	ldr	r3, [pc, #20]	; (8007844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	0b5b      	lsrs	r3, r3, #13
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	4903      	ldr	r1, [pc, #12]	; (8007848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800783a:	5ccb      	ldrb	r3, [r1, r3]
 800783c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007840:	4618      	mov	r0, r3
 8007842:	bd80      	pop	{r7, pc}
 8007844:	40023800 	.word	0x40023800
 8007848:	0802045c 	.word	0x0802045c

0800784c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	220f      	movs	r2, #15
 800785a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800785c:	4b12      	ldr	r3, [pc, #72]	; (80078a8 <HAL_RCC_GetClockConfig+0x5c>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 0203 	and.w	r2, r3, #3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007868:	4b0f      	ldr	r3, [pc, #60]	; (80078a8 <HAL_RCC_GetClockConfig+0x5c>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007874:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <HAL_RCC_GetClockConfig+0x5c>)
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007880:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <HAL_RCC_GetClockConfig+0x5c>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	08db      	lsrs	r3, r3, #3
 8007886:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800788e:	4b07      	ldr	r3, [pc, #28]	; (80078ac <HAL_RCC_GetClockConfig+0x60>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 020f 	and.w	r2, r3, #15
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	601a      	str	r2, [r3, #0]
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	40023800 	.word	0x40023800
 80078ac:	40023c00 	.word	0x40023c00

080078b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d012      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078d8:	4b69      	ldr	r3, [pc, #420]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	4a68      	ldr	r2, [pc, #416]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80078e2:	6093      	str	r3, [r2, #8]
 80078e4:	4b66      	ldr	r3, [pc, #408]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e6:	689a      	ldr	r2, [r3, #8]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ec:	4964      	ldr	r1, [pc, #400]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80078fa:	2301      	movs	r3, #1
 80078fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d017      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800790a:	4b5d      	ldr	r3, [pc, #372]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800790c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007910:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007918:	4959      	ldr	r1, [pc, #356]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800791a:	4313      	orrs	r3, r2
 800791c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007928:	d101      	bne.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800792a:	2301      	movs	r3, #1
 800792c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007936:	2301      	movs	r3, #1
 8007938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d017      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007946:	4b4e      	ldr	r3, [pc, #312]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800794c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007954:	494a      	ldr	r1, [pc, #296]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007956:	4313      	orrs	r3, r2
 8007958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007964:	d101      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007966:	2301      	movs	r3, #1
 8007968:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007972:	2301      	movs	r3, #1
 8007974:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007982:	2301      	movs	r3, #1
 8007984:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0320 	and.w	r3, r3, #32
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 808b 	beq.w	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007994:	4b3a      	ldr	r3, [pc, #232]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007998:	4a39      	ldr	r2, [pc, #228]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800799a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799e:	6413      	str	r3, [r2, #64]	; 0x40
 80079a0:	4b37      	ldr	r3, [pc, #220]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079ac:	4b35      	ldr	r3, [pc, #212]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a34      	ldr	r2, [pc, #208]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079b8:	f7fa fb9e 	bl	80020f8 <HAL_GetTick>
 80079bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079be:	e008      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079c0:	f7fa fb9a 	bl	80020f8 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b64      	cmp	r3, #100	; 0x64
 80079cc:	d901      	bls.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e38f      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079d2:	4b2c      	ldr	r3, [pc, #176]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0f0      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079de:	4b28      	ldr	r3, [pc, #160]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d035      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d02e      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079fc:	4b20      	ldr	r3, [pc, #128]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a06:	4b1e      	ldr	r3, [pc, #120]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0a:	4a1d      	ldr	r2, [pc, #116]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a12:	4b1b      	ldr	r3, [pc, #108]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a16:	4a1a      	ldr	r2, [pc, #104]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007a1e:	4a18      	ldr	r2, [pc, #96]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a24:	4b16      	ldr	r3, [pc, #88]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d114      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a30:	f7fa fb62 	bl	80020f8 <HAL_GetTick>
 8007a34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a36:	e00a      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a38:	f7fa fb5e 	bl	80020f8 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e351      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a4e:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0ee      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a66:	d111      	bne.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a74:	4b04      	ldr	r3, [pc, #16]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a76:	400b      	ands	r3, r1
 8007a78:	4901      	ldr	r1, [pc, #4]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	608b      	str	r3, [r1, #8]
 8007a7e:	e00b      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007a80:	40023800 	.word	0x40023800
 8007a84:	40007000 	.word	0x40007000
 8007a88:	0ffffcff 	.word	0x0ffffcff
 8007a8c:	4bac      	ldr	r3, [pc, #688]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	4aab      	ldr	r2, [pc, #684]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a96:	6093      	str	r3, [r2, #8]
 8007a98:	4ba9      	ldr	r3, [pc, #676]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aa4:	49a6      	ldr	r1, [pc, #664]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0310 	and.w	r3, r3, #16
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d010      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ab6:	4ba2      	ldr	r3, [pc, #648]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007abc:	4aa0      	ldr	r2, [pc, #640]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007abe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ac2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007ac6:	4b9e      	ldr	r3, [pc, #632]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ac8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	499b      	ldr	r1, [pc, #620]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ae4:	4b96      	ldr	r3, [pc, #600]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007af2:	4993      	ldr	r1, [pc, #588]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b06:	4b8e      	ldr	r3, [pc, #568]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b14:	498a      	ldr	r1, [pc, #552]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00a      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b28:	4b85      	ldr	r3, [pc, #532]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b36:	4982      	ldr	r1, [pc, #520]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00a      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b4a:	4b7d      	ldr	r3, [pc, #500]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b58:	4979      	ldr	r1, [pc, #484]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00a      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b6c:	4b74      	ldr	r3, [pc, #464]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b72:	f023 0203 	bic.w	r2, r3, #3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b7a:	4971      	ldr	r1, [pc, #452]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b8e:	4b6c      	ldr	r3, [pc, #432]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b94:	f023 020c 	bic.w	r2, r3, #12
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b9c:	4968      	ldr	r1, [pc, #416]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bb0:	4b63      	ldr	r3, [pc, #396]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bbe:	4960      	ldr	r1, [pc, #384]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bd2:	4b5b      	ldr	r3, [pc, #364]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be0:	4957      	ldr	r1, [pc, #348]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bf4:	4b52      	ldr	r3, [pc, #328]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c02:	494f      	ldr	r1, [pc, #316]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c16:	4b4a      	ldr	r3, [pc, #296]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c24:	4946      	ldr	r1, [pc, #280]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c38:	4b41      	ldr	r3, [pc, #260]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c46:	493e      	ldr	r1, [pc, #248]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c5a:	4b39      	ldr	r3, [pc, #228]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c68:	4935      	ldr	r1, [pc, #212]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c7c:	4b30      	ldr	r3, [pc, #192]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c8a:	492d      	ldr	r1, [pc, #180]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d011      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c9e:	4b28      	ldr	r3, [pc, #160]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cac:	4924      	ldr	r1, [pc, #144]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cbc:	d101      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0308 	and.w	r3, r3, #8
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cde:	4b18      	ldr	r3, [pc, #96]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cec:	4914      	ldr	r1, [pc, #80]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d00:	4b0f      	ldr	r3, [pc, #60]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d10:	490b      	ldr	r1, [pc, #44]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00f      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007d24:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d34:	4902      	ldr	r1, [pc, #8]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d3c:	e002      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007d3e:	bf00      	nop
 8007d40:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00b      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d50:	4b8a      	ldr	r3, [pc, #552]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d60:	4986      	ldr	r1, [pc, #536]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007d74:	4b81      	ldr	r3, [pc, #516]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d84:	497d      	ldr	r1, [pc, #500]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d006      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 80d6 	beq.w	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007da0:	4b76      	ldr	r3, [pc, #472]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a75      	ldr	r2, [pc, #468]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007da6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dac:	f7fa f9a4 	bl	80020f8 <HAL_GetTick>
 8007db0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007db2:	e008      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007db4:	f7fa f9a0 	bl	80020f8 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b64      	cmp	r3, #100	; 0x64
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e195      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007dc6:	4b6d      	ldr	r3, [pc, #436]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1f0      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d021      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d11d      	bne.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007de6:	4b65      	ldr	r3, [pc, #404]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dec:	0c1b      	lsrs	r3, r3, #16
 8007dee:	f003 0303 	and.w	r3, r3, #3
 8007df2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007df4:	4b61      	ldr	r3, [pc, #388]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dfa:	0e1b      	lsrs	r3, r3, #24
 8007dfc:	f003 030f 	and.w	r3, r3, #15
 8007e00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	019a      	lsls	r2, r3, #6
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	041b      	lsls	r3, r3, #16
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	061b      	lsls	r3, r3, #24
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	071b      	lsls	r3, r3, #28
 8007e1a:	4958      	ldr	r1, [pc, #352]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d004      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e36:	d00a      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d02e      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e4c:	d129      	bne.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e4e:	4b4b      	ldr	r3, [pc, #300]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e54:	0c1b      	lsrs	r3, r3, #16
 8007e56:	f003 0303 	and.w	r3, r3, #3
 8007e5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e5c:	4b47      	ldr	r3, [pc, #284]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e62:	0f1b      	lsrs	r3, r3, #28
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	019a      	lsls	r2, r3, #6
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	041b      	lsls	r3, r3, #16
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	061b      	lsls	r3, r3, #24
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	071b      	lsls	r3, r3, #28
 8007e82:	493e      	ldr	r1, [pc, #248]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007e8a:	4b3c      	ldr	r3, [pc, #240]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e90:	f023 021f 	bic.w	r2, r3, #31
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	4938      	ldr	r1, [pc, #224]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d01d      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007eae:	4b33      	ldr	r3, [pc, #204]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb4:	0e1b      	lsrs	r3, r3, #24
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ebc:	4b2f      	ldr	r3, [pc, #188]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ec2:	0f1b      	lsrs	r3, r3, #28
 8007ec4:	f003 0307 	and.w	r3, r3, #7
 8007ec8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	019a      	lsls	r2, r3, #6
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	041b      	lsls	r3, r3, #16
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	061b      	lsls	r3, r3, #24
 8007edc:	431a      	orrs	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	071b      	lsls	r3, r3, #28
 8007ee2:	4926      	ldr	r1, [pc, #152]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d011      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	019a      	lsls	r2, r3, #6
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	041b      	lsls	r3, r3, #16
 8007f02:	431a      	orrs	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	061b      	lsls	r3, r3, #24
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	071b      	lsls	r3, r3, #28
 8007f12:	491a      	ldr	r1, [pc, #104]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f1a:	4b18      	ldr	r3, [pc, #96]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a17      	ldr	r2, [pc, #92]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f26:	f7fa f8e7 	bl	80020f8 <HAL_GetTick>
 8007f2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f2c:	e008      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f2e:	f7fa f8e3 	bl	80020f8 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b64      	cmp	r3, #100	; 0x64
 8007f3a:	d901      	bls.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e0d8      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f40:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0f0      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	f040 80ce 	bne.w	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007f54:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a08      	ldr	r2, [pc, #32]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f60:	f7fa f8ca 	bl	80020f8 <HAL_GetTick>
 8007f64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f66:	e00b      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f68:	f7fa f8c6 	bl	80020f8 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	2b64      	cmp	r3, #100	; 0x64
 8007f74:	d904      	bls.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e0bb      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007f7a:	bf00      	nop
 8007f7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f80:	4b5e      	ldr	r3, [pc, #376]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f8c:	d0ec      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d02e      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d12a      	bne.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007fb6:	4b51      	ldr	r3, [pc, #324]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fbc:	0c1b      	lsrs	r3, r3, #16
 8007fbe:	f003 0303 	and.w	r3, r3, #3
 8007fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007fc4:	4b4d      	ldr	r3, [pc, #308]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fca:	0f1b      	lsrs	r3, r3, #28
 8007fcc:	f003 0307 	and.w	r3, r3, #7
 8007fd0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	019a      	lsls	r2, r3, #6
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	041b      	lsls	r3, r3, #16
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	061b      	lsls	r3, r3, #24
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	071b      	lsls	r3, r3, #28
 8007fea:	4944      	ldr	r1, [pc, #272]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007ff2:	4b42      	ldr	r3, [pc, #264]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008000:	3b01      	subs	r3, #1
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	493d      	ldr	r1, [pc, #244]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008006:	4313      	orrs	r3, r2
 8008008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d022      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800801c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008020:	d11d      	bne.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008022:	4b36      	ldr	r3, [pc, #216]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008028:	0e1b      	lsrs	r3, r3, #24
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008030:	4b32      	ldr	r3, [pc, #200]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008036:	0f1b      	lsrs	r3, r3, #28
 8008038:	f003 0307 	and.w	r3, r3, #7
 800803c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	019a      	lsls	r2, r3, #6
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	041b      	lsls	r3, r3, #16
 800804a:	431a      	orrs	r2, r3
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	061b      	lsls	r3, r3, #24
 8008050:	431a      	orrs	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	071b      	lsls	r3, r3, #28
 8008056:	4929      	ldr	r1, [pc, #164]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008058:	4313      	orrs	r3, r2
 800805a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	2b00      	cmp	r3, #0
 8008068:	d028      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800806a:	4b24      	ldr	r3, [pc, #144]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800806c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008070:	0e1b      	lsrs	r3, r3, #24
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008078:	4b20      	ldr	r3, [pc, #128]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800807a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807e:	0c1b      	lsrs	r3, r3, #16
 8008080:	f003 0303 	and.w	r3, r3, #3
 8008084:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	019a      	lsls	r2, r3, #6
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	041b      	lsls	r3, r3, #16
 8008090:	431a      	orrs	r2, r3
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	061b      	lsls	r3, r3, #24
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	071b      	lsls	r3, r3, #28
 800809e:	4917      	ldr	r1, [pc, #92]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80080a6:	4b15      	ldr	r3, [pc, #84]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	4911      	ldr	r1, [pc, #68]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80080bc:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a0e      	ldr	r2, [pc, #56]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080c8:	f7fa f816 	bl	80020f8 <HAL_GetTick>
 80080cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080ce:	e008      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080d0:	f7fa f812 	bl	80020f8 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b64      	cmp	r3, #100	; 0x64
 80080dc:	d901      	bls.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e007      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080e2:	4b06      	ldr	r3, [pc, #24]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080ee:	d1ef      	bne.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3720      	adds	r7, #32
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	40023800 	.word	0x40023800

08008100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e049      	b.n	80081a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d106      	bne.n	800812c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7f9 fcb0 	bl	8001a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3304      	adds	r3, #4
 800813c:	4619      	mov	r1, r3
 800813e:	4610      	mov	r0, r2
 8008140:	f000 f9f6 	bl	8008530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d001      	beq.n	80081c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e054      	b.n	8008272 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0201 	orr.w	r2, r2, #1
 80081de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a26      	ldr	r2, [pc, #152]	; (8008280 <HAL_TIM_Base_Start_IT+0xd0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d022      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x80>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f2:	d01d      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x80>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a22      	ldr	r2, [pc, #136]	; (8008284 <HAL_TIM_Base_Start_IT+0xd4>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d018      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x80>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a21      	ldr	r2, [pc, #132]	; (8008288 <HAL_TIM_Base_Start_IT+0xd8>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d013      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x80>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a1f      	ldr	r2, [pc, #124]	; (800828c <HAL_TIM_Base_Start_IT+0xdc>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d00e      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x80>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a1e      	ldr	r2, [pc, #120]	; (8008290 <HAL_TIM_Base_Start_IT+0xe0>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d009      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x80>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a1c      	ldr	r2, [pc, #112]	; (8008294 <HAL_TIM_Base_Start_IT+0xe4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d004      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0x80>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a1b      	ldr	r2, [pc, #108]	; (8008298 <HAL_TIM_Base_Start_IT+0xe8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d115      	bne.n	800825c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	4b19      	ldr	r3, [pc, #100]	; (800829c <HAL_TIM_Base_Start_IT+0xec>)
 8008238:	4013      	ands	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b06      	cmp	r3, #6
 8008240:	d015      	beq.n	800826e <HAL_TIM_Base_Start_IT+0xbe>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008248:	d011      	beq.n	800826e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f042 0201 	orr.w	r2, r2, #1
 8008258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800825a:	e008      	b.n	800826e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f042 0201 	orr.w	r2, r2, #1
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	e000      	b.n	8008270 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800826e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	40010000 	.word	0x40010000
 8008284:	40000400 	.word	0x40000400
 8008288:	40000800 	.word	0x40000800
 800828c:	40000c00 	.word	0x40000c00
 8008290:	40010400 	.word	0x40010400
 8008294:	40014000 	.word	0x40014000
 8008298:	40001800 	.word	0x40001800
 800829c:	00010007 	.word	0x00010007

080082a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d122      	bne.n	80082fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d11b      	bne.n	80082fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f06f 0202 	mvn.w	r2, #2
 80082cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f905 	bl	80084f2 <HAL_TIM_IC_CaptureCallback>
 80082e8:	e005      	b.n	80082f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f8f7 	bl	80084de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f908 	bl	8008506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f003 0304 	and.w	r3, r3, #4
 8008306:	2b04      	cmp	r3, #4
 8008308:	d122      	bne.n	8008350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b04      	cmp	r3, #4
 8008316:	d11b      	bne.n	8008350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f06f 0204 	mvn.w	r2, #4
 8008320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2202      	movs	r2, #2
 8008326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f8db 	bl	80084f2 <HAL_TIM_IC_CaptureCallback>
 800833c:	e005      	b.n	800834a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f8cd 	bl	80084de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f8de 	bl	8008506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	f003 0308 	and.w	r3, r3, #8
 800835a:	2b08      	cmp	r3, #8
 800835c:	d122      	bne.n	80083a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f003 0308 	and.w	r3, r3, #8
 8008368:	2b08      	cmp	r3, #8
 800836a:	d11b      	bne.n	80083a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f06f 0208 	mvn.w	r2, #8
 8008374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2204      	movs	r2, #4
 800837a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	f003 0303 	and.w	r3, r3, #3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f8b1 	bl	80084f2 <HAL_TIM_IC_CaptureCallback>
 8008390:	e005      	b.n	800839e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f8a3 	bl	80084de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f8b4 	bl	8008506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	f003 0310 	and.w	r3, r3, #16
 80083ae:	2b10      	cmp	r3, #16
 80083b0:	d122      	bne.n	80083f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f003 0310 	and.w	r3, r3, #16
 80083bc:	2b10      	cmp	r3, #16
 80083be:	d11b      	bne.n	80083f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f06f 0210 	mvn.w	r2, #16
 80083c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2208      	movs	r2, #8
 80083ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f887 	bl	80084f2 <HAL_TIM_IC_CaptureCallback>
 80083e4:	e005      	b.n	80083f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f879 	bl	80084de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f88a 	bl	8008506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b01      	cmp	r3, #1
 8008404:	d10e      	bne.n	8008424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b01      	cmp	r3, #1
 8008412:	d107      	bne.n	8008424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f06f 0201 	mvn.w	r2, #1
 800841c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7f9 f888 	bl	8001534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842e:	2b80      	cmp	r3, #128	; 0x80
 8008430:	d10e      	bne.n	8008450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843c:	2b80      	cmp	r3, #128	; 0x80
 800843e:	d107      	bne.n	8008450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f9a8 	bl	80087a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800845e:	d10e      	bne.n	800847e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846a:	2b80      	cmp	r3, #128	; 0x80
 800846c:	d107      	bne.n	800847e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f99b 	bl	80087b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008488:	2b40      	cmp	r3, #64	; 0x40
 800848a:	d10e      	bne.n	80084aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008496:	2b40      	cmp	r3, #64	; 0x40
 8008498:	d107      	bne.n	80084aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f838 	bl	800851a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	f003 0320 	and.w	r3, r3, #32
 80084b4:	2b20      	cmp	r3, #32
 80084b6:	d10e      	bne.n	80084d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	f003 0320 	and.w	r3, r3, #32
 80084c2:	2b20      	cmp	r3, #32
 80084c4:	d107      	bne.n	80084d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f06f 0220 	mvn.w	r2, #32
 80084ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f95b 	bl	800878c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084e6:	bf00      	nop
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084fa:	bf00      	nop
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008522:	bf00      	nop
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
	...

08008530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a40      	ldr	r2, [pc, #256]	; (8008644 <TIM_Base_SetConfig+0x114>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d013      	beq.n	8008570 <TIM_Base_SetConfig+0x40>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800854e:	d00f      	beq.n	8008570 <TIM_Base_SetConfig+0x40>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a3d      	ldr	r2, [pc, #244]	; (8008648 <TIM_Base_SetConfig+0x118>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d00b      	beq.n	8008570 <TIM_Base_SetConfig+0x40>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a3c      	ldr	r2, [pc, #240]	; (800864c <TIM_Base_SetConfig+0x11c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d007      	beq.n	8008570 <TIM_Base_SetConfig+0x40>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a3b      	ldr	r2, [pc, #236]	; (8008650 <TIM_Base_SetConfig+0x120>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d003      	beq.n	8008570 <TIM_Base_SetConfig+0x40>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a3a      	ldr	r2, [pc, #232]	; (8008654 <TIM_Base_SetConfig+0x124>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d108      	bne.n	8008582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a2f      	ldr	r2, [pc, #188]	; (8008644 <TIM_Base_SetConfig+0x114>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d02b      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008590:	d027      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a2c      	ldr	r2, [pc, #176]	; (8008648 <TIM_Base_SetConfig+0x118>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d023      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a2b      	ldr	r2, [pc, #172]	; (800864c <TIM_Base_SetConfig+0x11c>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d01f      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a2a      	ldr	r2, [pc, #168]	; (8008650 <TIM_Base_SetConfig+0x120>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d01b      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a29      	ldr	r2, [pc, #164]	; (8008654 <TIM_Base_SetConfig+0x124>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d017      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a28      	ldr	r2, [pc, #160]	; (8008658 <TIM_Base_SetConfig+0x128>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d013      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a27      	ldr	r2, [pc, #156]	; (800865c <TIM_Base_SetConfig+0x12c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d00f      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a26      	ldr	r2, [pc, #152]	; (8008660 <TIM_Base_SetConfig+0x130>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d00b      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a25      	ldr	r2, [pc, #148]	; (8008664 <TIM_Base_SetConfig+0x134>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d007      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a24      	ldr	r2, [pc, #144]	; (8008668 <TIM_Base_SetConfig+0x138>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d003      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a23      	ldr	r2, [pc, #140]	; (800866c <TIM_Base_SetConfig+0x13c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d108      	bne.n	80085f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	689a      	ldr	r2, [r3, #8]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a0a      	ldr	r2, [pc, #40]	; (8008644 <TIM_Base_SetConfig+0x114>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d003      	beq.n	8008628 <TIM_Base_SetConfig+0xf8>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a0c      	ldr	r2, [pc, #48]	; (8008654 <TIM_Base_SetConfig+0x124>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d103      	bne.n	8008630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	615a      	str	r2, [r3, #20]
}
 8008636:	bf00      	nop
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	40010000 	.word	0x40010000
 8008648:	40000400 	.word	0x40000400
 800864c:	40000800 	.word	0x40000800
 8008650:	40000c00 	.word	0x40000c00
 8008654:	40010400 	.word	0x40010400
 8008658:	40014000 	.word	0x40014000
 800865c:	40014400 	.word	0x40014400
 8008660:	40014800 	.word	0x40014800
 8008664:	40001800 	.word	0x40001800
 8008668:	40001c00 	.word	0x40001c00
 800866c:	40002000 	.word	0x40002000

08008670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008680:	2b01      	cmp	r3, #1
 8008682:	d101      	bne.n	8008688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008684:	2302      	movs	r3, #2
 8008686:	e06d      	b.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a30      	ldr	r2, [pc, #192]	; (8008770 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d004      	beq.n	80086bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a2f      	ldr	r2, [pc, #188]	; (8008774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d108      	bne.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	4313      	orrs	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a20      	ldr	r2, [pc, #128]	; (8008770 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d022      	beq.n	8008738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086fa:	d01d      	beq.n	8008738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a1d      	ldr	r2, [pc, #116]	; (8008778 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d018      	beq.n	8008738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a1c      	ldr	r2, [pc, #112]	; (800877c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d013      	beq.n	8008738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a1a      	ldr	r2, [pc, #104]	; (8008780 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d00e      	beq.n	8008738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a15      	ldr	r2, [pc, #84]	; (8008774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d009      	beq.n	8008738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a16      	ldr	r2, [pc, #88]	; (8008784 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d004      	beq.n	8008738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a15      	ldr	r2, [pc, #84]	; (8008788 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d10c      	bne.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800873e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	4313      	orrs	r3, r2
 8008748:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	40010000 	.word	0x40010000
 8008774:	40010400 	.word	0x40010400
 8008778:	40000400 	.word	0x40000400
 800877c:	40000800 	.word	0x40000800
 8008780:	40000c00 	.word	0x40000c00
 8008784:	40014000 	.word	0x40014000
 8008788:	40001800 	.word	0x40001800

0800878c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e040      	b.n	800885c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d106      	bne.n	80087f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7f9 f9c8 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2224      	movs	r2, #36	; 0x24
 80087f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 0201 	bic.w	r2, r2, #1
 8008804:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fb3e 	bl	8008e88 <UART_SetConfig>
 800880c:	4603      	mov	r3, r0
 800880e:	2b01      	cmp	r3, #1
 8008810:	d101      	bne.n	8008816 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e022      	b.n	800885c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fd96 	bl	8009350 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689a      	ldr	r2, [r3, #8]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0201 	orr.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fe1d 	bl	8009494 <UART_CheckIdleState>
 800885a:	4603      	mov	r3, r0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b0ba      	sub	sp, #232	; 0xe8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800888a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800888e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008892:	4013      	ands	r3, r2
 8008894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800889c:	2b00      	cmp	r3, #0
 800889e:	d115      	bne.n	80088cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80088a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a4:	f003 0320 	and.w	r3, r3, #32
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00f      	beq.n	80088cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80088ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088b0:	f003 0320 	and.w	r3, r3, #32
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d009      	beq.n	80088cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 82ac 	beq.w	8008e1a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	4798      	blx	r3
      }
      return;
 80088ca:	e2a6      	b.n	8008e1a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80088cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 8117 	beq.w	8008b04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80088d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d106      	bne.n	80088f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80088e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80088e6:	4b85      	ldr	r3, [pc, #532]	; (8008afc <HAL_UART_IRQHandler+0x298>)
 80088e8:	4013      	ands	r3, r2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 810a 	beq.w	8008b04 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d011      	beq.n	8008920 <HAL_UART_IRQHandler+0xbc>
 80088fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00b      	beq.n	8008920 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2201      	movs	r2, #1
 800890e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008916:	f043 0201 	orr.w	r2, r3, #1
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d011      	beq.n	8008950 <HAL_UART_IRQHandler+0xec>
 800892c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00b      	beq.n	8008950 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2202      	movs	r2, #2
 800893e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008946:	f043 0204 	orr.w	r2, r3, #4
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d011      	beq.n	8008980 <HAL_UART_IRQHandler+0x11c>
 800895c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00b      	beq.n	8008980 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2204      	movs	r2, #4
 800896e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008976:	f043 0202 	orr.w	r2, r3, #2
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008984:	f003 0308 	and.w	r3, r3, #8
 8008988:	2b00      	cmp	r3, #0
 800898a:	d017      	beq.n	80089bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800898c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008990:	f003 0320 	and.w	r3, r3, #32
 8008994:	2b00      	cmp	r3, #0
 8008996:	d105      	bne.n	80089a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800899c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2208      	movs	r2, #8
 80089aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089b2:	f043 0208 	orr.w	r2, r3, #8
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80089bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d012      	beq.n	80089ee <HAL_UART_IRQHandler+0x18a>
 80089c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00c      	beq.n	80089ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089e4:	f043 0220 	orr.w	r2, r3, #32
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 8212 	beq.w	8008e1e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80089fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fe:	f003 0320 	and.w	r3, r3, #32
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00d      	beq.n	8008a22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a0a:	f003 0320 	and.w	r3, r3, #32
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d007      	beq.n	8008a22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a36:	2b40      	cmp	r3, #64	; 0x40
 8008a38:	d005      	beq.n	8008a46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d04f      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fe37 	bl	80096ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a56:	2b40      	cmp	r3, #64	; 0x40
 8008a58:	d141      	bne.n	8008ade <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3308      	adds	r3, #8
 8008a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3308      	adds	r3, #8
 8008a82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008a86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008a92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1d9      	bne.n	8008a5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d013      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ab2:	4a13      	ldr	r2, [pc, #76]	; (8008b00 <HAL_UART_IRQHandler+0x29c>)
 8008ab4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fa f9d0 	bl	8002e60 <HAL_DMA_Abort_IT>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d017      	beq.n	8008af6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad4:	e00f      	b.n	8008af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f9b6 	bl	8008e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008adc:	e00b      	b.n	8008af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f9b2 	bl	8008e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ae4:	e007      	b.n	8008af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f9ae 	bl	8008e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008af4:	e193      	b.n	8008e1e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008af6:	bf00      	nop
    return;
 8008af8:	e191      	b.n	8008e1e <HAL_UART_IRQHandler+0x5ba>
 8008afa:	bf00      	nop
 8008afc:	04000120 	.word	0x04000120
 8008b00:	08009783 	.word	0x08009783

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	f040 814c 	bne.w	8008da6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b12:	f003 0310 	and.w	r3, r3, #16
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 8145 	beq.w	8008da6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b20:	f003 0310 	and.w	r3, r3, #16
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 813e 	beq.w	8008da6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2210      	movs	r2, #16
 8008b30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3c:	2b40      	cmp	r3, #64	; 0x40
 8008b3e:	f040 80b6 	bne.w	8008cae <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 8165 	beq.w	8008e22 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b62:	429a      	cmp	r2, r3
 8008b64:	f080 815d 	bcs.w	8008e22 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b7c:	f000 8086 	beq.w	8008c8c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008baa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008bb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bba:	e841 2300 	strex	r3, r2, [r1]
 8008bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1da      	bne.n	8008b80 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bd4:	e853 3f00 	ldrex	r3, [r3]
 8008bd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bdc:	f023 0301 	bic.w	r3, r3, #1
 8008be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3308      	adds	r3, #8
 8008bea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008bf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008bfa:	e841 2300 	strex	r3, r2, [r1]
 8008bfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1e1      	bne.n	8008bca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3308      	adds	r3, #8
 8008c0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c10:	e853 3f00 	ldrex	r3, [r3]
 8008c14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3308      	adds	r3, #8
 8008c26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c32:	e841 2300 	strex	r3, r2, [r1]
 8008c36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1e3      	bne.n	8008c06 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2220      	movs	r2, #32
 8008c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c54:	e853 3f00 	ldrex	r3, [r3]
 8008c58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c5c:	f023 0310 	bic.w	r3, r3, #16
 8008c60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c76:	e841 2300 	strex	r3, r2, [r1]
 8008c7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1e4      	bne.n	8008c4c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fa f87a 	bl	8002d80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f8d8 	bl	8008e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008cac:	e0b9      	b.n	8008e22 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 80ab 	beq.w	8008e26 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8008cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 80a6 	beq.w	8008e26 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce2:	e853 3f00 	ldrex	r3, [r3]
 8008ce6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8008cfe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d04:	e841 2300 	strex	r3, r2, [r1]
 8008d08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1e4      	bne.n	8008cda <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3308      	adds	r3, #8
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	623b      	str	r3, [r7, #32]
   return(result);
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	f023 0301 	bic.w	r3, r3, #1
 8008d26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3308      	adds	r3, #8
 8008d30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d34:	633a      	str	r2, [r7, #48]	; 0x30
 8008d36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e3      	bne.n	8008d10 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f023 0310 	bic.w	r3, r3, #16
 8008d70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d7e:	61fb      	str	r3, [r7, #28]
 8008d80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d82:	69b9      	ldr	r1, [r7, #24]
 8008d84:	69fa      	ldr	r2, [r7, #28]
 8008d86:	e841 2300 	strex	r3, r2, [r1]
 8008d8a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1e4      	bne.n	8008d5c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2202      	movs	r2, #2
 8008d96:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f85c 	bl	8008e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008da4:	e03f      	b.n	8008e26 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00e      	beq.n	8008dd0 <HAL_UART_IRQHandler+0x56c>
 8008db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d008      	beq.n	8008dd0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008dc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f853 	bl	8008e74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dce:	e02d      	b.n	8008e2c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00e      	beq.n	8008dfa <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d008      	beq.n	8008dfa <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d01c      	beq.n	8008e2a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	4798      	blx	r3
    }
    return;
 8008df8:	e017      	b.n	8008e2a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d012      	beq.n	8008e2c <HAL_UART_IRQHandler+0x5c8>
 8008e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00c      	beq.n	8008e2c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fccb 	bl	80097ae <UART_EndTransmit_IT>
    return;
 8008e18:	e008      	b.n	8008e2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8008e1a:	bf00      	nop
 8008e1c:	e006      	b.n	8008e2c <HAL_UART_IRQHandler+0x5c8>
    return;
 8008e1e:	bf00      	nop
 8008e20:	e004      	b.n	8008e2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8008e22:	bf00      	nop
 8008e24:	e002      	b.n	8008e2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8008e26:	bf00      	nop
 8008e28:	e000      	b.n	8008e2c <HAL_UART_IRQHandler+0x5c8>
    return;
 8008e2a:	bf00      	nop
  }

}
 8008e2c:	37e8      	adds	r7, #232	; 0xe8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop

08008e34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b088      	sub	sp, #32
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689a      	ldr	r2, [r3, #8]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	431a      	orrs	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	4ba6      	ldr	r3, [pc, #664]	; (800914c <UART_SetConfig+0x2c4>)
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	6812      	ldr	r2, [r2, #0]
 8008eba:	6979      	ldr	r1, [r7, #20]
 8008ebc:	430b      	orrs	r3, r1
 8008ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	68da      	ldr	r2, [r3, #12]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a94      	ldr	r2, [pc, #592]	; (8009150 <UART_SetConfig+0x2c8>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d120      	bne.n	8008f46 <UART_SetConfig+0xbe>
 8008f04:	4b93      	ldr	r3, [pc, #588]	; (8009154 <UART_SetConfig+0x2cc>)
 8008f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f0a:	f003 0303 	and.w	r3, r3, #3
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d816      	bhi.n	8008f40 <UART_SetConfig+0xb8>
 8008f12:	a201      	add	r2, pc, #4	; (adr r2, 8008f18 <UART_SetConfig+0x90>)
 8008f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f18:	08008f29 	.word	0x08008f29
 8008f1c:	08008f35 	.word	0x08008f35
 8008f20:	08008f2f 	.word	0x08008f2f
 8008f24:	08008f3b 	.word	0x08008f3b
 8008f28:	2301      	movs	r3, #1
 8008f2a:	77fb      	strb	r3, [r7, #31]
 8008f2c:	e150      	b.n	80091d0 <UART_SetConfig+0x348>
 8008f2e:	2302      	movs	r3, #2
 8008f30:	77fb      	strb	r3, [r7, #31]
 8008f32:	e14d      	b.n	80091d0 <UART_SetConfig+0x348>
 8008f34:	2304      	movs	r3, #4
 8008f36:	77fb      	strb	r3, [r7, #31]
 8008f38:	e14a      	b.n	80091d0 <UART_SetConfig+0x348>
 8008f3a:	2308      	movs	r3, #8
 8008f3c:	77fb      	strb	r3, [r7, #31]
 8008f3e:	e147      	b.n	80091d0 <UART_SetConfig+0x348>
 8008f40:	2310      	movs	r3, #16
 8008f42:	77fb      	strb	r3, [r7, #31]
 8008f44:	e144      	b.n	80091d0 <UART_SetConfig+0x348>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a83      	ldr	r2, [pc, #524]	; (8009158 <UART_SetConfig+0x2d0>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d132      	bne.n	8008fb6 <UART_SetConfig+0x12e>
 8008f50:	4b80      	ldr	r3, [pc, #512]	; (8009154 <UART_SetConfig+0x2cc>)
 8008f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f56:	f003 030c 	and.w	r3, r3, #12
 8008f5a:	2b0c      	cmp	r3, #12
 8008f5c:	d828      	bhi.n	8008fb0 <UART_SetConfig+0x128>
 8008f5e:	a201      	add	r2, pc, #4	; (adr r2, 8008f64 <UART_SetConfig+0xdc>)
 8008f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f64:	08008f99 	.word	0x08008f99
 8008f68:	08008fb1 	.word	0x08008fb1
 8008f6c:	08008fb1 	.word	0x08008fb1
 8008f70:	08008fb1 	.word	0x08008fb1
 8008f74:	08008fa5 	.word	0x08008fa5
 8008f78:	08008fb1 	.word	0x08008fb1
 8008f7c:	08008fb1 	.word	0x08008fb1
 8008f80:	08008fb1 	.word	0x08008fb1
 8008f84:	08008f9f 	.word	0x08008f9f
 8008f88:	08008fb1 	.word	0x08008fb1
 8008f8c:	08008fb1 	.word	0x08008fb1
 8008f90:	08008fb1 	.word	0x08008fb1
 8008f94:	08008fab 	.word	0x08008fab
 8008f98:	2300      	movs	r3, #0
 8008f9a:	77fb      	strb	r3, [r7, #31]
 8008f9c:	e118      	b.n	80091d0 <UART_SetConfig+0x348>
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	77fb      	strb	r3, [r7, #31]
 8008fa2:	e115      	b.n	80091d0 <UART_SetConfig+0x348>
 8008fa4:	2304      	movs	r3, #4
 8008fa6:	77fb      	strb	r3, [r7, #31]
 8008fa8:	e112      	b.n	80091d0 <UART_SetConfig+0x348>
 8008faa:	2308      	movs	r3, #8
 8008fac:	77fb      	strb	r3, [r7, #31]
 8008fae:	e10f      	b.n	80091d0 <UART_SetConfig+0x348>
 8008fb0:	2310      	movs	r3, #16
 8008fb2:	77fb      	strb	r3, [r7, #31]
 8008fb4:	e10c      	b.n	80091d0 <UART_SetConfig+0x348>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a68      	ldr	r2, [pc, #416]	; (800915c <UART_SetConfig+0x2d4>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d120      	bne.n	8009002 <UART_SetConfig+0x17a>
 8008fc0:	4b64      	ldr	r3, [pc, #400]	; (8009154 <UART_SetConfig+0x2cc>)
 8008fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008fca:	2b30      	cmp	r3, #48	; 0x30
 8008fcc:	d013      	beq.n	8008ff6 <UART_SetConfig+0x16e>
 8008fce:	2b30      	cmp	r3, #48	; 0x30
 8008fd0:	d814      	bhi.n	8008ffc <UART_SetConfig+0x174>
 8008fd2:	2b20      	cmp	r3, #32
 8008fd4:	d009      	beq.n	8008fea <UART_SetConfig+0x162>
 8008fd6:	2b20      	cmp	r3, #32
 8008fd8:	d810      	bhi.n	8008ffc <UART_SetConfig+0x174>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d002      	beq.n	8008fe4 <UART_SetConfig+0x15c>
 8008fde:	2b10      	cmp	r3, #16
 8008fe0:	d006      	beq.n	8008ff0 <UART_SetConfig+0x168>
 8008fe2:	e00b      	b.n	8008ffc <UART_SetConfig+0x174>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	77fb      	strb	r3, [r7, #31]
 8008fe8:	e0f2      	b.n	80091d0 <UART_SetConfig+0x348>
 8008fea:	2302      	movs	r3, #2
 8008fec:	77fb      	strb	r3, [r7, #31]
 8008fee:	e0ef      	b.n	80091d0 <UART_SetConfig+0x348>
 8008ff0:	2304      	movs	r3, #4
 8008ff2:	77fb      	strb	r3, [r7, #31]
 8008ff4:	e0ec      	b.n	80091d0 <UART_SetConfig+0x348>
 8008ff6:	2308      	movs	r3, #8
 8008ff8:	77fb      	strb	r3, [r7, #31]
 8008ffa:	e0e9      	b.n	80091d0 <UART_SetConfig+0x348>
 8008ffc:	2310      	movs	r3, #16
 8008ffe:	77fb      	strb	r3, [r7, #31]
 8009000:	e0e6      	b.n	80091d0 <UART_SetConfig+0x348>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a56      	ldr	r2, [pc, #344]	; (8009160 <UART_SetConfig+0x2d8>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d120      	bne.n	800904e <UART_SetConfig+0x1c6>
 800900c:	4b51      	ldr	r3, [pc, #324]	; (8009154 <UART_SetConfig+0x2cc>)
 800900e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009012:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009016:	2bc0      	cmp	r3, #192	; 0xc0
 8009018:	d013      	beq.n	8009042 <UART_SetConfig+0x1ba>
 800901a:	2bc0      	cmp	r3, #192	; 0xc0
 800901c:	d814      	bhi.n	8009048 <UART_SetConfig+0x1c0>
 800901e:	2b80      	cmp	r3, #128	; 0x80
 8009020:	d009      	beq.n	8009036 <UART_SetConfig+0x1ae>
 8009022:	2b80      	cmp	r3, #128	; 0x80
 8009024:	d810      	bhi.n	8009048 <UART_SetConfig+0x1c0>
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <UART_SetConfig+0x1a8>
 800902a:	2b40      	cmp	r3, #64	; 0x40
 800902c:	d006      	beq.n	800903c <UART_SetConfig+0x1b4>
 800902e:	e00b      	b.n	8009048 <UART_SetConfig+0x1c0>
 8009030:	2300      	movs	r3, #0
 8009032:	77fb      	strb	r3, [r7, #31]
 8009034:	e0cc      	b.n	80091d0 <UART_SetConfig+0x348>
 8009036:	2302      	movs	r3, #2
 8009038:	77fb      	strb	r3, [r7, #31]
 800903a:	e0c9      	b.n	80091d0 <UART_SetConfig+0x348>
 800903c:	2304      	movs	r3, #4
 800903e:	77fb      	strb	r3, [r7, #31]
 8009040:	e0c6      	b.n	80091d0 <UART_SetConfig+0x348>
 8009042:	2308      	movs	r3, #8
 8009044:	77fb      	strb	r3, [r7, #31]
 8009046:	e0c3      	b.n	80091d0 <UART_SetConfig+0x348>
 8009048:	2310      	movs	r3, #16
 800904a:	77fb      	strb	r3, [r7, #31]
 800904c:	e0c0      	b.n	80091d0 <UART_SetConfig+0x348>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a44      	ldr	r2, [pc, #272]	; (8009164 <UART_SetConfig+0x2dc>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d125      	bne.n	80090a4 <UART_SetConfig+0x21c>
 8009058:	4b3e      	ldr	r3, [pc, #248]	; (8009154 <UART_SetConfig+0x2cc>)
 800905a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800905e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009066:	d017      	beq.n	8009098 <UART_SetConfig+0x210>
 8009068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800906c:	d817      	bhi.n	800909e <UART_SetConfig+0x216>
 800906e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009072:	d00b      	beq.n	800908c <UART_SetConfig+0x204>
 8009074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009078:	d811      	bhi.n	800909e <UART_SetConfig+0x216>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <UART_SetConfig+0x1fe>
 800907e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009082:	d006      	beq.n	8009092 <UART_SetConfig+0x20a>
 8009084:	e00b      	b.n	800909e <UART_SetConfig+0x216>
 8009086:	2300      	movs	r3, #0
 8009088:	77fb      	strb	r3, [r7, #31]
 800908a:	e0a1      	b.n	80091d0 <UART_SetConfig+0x348>
 800908c:	2302      	movs	r3, #2
 800908e:	77fb      	strb	r3, [r7, #31]
 8009090:	e09e      	b.n	80091d0 <UART_SetConfig+0x348>
 8009092:	2304      	movs	r3, #4
 8009094:	77fb      	strb	r3, [r7, #31]
 8009096:	e09b      	b.n	80091d0 <UART_SetConfig+0x348>
 8009098:	2308      	movs	r3, #8
 800909a:	77fb      	strb	r3, [r7, #31]
 800909c:	e098      	b.n	80091d0 <UART_SetConfig+0x348>
 800909e:	2310      	movs	r3, #16
 80090a0:	77fb      	strb	r3, [r7, #31]
 80090a2:	e095      	b.n	80091d0 <UART_SetConfig+0x348>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a2f      	ldr	r2, [pc, #188]	; (8009168 <UART_SetConfig+0x2e0>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d125      	bne.n	80090fa <UART_SetConfig+0x272>
 80090ae:	4b29      	ldr	r3, [pc, #164]	; (8009154 <UART_SetConfig+0x2cc>)
 80090b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80090b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090bc:	d017      	beq.n	80090ee <UART_SetConfig+0x266>
 80090be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090c2:	d817      	bhi.n	80090f4 <UART_SetConfig+0x26c>
 80090c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090c8:	d00b      	beq.n	80090e2 <UART_SetConfig+0x25a>
 80090ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090ce:	d811      	bhi.n	80090f4 <UART_SetConfig+0x26c>
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <UART_SetConfig+0x254>
 80090d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090d8:	d006      	beq.n	80090e8 <UART_SetConfig+0x260>
 80090da:	e00b      	b.n	80090f4 <UART_SetConfig+0x26c>
 80090dc:	2301      	movs	r3, #1
 80090de:	77fb      	strb	r3, [r7, #31]
 80090e0:	e076      	b.n	80091d0 <UART_SetConfig+0x348>
 80090e2:	2302      	movs	r3, #2
 80090e4:	77fb      	strb	r3, [r7, #31]
 80090e6:	e073      	b.n	80091d0 <UART_SetConfig+0x348>
 80090e8:	2304      	movs	r3, #4
 80090ea:	77fb      	strb	r3, [r7, #31]
 80090ec:	e070      	b.n	80091d0 <UART_SetConfig+0x348>
 80090ee:	2308      	movs	r3, #8
 80090f0:	77fb      	strb	r3, [r7, #31]
 80090f2:	e06d      	b.n	80091d0 <UART_SetConfig+0x348>
 80090f4:	2310      	movs	r3, #16
 80090f6:	77fb      	strb	r3, [r7, #31]
 80090f8:	e06a      	b.n	80091d0 <UART_SetConfig+0x348>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a1b      	ldr	r2, [pc, #108]	; (800916c <UART_SetConfig+0x2e4>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d138      	bne.n	8009176 <UART_SetConfig+0x2ee>
 8009104:	4b13      	ldr	r3, [pc, #76]	; (8009154 <UART_SetConfig+0x2cc>)
 8009106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800910a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800910e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009112:	d017      	beq.n	8009144 <UART_SetConfig+0x2bc>
 8009114:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009118:	d82a      	bhi.n	8009170 <UART_SetConfig+0x2e8>
 800911a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800911e:	d00b      	beq.n	8009138 <UART_SetConfig+0x2b0>
 8009120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009124:	d824      	bhi.n	8009170 <UART_SetConfig+0x2e8>
 8009126:	2b00      	cmp	r3, #0
 8009128:	d003      	beq.n	8009132 <UART_SetConfig+0x2aa>
 800912a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800912e:	d006      	beq.n	800913e <UART_SetConfig+0x2b6>
 8009130:	e01e      	b.n	8009170 <UART_SetConfig+0x2e8>
 8009132:	2300      	movs	r3, #0
 8009134:	77fb      	strb	r3, [r7, #31]
 8009136:	e04b      	b.n	80091d0 <UART_SetConfig+0x348>
 8009138:	2302      	movs	r3, #2
 800913a:	77fb      	strb	r3, [r7, #31]
 800913c:	e048      	b.n	80091d0 <UART_SetConfig+0x348>
 800913e:	2304      	movs	r3, #4
 8009140:	77fb      	strb	r3, [r7, #31]
 8009142:	e045      	b.n	80091d0 <UART_SetConfig+0x348>
 8009144:	2308      	movs	r3, #8
 8009146:	77fb      	strb	r3, [r7, #31]
 8009148:	e042      	b.n	80091d0 <UART_SetConfig+0x348>
 800914a:	bf00      	nop
 800914c:	efff69f3 	.word	0xefff69f3
 8009150:	40011000 	.word	0x40011000
 8009154:	40023800 	.word	0x40023800
 8009158:	40004400 	.word	0x40004400
 800915c:	40004800 	.word	0x40004800
 8009160:	40004c00 	.word	0x40004c00
 8009164:	40005000 	.word	0x40005000
 8009168:	40011400 	.word	0x40011400
 800916c:	40007800 	.word	0x40007800
 8009170:	2310      	movs	r3, #16
 8009172:	77fb      	strb	r3, [r7, #31]
 8009174:	e02c      	b.n	80091d0 <UART_SetConfig+0x348>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a72      	ldr	r2, [pc, #456]	; (8009344 <UART_SetConfig+0x4bc>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d125      	bne.n	80091cc <UART_SetConfig+0x344>
 8009180:	4b71      	ldr	r3, [pc, #452]	; (8009348 <UART_SetConfig+0x4c0>)
 8009182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009186:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800918a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800918e:	d017      	beq.n	80091c0 <UART_SetConfig+0x338>
 8009190:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009194:	d817      	bhi.n	80091c6 <UART_SetConfig+0x33e>
 8009196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800919a:	d00b      	beq.n	80091b4 <UART_SetConfig+0x32c>
 800919c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091a0:	d811      	bhi.n	80091c6 <UART_SetConfig+0x33e>
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <UART_SetConfig+0x326>
 80091a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091aa:	d006      	beq.n	80091ba <UART_SetConfig+0x332>
 80091ac:	e00b      	b.n	80091c6 <UART_SetConfig+0x33e>
 80091ae:	2300      	movs	r3, #0
 80091b0:	77fb      	strb	r3, [r7, #31]
 80091b2:	e00d      	b.n	80091d0 <UART_SetConfig+0x348>
 80091b4:	2302      	movs	r3, #2
 80091b6:	77fb      	strb	r3, [r7, #31]
 80091b8:	e00a      	b.n	80091d0 <UART_SetConfig+0x348>
 80091ba:	2304      	movs	r3, #4
 80091bc:	77fb      	strb	r3, [r7, #31]
 80091be:	e007      	b.n	80091d0 <UART_SetConfig+0x348>
 80091c0:	2308      	movs	r3, #8
 80091c2:	77fb      	strb	r3, [r7, #31]
 80091c4:	e004      	b.n	80091d0 <UART_SetConfig+0x348>
 80091c6:	2310      	movs	r3, #16
 80091c8:	77fb      	strb	r3, [r7, #31]
 80091ca:	e001      	b.n	80091d0 <UART_SetConfig+0x348>
 80091cc:	2310      	movs	r3, #16
 80091ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091d8:	d15b      	bne.n	8009292 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80091da:	7ffb      	ldrb	r3, [r7, #31]
 80091dc:	2b08      	cmp	r3, #8
 80091de:	d828      	bhi.n	8009232 <UART_SetConfig+0x3aa>
 80091e0:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <UART_SetConfig+0x360>)
 80091e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e6:	bf00      	nop
 80091e8:	0800920d 	.word	0x0800920d
 80091ec:	08009215 	.word	0x08009215
 80091f0:	0800921d 	.word	0x0800921d
 80091f4:	08009233 	.word	0x08009233
 80091f8:	08009223 	.word	0x08009223
 80091fc:	08009233 	.word	0x08009233
 8009200:	08009233 	.word	0x08009233
 8009204:	08009233 	.word	0x08009233
 8009208:	0800922b 	.word	0x0800922b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800920c:	f7fe faf6 	bl	80077fc <HAL_RCC_GetPCLK1Freq>
 8009210:	61b8      	str	r0, [r7, #24]
        break;
 8009212:	e013      	b.n	800923c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009214:	f7fe fb06 	bl	8007824 <HAL_RCC_GetPCLK2Freq>
 8009218:	61b8      	str	r0, [r7, #24]
        break;
 800921a:	e00f      	b.n	800923c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800921c:	4b4b      	ldr	r3, [pc, #300]	; (800934c <UART_SetConfig+0x4c4>)
 800921e:	61bb      	str	r3, [r7, #24]
        break;
 8009220:	e00c      	b.n	800923c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009222:	f7fe f9d9 	bl	80075d8 <HAL_RCC_GetSysClockFreq>
 8009226:	61b8      	str	r0, [r7, #24]
        break;
 8009228:	e008      	b.n	800923c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800922a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800922e:	61bb      	str	r3, [r7, #24]
        break;
 8009230:	e004      	b.n	800923c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009232:	2300      	movs	r3, #0
 8009234:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	77bb      	strb	r3, [r7, #30]
        break;
 800923a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d074      	beq.n	800932c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	005a      	lsls	r2, r3, #1
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	085b      	lsrs	r3, r3, #1
 800924c:	441a      	add	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	fbb2 f3f3 	udiv	r3, r2, r3
 8009256:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	2b0f      	cmp	r3, #15
 800925c:	d916      	bls.n	800928c <UART_SetConfig+0x404>
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009264:	d212      	bcs.n	800928c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	b29b      	uxth	r3, r3
 800926a:	f023 030f 	bic.w	r3, r3, #15
 800926e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	085b      	lsrs	r3, r3, #1
 8009274:	b29b      	uxth	r3, r3
 8009276:	f003 0307 	and.w	r3, r3, #7
 800927a:	b29a      	uxth	r2, r3
 800927c:	89fb      	ldrh	r3, [r7, #14]
 800927e:	4313      	orrs	r3, r2
 8009280:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	89fa      	ldrh	r2, [r7, #14]
 8009288:	60da      	str	r2, [r3, #12]
 800928a:	e04f      	b.n	800932c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	77bb      	strb	r3, [r7, #30]
 8009290:	e04c      	b.n	800932c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009292:	7ffb      	ldrb	r3, [r7, #31]
 8009294:	2b08      	cmp	r3, #8
 8009296:	d828      	bhi.n	80092ea <UART_SetConfig+0x462>
 8009298:	a201      	add	r2, pc, #4	; (adr r2, 80092a0 <UART_SetConfig+0x418>)
 800929a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929e:	bf00      	nop
 80092a0:	080092c5 	.word	0x080092c5
 80092a4:	080092cd 	.word	0x080092cd
 80092a8:	080092d5 	.word	0x080092d5
 80092ac:	080092eb 	.word	0x080092eb
 80092b0:	080092db 	.word	0x080092db
 80092b4:	080092eb 	.word	0x080092eb
 80092b8:	080092eb 	.word	0x080092eb
 80092bc:	080092eb 	.word	0x080092eb
 80092c0:	080092e3 	.word	0x080092e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092c4:	f7fe fa9a 	bl	80077fc <HAL_RCC_GetPCLK1Freq>
 80092c8:	61b8      	str	r0, [r7, #24]
        break;
 80092ca:	e013      	b.n	80092f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092cc:	f7fe faaa 	bl	8007824 <HAL_RCC_GetPCLK2Freq>
 80092d0:	61b8      	str	r0, [r7, #24]
        break;
 80092d2:	e00f      	b.n	80092f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092d4:	4b1d      	ldr	r3, [pc, #116]	; (800934c <UART_SetConfig+0x4c4>)
 80092d6:	61bb      	str	r3, [r7, #24]
        break;
 80092d8:	e00c      	b.n	80092f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092da:	f7fe f97d 	bl	80075d8 <HAL_RCC_GetSysClockFreq>
 80092de:	61b8      	str	r0, [r7, #24]
        break;
 80092e0:	e008      	b.n	80092f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092e6:	61bb      	str	r3, [r7, #24]
        break;
 80092e8:	e004      	b.n	80092f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	77bb      	strb	r3, [r7, #30]
        break;
 80092f2:	bf00      	nop
    }

    if (pclk != 0U)
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d018      	beq.n	800932c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	085a      	lsrs	r2, r3, #1
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	441a      	add	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	fbb2 f3f3 	udiv	r3, r2, r3
 800930c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	2b0f      	cmp	r3, #15
 8009312:	d909      	bls.n	8009328 <UART_SetConfig+0x4a0>
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800931a:	d205      	bcs.n	8009328 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	b29a      	uxth	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	60da      	str	r2, [r3, #12]
 8009326:	e001      	b.n	800932c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009338:	7fbb      	ldrb	r3, [r7, #30]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3720      	adds	r7, #32
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	40007c00 	.word	0x40007c00
 8009348:	40023800 	.word	0x40023800
 800934c:	00f42400 	.word	0x00f42400

08009350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00a      	beq.n	800937a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00a      	beq.n	800939c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	430a      	orrs	r2, r1
 800939a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a0:	f003 0304 	and.w	r3, r3, #4
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00a      	beq.n	80093be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c2:	f003 0308 	and.w	r3, r3, #8
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	430a      	orrs	r2, r1
 80093de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e4:	f003 0310 	and.w	r3, r3, #16
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00a      	beq.n	8009402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	430a      	orrs	r2, r1
 8009400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009406:	f003 0320 	and.w	r3, r3, #32
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00a      	beq.n	8009424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	430a      	orrs	r2, r1
 8009422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01a      	beq.n	8009466 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	430a      	orrs	r2, r1
 8009444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800944e:	d10a      	bne.n	8009466 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00a      	beq.n	8009488 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	605a      	str	r2, [r3, #4]
  }
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af02      	add	r7, sp, #8
 800949a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094a4:	f7f8 fe28 	bl	80020f8 <HAL_GetTick>
 80094a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 0308 	and.w	r3, r3, #8
 80094b4:	2b08      	cmp	r3, #8
 80094b6:	d10e      	bne.n	80094d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f831 	bl	800952e <UART_WaitOnFlagUntilTimeout>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094d2:	2303      	movs	r3, #3
 80094d4:	e027      	b.n	8009526 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	d10e      	bne.n	8009502 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f81b 	bl	800952e <UART_WaitOnFlagUntilTimeout>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e011      	b.n	8009526 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2220      	movs	r2, #32
 8009506:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2220      	movs	r2, #32
 800950c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b09c      	sub	sp, #112	; 0x70
 8009532:	af00      	add	r7, sp, #0
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	60b9      	str	r1, [r7, #8]
 8009538:	603b      	str	r3, [r7, #0]
 800953a:	4613      	mov	r3, r2
 800953c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800953e:	e0a7      	b.n	8009690 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009546:	f000 80a3 	beq.w	8009690 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800954a:	f7f8 fdd5 	bl	80020f8 <HAL_GetTick>
 800954e:	4602      	mov	r2, r0
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009556:	429a      	cmp	r2, r3
 8009558:	d302      	bcc.n	8009560 <UART_WaitOnFlagUntilTimeout+0x32>
 800955a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800955c:	2b00      	cmp	r3, #0
 800955e:	d13f      	bne.n	80095e0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800956e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009570:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009574:	667b      	str	r3, [r7, #100]	; 0x64
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800957e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009580:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009584:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800958c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e6      	bne.n	8009560 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3308      	adds	r3, #8
 8009598:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800959c:	e853 3f00 	ldrex	r3, [r3]
 80095a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a4:	f023 0301 	bic.w	r3, r3, #1
 80095a8:	663b      	str	r3, [r7, #96]	; 0x60
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3308      	adds	r3, #8
 80095b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80095b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095ba:	e841 2300 	strex	r3, r2, [r1]
 80095be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80095c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1e5      	bne.n	8009592 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2220      	movs	r2, #32
 80095ca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2220      	movs	r2, #32
 80095d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80095dc:	2303      	movs	r3, #3
 80095de:	e068      	b.n	80096b2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0304 	and.w	r3, r3, #4
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d050      	beq.n	8009690 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095fc:	d148      	bne.n	8009690 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009606:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	e853 3f00 	ldrex	r3, [r3]
 8009614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800961c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009626:	637b      	str	r3, [r7, #52]	; 0x34
 8009628:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800962c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800962e:	e841 2300 	strex	r3, r2, [r1]
 8009632:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e6      	bne.n	8009608 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3308      	adds	r3, #8
 8009640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	613b      	str	r3, [r7, #16]
   return(result);
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f023 0301 	bic.w	r3, r3, #1
 8009650:	66bb      	str	r3, [r7, #104]	; 0x68
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3308      	adds	r3, #8
 8009658:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800965a:	623a      	str	r2, [r7, #32]
 800965c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	69f9      	ldr	r1, [r7, #28]
 8009660:	6a3a      	ldr	r2, [r7, #32]
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	61bb      	str	r3, [r7, #24]
   return(result);
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e5      	bne.n	800963a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2220      	movs	r2, #32
 8009672:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2220      	movs	r2, #32
 8009678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2220      	movs	r2, #32
 8009680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	e010      	b.n	80096b2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	69da      	ldr	r2, [r3, #28]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	4013      	ands	r3, r2
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	429a      	cmp	r2, r3
 800969e:	bf0c      	ite	eq
 80096a0:	2301      	moveq	r3, #1
 80096a2:	2300      	movne	r3, #0
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	79fb      	ldrb	r3, [r7, #7]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	f43f af48 	beq.w	8009540 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3770      	adds	r7, #112	; 0x70
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b095      	sub	sp, #84	; 0x54
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ca:	e853 3f00 	ldrex	r3, [r3]
 80096ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	461a      	mov	r2, r3
 80096de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096e0:	643b      	str	r3, [r7, #64]	; 0x40
 80096e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096e8:	e841 2300 	strex	r3, r2, [r1]
 80096ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1e6      	bne.n	80096c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3308      	adds	r3, #8
 80096fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	e853 3f00 	ldrex	r3, [r3]
 8009702:	61fb      	str	r3, [r7, #28]
   return(result);
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	f023 0301 	bic.w	r3, r3, #1
 800970a:	64bb      	str	r3, [r7, #72]	; 0x48
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3308      	adds	r3, #8
 8009712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009714:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800971a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800971c:	e841 2300 	strex	r3, r2, [r1]
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e5      	bne.n	80096f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800972c:	2b01      	cmp	r3, #1
 800972e:	d118      	bne.n	8009762 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	60bb      	str	r3, [r7, #8]
   return(result);
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f023 0310 	bic.w	r3, r3, #16
 8009744:	647b      	str	r3, [r7, #68]	; 0x44
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800974e:	61bb      	str	r3, [r7, #24]
 8009750:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	6979      	ldr	r1, [r7, #20]
 8009754:	69ba      	ldr	r2, [r7, #24]
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	613b      	str	r3, [r7, #16]
   return(result);
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e6      	bne.n	8009730 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2220      	movs	r2, #32
 8009766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009776:	bf00      	nop
 8009778:	3754      	adds	r7, #84	; 0x54
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr

08009782 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f7ff fb51 	bl	8008e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097a6:	bf00      	nop
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b088      	sub	sp, #32
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	e853 3f00 	ldrex	r3, [r3]
 80097c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ca:	61fb      	str	r3, [r7, #28]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	461a      	mov	r2, r3
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	61bb      	str	r3, [r7, #24]
 80097d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d8:	6979      	ldr	r1, [r7, #20]
 80097da:	69ba      	ldr	r2, [r7, #24]
 80097dc:	e841 2300 	strex	r3, r2, [r1]
 80097e0:	613b      	str	r3, [r7, #16]
   return(result);
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1e6      	bne.n	80097b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2220      	movs	r2, #32
 80097ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7ff fb1d 	bl	8008e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097fa:	bf00      	nop
 80097fc:	3720      	adds	r7, #32
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009804:	b084      	sub	sp, #16
 8009806:	b580      	push	{r7, lr}
 8009808:	b084      	sub	sp, #16
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	f107 001c 	add.w	r0, r7, #28
 8009812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	2b01      	cmp	r3, #1
 800981a:	d120      	bne.n	800985e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	68da      	ldr	r2, [r3, #12]
 800982c:	4b20      	ldr	r3, [pc, #128]	; (80098b0 <USB_CoreInit+0xac>)
 800982e:	4013      	ands	r3, r2
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009842:	2b01      	cmp	r3, #1
 8009844:	d105      	bne.n	8009852 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fa96 	bl	8009d84 <USB_CoreReset>
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]
 800985c:	e010      	b.n	8009880 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fa8a 	bl	8009d84 <USB_CoreReset>
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009878:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009882:	2b01      	cmp	r3, #1
 8009884:	d10b      	bne.n	800989e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f043 0206 	orr.w	r2, r3, #6
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	f043 0220 	orr.w	r2, r3, #32
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098aa:	b004      	add	sp, #16
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	ffbdffbf 	.word	0xffbdffbf

080098b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f023 0201 	bic.w	r2, r3, #1
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	460b      	mov	r3, r1
 80098e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80098e2:	2300      	movs	r3, #0
 80098e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d115      	bne.n	8009924 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009904:	2001      	movs	r0, #1
 8009906:	f7f8 fc03 	bl	8002110 <HAL_Delay>
      ms++;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3301      	adds	r3, #1
 800990e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fa29 	bl	8009d68 <USB_GetMode>
 8009916:	4603      	mov	r3, r0
 8009918:	2b01      	cmp	r3, #1
 800991a:	d01e      	beq.n	800995a <USB_SetCurrentMode+0x84>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2b31      	cmp	r3, #49	; 0x31
 8009920:	d9f0      	bls.n	8009904 <USB_SetCurrentMode+0x2e>
 8009922:	e01a      	b.n	800995a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d115      	bne.n	8009956 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009936:	2001      	movs	r0, #1
 8009938:	f7f8 fbea 	bl	8002110 <HAL_Delay>
      ms++;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3301      	adds	r3, #1
 8009940:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fa10 	bl	8009d68 <USB_GetMode>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d005      	beq.n	800995a <USB_SetCurrentMode+0x84>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2b31      	cmp	r3, #49	; 0x31
 8009952:	d9f0      	bls.n	8009936 <USB_SetCurrentMode+0x60>
 8009954:	e001      	b.n	800995a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e005      	b.n	8009966 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b32      	cmp	r3, #50	; 0x32
 800995e:	d101      	bne.n	8009964 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	e000      	b.n	8009966 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
	...

08009970 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009970:	b084      	sub	sp, #16
 8009972:	b580      	push	{r7, lr}
 8009974:	b086      	sub	sp, #24
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800997e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800998a:	2300      	movs	r3, #0
 800998c:	613b      	str	r3, [r7, #16]
 800998e:	e009      	b.n	80099a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	3340      	adds	r3, #64	; 0x40
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4413      	add	r3, r2
 800999a:	2200      	movs	r2, #0
 800999c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	3301      	adds	r3, #1
 80099a2:	613b      	str	r3, [r7, #16]
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	2b0e      	cmp	r3, #14
 80099a8:	d9f2      	bls.n	8009990 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80099aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d11c      	bne.n	80099ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099be:	f043 0302 	orr.w	r3, r3, #2
 80099c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	601a      	str	r2, [r3, #0]
 80099e8:	e005      	b.n	80099f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099fc:	461a      	mov	r2, r3
 80099fe:	2300      	movs	r3, #0
 8009a00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a08:	4619      	mov	r1, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a10:	461a      	mov	r2, r3
 8009a12:	680b      	ldr	r3, [r1, #0]
 8009a14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d10c      	bne.n	8009a36 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d104      	bne.n	8009a2c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a22:	2100      	movs	r1, #0
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f965 	bl	8009cf4 <USB_SetDevSpeed>
 8009a2a:	e008      	b.n	8009a3e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009a2c:	2101      	movs	r1, #1
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f960 	bl	8009cf4 <USB_SetDevSpeed>
 8009a34:	e003      	b.n	8009a3e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a36:	2103      	movs	r1, #3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f95b 	bl	8009cf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a3e:	2110      	movs	r1, #16
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f8f3 	bl	8009c2c <USB_FlushTxFifo>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 f91f 	bl	8009c94 <USB_FlushRxFifo>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a66:	461a      	mov	r2, r3
 8009a68:	2300      	movs	r3, #0
 8009a6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a72:	461a      	mov	r2, r3
 8009a74:	2300      	movs	r3, #0
 8009a76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a7e:	461a      	mov	r2, r3
 8009a80:	2300      	movs	r3, #0
 8009a82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a84:	2300      	movs	r3, #0
 8009a86:	613b      	str	r3, [r7, #16]
 8009a88:	e043      	b.n	8009b12 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	015a      	lsls	r2, r3, #5
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	4413      	add	r3, r2
 8009a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aa0:	d118      	bne.n	8009ad4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10a      	bne.n	8009abe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009aba:	6013      	str	r3, [r2, #0]
 8009abc:	e013      	b.n	8009ae6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aca:	461a      	mov	r2, r3
 8009acc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	e008      	b.n	8009ae6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	015a      	lsls	r2, r3, #5
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	4413      	add	r3, r2
 8009adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af2:	461a      	mov	r2, r3
 8009af4:	2300      	movs	r3, #0
 8009af6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b04:	461a      	mov	r2, r3
 8009b06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	613b      	str	r3, [r7, #16]
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d3b7      	bcc.n	8009a8a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	613b      	str	r3, [r7, #16]
 8009b1e:	e043      	b.n	8009ba8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b36:	d118      	bne.n	8009b6a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10a      	bne.n	8009b54 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	e013      	b.n	8009b7c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	015a      	lsls	r2, r3, #5
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b60:	461a      	mov	r2, r3
 8009b62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	e008      	b.n	8009b7c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b76:	461a      	mov	r2, r3
 8009b78:	2300      	movs	r3, #0
 8009b7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	015a      	lsls	r2, r3, #5
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b88:	461a      	mov	r2, r3
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ba0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	613b      	str	r3, [r7, #16]
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d3b7      	bcc.n	8009b20 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009bd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d105      	bne.n	8009be4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	f043 0210 	orr.w	r2, r3, #16
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	699a      	ldr	r2, [r3, #24]
 8009be8:	4b0e      	ldr	r3, [pc, #56]	; (8009c24 <USB_DevInit+0x2b4>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d005      	beq.n	8009c02 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	f043 0208 	orr.w	r2, r3, #8
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d105      	bne.n	8009c14 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	699a      	ldr	r2, [r3, #24]
 8009c0c:	4b06      	ldr	r3, [pc, #24]	; (8009c28 <USB_DevInit+0x2b8>)
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c20:	b004      	add	sp, #16
 8009c22:	4770      	bx	lr
 8009c24:	803c3800 	.word	0x803c3800
 8009c28:	40000004 	.word	0x40000004

08009c2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c36:	2300      	movs	r3, #0
 8009c38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4a13      	ldr	r2, [pc, #76]	; (8009c90 <USB_FlushTxFifo+0x64>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d901      	bls.n	8009c4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e01b      	b.n	8009c84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	daf2      	bge.n	8009c3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	019b      	lsls	r3, r3, #6
 8009c5c:	f043 0220 	orr.w	r2, r3, #32
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3301      	adds	r3, #1
 8009c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4a08      	ldr	r2, [pc, #32]	; (8009c90 <USB_FlushTxFifo+0x64>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d901      	bls.n	8009c76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e006      	b.n	8009c84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	f003 0320 	and.w	r3, r3, #32
 8009c7e:	2b20      	cmp	r3, #32
 8009c80:	d0f0      	beq.n	8009c64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	00030d40 	.word	0x00030d40

08009c94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	4a11      	ldr	r2, [pc, #68]	; (8009cf0 <USB_FlushRxFifo+0x5c>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d901      	bls.n	8009cb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e018      	b.n	8009ce4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	daf2      	bge.n	8009ca0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2210      	movs	r2, #16
 8009cc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	4a08      	ldr	r2, [pc, #32]	; (8009cf0 <USB_FlushRxFifo+0x5c>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d901      	bls.n	8009cd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e006      	b.n	8009ce4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	f003 0310 	and.w	r3, r3, #16
 8009cde:	2b10      	cmp	r3, #16
 8009ce0:	d0f0      	beq.n	8009cc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr
 8009cf0:	00030d40 	.word	0x00030d40

08009cf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	78fb      	ldrb	r3, [r7, #3]
 8009d0e:	68f9      	ldr	r1, [r7, #12]
 8009d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d14:	4313      	orrs	r3, r2
 8009d16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b085      	sub	sp, #20
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d40:	f023 0303 	bic.w	r3, r3, #3
 8009d44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d54:	f043 0302 	orr.w	r3, r3, #2
 8009d58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	f003 0301 	and.w	r3, r3, #1
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3301      	adds	r3, #1
 8009d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	4a13      	ldr	r2, [pc, #76]	; (8009de8 <USB_CoreReset+0x64>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d901      	bls.n	8009da2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	e01b      	b.n	8009dda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	daf2      	bge.n	8009d90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	f043 0201 	orr.w	r2, r3, #1
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4a09      	ldr	r2, [pc, #36]	; (8009de8 <USB_CoreReset+0x64>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d901      	bls.n	8009dcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e006      	b.n	8009dda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d0f0      	beq.n	8009dba <USB_CoreReset+0x36>

  return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	00030d40 	.word	0x00030d40

08009dec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009dec:	b5b0      	push	{r4, r5, r7, lr}
 8009dee:	b08c      	sub	sp, #48	; 0x30
 8009df0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009df2:	4b96      	ldr	r3, [pc, #600]	; (800a04c <MX_LWIP_Init+0x260>)
 8009df4:	22c0      	movs	r2, #192	; 0xc0
 8009df6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009df8:	4b94      	ldr	r3, [pc, #592]	; (800a04c <MX_LWIP_Init+0x260>)
 8009dfa:	22a8      	movs	r2, #168	; 0xa8
 8009dfc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8009dfe:	4b93      	ldr	r3, [pc, #588]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e00:	2201      	movs	r2, #1
 8009e02:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 69;
 8009e04:	4b91      	ldr	r3, [pc, #580]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e06:	2245      	movs	r2, #69	; 0x45
 8009e08:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009e0a:	4b91      	ldr	r3, [pc, #580]	; (800a050 <MX_LWIP_Init+0x264>)
 8009e0c:	22ff      	movs	r2, #255	; 0xff
 8009e0e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009e10:	4b8f      	ldr	r3, [pc, #572]	; (800a050 <MX_LWIP_Init+0x264>)
 8009e12:	22ff      	movs	r2, #255	; 0xff
 8009e14:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009e16:	4b8e      	ldr	r3, [pc, #568]	; (800a050 <MX_LWIP_Init+0x264>)
 8009e18:	22ff      	movs	r2, #255	; 0xff
 8009e1a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009e1c:	4b8c      	ldr	r3, [pc, #560]	; (800a050 <MX_LWIP_Init+0x264>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009e22:	4b8c      	ldr	r3, [pc, #560]	; (800a054 <MX_LWIP_Init+0x268>)
 8009e24:	22c0      	movs	r2, #192	; 0xc0
 8009e26:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009e28:	4b8a      	ldr	r3, [pc, #552]	; (800a054 <MX_LWIP_Init+0x268>)
 8009e2a:	22a8      	movs	r2, #168	; 0xa8
 8009e2c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8009e2e:	4b89      	ldr	r3, [pc, #548]	; (800a054 <MX_LWIP_Init+0x268>)
 8009e30:	2201      	movs	r2, #1
 8009e32:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009e34:	4b87      	ldr	r3, [pc, #540]	; (800a054 <MX_LWIP_Init+0x268>)
 8009e36:	2201      	movs	r2, #1
 8009e38:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	f004 f95d 	bl	800e0fc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009e42:	4b82      	ldr	r3, [pc, #520]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	061a      	lsls	r2, r3, #24
 8009e48:	4b80      	ldr	r3, [pc, #512]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e4a:	785b      	ldrb	r3, [r3, #1]
 8009e4c:	041b      	lsls	r3, r3, #16
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	4b7e      	ldr	r3, [pc, #504]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e52:	789b      	ldrb	r3, [r3, #2]
 8009e54:	021b      	lsls	r3, r3, #8
 8009e56:	4313      	orrs	r3, r2
 8009e58:	4a7c      	ldr	r2, [pc, #496]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e5a:	78d2      	ldrb	r2, [r2, #3]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	061a      	lsls	r2, r3, #24
 8009e60:	4b7a      	ldr	r3, [pc, #488]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	0619      	lsls	r1, r3, #24
 8009e66:	4b79      	ldr	r3, [pc, #484]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e68:	785b      	ldrb	r3, [r3, #1]
 8009e6a:	041b      	lsls	r3, r3, #16
 8009e6c:	4319      	orrs	r1, r3
 8009e6e:	4b77      	ldr	r3, [pc, #476]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e70:	789b      	ldrb	r3, [r3, #2]
 8009e72:	021b      	lsls	r3, r3, #8
 8009e74:	430b      	orrs	r3, r1
 8009e76:	4975      	ldr	r1, [pc, #468]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e78:	78c9      	ldrb	r1, [r1, #3]
 8009e7a:	430b      	orrs	r3, r1
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e82:	431a      	orrs	r2, r3
 8009e84:	4b71      	ldr	r3, [pc, #452]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	0619      	lsls	r1, r3, #24
 8009e8a:	4b70      	ldr	r3, [pc, #448]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e8c:	785b      	ldrb	r3, [r3, #1]
 8009e8e:	041b      	lsls	r3, r3, #16
 8009e90:	4319      	orrs	r1, r3
 8009e92:	4b6e      	ldr	r3, [pc, #440]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e94:	789b      	ldrb	r3, [r3, #2]
 8009e96:	021b      	lsls	r3, r3, #8
 8009e98:	430b      	orrs	r3, r1
 8009e9a:	496c      	ldr	r1, [pc, #432]	; (800a04c <MX_LWIP_Init+0x260>)
 8009e9c:	78c9      	ldrb	r1, [r1, #3]
 8009e9e:	430b      	orrs	r3, r1
 8009ea0:	0a1b      	lsrs	r3, r3, #8
 8009ea2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	4b68      	ldr	r3, [pc, #416]	; (800a04c <MX_LWIP_Init+0x260>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	0619      	lsls	r1, r3, #24
 8009eae:	4b67      	ldr	r3, [pc, #412]	; (800a04c <MX_LWIP_Init+0x260>)
 8009eb0:	785b      	ldrb	r3, [r3, #1]
 8009eb2:	041b      	lsls	r3, r3, #16
 8009eb4:	4319      	orrs	r1, r3
 8009eb6:	4b65      	ldr	r3, [pc, #404]	; (800a04c <MX_LWIP_Init+0x260>)
 8009eb8:	789b      	ldrb	r3, [r3, #2]
 8009eba:	021b      	lsls	r3, r3, #8
 8009ebc:	430b      	orrs	r3, r1
 8009ebe:	4963      	ldr	r1, [pc, #396]	; (800a04c <MX_LWIP_Init+0x260>)
 8009ec0:	78c9      	ldrb	r1, [r1, #3]
 8009ec2:	430b      	orrs	r3, r1
 8009ec4:	0e1b      	lsrs	r3, r3, #24
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	4a63      	ldr	r2, [pc, #396]	; (800a058 <MX_LWIP_Init+0x26c>)
 8009eca:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009ecc:	4b60      	ldr	r3, [pc, #384]	; (800a050 <MX_LWIP_Init+0x264>)
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	061a      	lsls	r2, r3, #24
 8009ed2:	4b5f      	ldr	r3, [pc, #380]	; (800a050 <MX_LWIP_Init+0x264>)
 8009ed4:	785b      	ldrb	r3, [r3, #1]
 8009ed6:	041b      	lsls	r3, r3, #16
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	4b5d      	ldr	r3, [pc, #372]	; (800a050 <MX_LWIP_Init+0x264>)
 8009edc:	789b      	ldrb	r3, [r3, #2]
 8009ede:	021b      	lsls	r3, r3, #8
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	4a5b      	ldr	r2, [pc, #364]	; (800a050 <MX_LWIP_Init+0x264>)
 8009ee4:	78d2      	ldrb	r2, [r2, #3]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	061a      	lsls	r2, r3, #24
 8009eea:	4b59      	ldr	r3, [pc, #356]	; (800a050 <MX_LWIP_Init+0x264>)
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	0619      	lsls	r1, r3, #24
 8009ef0:	4b57      	ldr	r3, [pc, #348]	; (800a050 <MX_LWIP_Init+0x264>)
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	041b      	lsls	r3, r3, #16
 8009ef6:	4319      	orrs	r1, r3
 8009ef8:	4b55      	ldr	r3, [pc, #340]	; (800a050 <MX_LWIP_Init+0x264>)
 8009efa:	789b      	ldrb	r3, [r3, #2]
 8009efc:	021b      	lsls	r3, r3, #8
 8009efe:	430b      	orrs	r3, r1
 8009f00:	4953      	ldr	r1, [pc, #332]	; (800a050 <MX_LWIP_Init+0x264>)
 8009f02:	78c9      	ldrb	r1, [r1, #3]
 8009f04:	430b      	orrs	r3, r1
 8009f06:	021b      	lsls	r3, r3, #8
 8009f08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	4b50      	ldr	r3, [pc, #320]	; (800a050 <MX_LWIP_Init+0x264>)
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	0619      	lsls	r1, r3, #24
 8009f14:	4b4e      	ldr	r3, [pc, #312]	; (800a050 <MX_LWIP_Init+0x264>)
 8009f16:	785b      	ldrb	r3, [r3, #1]
 8009f18:	041b      	lsls	r3, r3, #16
 8009f1a:	4319      	orrs	r1, r3
 8009f1c:	4b4c      	ldr	r3, [pc, #304]	; (800a050 <MX_LWIP_Init+0x264>)
 8009f1e:	789b      	ldrb	r3, [r3, #2]
 8009f20:	021b      	lsls	r3, r3, #8
 8009f22:	430b      	orrs	r3, r1
 8009f24:	494a      	ldr	r1, [pc, #296]	; (800a050 <MX_LWIP_Init+0x264>)
 8009f26:	78c9      	ldrb	r1, [r1, #3]
 8009f28:	430b      	orrs	r3, r1
 8009f2a:	0a1b      	lsrs	r3, r3, #8
 8009f2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f30:	431a      	orrs	r2, r3
 8009f32:	4b47      	ldr	r3, [pc, #284]	; (800a050 <MX_LWIP_Init+0x264>)
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	0619      	lsls	r1, r3, #24
 8009f38:	4b45      	ldr	r3, [pc, #276]	; (800a050 <MX_LWIP_Init+0x264>)
 8009f3a:	785b      	ldrb	r3, [r3, #1]
 8009f3c:	041b      	lsls	r3, r3, #16
 8009f3e:	4319      	orrs	r1, r3
 8009f40:	4b43      	ldr	r3, [pc, #268]	; (800a050 <MX_LWIP_Init+0x264>)
 8009f42:	789b      	ldrb	r3, [r3, #2]
 8009f44:	021b      	lsls	r3, r3, #8
 8009f46:	430b      	orrs	r3, r1
 8009f48:	4941      	ldr	r1, [pc, #260]	; (800a050 <MX_LWIP_Init+0x264>)
 8009f4a:	78c9      	ldrb	r1, [r1, #3]
 8009f4c:	430b      	orrs	r3, r1
 8009f4e:	0e1b      	lsrs	r3, r3, #24
 8009f50:	4313      	orrs	r3, r2
 8009f52:	4a42      	ldr	r2, [pc, #264]	; (800a05c <MX_LWIP_Init+0x270>)
 8009f54:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009f56:	4b3f      	ldr	r3, [pc, #252]	; (800a054 <MX_LWIP_Init+0x268>)
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	061a      	lsls	r2, r3, #24
 8009f5c:	4b3d      	ldr	r3, [pc, #244]	; (800a054 <MX_LWIP_Init+0x268>)
 8009f5e:	785b      	ldrb	r3, [r3, #1]
 8009f60:	041b      	lsls	r3, r3, #16
 8009f62:	431a      	orrs	r2, r3
 8009f64:	4b3b      	ldr	r3, [pc, #236]	; (800a054 <MX_LWIP_Init+0x268>)
 8009f66:	789b      	ldrb	r3, [r3, #2]
 8009f68:	021b      	lsls	r3, r3, #8
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	4a39      	ldr	r2, [pc, #228]	; (800a054 <MX_LWIP_Init+0x268>)
 8009f6e:	78d2      	ldrb	r2, [r2, #3]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	061a      	lsls	r2, r3, #24
 8009f74:	4b37      	ldr	r3, [pc, #220]	; (800a054 <MX_LWIP_Init+0x268>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	0619      	lsls	r1, r3, #24
 8009f7a:	4b36      	ldr	r3, [pc, #216]	; (800a054 <MX_LWIP_Init+0x268>)
 8009f7c:	785b      	ldrb	r3, [r3, #1]
 8009f7e:	041b      	lsls	r3, r3, #16
 8009f80:	4319      	orrs	r1, r3
 8009f82:	4b34      	ldr	r3, [pc, #208]	; (800a054 <MX_LWIP_Init+0x268>)
 8009f84:	789b      	ldrb	r3, [r3, #2]
 8009f86:	021b      	lsls	r3, r3, #8
 8009f88:	430b      	orrs	r3, r1
 8009f8a:	4932      	ldr	r1, [pc, #200]	; (800a054 <MX_LWIP_Init+0x268>)
 8009f8c:	78c9      	ldrb	r1, [r1, #3]
 8009f8e:	430b      	orrs	r3, r1
 8009f90:	021b      	lsls	r3, r3, #8
 8009f92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f96:	431a      	orrs	r2, r3
 8009f98:	4b2e      	ldr	r3, [pc, #184]	; (800a054 <MX_LWIP_Init+0x268>)
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	0619      	lsls	r1, r3, #24
 8009f9e:	4b2d      	ldr	r3, [pc, #180]	; (800a054 <MX_LWIP_Init+0x268>)
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	041b      	lsls	r3, r3, #16
 8009fa4:	4319      	orrs	r1, r3
 8009fa6:	4b2b      	ldr	r3, [pc, #172]	; (800a054 <MX_LWIP_Init+0x268>)
 8009fa8:	789b      	ldrb	r3, [r3, #2]
 8009faa:	021b      	lsls	r3, r3, #8
 8009fac:	430b      	orrs	r3, r1
 8009fae:	4929      	ldr	r1, [pc, #164]	; (800a054 <MX_LWIP_Init+0x268>)
 8009fb0:	78c9      	ldrb	r1, [r1, #3]
 8009fb2:	430b      	orrs	r3, r1
 8009fb4:	0a1b      	lsrs	r3, r3, #8
 8009fb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009fba:	431a      	orrs	r2, r3
 8009fbc:	4b25      	ldr	r3, [pc, #148]	; (800a054 <MX_LWIP_Init+0x268>)
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	0619      	lsls	r1, r3, #24
 8009fc2:	4b24      	ldr	r3, [pc, #144]	; (800a054 <MX_LWIP_Init+0x268>)
 8009fc4:	785b      	ldrb	r3, [r3, #1]
 8009fc6:	041b      	lsls	r3, r3, #16
 8009fc8:	4319      	orrs	r1, r3
 8009fca:	4b22      	ldr	r3, [pc, #136]	; (800a054 <MX_LWIP_Init+0x268>)
 8009fcc:	789b      	ldrb	r3, [r3, #2]
 8009fce:	021b      	lsls	r3, r3, #8
 8009fd0:	430b      	orrs	r3, r1
 8009fd2:	4920      	ldr	r1, [pc, #128]	; (800a054 <MX_LWIP_Init+0x268>)
 8009fd4:	78c9      	ldrb	r1, [r1, #3]
 8009fd6:	430b      	orrs	r3, r1
 8009fd8:	0e1b      	lsrs	r3, r3, #24
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	4a20      	ldr	r2, [pc, #128]	; (800a060 <MX_LWIP_Init+0x274>)
 8009fde:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009fe0:	4b20      	ldr	r3, [pc, #128]	; (800a064 <MX_LWIP_Init+0x278>)
 8009fe2:	9302      	str	r3, [sp, #8]
 8009fe4:	4b20      	ldr	r3, [pc, #128]	; (800a068 <MX_LWIP_Init+0x27c>)
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	4b1c      	ldr	r3, [pc, #112]	; (800a060 <MX_LWIP_Init+0x274>)
 8009fee:	4a1b      	ldr	r2, [pc, #108]	; (800a05c <MX_LWIP_Init+0x270>)
 8009ff0:	4919      	ldr	r1, [pc, #100]	; (800a058 <MX_LWIP_Init+0x26c>)
 8009ff2:	481e      	ldr	r0, [pc, #120]	; (800a06c <MX_LWIP_Init+0x280>)
 8009ff4:	f006 faaa 	bl	801054c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009ff8:	481c      	ldr	r0, [pc, #112]	; (800a06c <MX_LWIP_Init+0x280>)
 8009ffa:	f006 fc59 	bl	80108b0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009ffe:	4b1b      	ldr	r3, [pc, #108]	; (800a06c <MX_LWIP_Init+0x280>)
 800a000:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a004:	089b      	lsrs	r3, r3, #2
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d003      	beq.n	800a018 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a010:	4816      	ldr	r0, [pc, #88]	; (800a06c <MX_LWIP_Init+0x280>)
 800a012:	f006 fc5d 	bl	80108d0 <netif_set_up>
 800a016:	e002      	b.n	800a01e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a018:	4814      	ldr	r0, [pc, #80]	; (800a06c <MX_LWIP_Init+0x280>)
 800a01a:	f006 fcc5 	bl	80109a8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a01e:	4914      	ldr	r1, [pc, #80]	; (800a070 <MX_LWIP_Init+0x284>)
 800a020:	4812      	ldr	r0, [pc, #72]	; (800a06c <MX_LWIP_Init+0x280>)
 800a022:	f006 fd57 	bl	8010ad4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityHigh, 0, 254);
 800a026:	4b13      	ldr	r3, [pc, #76]	; (800a074 <MX_LWIP_Init+0x288>)
 800a028:	1d3c      	adds	r4, r7, #4
 800a02a:	461d      	mov	r5, r3
 800a02c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a02e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a030:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a034:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800a038:	1d3b      	adds	r3, r7, #4
 800a03a:	490c      	ldr	r1, [pc, #48]	; (800a06c <MX_LWIP_Init+0x280>)
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 fd47 	bl	800aad0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a042:	bf00      	nop
 800a044:	3720      	adds	r7, #32
 800a046:	46bd      	mov	sp, r7
 800a048:	bdb0      	pop	{r4, r5, r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20005a98 	.word	0x20005a98
 800a050:	20005a9c 	.word	0x20005a9c
 800a054:	20005aa0 	.word	0x20005aa0
 800a058:	20005a8c 	.word	0x20005a8c
 800a05c:	20005a90 	.word	0x20005a90
 800a060:	20005a94 	.word	0x20005a94
 800a064:	0800e039 	.word	0x0800e039
 800a068:	0800a571 	.word	0x0800a571
 800a06c:	20005a58 	.word	0x20005a58
 800a070:	0800a079 	.word	0x0800a079
 800a074:	0801d178 	.word	0x0801d178

0800a078 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <SCB_InvalidateDCache_by_Addr>:
{
 800a08c:	b480      	push	{r7}
 800a08e:	b087      	sub	sp, #28
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a09e:	2320      	movs	r3, #32
 800a0a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a0a2:	f3bf 8f4f 	dsb	sy
}
 800a0a6:	bf00      	nop
    while (op_size > 0) {
 800a0a8:	e00b      	b.n	800a0c2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800a0aa:	4a0d      	ldr	r2, [pc, #52]	; (800a0e0 <SCB_InvalidateDCache_by_Addr+0x54>)
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	1ad3      	subs	r3, r2, r3
 800a0c0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	dcf0      	bgt.n	800a0aa <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800a0c8:	f3bf 8f4f 	dsb	sy
}
 800a0cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a0ce:	f3bf 8f6f 	isb	sy
}
 800a0d2:	bf00      	nop
}
 800a0d4:	bf00      	nop
 800a0d6:	371c      	adds	r7, #28
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	e000ed00 	.word	0xe000ed00

0800a0e4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a0ec:	4b04      	ldr	r3, [pc, #16]	; (800a100 <HAL_ETH_RxCpltCallback+0x1c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fec3 	bl	800ae7c <osSemaphoreRelease>
}
 800a0f6:	bf00      	nop
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	2000a430 	.word	0x2000a430

0800a104 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800a10c:	4b04      	ldr	r3, [pc, #16]	; (800a120 <HAL_ETH_TxCpltCallback+0x1c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 feb3 	bl	800ae7c <osSemaphoreRelease>
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	2000a434 	.word	0x2000a434

0800a124 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7f9 ff6f 	bl	8004010 <HAL_ETH_GetDMAError>
 800a132:	4603      	mov	r3, r0
 800a134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a138:	2b80      	cmp	r3, #128	; 0x80
 800a13a:	d104      	bne.n	800a146 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800a13c:	4b04      	ldr	r3, [pc, #16]	; (800a150 <HAL_ETH_ErrorCallback+0x2c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4618      	mov	r0, r3
 800a142:	f000 fe9b 	bl	800ae7c <osSemaphoreRelease>
  }
}
 800a146:	bf00      	nop
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	2000a430 	.word	0x2000a430

0800a154 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a154:	b5b0      	push	{r4, r5, r7, lr}
 800a156:	b0a8      	sub	sp, #160	; 0xa0
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800a162:	2300      	movs	r3, #0
 800a164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800a16e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a172:	2264      	movs	r2, #100	; 0x64
 800a174:	2100      	movs	r1, #0
 800a176:	4618      	mov	r0, r3
 800a178:	f011 f8ab 	bl	801b2d2 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a17c:	4b85      	ldr	r3, [pc, #532]	; (800a394 <low_level_init+0x240>)
 800a17e:	4a86      	ldr	r2, [pc, #536]	; (800a398 <low_level_init+0x244>)
 800a180:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a182:	2300      	movs	r3, #0
 800a184:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800a188:	2380      	movs	r3, #128	; 0x80
 800a18a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800a18e:	23e1      	movs	r3, #225	; 0xe1
 800a190:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 800a194:	2300      	movs	r3, #0
 800a196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800a19a:	2300      	movs	r3, #0
 800a19c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800a1a6:	4a7b      	ldr	r2, [pc, #492]	; (800a394 <low_level_init+0x240>)
 800a1a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1ac:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a1ae:	4b79      	ldr	r3, [pc, #484]	; (800a394 <low_level_init+0x240>)
 800a1b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a1b4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a1b6:	4b77      	ldr	r3, [pc, #476]	; (800a394 <low_level_init+0x240>)
 800a1b8:	4a78      	ldr	r2, [pc, #480]	; (800a39c <low_level_init+0x248>)
 800a1ba:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a1bc:	4b75      	ldr	r3, [pc, #468]	; (800a394 <low_level_init+0x240>)
 800a1be:	4a78      	ldr	r2, [pc, #480]	; (800a3a0 <low_level_init+0x24c>)
 800a1c0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a1c2:	4b74      	ldr	r3, [pc, #464]	; (800a394 <low_level_init+0x240>)
 800a1c4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a1c8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a1ca:	4872      	ldr	r0, [pc, #456]	; (800a394 <low_level_init+0x240>)
 800a1cc:	f7f9 f8e2 	bl	8003394 <HAL_ETH_Init>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a1d6:	2238      	movs	r2, #56	; 0x38
 800a1d8:	2100      	movs	r1, #0
 800a1da:	4872      	ldr	r0, [pc, #456]	; (800a3a4 <low_level_init+0x250>)
 800a1dc:	f011 f879 	bl	801b2d2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a1e0:	4b70      	ldr	r3, [pc, #448]	; (800a3a4 <low_level_init+0x250>)
 800a1e2:	2221      	movs	r2, #33	; 0x21
 800a1e4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a1e6:	4b6f      	ldr	r3, [pc, #444]	; (800a3a4 <low_level_init+0x250>)
 800a1e8:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800a1ec:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a1ee:	4b6d      	ldr	r3, [pc, #436]	; (800a3a4 <low_level_init+0x250>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a1f4:	486c      	ldr	r0, [pc, #432]	; (800a3a8 <low_level_init+0x254>)
 800a1f6:	f006 f863 	bl	80102c0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2206      	movs	r2, #6
 800a1fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a202:	4b64      	ldr	r3, [pc, #400]	; (800a394 <low_level_init+0x240>)
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	781a      	ldrb	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a20e:	4b61      	ldr	r3, [pc, #388]	; (800a394 <low_level_init+0x240>)
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	785a      	ldrb	r2, [r3, #1]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a21a:	4b5e      	ldr	r3, [pc, #376]	; (800a394 <low_level_init+0x240>)
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	789a      	ldrb	r2, [r3, #2]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a226:	4b5b      	ldr	r3, [pc, #364]	; (800a394 <low_level_init+0x240>)
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	78da      	ldrb	r2, [r3, #3]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a232:	4b58      	ldr	r3, [pc, #352]	; (800a394 <low_level_init+0x240>)
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	791a      	ldrb	r2, [r3, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a23e:	4b55      	ldr	r3, [pc, #340]	; (800a394 <low_level_init+0x240>)
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	795a      	ldrb	r2, [r3, #5]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a250:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a258:	f043 030a 	orr.w	r3, r3, #10
 800a25c:	b2da      	uxtb	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800a264:	2203      	movs	r2, #3
 800a266:	2100      	movs	r1, #0
 800a268:	2001      	movs	r0, #1
 800a26a:	f001 f8b9 	bl	800b3e0 <xQueueGenericCreate>
 800a26e:	4603      	mov	r3, r0
 800a270:	4a4e      	ldr	r2, [pc, #312]	; (800a3ac <low_level_init+0x258>)
 800a272:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800a274:	2203      	movs	r2, #3
 800a276:	2100      	movs	r1, #0
 800a278:	2001      	movs	r0, #1
 800a27a:	f001 f8b1 	bl	800b3e0 <xQueueGenericCreate>
 800a27e:	4603      	mov	r3, r0
 800a280:	4a4b      	ldr	r2, [pc, #300]	; (800a3b0 <low_level_init+0x25c>)
 800a282:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a284:	4b4b      	ldr	r3, [pc, #300]	; (800a3b4 <low_level_init+0x260>)
 800a286:	f107 0408 	add.w	r4, r7, #8
 800a28a:	461d      	mov	r5, r3
 800a28c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a28e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a290:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a294:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a298:	f107 0308 	add.w	r3, r7, #8
 800a29c:	6879      	ldr	r1, [r7, #4]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 fc16 	bl	800aad0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a2a4:	4944      	ldr	r1, [pc, #272]	; (800a3b8 <low_level_init+0x264>)
 800a2a6:	4845      	ldr	r0, [pc, #276]	; (800a3bc <low_level_init+0x268>)
 800a2a8:	f7f7 fd9b 	bl	8001de2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a2ac:	4843      	ldr	r0, [pc, #268]	; (800a3bc <low_level_init+0x268>)
 800a2ae:	f7f7 fdca 	bl	8001e46 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a2b2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d165      	bne.n	800a386 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a2ba:	4840      	ldr	r0, [pc, #256]	; (800a3bc <low_level_init+0x268>)
 800a2bc:	f7f7 fe6b 	bl	8001f96 <LAN8742_GetLinkState>
 800a2c0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a2c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	dc06      	bgt.n	800a2da <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f006 fbd1 	bl	8010a74 <netif_set_link_down>
      netif_set_down(netif);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f006 fb68 	bl	80109a8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a2d8:	e057      	b.n	800a38a <low_level_init+0x236>
      switch (PHYLinkState)
 800a2da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a2de:	3b02      	subs	r3, #2
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d82b      	bhi.n	800a33c <low_level_init+0x1e8>
 800a2e4:	a201      	add	r2, pc, #4	; (adr r2, 800a2ec <low_level_init+0x198>)
 800a2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ea:	bf00      	nop
 800a2ec:	0800a2fd 	.word	0x0800a2fd
 800a2f0:	0800a30f 	.word	0x0800a30f
 800a2f4:	0800a31f 	.word	0x0800a31f
 800a2f8:	0800a32f 	.word	0x0800a32f
        duplex = ETH_FULLDUPLEX_MODE;
 800a2fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800a304:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800a30c:	e01f      	b.n	800a34e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a30e:	2300      	movs	r3, #0
 800a310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800a314:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800a31c:	e017      	b.n	800a34e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a31e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800a326:	2300      	movs	r3, #0
 800a328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800a32c:	e00f      	b.n	800a34e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a32e:	2300      	movs	r3, #0
 800a330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800a334:	2300      	movs	r3, #0
 800a336:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800a33a:	e008      	b.n	800a34e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a33c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800a344:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800a34c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a34e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a352:	4619      	mov	r1, r3
 800a354:	480f      	ldr	r0, [pc, #60]	; (800a394 <low_level_init+0x240>)
 800a356:	f7f9 fd01 	bl	8003d5c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a35a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a35e:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 800a360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a364:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a36a:	4619      	mov	r1, r3
 800a36c:	4809      	ldr	r0, [pc, #36]	; (800a394 <low_level_init+0x240>)
 800a36e:	f7f9 fddf 	bl	8003f30 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a372:	4808      	ldr	r0, [pc, #32]	; (800a394 <low_level_init+0x240>)
 800a374:	f7f9 f88a 	bl	800348c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f006 faa9 	bl	80108d0 <netif_set_up>
    netif_set_link_up(netif);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f006 fb44 	bl	8010a0c <netif_set_link_up>
}
 800a384:	e001      	b.n	800a38a <low_level_init+0x236>
    Error_Handler();
 800a386:	f7f7 f925 	bl	80015d4 <Error_Handler>
}
 800a38a:	bf00      	nop
 800a38c:	37a0      	adds	r7, #160	; 0xa0
 800a38e:	46bd      	mov	sp, r7
 800a390:	bdb0      	pop	{r4, r5, r7, pc}
 800a392:	bf00      	nop
 800a394:	2000a438 	.word	0x2000a438
 800a398:	40028000 	.word	0x40028000
 800a39c:	200002a0 	.word	0x200002a0
 800a3a0:	20000200 	.word	0x20000200
 800a3a4:	2000a4e8 	.word	0x2000a4e8
 800a3a8:	0802046c 	.word	0x0802046c
 800a3ac:	2000a430 	.word	0x2000a430
 800a3b0:	2000a434 	.word	0x2000a434
 800a3b4:	0801d19c 	.word	0x0801d19c
 800a3b8:	20000014 	.word	0x20000014
 800a3bc:	2000a520 	.word	0x2000a520

0800a3c0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b092      	sub	sp, #72	; 0x48
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a3d8:	f107 030c 	add.w	r3, r7, #12
 800a3dc:	2230      	movs	r2, #48	; 0x30
 800a3de:	2100      	movs	r1, #0
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f010 ff76 	bl	801b2d2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a3e6:	f107 030c 	add.w	r3, r7, #12
 800a3ea:	2230      	movs	r2, #48	; 0x30
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f010 ff6f 	bl	801b2d2 <memset>

  for(q = p; q != NULL; q = q->next)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	643b      	str	r3, [r7, #64]	; 0x40
 800a3f8:	e045      	b.n	800a486 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a3fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3fc:	2b03      	cmp	r3, #3
 800a3fe:	d902      	bls.n	800a406 <low_level_output+0x46>
      return ERR_IF;
 800a400:	f06f 030b 	mvn.w	r3, #11
 800a404:	e065      	b.n	800a4d2 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800a406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a408:	6859      	ldr	r1, [r3, #4]
 800a40a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a40c:	4613      	mov	r3, r2
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	4413      	add	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	3348      	adds	r3, #72	; 0x48
 800a416:	443b      	add	r3, r7
 800a418:	3b3c      	subs	r3, #60	; 0x3c
 800a41a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a41c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a41e:	895b      	ldrh	r3, [r3, #10]
 800a420:	4619      	mov	r1, r3
 800a422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a424:	4613      	mov	r3, r2
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	3348      	adds	r3, #72	; 0x48
 800a42e:	443b      	add	r3, r7
 800a430:	3b38      	subs	r3, #56	; 0x38
 800a432:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a436:	2b00      	cmp	r3, #0
 800a438:	d011      	beq.n	800a45e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a43a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a43c:	1e5a      	subs	r2, r3, #1
 800a43e:	f107 000c 	add.w	r0, r7, #12
 800a442:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a444:	460b      	mov	r3, r1
 800a446:	005b      	lsls	r3, r3, #1
 800a448:	440b      	add	r3, r1
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	18c1      	adds	r1, r0, r3
 800a44e:	4613      	mov	r3, r2
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	4413      	add	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	3348      	adds	r3, #72	; 0x48
 800a458:	443b      	add	r3, r7
 800a45a:	3b34      	subs	r3, #52	; 0x34
 800a45c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d109      	bne.n	800a47a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a468:	4613      	mov	r3, r2
 800a46a:	005b      	lsls	r3, r3, #1
 800a46c:	4413      	add	r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	3348      	adds	r3, #72	; 0x48
 800a472:	443b      	add	r3, r7
 800a474:	3b34      	subs	r3, #52	; 0x34
 800a476:	2200      	movs	r2, #0
 800a478:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a47c:	3301      	adds	r3, #1
 800a47e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	643b      	str	r3, [r7, #64]	; 0x40
 800a486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1b6      	bne.n	800a3fa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	891b      	ldrh	r3, [r3, #8]
 800a490:	461a      	mov	r2, r3
 800a492:	4b12      	ldr	r3, [pc, #72]	; (800a4dc <low_level_output+0x11c>)
 800a494:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a496:	4a11      	ldr	r2, [pc, #68]	; (800a4dc <low_level_output+0x11c>)
 800a498:	f107 030c 	add.w	r3, r7, #12
 800a49c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a49e:	4a0f      	ldr	r2, [pc, #60]	; (800a4dc <low_level_output+0x11c>)
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800a4a4:	6838      	ldr	r0, [r7, #0]
 800a4a6:	f006 ff6d 	bl	8011384 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800a4aa:	490c      	ldr	r1, [pc, #48]	; (800a4dc <low_level_output+0x11c>)
 800a4ac:	480c      	ldr	r0, [pc, #48]	; (800a4e0 <low_level_output+0x120>)
 800a4ae:	f7f9 f8fb 	bl	80036a8 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800a4b2:	bf00      	nop
 800a4b4:	4b0b      	ldr	r3, [pc, #44]	; (800a4e4 <low_level_output+0x124>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f04f 31ff 	mov.w	r1, #4294967295
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f000 fc8f 	bl	800ade0 <osSemaphoreWait>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1f5      	bne.n	800a4b4 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800a4c8:	4805      	ldr	r0, [pc, #20]	; (800a4e0 <low_level_output+0x120>)
 800a4ca:	f7f9 fa81 	bl	80039d0 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800a4ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3748      	adds	r7, #72	; 0x48
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	2000a4e8 	.word	0x2000a4e8
 800a4e0:	2000a438 	.word	0x2000a438
 800a4e4:	2000a434 	.word	0x2000a434

0800a4e8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a4f4:	4b07      	ldr	r3, [pc, #28]	; (800a514 <low_level_input+0x2c>)
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d105      	bne.n	800a508 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a4fc:	f107 030c 	add.w	r3, r7, #12
 800a500:	4619      	mov	r1, r3
 800a502:	4805      	ldr	r0, [pc, #20]	; (800a518 <low_level_input+0x30>)
 800a504:	f7f9 f92c 	bl	8003760 <HAL_ETH_ReadData>
  }

  return p;
 800a508:	68fb      	ldr	r3, [r7, #12]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	2000a42c 	.word	0x2000a42c
 800a518:	2000a438 	.word	0x2000a438

0800a51c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a524:	2300      	movs	r3, #0
 800a526:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a52c:	4b0f      	ldr	r3, [pc, #60]	; (800a56c <ethernetif_input+0x50>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f04f 31ff 	mov.w	r1, #4294967295
 800a534:	4618      	mov	r0, r3
 800a536:	f000 fc53 	bl	800ade0 <osSemaphoreWait>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1f5      	bne.n	800a52c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800a540:	68b8      	ldr	r0, [r7, #8]
 800a542:	f7ff ffd1 	bl	800a4e8 <low_level_input>
 800a546:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00a      	beq.n	800a564 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	68b9      	ldr	r1, [r7, #8]
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	4798      	blx	r3
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f006 fe6a 	bl	8011238 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1ea      	bne.n	800a540 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a56a:	e7df      	b.n	800a52c <ethernetif_input+0x10>
 800a56c:	2000a430 	.word	0x2000a430

0800a570 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d106      	bne.n	800a58c <ethernetif_init+0x1c>
 800a57e:	4b0e      	ldr	r3, [pc, #56]	; (800a5b8 <ethernetif_init+0x48>)
 800a580:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a584:	490d      	ldr	r1, [pc, #52]	; (800a5bc <ethernetif_init+0x4c>)
 800a586:	480e      	ldr	r0, [pc, #56]	; (800a5c0 <ethernetif_init+0x50>)
 800a588:	f010 fe3e 	bl	801b208 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2273      	movs	r2, #115	; 0x73
 800a590:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2274      	movs	r2, #116	; 0x74
 800a598:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a09      	ldr	r2, [pc, #36]	; (800a5c4 <ethernetif_init+0x54>)
 800a5a0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a08      	ldr	r2, [pc, #32]	; (800a5c8 <ethernetif_init+0x58>)
 800a5a6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7ff fdd3 	bl	800a154 <low_level_init>

  return ERR_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	0801d1b8 	.word	0x0801d1b8
 800a5bc:	0801d1d4 	.word	0x0801d1d4
 800a5c0:	0801d1e4 	.word	0x0801d1e4
 800a5c4:	08018871 	.word	0x08018871
 800a5c8:	0800a3c1 	.word	0x0800a3c1

0800a5cc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a5d8:	68f9      	ldr	r1, [r7, #12]
 800a5da:	4809      	ldr	r0, [pc, #36]	; (800a600 <pbuf_free_custom+0x34>)
 800a5dc:	f005 ff60 	bl	80104a0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a5e0:	4b08      	ldr	r3, [pc, #32]	; (800a604 <pbuf_free_custom+0x38>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d107      	bne.n	800a5f8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a5e8:	4b06      	ldr	r3, [pc, #24]	; (800a604 <pbuf_free_custom+0x38>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800a5ee:	4b06      	ldr	r3, [pc, #24]	; (800a608 <pbuf_free_custom+0x3c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 fc42 	bl	800ae7c <osSemaphoreRelease>
  }
}
 800a5f8:	bf00      	nop
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	0802046c 	.word	0x0802046c
 800a604:	2000a42c 	.word	0x2000a42c
 800a608:	2000a430 	.word	0x2000a430

0800a60c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a610:	f7f7 fd72 	bl	80020f8 <HAL_GetTick>
 800a614:	4603      	mov	r3, r0
}
 800a616:	4618      	mov	r0, r3
 800a618:	bd80      	pop	{r7, pc}
	...

0800a61c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b08e      	sub	sp, #56	; 0x38
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a628:	2200      	movs	r2, #0
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	605a      	str	r2, [r3, #4]
 800a62e:	609a      	str	r2, [r3, #8]
 800a630:	60da      	str	r2, [r3, #12]
 800a632:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a52      	ldr	r2, [pc, #328]	; (800a784 <HAL_ETH_MspInit+0x168>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	f040 809e 	bne.w	800a77c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a640:	4b51      	ldr	r3, [pc, #324]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a644:	4a50      	ldr	r2, [pc, #320]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a64a:	6313      	str	r3, [r2, #48]	; 0x30
 800a64c:	4b4e      	ldr	r3, [pc, #312]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a654:	623b      	str	r3, [r7, #32]
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	4b4b      	ldr	r3, [pc, #300]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65c:	4a4a      	ldr	r2, [pc, #296]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a65e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a662:	6313      	str	r3, [r2, #48]	; 0x30
 800a664:	4b48      	ldr	r3, [pc, #288]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a66c:	61fb      	str	r3, [r7, #28]
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	4b45      	ldr	r3, [pc, #276]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a674:	4a44      	ldr	r2, [pc, #272]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a676:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a67a:	6313      	str	r3, [r2, #48]	; 0x30
 800a67c:	4b42      	ldr	r3, [pc, #264]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a684:	61bb      	str	r3, [r7, #24]
 800a686:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a688:	4b3f      	ldr	r3, [pc, #252]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68c:	4a3e      	ldr	r2, [pc, #248]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a68e:	f043 0304 	orr.w	r3, r3, #4
 800a692:	6313      	str	r3, [r2, #48]	; 0x30
 800a694:	4b3c      	ldr	r3, [pc, #240]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a698:	f003 0304 	and.w	r3, r3, #4
 800a69c:	617b      	str	r3, [r7, #20]
 800a69e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6a0:	4b39      	ldr	r3, [pc, #228]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a4:	4a38      	ldr	r2, [pc, #224]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a6a6:	f043 0301 	orr.w	r3, r3, #1
 800a6aa:	6313      	str	r3, [r2, #48]	; 0x30
 800a6ac:	4b36      	ldr	r3, [pc, #216]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b0:	f003 0301 	and.w	r3, r3, #1
 800a6b4:	613b      	str	r3, [r7, #16]
 800a6b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a6b8:	4b33      	ldr	r3, [pc, #204]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6bc:	4a32      	ldr	r2, [pc, #200]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a6be:	f043 0302 	orr.w	r3, r3, #2
 800a6c2:	6313      	str	r3, [r2, #48]	; 0x30
 800a6c4:	4b30      	ldr	r3, [pc, #192]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c8:	f003 0302 	and.w	r3, r3, #2
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a6d0:	4b2d      	ldr	r3, [pc, #180]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d4:	4a2c      	ldr	r2, [pc, #176]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a6d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6da:	6313      	str	r3, [r2, #48]	; 0x30
 800a6dc:	4b2a      	ldr	r3, [pc, #168]	; (800a788 <HAL_ETH_MspInit+0x16c>)
 800a6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e4:	60bb      	str	r3, [r7, #8]
 800a6e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a6e8:	2332      	movs	r3, #50	; 0x32
 800a6ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a6f8:	230b      	movs	r3, #11
 800a6fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a700:	4619      	mov	r1, r3
 800a702:	4822      	ldr	r0, [pc, #136]	; (800a78c <HAL_ETH_MspInit+0x170>)
 800a704:	f7fa f894 	bl	8004830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a708:	2386      	movs	r3, #134	; 0x86
 800a70a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a70c:	2302      	movs	r3, #2
 800a70e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a710:	2300      	movs	r3, #0
 800a712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a714:	2303      	movs	r3, #3
 800a716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a718:	230b      	movs	r3, #11
 800a71a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a71c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a720:	4619      	mov	r1, r3
 800a722:	481b      	ldr	r0, [pc, #108]	; (800a790 <HAL_ETH_MspInit+0x174>)
 800a724:	f7fa f884 	bl	8004830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a72c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a72e:	2302      	movs	r3, #2
 800a730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a732:	2300      	movs	r3, #0
 800a734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a736:	2303      	movs	r3, #3
 800a738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a73a:	230b      	movs	r3, #11
 800a73c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a73e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a742:	4619      	mov	r1, r3
 800a744:	4813      	ldr	r0, [pc, #76]	; (800a794 <HAL_ETH_MspInit+0x178>)
 800a746:	f7fa f873 	bl	8004830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a74a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a74e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a750:	2302      	movs	r3, #2
 800a752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a754:	2300      	movs	r3, #0
 800a756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a758:	2303      	movs	r3, #3
 800a75a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a75c:	230b      	movs	r3, #11
 800a75e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a764:	4619      	mov	r1, r3
 800a766:	480c      	ldr	r0, [pc, #48]	; (800a798 <HAL_ETH_MspInit+0x17c>)
 800a768:	f7fa f862 	bl	8004830 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a76c:	2200      	movs	r2, #0
 800a76e:	2105      	movs	r1, #5
 800a770:	203d      	movs	r0, #61	; 0x3d
 800a772:	f7f8 f9cd 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a776:	203d      	movs	r0, #61	; 0x3d
 800a778:	f7f8 f9e6 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a77c:	bf00      	nop
 800a77e:	3738      	adds	r7, #56	; 0x38
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	40028000 	.word	0x40028000
 800a788:	40023800 	.word	0x40023800
 800a78c:	40020800 	.word	0x40020800
 800a790:	40020000 	.word	0x40020000
 800a794:	40020400 	.word	0x40020400
 800a798:	40021800 	.word	0x40021800

0800a79c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a7a0:	4802      	ldr	r0, [pc, #8]	; (800a7ac <ETH_PHY_IO_Init+0x10>)
 800a7a2:	f7f9 fbdf 	bl	8003f64 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	2000a438 	.word	0x2000a438

0800a7b0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	af00      	add	r7, sp, #0
  return 0;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	68f9      	ldr	r1, [r7, #12]
 800a7d2:	4807      	ldr	r0, [pc, #28]	; (800a7f0 <ETH_PHY_IO_ReadReg+0x30>)
 800a7d4:	f7f9 fa2e 	bl	8003c34 <HAL_ETH_ReadPHYRegister>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d002      	beq.n	800a7e4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a7de:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e2:	e000      	b.n	800a7e6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	2000a438 	.word	0x2000a438

0800a7f4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	68f9      	ldr	r1, [r7, #12]
 800a806:	4807      	ldr	r0, [pc, #28]	; (800a824 <ETH_PHY_IO_WriteReg+0x30>)
 800a808:	f7f9 fa5f 	bl	8003cca <HAL_ETH_WritePHYRegister>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d002      	beq.n	800a818 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a812:	f04f 33ff 	mov.w	r3, #4294967295
 800a816:	e000      	b.n	800a81a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	2000a438 	.word	0x2000a438

0800a828 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a82c:	f7f7 fc64 	bl	80020f8 <HAL_GetTick>
 800a830:	4603      	mov	r3, r0
}
 800a832:	4618      	mov	r0, r3
 800a834:	bd80      	pop	{r7, pc}
	...

0800a838 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b0a0      	sub	sp, #128	; 0x80
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a840:	f107 0308 	add.w	r3, r7, #8
 800a844:	2264      	movs	r2, #100	; 0x64
 800a846:	2100      	movs	r1, #0
 800a848:	4618      	mov	r0, r3
 800a84a:	f010 fd42 	bl	801b2d2 <memset>
  int32_t PHYLinkState = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a856:	2300      	movs	r3, #0
 800a858:	67bb      	str	r3, [r7, #120]	; 0x78
 800a85a:	2300      	movs	r3, #0
 800a85c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a862:	483a      	ldr	r0, [pc, #232]	; (800a94c <ethernet_link_thread+0x114>)
 800a864:	f7f7 fb97 	bl	8001f96 <LAN8742_GetLinkState>
 800a868:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a86a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a86c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a870:	089b      	lsrs	r3, r3, #2
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00c      	beq.n	800a896 <ethernet_link_thread+0x5e>
 800a87c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a87e:	2b01      	cmp	r3, #1
 800a880:	dc09      	bgt.n	800a896 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800a882:	4833      	ldr	r0, [pc, #204]	; (800a950 <ethernet_link_thread+0x118>)
 800a884:	f7f8 fe90 	bl	80035a8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a888:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a88a:	f006 f88d 	bl	80109a8 <netif_set_down>
    netif_set_link_down(netif);
 800a88e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a890:	f006 f8f0 	bl	8010a74 <netif_set_link_down>
 800a894:	e055      	b.n	800a942 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a898:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a89c:	f003 0304 	and.w	r3, r3, #4
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d14e      	bne.n	800a942 <ethernet_link_thread+0x10a>
 800a8a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	dd4b      	ble.n	800a942 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800a8aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8ac:	3b02      	subs	r3, #2
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d82a      	bhi.n	800a908 <ethernet_link_thread+0xd0>
 800a8b2:	a201      	add	r2, pc, #4	; (adr r2, 800a8b8 <ethernet_link_thread+0x80>)
 800a8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b8:	0800a8c9 	.word	0x0800a8c9
 800a8bc:	0800a8db 	.word	0x0800a8db
 800a8c0:	0800a8eb 	.word	0x0800a8eb
 800a8c4:	0800a8fb 	.word	0x0800a8fb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a8c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a8ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a8d2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a8d8:	e017      	b.n	800a90a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a8de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a8e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a8e8:	e00f      	b.n	800a90a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a8ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8ee:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a8f8:	e007      	b.n	800a90a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a8fe:	2300      	movs	r3, #0
 800a900:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a902:	2301      	movs	r3, #1
 800a904:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a906:	e000      	b.n	800a90a <ethernet_link_thread+0xd2>
    default:
      break;
 800a908:	bf00      	nop
    }

    if(linkchanged)
 800a90a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d018      	beq.n	800a942 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a910:	f107 0308 	add.w	r3, r7, #8
 800a914:	4619      	mov	r1, r3
 800a916:	480e      	ldr	r0, [pc, #56]	; (800a950 <ethernet_link_thread+0x118>)
 800a918:	f7f9 fa20 	bl	8003d5c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a91c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a91e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a922:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a924:	f107 0308 	add.w	r3, r7, #8
 800a928:	4619      	mov	r1, r3
 800a92a:	4809      	ldr	r0, [pc, #36]	; (800a950 <ethernet_link_thread+0x118>)
 800a92c:	f7f9 fb00 	bl	8003f30 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800a930:	4807      	ldr	r0, [pc, #28]	; (800a950 <ethernet_link_thread+0x118>)
 800a932:	f7f8 fdab 	bl	800348c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a936:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a938:	f005 ffca 	bl	80108d0 <netif_set_up>
      netif_set_link_up(netif);
 800a93c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a93e:	f006 f865 	bl	8010a0c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800a942:	2064      	movs	r0, #100	; 0x64
 800a944:	f000 f910 	bl	800ab68 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a948:	e78b      	b.n	800a862 <ethernet_link_thread+0x2a>
 800a94a:	bf00      	nop
 800a94c:	2000a520 	.word	0x2000a520
 800a950:	2000a438 	.word	0x2000a438

0800a954 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af02      	add	r7, sp, #8
 800a95a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a95c:	4812      	ldr	r0, [pc, #72]	; (800a9a8 <HAL_ETH_RxAllocateCallback+0x54>)
 800a95e:	f005 fd2b 	bl	80103b8 <memp_malloc_pool>
 800a962:	60f8      	str	r0, [r7, #12]
  if (p)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d014      	beq.n	800a994 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f103 0220 	add.w	r2, r3, #32
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	4a0d      	ldr	r2, [pc, #52]	; (800a9ac <HAL_ETH_RxAllocateCallback+0x58>)
 800a978:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a982:	9201      	str	r2, [sp, #4]
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2241      	movs	r2, #65	; 0x41
 800a98a:	2100      	movs	r1, #0
 800a98c:	2000      	movs	r0, #0
 800a98e:	f006 fa99 	bl	8010ec4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a992:	e005      	b.n	800a9a0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a994:	4b06      	ldr	r3, [pc, #24]	; (800a9b0 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a996:	2201      	movs	r2, #1
 800a998:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]
}
 800a9a0:	bf00      	nop
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	0802046c 	.word	0x0802046c
 800a9ac:	0800a5cd 	.word	0x0800a5cd
 800a9b0:	2000a42c 	.word	0x2000a42c

0800a9b4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b088      	sub	sp, #32
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
 800a9c0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	3b20      	subs	r3, #32
 800a9d2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	887a      	ldrh	r2, [r7, #2]
 800a9e4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d103      	bne.n	800a9f6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	69fa      	ldr	r2, [r7, #28]
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	e003      	b.n	800a9fe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	69fa      	ldr	r2, [r7, #28]
 800a9fc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	69fa      	ldr	r2, [r7, #28]
 800aa02:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	61fb      	str	r3, [r7, #28]
 800aa0a:	e009      	b.n	800aa20 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	891a      	ldrh	r2, [r3, #8]
 800aa10:	887b      	ldrh	r3, [r7, #2]
 800aa12:	4413      	add	r3, r2
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	61fb      	str	r3, [r7, #28]
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1f2      	bne.n	800aa0c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800aa26:	887b      	ldrh	r3, [r7, #2]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7ff fb2e 	bl	800a08c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800aa30:	bf00      	nop
 800aa32:	3720      	adds	r7, #32
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f006 fbf9 	bl	8011238 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800aa46:	bf00      	nop
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800aa4e:	b480      	push	{r7}
 800aa50:	b085      	sub	sp, #20
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	4603      	mov	r3, r0
 800aa56:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800aa5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa60:	2b84      	cmp	r3, #132	; 0x84
 800aa62:	d005      	beq.n	800aa70 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800aa64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	3303      	adds	r3, #3
 800aa6e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800aa70:	68fb      	ldr	r3, [r7, #12]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b083      	sub	sp, #12
 800aa82:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa84:	f3ef 8305 	mrs	r3, IPSR
 800aa88:	607b      	str	r3, [r7, #4]
  return(result);
 800aa8a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bf14      	ite	ne
 800aa90:	2301      	movne	r3, #1
 800aa92:	2300      	moveq	r3, #0
 800aa94:	b2db      	uxtb	r3, r3
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800aaa6:	f001 fd1d 	bl	800c4e4 <vTaskStartScheduler>
  
  return osOK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800aab4:	f7ff ffe3 	bl	800aa7e <inHandlerMode>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d003      	beq.n	800aac6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800aabe:	f001 fe3b 	bl	800c738 <xTaskGetTickCountFromISR>
 800aac2:	4603      	mov	r3, r0
 800aac4:	e002      	b.n	800aacc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800aac6:	f001 fe27 	bl	800c718 <xTaskGetTickCount>
 800aaca:	4603      	mov	r3, r0
  }
}
 800aacc:	4618      	mov	r0, r3
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800aad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aad2:	b089      	sub	sp, #36	; 0x24
 800aad4:	af04      	add	r7, sp, #16
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	695b      	ldr	r3, [r3, #20]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d020      	beq.n	800ab24 <osThreadCreate+0x54>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	699b      	ldr	r3, [r3, #24]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d01c      	beq.n	800ab24 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685c      	ldr	r4, [r3, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	691e      	ldr	r6, [r3, #16]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7ff ffa6 	bl	800aa4e <makeFreeRtosPriority>
 800ab02:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	695b      	ldr	r3, [r3, #20]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab0c:	9202      	str	r2, [sp, #8]
 800ab0e:	9301      	str	r3, [sp, #4]
 800ab10:	9100      	str	r1, [sp, #0]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	4632      	mov	r2, r6
 800ab16:	4629      	mov	r1, r5
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f001 faf3 	bl	800c104 <xTaskCreateStatic>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	60fb      	str	r3, [r7, #12]
 800ab22:	e01c      	b.n	800ab5e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685c      	ldr	r4, [r3, #4]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab30:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff ff88 	bl	800aa4e <makeFreeRtosPriority>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	f107 030c 	add.w	r3, r7, #12
 800ab44:	9301      	str	r3, [sp, #4]
 800ab46:	9200      	str	r2, [sp, #0]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	4632      	mov	r2, r6
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f001 fb3b 	bl	800c1ca <xTaskCreate>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d001      	beq.n	800ab5e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e000      	b.n	800ab60 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab68 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <osDelay+0x16>
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	e000      	b.n	800ab80 <osDelay+0x18>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	4618      	mov	r0, r3
 800ab82:	f001 fc79 	bl	800c478 <vTaskDelay>
  
  return osOK;
 800ab86:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af02      	add	r7, sp, #8
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800aba2:	f7ff ff6c 	bl	800aa7e <inHandlerMode>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d01c      	beq.n	800abe6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	f107 0208 	add.w	r2, r7, #8
 800abb2:	f107 030c 	add.w	r3, r7, #12
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	4613      	mov	r3, r2
 800abba:	2201      	movs	r2, #1
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f002 fbd7 	bl	800d370 <xTaskGenericNotifyFromISR>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d002      	beq.n	800abce <osSignalSet+0x3e>
      return 0x80000000;
 800abc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abcc:	e019      	b.n	800ac02 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d015      	beq.n	800ac00 <osSignalSet+0x70>
 800abd4:	4b0d      	ldr	r3, [pc, #52]	; (800ac0c <osSignalSet+0x7c>)
 800abd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	e00c      	b.n	800ac00 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	f107 0308 	add.w	r3, r7, #8
 800abec:	2201      	movs	r2, #1
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f002 fafa 	bl	800d1e8 <xTaskGenericNotify>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d002      	beq.n	800ac00 <osSignalSet+0x70>
    return 0x80000000;
 800abfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abfe:	e000      	b.n	800ac02 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800ac00:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	e000ed04 	.word	0xe000ed04

0800ac10 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800ac10:	b590      	push	{r4, r7, lr}
 800ac12:	b089      	sub	sp, #36	; 0x24
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac2a:	d103      	bne.n	800ac34 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800ac2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac30:	61fb      	str	r3, [r7, #28]
 800ac32:	e009      	b.n	800ac48 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d006      	beq.n	800ac48 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d101      	bne.n	800ac48 <osSignalWait+0x38>
      ticks = 1;
 800ac44:	2301      	movs	r3, #1
 800ac46:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800ac48:	f7ff ff19 	bl	800aa7e <inHandlerMode>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d002      	beq.n	800ac58 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800ac52:	2382      	movs	r3, #130	; 0x82
 800ac54:	613b      	str	r3, [r7, #16]
 800ac56:	e01b      	b.n	800ac90 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800ac58:	68b9      	ldr	r1, [r7, #8]
 800ac5a:	f107 0310 	add.w	r3, r7, #16
 800ac5e:	1d1a      	adds	r2, r3, #4
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	2000      	movs	r0, #0
 800ac64:	f002 fa60 	bl	800d128 <xTaskNotifyWait>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d008      	beq.n	800ac80 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <osSignalWait+0x6a>
 800ac74:	2300      	movs	r3, #0
 800ac76:	613b      	str	r3, [r7, #16]
 800ac78:	e00a      	b.n	800ac90 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800ac7a:	2340      	movs	r3, #64	; 0x40
 800ac7c:	613b      	str	r3, [r7, #16]
 800ac7e:	e007      	b.n	800ac90 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	da02      	bge.n	800ac8c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800ac86:	2386      	movs	r3, #134	; 0x86
 800ac88:	613b      	str	r3, [r7, #16]
 800ac8a:	e001      	b.n	800ac90 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800ac8c:	2308      	movs	r3, #8
 800ac8e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	461c      	mov	r4, r3
 800ac94:	f107 0310 	add.w	r3, r7, #16
 800ac98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	3724      	adds	r7, #36	; 0x24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd90      	pop	{r4, r7, pc}

0800aca8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d007      	beq.n	800acc8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	4619      	mov	r1, r3
 800acbe:	2001      	movs	r0, #1
 800acc0:	f000 fc21 	bl	800b506 <xQueueCreateMutexStatic>
 800acc4:	4603      	mov	r3, r0
 800acc6:	e003      	b.n	800acd0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800acc8:	2001      	movs	r0, #1
 800acca:	f000 fc04 	bl	800b4d6 <xQueueCreateMutex>
 800acce:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ace2:	2300      	movs	r3, #0
 800ace4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d101      	bne.n	800acf0 <osMutexWait+0x18>
    return osErrorParameter;
 800acec:	2380      	movs	r3, #128	; 0x80
 800acee:	e03a      	b.n	800ad66 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800acf0:	2300      	movs	r3, #0
 800acf2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acfa:	d103      	bne.n	800ad04 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800acfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ad00:	60fb      	str	r3, [r7, #12]
 800ad02:	e009      	b.n	800ad18 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d006      	beq.n	800ad18 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <osMutexWait+0x40>
      ticks = 1;
 800ad14:	2301      	movs	r3, #1
 800ad16:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ad18:	f7ff feb1 	bl	800aa7e <inHandlerMode>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d017      	beq.n	800ad52 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ad22:	f107 0308 	add.w	r3, r7, #8
 800ad26:	461a      	mov	r2, r3
 800ad28:	2100      	movs	r1, #0
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 f83c 	bl	800bda8 <xQueueReceiveFromISR>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d001      	beq.n	800ad3a <osMutexWait+0x62>
      return osErrorOS;
 800ad36:	23ff      	movs	r3, #255	; 0xff
 800ad38:	e015      	b.n	800ad66 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d011      	beq.n	800ad64 <osMutexWait+0x8c>
 800ad40:	4b0b      	ldr	r3, [pc, #44]	; (800ad70 <osMutexWait+0x98>)
 800ad42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad46:	601a      	str	r2, [r3, #0]
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	e008      	b.n	800ad64 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ad52:	68f9      	ldr	r1, [r7, #12]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 ff13 	bl	800bb80 <xQueueSemaphoreTake>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d001      	beq.n	800ad64 <osMutexWait+0x8c>
    return osErrorOS;
 800ad60:	23ff      	movs	r3, #255	; 0xff
 800ad62:	e000      	b.n	800ad66 <osMutexWait+0x8e>
  }
  
  return osOK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	e000ed04 	.word	0xe000ed04

0800ad74 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ad80:	2300      	movs	r3, #0
 800ad82:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ad84:	f7ff fe7b 	bl	800aa7e <inHandlerMode>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d016      	beq.n	800adbc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ad8e:	f107 0308 	add.w	r3, r7, #8
 800ad92:	4619      	mov	r1, r3
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fd77 	bl	800b888 <xQueueGiveFromISR>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d001      	beq.n	800ada4 <osMutexRelease+0x30>
      return osErrorOS;
 800ada0:	23ff      	movs	r3, #255	; 0xff
 800ada2:	e017      	b.n	800add4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d013      	beq.n	800add2 <osMutexRelease+0x5e>
 800adaa:	4b0c      	ldr	r3, [pc, #48]	; (800addc <osMutexRelease+0x68>)
 800adac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adb0:	601a      	str	r2, [r3, #0]
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	e00a      	b.n	800add2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800adbc:	2300      	movs	r3, #0
 800adbe:	2200      	movs	r2, #0
 800adc0:	2100      	movs	r1, #0
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fbba 	bl	800b53c <xQueueGenericSend>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d001      	beq.n	800add2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800adce:	23ff      	movs	r3, #255	; 0xff
 800add0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800add2:	68fb      	ldr	r3, [r7, #12]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	e000ed04 	.word	0xe000ed04

0800ade0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800adea:	2300      	movs	r3, #0
 800adec:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800adf4:	2380      	movs	r3, #128	; 0x80
 800adf6:	e03a      	b.n	800ae6e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae02:	d103      	bne.n	800ae0c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ae04:	f04f 33ff 	mov.w	r3, #4294967295
 800ae08:	60fb      	str	r3, [r7, #12]
 800ae0a:	e009      	b.n	800ae20 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d006      	beq.n	800ae20 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d101      	bne.n	800ae20 <osSemaphoreWait+0x40>
      ticks = 1;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ae20:	f7ff fe2d 	bl	800aa7e <inHandlerMode>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d017      	beq.n	800ae5a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ae2a:	f107 0308 	add.w	r3, r7, #8
 800ae2e:	461a      	mov	r2, r3
 800ae30:	2100      	movs	r1, #0
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 ffb8 	bl	800bda8 <xQueueReceiveFromISR>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d001      	beq.n	800ae42 <osSemaphoreWait+0x62>
      return osErrorOS;
 800ae3e:	23ff      	movs	r3, #255	; 0xff
 800ae40:	e015      	b.n	800ae6e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d011      	beq.n	800ae6c <osSemaphoreWait+0x8c>
 800ae48:	4b0b      	ldr	r3, [pc, #44]	; (800ae78 <osSemaphoreWait+0x98>)
 800ae4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae4e:	601a      	str	r2, [r3, #0]
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	e008      	b.n	800ae6c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ae5a:	68f9      	ldr	r1, [r7, #12]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fe8f 	bl	800bb80 <xQueueSemaphoreTake>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d001      	beq.n	800ae6c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ae68:	23ff      	movs	r3, #255	; 0xff
 800ae6a:	e000      	b.n	800ae6e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	e000ed04 	.word	0xe000ed04

0800ae7c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ae84:	2300      	movs	r3, #0
 800ae86:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ae8c:	f7ff fdf7 	bl	800aa7e <inHandlerMode>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d016      	beq.n	800aec4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ae96:	f107 0308 	add.w	r3, r7, #8
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fcf3 	bl	800b888 <xQueueGiveFromISR>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d001      	beq.n	800aeac <osSemaphoreRelease+0x30>
      return osErrorOS;
 800aea8:	23ff      	movs	r3, #255	; 0xff
 800aeaa:	e017      	b.n	800aedc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d013      	beq.n	800aeda <osSemaphoreRelease+0x5e>
 800aeb2:	4b0c      	ldr	r3, [pc, #48]	; (800aee4 <osSemaphoreRelease+0x68>)
 800aeb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeb8:	601a      	str	r2, [r3, #0]
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	e00a      	b.n	800aeda <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800aec4:	2300      	movs	r3, #0
 800aec6:	2200      	movs	r2, #0
 800aec8:	2100      	movs	r1, #0
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fb36 	bl	800b53c <xQueueGenericSend>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d001      	beq.n	800aeda <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800aed6:	23ff      	movs	r3, #255	; 0xff
 800aed8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800aeda:	68fb      	ldr	r3, [r7, #12]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	e000ed04 	.word	0xe000ed04

0800aee8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800aee8:	b590      	push	{r4, r7, lr}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af02      	add	r7, sp, #8
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d011      	beq.n	800af1e <osMessageCreate+0x36>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00d      	beq.n	800af1e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6818      	ldr	r0, [r3, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6859      	ldr	r1, [r3, #4]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	689a      	ldr	r2, [r3, #8]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	2400      	movs	r4, #0
 800af14:	9400      	str	r4, [sp, #0]
 800af16:	f000 f9e1 	bl	800b2dc <xQueueGenericCreateStatic>
 800af1a:	4603      	mov	r3, r0
 800af1c:	e008      	b.n	800af30 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6818      	ldr	r0, [r3, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	4619      	mov	r1, r3
 800af2a:	f000 fa59 	bl	800b3e0 <xQueueGenericCreate>
 800af2e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800af30:	4618      	mov	r0, r3
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	bd90      	pop	{r4, r7, pc}

0800af38 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800af44:	2300      	movs	r3, #0
 800af46:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <osMessagePut+0x1e>
    ticks = 1;
 800af52:	2301      	movs	r3, #1
 800af54:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800af56:	f7ff fd92 	bl	800aa7e <inHandlerMode>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d018      	beq.n	800af92 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800af60:	f107 0210 	add.w	r2, r7, #16
 800af64:	f107 0108 	add.w	r1, r7, #8
 800af68:	2300      	movs	r3, #0
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f000 fbec 	bl	800b748 <xQueueGenericSendFromISR>
 800af70:	4603      	mov	r3, r0
 800af72:	2b01      	cmp	r3, #1
 800af74:	d001      	beq.n	800af7a <osMessagePut+0x42>
      return osErrorOS;
 800af76:	23ff      	movs	r3, #255	; 0xff
 800af78:	e018      	b.n	800afac <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d014      	beq.n	800afaa <osMessagePut+0x72>
 800af80:	4b0c      	ldr	r3, [pc, #48]	; (800afb4 <osMessagePut+0x7c>)
 800af82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af86:	601a      	str	r2, [r3, #0]
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	e00b      	b.n	800afaa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800af92:	f107 0108 	add.w	r1, r7, #8
 800af96:	2300      	movs	r3, #0
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f000 face 	bl	800b53c <xQueueGenericSend>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d001      	beq.n	800afaa <osMessagePut+0x72>
      return osErrorOS;
 800afa6:	23ff      	movs	r3, #255	; 0xff
 800afa8:	e000      	b.n	800afac <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	e000ed04 	.word	0xe000ed04

0800afb8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800afb8:	b590      	push	{r4, r7, lr}
 800afba:	b08b      	sub	sp, #44	; 0x2c
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10a      	bne.n	800afe8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800afd2:	2380      	movs	r3, #128	; 0x80
 800afd4:	617b      	str	r3, [r7, #20]
    return event;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	461c      	mov	r4, r3
 800afda:	f107 0314 	add.w	r3, r7, #20
 800afde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800afe2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800afe6:	e054      	b.n	800b092 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800afe8:	2300      	movs	r3, #0
 800afea:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff6:	d103      	bne.n	800b000 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800aff8:	f04f 33ff 	mov.w	r3, #4294967295
 800affc:	627b      	str	r3, [r7, #36]	; 0x24
 800affe:	e009      	b.n	800b014 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d006      	beq.n	800b014 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d101      	bne.n	800b014 <osMessageGet+0x5c>
      ticks = 1;
 800b010:	2301      	movs	r3, #1
 800b012:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b014:	f7ff fd33 	bl	800aa7e <inHandlerMode>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d01c      	beq.n	800b058 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b01e:	f107 0220 	add.w	r2, r7, #32
 800b022:	f107 0314 	add.w	r3, r7, #20
 800b026:	3304      	adds	r3, #4
 800b028:	4619      	mov	r1, r3
 800b02a:	68b8      	ldr	r0, [r7, #8]
 800b02c:	f000 febc 	bl	800bda8 <xQueueReceiveFromISR>
 800b030:	4603      	mov	r3, r0
 800b032:	2b01      	cmp	r3, #1
 800b034:	d102      	bne.n	800b03c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b036:	2310      	movs	r3, #16
 800b038:	617b      	str	r3, [r7, #20]
 800b03a:	e001      	b.n	800b040 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b03c:	2300      	movs	r3, #0
 800b03e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b040:	6a3b      	ldr	r3, [r7, #32]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d01d      	beq.n	800b082 <osMessageGet+0xca>
 800b046:	4b15      	ldr	r3, [pc, #84]	; (800b09c <osMessageGet+0xe4>)
 800b048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	e014      	b.n	800b082 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b058:	f107 0314 	add.w	r3, r7, #20
 800b05c:	3304      	adds	r3, #4
 800b05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b060:	4619      	mov	r1, r3
 800b062:	68b8      	ldr	r0, [r7, #8]
 800b064:	f000 fca6 	bl	800b9b4 <xQueueReceive>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d102      	bne.n	800b074 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b06e:	2310      	movs	r3, #16
 800b070:	617b      	str	r3, [r7, #20]
 800b072:	e006      	b.n	800b082 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <osMessageGet+0xc6>
 800b07a:	2300      	movs	r3, #0
 800b07c:	e000      	b.n	800b080 <osMessageGet+0xc8>
 800b07e:	2340      	movs	r3, #64	; 0x40
 800b080:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	461c      	mov	r4, r3
 800b086:	f107 0314 	add.w	r3, r7, #20
 800b08a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b08e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	372c      	adds	r7, #44	; 0x2c
 800b096:	46bd      	mov	sp, r7
 800b098:	bd90      	pop	{r4, r7, pc}
 800b09a:	bf00      	nop
 800b09c:	e000ed04 	.word	0xe000ed04

0800b0a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f103 0208 	add.w	r2, r3, #8
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f103 0208 	add.w	r2, r3, #8
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f103 0208 	add.w	r2, r3, #8
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b0ee:	bf00      	nop
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b085      	sub	sp, #20
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	689a      	ldr	r2, [r3, #8]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	601a      	str	r2, [r3, #0]
}
 800b136:	bf00      	nop
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b142:	b480      	push	{r7}
 800b144:	b085      	sub	sp, #20
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b158:	d103      	bne.n	800b162 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	60fb      	str	r3, [r7, #12]
 800b160:	e00c      	b.n	800b17c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	3308      	adds	r3, #8
 800b166:	60fb      	str	r3, [r7, #12]
 800b168:	e002      	b.n	800b170 <vListInsert+0x2e>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	60fb      	str	r3, [r7, #12]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68ba      	ldr	r2, [r7, #8]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d2f6      	bcs.n	800b16a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	685a      	ldr	r2, [r3, #4]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	1c5a      	adds	r2, r3, #1
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	601a      	str	r2, [r3, #0]
}
 800b1a8:	bf00      	nop
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	6892      	ldr	r2, [r2, #8]
 800b1ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	6852      	ldr	r2, [r2, #4]
 800b1d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d103      	bne.n	800b1e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	689a      	ldr	r2, [r3, #8]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	1e5a      	subs	r2, r3, #1
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10c      	bne.n	800b236 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b220:	b672      	cpsid	i
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	b662      	cpsie	i
 800b230:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b232:	bf00      	nop
 800b234:	e7fe      	b.n	800b234 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b236:	f002 faf9 	bl	800d82c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b242:	68f9      	ldr	r1, [r7, #12]
 800b244:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b246:	fb01 f303 	mul.w	r3, r1, r3
 800b24a:	441a      	add	r2, r3
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b266:	3b01      	subs	r3, #1
 800b268:	68f9      	ldr	r1, [r7, #12]
 800b26a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b26c:	fb01 f303 	mul.w	r3, r1, r3
 800b270:	441a      	add	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	22ff      	movs	r2, #255	; 0xff
 800b27a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	22ff      	movs	r2, #255	; 0xff
 800b282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d114      	bne.n	800b2b6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d01a      	beq.n	800b2ca <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3310      	adds	r3, #16
 800b298:	4618      	mov	r0, r3
 800b29a:	f001 fba3 	bl	800c9e4 <xTaskRemoveFromEventList>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d012      	beq.n	800b2ca <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b2a4:	4b0c      	ldr	r3, [pc, #48]	; (800b2d8 <xQueueGenericReset+0xd0>)
 800b2a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2aa:	601a      	str	r2, [r3, #0]
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	f3bf 8f6f 	isb	sy
 800b2b4:	e009      	b.n	800b2ca <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	3310      	adds	r3, #16
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7ff fef0 	bl	800b0a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	3324      	adds	r3, #36	; 0x24
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7ff feeb 	bl	800b0a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b2ca:	f002 fae3 	bl	800d894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b2ce:	2301      	movs	r3, #1
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	e000ed04 	.word	0xe000ed04

0800b2dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b08e      	sub	sp, #56	; 0x38
 800b2e0:	af02      	add	r7, sp, #8
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
 800b2e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d10c      	bne.n	800b30a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f4:	b672      	cpsid	i
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	b662      	cpsie	i
 800b304:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b306:	bf00      	nop
 800b308:	e7fe      	b.n	800b308 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10c      	bne.n	800b32a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	b672      	cpsid	i
 800b316:	f383 8811 	msr	BASEPRI, r3
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	b662      	cpsie	i
 800b324:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <xQueueGenericCreateStatic+0x5a>
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <xQueueGenericCreateStatic+0x5e>
 800b336:	2301      	movs	r3, #1
 800b338:	e000      	b.n	800b33c <xQueueGenericCreateStatic+0x60>
 800b33a:	2300      	movs	r3, #0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10c      	bne.n	800b35a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	b672      	cpsid	i
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	b662      	cpsie	i
 800b354:	623b      	str	r3, [r7, #32]
}
 800b356:	bf00      	nop
 800b358:	e7fe      	b.n	800b358 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d102      	bne.n	800b366 <xQueueGenericCreateStatic+0x8a>
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <xQueueGenericCreateStatic+0x8e>
 800b366:	2301      	movs	r3, #1
 800b368:	e000      	b.n	800b36c <xQueueGenericCreateStatic+0x90>
 800b36a:	2300      	movs	r3, #0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d10c      	bne.n	800b38a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	b672      	cpsid	i
 800b376:	f383 8811 	msr	BASEPRI, r3
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	f3bf 8f4f 	dsb	sy
 800b382:	b662      	cpsie	i
 800b384:	61fb      	str	r3, [r7, #28]
}
 800b386:	bf00      	nop
 800b388:	e7fe      	b.n	800b388 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b38a:	2348      	movs	r3, #72	; 0x48
 800b38c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2b48      	cmp	r3, #72	; 0x48
 800b392:	d00c      	beq.n	800b3ae <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	b672      	cpsid	i
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	b662      	cpsie	i
 800b3a8:	61bb      	str	r3, [r7, #24]
}
 800b3aa:	bf00      	nop
 800b3ac:	e7fe      	b.n	800b3ac <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b3ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00d      	beq.n	800b3d6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b3c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	68b9      	ldr	r1, [r7, #8]
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f000 f847 	bl	800b464 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3730      	adds	r7, #48	; 0x30
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b08a      	sub	sp, #40	; 0x28
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10c      	bne.n	800b40e <xQueueGenericCreate+0x2e>
	__asm volatile
 800b3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f8:	b672      	cpsid	i
 800b3fa:	f383 8811 	msr	BASEPRI, r3
 800b3fe:	f3bf 8f6f 	isb	sy
 800b402:	f3bf 8f4f 	dsb	sy
 800b406:	b662      	cpsie	i
 800b408:	613b      	str	r3, [r7, #16]
}
 800b40a:	bf00      	nop
 800b40c:	e7fe      	b.n	800b40c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d102      	bne.n	800b41a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b414:	2300      	movs	r3, #0
 800b416:	61fb      	str	r3, [r7, #28]
 800b418:	e004      	b.n	800b424 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	fb02 f303 	mul.w	r3, r2, r3
 800b422:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	3348      	adds	r3, #72	; 0x48
 800b428:	4618      	mov	r0, r3
 800b42a:	f002 fb2b 	bl	800da84 <pvPortMalloc>
 800b42e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d011      	beq.n	800b45a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	3348      	adds	r3, #72	; 0x48
 800b43e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b448:	79fa      	ldrb	r2, [r7, #7]
 800b44a:	69bb      	ldr	r3, [r7, #24]
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	4613      	mov	r3, r2
 800b450:	697a      	ldr	r2, [r7, #20]
 800b452:	68b9      	ldr	r1, [r7, #8]
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f000 f805 	bl	800b464 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b45a:	69bb      	ldr	r3, [r7, #24]
	}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3720      	adds	r7, #32
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
 800b470:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d103      	bne.n	800b480 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	69ba      	ldr	r2, [r7, #24]
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	e002      	b.n	800b486 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b480:	69bb      	ldr	r3, [r7, #24]
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b492:	2101      	movs	r1, #1
 800b494:	69b8      	ldr	r0, [r7, #24]
 800b496:	f7ff feb7 	bl	800b208 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b49a:	bf00      	nop
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b082      	sub	sp, #8
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00e      	beq.n	800b4ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f837 	bl	800b53c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b4ce:	bf00      	nop
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b086      	sub	sp, #24
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	4603      	mov	r3, r0
 800b4de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	617b      	str	r3, [r7, #20]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b4e8:	79fb      	ldrb	r3, [r7, #7]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	6939      	ldr	r1, [r7, #16]
 800b4ee:	6978      	ldr	r0, [r7, #20]
 800b4f0:	f7ff ff76 	bl	800b3e0 <xQueueGenericCreate>
 800b4f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f7ff ffd3 	bl	800b4a2 <prvInitialiseMutex>

		return xNewQueue;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
	}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b506:	b580      	push	{r7, lr}
 800b508:	b088      	sub	sp, #32
 800b50a:	af02      	add	r7, sp, #8
 800b50c:	4603      	mov	r3, r0
 800b50e:	6039      	str	r1, [r7, #0]
 800b510:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b512:	2301      	movs	r3, #1
 800b514:	617b      	str	r3, [r7, #20]
 800b516:	2300      	movs	r3, #0
 800b518:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b51a:	79fb      	ldrb	r3, [r7, #7]
 800b51c:	9300      	str	r3, [sp, #0]
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2200      	movs	r2, #0
 800b522:	6939      	ldr	r1, [r7, #16]
 800b524:	6978      	ldr	r0, [r7, #20]
 800b526:	f7ff fed9 	bl	800b2dc <xQueueGenericCreateStatic>
 800b52a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f7ff ffb8 	bl	800b4a2 <prvInitialiseMutex>

		return xNewQueue;
 800b532:	68fb      	ldr	r3, [r7, #12]
	}
 800b534:	4618      	mov	r0, r3
 800b536:	3718      	adds	r7, #24
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b08e      	sub	sp, #56	; 0x38
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	607a      	str	r2, [r7, #4]
 800b548:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b54a:	2300      	movs	r3, #0
 800b54c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10c      	bne.n	800b572 <xQueueGenericSend+0x36>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55c:	b672      	cpsid	i
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	b662      	cpsie	i
 800b56c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b56e:	bf00      	nop
 800b570:	e7fe      	b.n	800b570 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d103      	bne.n	800b580 <xQueueGenericSend+0x44>
 800b578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <xQueueGenericSend+0x48>
 800b580:	2301      	movs	r3, #1
 800b582:	e000      	b.n	800b586 <xQueueGenericSend+0x4a>
 800b584:	2300      	movs	r3, #0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10c      	bne.n	800b5a4 <xQueueGenericSend+0x68>
	__asm volatile
 800b58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58e:	b672      	cpsid	i
 800b590:	f383 8811 	msr	BASEPRI, r3
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	b662      	cpsie	i
 800b59e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5a0:	bf00      	nop
 800b5a2:	e7fe      	b.n	800b5a2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	d103      	bne.n	800b5b2 <xQueueGenericSend+0x76>
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d101      	bne.n	800b5b6 <xQueueGenericSend+0x7a>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e000      	b.n	800b5b8 <xQueueGenericSend+0x7c>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10c      	bne.n	800b5d6 <xQueueGenericSend+0x9a>
	__asm volatile
 800b5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c0:	b672      	cpsid	i
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	b662      	cpsie	i
 800b5d0:	623b      	str	r3, [r7, #32]
}
 800b5d2:	bf00      	nop
 800b5d4:	e7fe      	b.n	800b5d4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5d6:	f001 fbcd 	bl	800cd74 <xTaskGetSchedulerState>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d102      	bne.n	800b5e6 <xQueueGenericSend+0xaa>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <xQueueGenericSend+0xae>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e000      	b.n	800b5ec <xQueueGenericSend+0xb0>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10c      	bne.n	800b60a <xQueueGenericSend+0xce>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	b672      	cpsid	i
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	b662      	cpsie	i
 800b604:	61fb      	str	r3, [r7, #28]
}
 800b606:	bf00      	nop
 800b608:	e7fe      	b.n	800b608 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b60a:	f002 f90f 	bl	800d82c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b616:	429a      	cmp	r2, r3
 800b618:	d302      	bcc.n	800b620 <xQueueGenericSend+0xe4>
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b02      	cmp	r3, #2
 800b61e:	d129      	bne.n	800b674 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	68b9      	ldr	r1, [r7, #8]
 800b624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b626:	f000 fc5d 	bl	800bee4 <prvCopyDataToQueue>
 800b62a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b630:	2b00      	cmp	r3, #0
 800b632:	d010      	beq.n	800b656 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b636:	3324      	adds	r3, #36	; 0x24
 800b638:	4618      	mov	r0, r3
 800b63a:	f001 f9d3 	bl	800c9e4 <xTaskRemoveFromEventList>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d013      	beq.n	800b66c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b644:	4b3f      	ldr	r3, [pc, #252]	; (800b744 <xQueueGenericSend+0x208>)
 800b646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b64a:	601a      	str	r2, [r3, #0]
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	e00a      	b.n	800b66c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d007      	beq.n	800b66c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b65c:	4b39      	ldr	r3, [pc, #228]	; (800b744 <xQueueGenericSend+0x208>)
 800b65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b662:	601a      	str	r2, [r3, #0]
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b66c:	f002 f912 	bl	800d894 <vPortExitCritical>
				return pdPASS;
 800b670:	2301      	movs	r3, #1
 800b672:	e063      	b.n	800b73c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d103      	bne.n	800b682 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b67a:	f002 f90b 	bl	800d894 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b67e:	2300      	movs	r3, #0
 800b680:	e05c      	b.n	800b73c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b684:	2b00      	cmp	r3, #0
 800b686:	d106      	bne.n	800b696 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b688:	f107 0314 	add.w	r3, r7, #20
 800b68c:	4618      	mov	r0, r3
 800b68e:	f001 fa0d 	bl	800caac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b692:	2301      	movs	r3, #1
 800b694:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b696:	f002 f8fd 	bl	800d894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b69a:	f000 ff91 	bl	800c5c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b69e:	f002 f8c5 	bl	800d82c <vPortEnterCritical>
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6a8:	b25b      	sxtb	r3, r3
 800b6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ae:	d103      	bne.n	800b6b8 <xQueueGenericSend+0x17c>
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6be:	b25b      	sxtb	r3, r3
 800b6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c4:	d103      	bne.n	800b6ce <xQueueGenericSend+0x192>
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6ce:	f002 f8e1 	bl	800d894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6d2:	1d3a      	adds	r2, r7, #4
 800b6d4:	f107 0314 	add.w	r3, r7, #20
 800b6d8:	4611      	mov	r1, r2
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f001 f9fc 	bl	800cad8 <xTaskCheckForTimeOut>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d124      	bne.n	800b730 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b6e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6e8:	f000 fcf4 	bl	800c0d4 <prvIsQueueFull>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d018      	beq.n	800b724 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	3310      	adds	r3, #16
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f001 f94c 	bl	800c998 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b702:	f000 fc7f 	bl	800c004 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b706:	f000 ff69 	bl	800c5dc <xTaskResumeAll>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f47f af7c 	bne.w	800b60a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b712:	4b0c      	ldr	r3, [pc, #48]	; (800b744 <xQueueGenericSend+0x208>)
 800b714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b718:	601a      	str	r2, [r3, #0]
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	e772      	b.n	800b60a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b726:	f000 fc6d 	bl	800c004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b72a:	f000 ff57 	bl	800c5dc <xTaskResumeAll>
 800b72e:	e76c      	b.n	800b60a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b732:	f000 fc67 	bl	800c004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b736:	f000 ff51 	bl	800c5dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b73a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3738      	adds	r7, #56	; 0x38
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	e000ed04 	.word	0xe000ed04

0800b748 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08e      	sub	sp, #56	; 0x38
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
 800b754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d10c      	bne.n	800b77a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b764:	b672      	cpsid	i
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	b662      	cpsie	i
 800b774:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b776:	bf00      	nop
 800b778:	e7fe      	b.n	800b778 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d103      	bne.n	800b788 <xQueueGenericSendFromISR+0x40>
 800b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <xQueueGenericSendFromISR+0x44>
 800b788:	2301      	movs	r3, #1
 800b78a:	e000      	b.n	800b78e <xQueueGenericSendFromISR+0x46>
 800b78c:	2300      	movs	r3, #0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10c      	bne.n	800b7ac <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b796:	b672      	cpsid	i
 800b798:	f383 8811 	msr	BASEPRI, r3
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	b662      	cpsie	i
 800b7a6:	623b      	str	r3, [r7, #32]
}
 800b7a8:	bf00      	nop
 800b7aa:	e7fe      	b.n	800b7aa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	d103      	bne.n	800b7ba <xQueueGenericSendFromISR+0x72>
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d101      	bne.n	800b7be <xQueueGenericSendFromISR+0x76>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e000      	b.n	800b7c0 <xQueueGenericSendFromISR+0x78>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10c      	bne.n	800b7de <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c8:	b672      	cpsid	i
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	b662      	cpsie	i
 800b7d8:	61fb      	str	r3, [r7, #28]
}
 800b7da:	bf00      	nop
 800b7dc:	e7fe      	b.n	800b7dc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7de:	f002 f90d 	bl	800d9fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b7e2:	f3ef 8211 	mrs	r2, BASEPRI
 800b7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ea:	b672      	cpsid	i
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	b662      	cpsie	i
 800b7fa:	61ba      	str	r2, [r7, #24]
 800b7fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b7fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b800:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d302      	bcc.n	800b814 <xQueueGenericSendFromISR+0xcc>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b02      	cmp	r3, #2
 800b812:	d12c      	bne.n	800b86e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b81a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	68b9      	ldr	r1, [r7, #8]
 800b822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b824:	f000 fb5e 	bl	800bee4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b828:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b830:	d112      	bne.n	800b858 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b836:	2b00      	cmp	r3, #0
 800b838:	d016      	beq.n	800b868 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83c:	3324      	adds	r3, #36	; 0x24
 800b83e:	4618      	mov	r0, r3
 800b840:	f001 f8d0 	bl	800c9e4 <xTaskRemoveFromEventList>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00e      	beq.n	800b868 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00b      	beq.n	800b868 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	e007      	b.n	800b868 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b858:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b85c:	3301      	adds	r3, #1
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	b25a      	sxtb	r2, r3
 800b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b868:	2301      	movs	r3, #1
 800b86a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b86c:	e001      	b.n	800b872 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b86e:	2300      	movs	r3, #0
 800b870:	637b      	str	r3, [r7, #52]	; 0x34
 800b872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b874:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b87c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b880:	4618      	mov	r0, r3
 800b882:	3738      	adds	r7, #56	; 0x38
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08e      	sub	sp, #56	; 0x38
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10c      	bne.n	800b8b6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800b89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a0:	b672      	cpsid	i
 800b8a2:	f383 8811 	msr	BASEPRI, r3
 800b8a6:	f3bf 8f6f 	isb	sy
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	b662      	cpsie	i
 800b8b0:	623b      	str	r3, [r7, #32]
}
 800b8b2:	bf00      	nop
 800b8b4:	e7fe      	b.n	800b8b4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00c      	beq.n	800b8d8 <xQueueGiveFromISR+0x50>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	b672      	cpsid	i
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	b662      	cpsie	i
 800b8d2:	61fb      	str	r3, [r7, #28]
}
 800b8d4:	bf00      	nop
 800b8d6:	e7fe      	b.n	800b8d6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d103      	bne.n	800b8e8 <xQueueGiveFromISR+0x60>
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d101      	bne.n	800b8ec <xQueueGiveFromISR+0x64>
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e000      	b.n	800b8ee <xQueueGiveFromISR+0x66>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10c      	bne.n	800b90c <xQueueGiveFromISR+0x84>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f6:	b672      	cpsid	i
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	b662      	cpsie	i
 800b906:	61bb      	str	r3, [r7, #24]
}
 800b908:	bf00      	nop
 800b90a:	e7fe      	b.n	800b90a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b90c:	f002 f876 	bl	800d9fc <vPortValidateInterruptPriority>
	__asm volatile
 800b910:	f3ef 8211 	mrs	r2, BASEPRI
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	b672      	cpsid	i
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	b662      	cpsie	i
 800b928:	617a      	str	r2, [r7, #20]
 800b92a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b92c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b92e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b934:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b93a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d22b      	bcs.n	800b998 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94c:	1c5a      	adds	r2, r3, #1
 800b94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b950:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b952:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b95a:	d112      	bne.n	800b982 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b960:	2b00      	cmp	r3, #0
 800b962:	d016      	beq.n	800b992 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	3324      	adds	r3, #36	; 0x24
 800b968:	4618      	mov	r0, r3
 800b96a:	f001 f83b 	bl	800c9e4 <xTaskRemoveFromEventList>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00e      	beq.n	800b992 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00b      	beq.n	800b992 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	2201      	movs	r2, #1
 800b97e:	601a      	str	r2, [r3, #0]
 800b980:	e007      	b.n	800b992 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b986:	3301      	adds	r3, #1
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	b25a      	sxtb	r2, r3
 800b98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b992:	2301      	movs	r3, #1
 800b994:	637b      	str	r3, [r7, #52]	; 0x34
 800b996:	e001      	b.n	800b99c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b998:	2300      	movs	r3, #0
 800b99a:	637b      	str	r3, [r7, #52]	; 0x34
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f383 8811 	msr	BASEPRI, r3
}
 800b9a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3738      	adds	r7, #56	; 0x38
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
	...

0800b9b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b08c      	sub	sp, #48	; 0x30
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10c      	bne.n	800b9e8 <xQueueReceive+0x34>
	__asm volatile
 800b9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d2:	b672      	cpsid	i
 800b9d4:	f383 8811 	msr	BASEPRI, r3
 800b9d8:	f3bf 8f6f 	isb	sy
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	b662      	cpsie	i
 800b9e2:	623b      	str	r3, [r7, #32]
}
 800b9e4:	bf00      	nop
 800b9e6:	e7fe      	b.n	800b9e6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d103      	bne.n	800b9f6 <xQueueReceive+0x42>
 800b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <xQueueReceive+0x46>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e000      	b.n	800b9fc <xQueueReceive+0x48>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10c      	bne.n	800ba1a <xQueueReceive+0x66>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	b672      	cpsid	i
 800ba06:	f383 8811 	msr	BASEPRI, r3
 800ba0a:	f3bf 8f6f 	isb	sy
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	b662      	cpsie	i
 800ba14:	61fb      	str	r3, [r7, #28]
}
 800ba16:	bf00      	nop
 800ba18:	e7fe      	b.n	800ba18 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba1a:	f001 f9ab 	bl	800cd74 <xTaskGetSchedulerState>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d102      	bne.n	800ba2a <xQueueReceive+0x76>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d101      	bne.n	800ba2e <xQueueReceive+0x7a>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e000      	b.n	800ba30 <xQueueReceive+0x7c>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10c      	bne.n	800ba4e <xQueueReceive+0x9a>
	__asm volatile
 800ba34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba38:	b672      	cpsid	i
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	b662      	cpsie	i
 800ba48:	61bb      	str	r3, [r7, #24]
}
 800ba4a:	bf00      	nop
 800ba4c:	e7fe      	b.n	800ba4c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba4e:	f001 feed 	bl	800d82c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d01f      	beq.n	800ba9e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba5e:	68b9      	ldr	r1, [r7, #8]
 800ba60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba62:	f000 faa9 	bl	800bfb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba68:	1e5a      	subs	r2, r3, #1
 800ba6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00f      	beq.n	800ba96 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba78:	3310      	adds	r3, #16
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 ffb2 	bl	800c9e4 <xTaskRemoveFromEventList>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d007      	beq.n	800ba96 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba86:	4b3d      	ldr	r3, [pc, #244]	; (800bb7c <xQueueReceive+0x1c8>)
 800ba88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba96:	f001 fefd 	bl	800d894 <vPortExitCritical>
				return pdPASS;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e069      	b.n	800bb72 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d103      	bne.n	800baac <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800baa4:	f001 fef6 	bl	800d894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800baa8:	2300      	movs	r3, #0
 800baaa:	e062      	b.n	800bb72 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800baac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d106      	bne.n	800bac0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bab2:	f107 0310 	add.w	r3, r7, #16
 800bab6:	4618      	mov	r0, r3
 800bab8:	f000 fff8 	bl	800caac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800babc:	2301      	movs	r3, #1
 800babe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bac0:	f001 fee8 	bl	800d894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bac4:	f000 fd7c 	bl	800c5c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bac8:	f001 feb0 	bl	800d82c <vPortEnterCritical>
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bad2:	b25b      	sxtb	r3, r3
 800bad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad8:	d103      	bne.n	800bae2 <xQueueReceive+0x12e>
 800bada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800badc:	2200      	movs	r2, #0
 800bade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bae8:	b25b      	sxtb	r3, r3
 800baea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baee:	d103      	bne.n	800baf8 <xQueueReceive+0x144>
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800baf8:	f001 fecc 	bl	800d894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bafc:	1d3a      	adds	r2, r7, #4
 800bafe:	f107 0310 	add.w	r3, r7, #16
 800bb02:	4611      	mov	r1, r2
 800bb04:	4618      	mov	r0, r3
 800bb06:	f000 ffe7 	bl	800cad8 <xTaskCheckForTimeOut>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d123      	bne.n	800bb58 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb12:	f000 fac9 	bl	800c0a8 <prvIsQueueEmpty>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d017      	beq.n	800bb4c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1e:	3324      	adds	r3, #36	; 0x24
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	4611      	mov	r1, r2
 800bb24:	4618      	mov	r0, r3
 800bb26:	f000 ff37 	bl	800c998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb2c:	f000 fa6a 	bl	800c004 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb30:	f000 fd54 	bl	800c5dc <xTaskResumeAll>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d189      	bne.n	800ba4e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800bb3a:	4b10      	ldr	r3, [pc, #64]	; (800bb7c <xQueueReceive+0x1c8>)
 800bb3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb40:	601a      	str	r2, [r3, #0]
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	e780      	b.n	800ba4e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bb4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb4e:	f000 fa59 	bl	800c004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb52:	f000 fd43 	bl	800c5dc <xTaskResumeAll>
 800bb56:	e77a      	b.n	800ba4e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bb58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb5a:	f000 fa53 	bl	800c004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb5e:	f000 fd3d 	bl	800c5dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb64:	f000 faa0 	bl	800c0a8 <prvIsQueueEmpty>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f43f af6f 	beq.w	800ba4e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3730      	adds	r7, #48	; 0x30
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	e000ed04 	.word	0xe000ed04

0800bb80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b08e      	sub	sp, #56	; 0x38
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bb92:	2300      	movs	r3, #0
 800bb94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10c      	bne.n	800bbb6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	b672      	cpsid	i
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	b662      	cpsie	i
 800bbb0:	623b      	str	r3, [r7, #32]
}
 800bbb2:	bf00      	nop
 800bbb4:	e7fe      	b.n	800bbb4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00c      	beq.n	800bbd8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800bbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc2:	b672      	cpsid	i
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	b662      	cpsie	i
 800bbd2:	61fb      	str	r3, [r7, #28]
}
 800bbd4:	bf00      	nop
 800bbd6:	e7fe      	b.n	800bbd6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbd8:	f001 f8cc 	bl	800cd74 <xTaskGetSchedulerState>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d102      	bne.n	800bbe8 <xQueueSemaphoreTake+0x68>
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d101      	bne.n	800bbec <xQueueSemaphoreTake+0x6c>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e000      	b.n	800bbee <xQueueSemaphoreTake+0x6e>
 800bbec:	2300      	movs	r3, #0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10c      	bne.n	800bc0c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800bbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf6:	b672      	cpsid	i
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	b662      	cpsie	i
 800bc06:	61bb      	str	r3, [r7, #24]
}
 800bc08:	bf00      	nop
 800bc0a:	e7fe      	b.n	800bc0a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc0c:	f001 fe0e 	bl	800d82c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d024      	beq.n	800bc66 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1e:	1e5a      	subs	r2, r3, #1
 800bc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d104      	bne.n	800bc36 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bc2c:	f001 fa68 	bl	800d100 <pvTaskIncrementMutexHeldCount>
 800bc30:	4602      	mov	r2, r0
 800bc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00f      	beq.n	800bc5e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc40:	3310      	adds	r3, #16
 800bc42:	4618      	mov	r0, r3
 800bc44:	f000 fece 	bl	800c9e4 <xTaskRemoveFromEventList>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d007      	beq.n	800bc5e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc4e:	4b55      	ldr	r3, [pc, #340]	; (800bda4 <xQueueSemaphoreTake+0x224>)
 800bc50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc54:	601a      	str	r2, [r3, #0]
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc5e:	f001 fe19 	bl	800d894 <vPortExitCritical>
				return pdPASS;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e099      	b.n	800bd9a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d113      	bne.n	800bc94 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00c      	beq.n	800bc8c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800bc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc76:	b672      	cpsid	i
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	b662      	cpsie	i
 800bc86:	617b      	str	r3, [r7, #20]
}
 800bc88:	bf00      	nop
 800bc8a:	e7fe      	b.n	800bc8a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bc8c:	f001 fe02 	bl	800d894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bc90:	2300      	movs	r3, #0
 800bc92:	e082      	b.n	800bd9a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d106      	bne.n	800bca8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc9a:	f107 030c 	add.w	r3, r7, #12
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 ff04 	bl	800caac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bca4:	2301      	movs	r3, #1
 800bca6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bca8:	f001 fdf4 	bl	800d894 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcac:	f000 fc88 	bl	800c5c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcb0:	f001 fdbc 	bl	800d82c <vPortEnterCritical>
 800bcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcba:	b25b      	sxtb	r3, r3
 800bcbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc0:	d103      	bne.n	800bcca <xQueueSemaphoreTake+0x14a>
 800bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcd0:	b25b      	sxtb	r3, r3
 800bcd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd6:	d103      	bne.n	800bce0 <xQueueSemaphoreTake+0x160>
 800bcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bce0:	f001 fdd8 	bl	800d894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bce4:	463a      	mov	r2, r7
 800bce6:	f107 030c 	add.w	r3, r7, #12
 800bcea:	4611      	mov	r1, r2
 800bcec:	4618      	mov	r0, r3
 800bcee:	f000 fef3 	bl	800cad8 <xTaskCheckForTimeOut>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d132      	bne.n	800bd5e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcfa:	f000 f9d5 	bl	800c0a8 <prvIsQueueEmpty>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d026      	beq.n	800bd52 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d109      	bne.n	800bd20 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800bd0c:	f001 fd8e 	bl	800d82c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f001 f84b 	bl	800cdb0 <xTaskPriorityInherit>
 800bd1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bd1c:	f001 fdba 	bl	800d894 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd22:	3324      	adds	r3, #36	; 0x24
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	4611      	mov	r1, r2
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f000 fe35 	bl	800c998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd30:	f000 f968 	bl	800c004 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd34:	f000 fc52 	bl	800c5dc <xTaskResumeAll>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f47f af66 	bne.w	800bc0c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800bd40:	4b18      	ldr	r3, [pc, #96]	; (800bda4 <xQueueSemaphoreTake+0x224>)
 800bd42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd46:	601a      	str	r2, [r3, #0]
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	e75c      	b.n	800bc0c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bd52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd54:	f000 f956 	bl	800c004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd58:	f000 fc40 	bl	800c5dc <xTaskResumeAll>
 800bd5c:	e756      	b.n	800bc0c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bd5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd60:	f000 f950 	bl	800c004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd64:	f000 fc3a 	bl	800c5dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd6a:	f000 f99d 	bl	800c0a8 <prvIsQueueEmpty>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f43f af4b 	beq.w	800bc0c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00d      	beq.n	800bd98 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800bd7c:	f001 fd56 	bl	800d82c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bd80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd82:	f000 f897 	bl	800beb4 <prvGetDisinheritPriorityAfterTimeout>
 800bd86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f001 f918 	bl	800cfc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bd94:	f001 fd7e 	bl	800d894 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3738      	adds	r7, #56	; 0x38
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	e000ed04 	.word	0xe000ed04

0800bda8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b08e      	sub	sp, #56	; 0x38
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10c      	bne.n	800bdd8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc2:	b672      	cpsid	i
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	b662      	cpsie	i
 800bdd2:	623b      	str	r3, [r7, #32]
}
 800bdd4:	bf00      	nop
 800bdd6:	e7fe      	b.n	800bdd6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d103      	bne.n	800bde6 <xQueueReceiveFromISR+0x3e>
 800bdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d101      	bne.n	800bdea <xQueueReceiveFromISR+0x42>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e000      	b.n	800bdec <xQueueReceiveFromISR+0x44>
 800bdea:	2300      	movs	r3, #0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10c      	bne.n	800be0a <xQueueReceiveFromISR+0x62>
	__asm volatile
 800bdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf4:	b672      	cpsid	i
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	b662      	cpsie	i
 800be04:	61fb      	str	r3, [r7, #28]
}
 800be06:	bf00      	nop
 800be08:	e7fe      	b.n	800be08 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be0a:	f001 fdf7 	bl	800d9fc <vPortValidateInterruptPriority>
	__asm volatile
 800be0e:	f3ef 8211 	mrs	r2, BASEPRI
 800be12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be16:	b672      	cpsid	i
 800be18:	f383 8811 	msr	BASEPRI, r3
 800be1c:	f3bf 8f6f 	isb	sy
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	b662      	cpsie	i
 800be26:	61ba      	str	r2, [r7, #24]
 800be28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800be2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be36:	2b00      	cmp	r3, #0
 800be38:	d02f      	beq.n	800be9a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be44:	68b9      	ldr	r1, [r7, #8]
 800be46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be48:	f000 f8b6 	bl	800bfb8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4e:	1e5a      	subs	r2, r3, #1
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800be54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be5c:	d112      	bne.n	800be84 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d016      	beq.n	800be94 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	3310      	adds	r3, #16
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 fdba 	bl	800c9e4 <xTaskRemoveFromEventList>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00e      	beq.n	800be94 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00b      	beq.n	800be94 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2201      	movs	r2, #1
 800be80:	601a      	str	r2, [r3, #0]
 800be82:	e007      	b.n	800be94 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800be84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be88:	3301      	adds	r3, #1
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	b25a      	sxtb	r2, r3
 800be8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800be94:	2301      	movs	r3, #1
 800be96:	637b      	str	r3, [r7, #52]	; 0x34
 800be98:	e001      	b.n	800be9e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800be9a:	2300      	movs	r3, #0
 800be9c:	637b      	str	r3, [r7, #52]	; 0x34
 800be9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	f383 8811 	msr	BASEPRI, r3
}
 800bea8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800beaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800beac:	4618      	mov	r0, r3
 800beae:	3738      	adds	r7, #56	; 0x38
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d006      	beq.n	800bed2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f1c3 0307 	rsb	r3, r3, #7
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	e001      	b.n	800bed6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bed2:	2300      	movs	r3, #0
 800bed4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bed6:	68fb      	ldr	r3, [r7, #12]
	}
 800bed8:	4618      	mov	r0, r3
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bef0:	2300      	movs	r3, #0
 800bef2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10d      	bne.n	800bf1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d14d      	bne.n	800bfa6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 ffce 	bl	800ceb0 <xTaskPriorityDisinherit>
 800bf14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	609a      	str	r2, [r3, #8]
 800bf1c:	e043      	b.n	800bfa6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d119      	bne.n	800bf58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6858      	ldr	r0, [r3, #4]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	68b9      	ldr	r1, [r7, #8]
 800bf30:	f00f fa9f 	bl	801b472 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3c:	441a      	add	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	685a      	ldr	r2, [r3, #4]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d32b      	bcc.n	800bfa6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	605a      	str	r2, [r3, #4]
 800bf56:	e026      	b.n	800bfa6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	68d8      	ldr	r0, [r3, #12]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf60:	461a      	mov	r2, r3
 800bf62:	68b9      	ldr	r1, [r7, #8]
 800bf64:	f00f fa85 	bl	801b472 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	68da      	ldr	r2, [r3, #12]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf70:	425b      	negs	r3, r3
 800bf72:	441a      	add	r2, r3
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	68da      	ldr	r2, [r3, #12]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d207      	bcs.n	800bf94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	689a      	ldr	r2, [r3, #8]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8c:	425b      	negs	r3, r3
 800bf8e:	441a      	add	r2, r3
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d105      	bne.n	800bfa6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	1c5a      	adds	r2, r3, #1
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bfae:	697b      	ldr	r3, [r7, #20]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d018      	beq.n	800bffc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	68da      	ldr	r2, [r3, #12]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd2:	441a      	add	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	68da      	ldr	r2, [r3, #12]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d303      	bcc.n	800bfec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68d9      	ldr	r1, [r3, #12]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff4:	461a      	mov	r2, r3
 800bff6:	6838      	ldr	r0, [r7, #0]
 800bff8:	f00f fa3b 	bl	801b472 <memcpy>
	}
}
 800bffc:	bf00      	nop
 800bffe:	3708      	adds	r7, #8
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c00c:	f001 fc0e 	bl	800d82c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c016:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c018:	e011      	b.n	800c03e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d012      	beq.n	800c048 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3324      	adds	r3, #36	; 0x24
 800c026:	4618      	mov	r0, r3
 800c028:	f000 fcdc 	bl	800c9e4 <xTaskRemoveFromEventList>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d001      	beq.n	800c036 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c032:	f000 fdb7 	bl	800cba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c036:	7bfb      	ldrb	r3, [r7, #15]
 800c038:	3b01      	subs	r3, #1
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c042:	2b00      	cmp	r3, #0
 800c044:	dce9      	bgt.n	800c01a <prvUnlockQueue+0x16>
 800c046:	e000      	b.n	800c04a <prvUnlockQueue+0x46>
					break;
 800c048:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	22ff      	movs	r2, #255	; 0xff
 800c04e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c052:	f001 fc1f 	bl	800d894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c056:	f001 fbe9 	bl	800d82c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c060:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c062:	e011      	b.n	800c088 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d012      	beq.n	800c092 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	3310      	adds	r3, #16
 800c070:	4618      	mov	r0, r3
 800c072:	f000 fcb7 	bl	800c9e4 <xTaskRemoveFromEventList>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d001      	beq.n	800c080 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c07c:	f000 fd92 	bl	800cba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	3b01      	subs	r3, #1
 800c084:	b2db      	uxtb	r3, r3
 800c086:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	dce9      	bgt.n	800c064 <prvUnlockQueue+0x60>
 800c090:	e000      	b.n	800c094 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c092:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	22ff      	movs	r2, #255	; 0xff
 800c098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c09c:	f001 fbfa 	bl	800d894 <vPortExitCritical>
}
 800c0a0:	bf00      	nop
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0b0:	f001 fbbc 	bl	800d82c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d102      	bne.n	800c0c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	60fb      	str	r3, [r7, #12]
 800c0c0:	e001      	b.n	800c0c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0c6:	f001 fbe5 	bl	800d894 <vPortExitCritical>

	return xReturn;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0dc:	f001 fba6 	bl	800d82c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d102      	bne.n	800c0f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	60fb      	str	r3, [r7, #12]
 800c0f0:	e001      	b.n	800c0f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0f6:	f001 fbcd 	bl	800d894 <vPortExitCritical>

	return xReturn;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c104:	b580      	push	{r7, lr}
 800c106:	b08e      	sub	sp, #56	; 0x38
 800c108:	af04      	add	r7, sp, #16
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
 800c110:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10c      	bne.n	800c132 <xTaskCreateStatic+0x2e>
	__asm volatile
 800c118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11c:	b672      	cpsid	i
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	b662      	cpsie	i
 800c12c:	623b      	str	r3, [r7, #32]
}
 800c12e:	bf00      	nop
 800c130:	e7fe      	b.n	800c130 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10c      	bne.n	800c152 <xTaskCreateStatic+0x4e>
	__asm volatile
 800c138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13c:	b672      	cpsid	i
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	b662      	cpsie	i
 800c14c:	61fb      	str	r3, [r7, #28]
}
 800c14e:	bf00      	nop
 800c150:	e7fe      	b.n	800c150 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c152:	23a0      	movs	r3, #160	; 0xa0
 800c154:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	2ba0      	cmp	r3, #160	; 0xa0
 800c15a:	d00c      	beq.n	800c176 <xTaskCreateStatic+0x72>
	__asm volatile
 800c15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c160:	b672      	cpsid	i
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	b662      	cpsie	i
 800c170:	61bb      	str	r3, [r7, #24]
}
 800c172:	bf00      	nop
 800c174:	e7fe      	b.n	800c174 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c176:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d01e      	beq.n	800c1bc <xTaskCreateStatic+0xb8>
 800c17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c180:	2b00      	cmp	r3, #0
 800c182:	d01b      	beq.n	800c1bc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c186:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c18c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c190:	2202      	movs	r2, #2
 800c192:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c196:	2300      	movs	r3, #0
 800c198:	9303      	str	r3, [sp, #12]
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	9302      	str	r3, [sp, #8]
 800c19e:	f107 0314 	add.w	r3, r7, #20
 800c1a2:	9301      	str	r3, [sp, #4]
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	9300      	str	r3, [sp, #0]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	68b9      	ldr	r1, [r7, #8]
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f000 f850 	bl	800c254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1b6:	f000 f8f5 	bl	800c3a4 <prvAddNewTaskToReadyList>
 800c1ba:	e001      	b.n	800c1c0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1c0:	697b      	ldr	r3, [r7, #20]
	}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3728      	adds	r7, #40	; 0x28
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b08c      	sub	sp, #48	; 0x30
 800c1ce:	af04      	add	r7, sp, #16
 800c1d0:	60f8      	str	r0, [r7, #12]
 800c1d2:	60b9      	str	r1, [r7, #8]
 800c1d4:	603b      	str	r3, [r7, #0]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c1da:	88fb      	ldrh	r3, [r7, #6]
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f001 fc50 	bl	800da84 <pvPortMalloc>
 800c1e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00e      	beq.n	800c20a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c1ec:	20a0      	movs	r0, #160	; 0xa0
 800c1ee:	f001 fc49 	bl	800da84 <pvPortMalloc>
 800c1f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d003      	beq.n	800c202 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	697a      	ldr	r2, [r7, #20]
 800c1fe:	631a      	str	r2, [r3, #48]	; 0x30
 800c200:	e005      	b.n	800c20e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c202:	6978      	ldr	r0, [r7, #20]
 800c204:	f001 fd08 	bl	800dc18 <vPortFree>
 800c208:	e001      	b.n	800c20e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c20a:	2300      	movs	r3, #0
 800c20c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d017      	beq.n	800c244 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	2200      	movs	r2, #0
 800c218:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c21c:	88fa      	ldrh	r2, [r7, #6]
 800c21e:	2300      	movs	r3, #0
 800c220:	9303      	str	r3, [sp, #12]
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	9302      	str	r3, [sp, #8]
 800c226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c228:	9301      	str	r3, [sp, #4]
 800c22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	68b9      	ldr	r1, [r7, #8]
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f000 f80e 	bl	800c254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c238:	69f8      	ldr	r0, [r7, #28]
 800c23a:	f000 f8b3 	bl	800c3a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c23e:	2301      	movs	r3, #1
 800c240:	61bb      	str	r3, [r7, #24]
 800c242:	e002      	b.n	800c24a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c244:	f04f 33ff 	mov.w	r3, #4294967295
 800c248:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c24a:	69bb      	ldr	r3, [r7, #24]
	}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3720      	adds	r7, #32
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b088      	sub	sp, #32
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
 800c260:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c264:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	461a      	mov	r2, r3
 800c26c:	21a5      	movs	r1, #165	; 0xa5
 800c26e:	f00f f830 	bl	801b2d2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c276:	6879      	ldr	r1, [r7, #4]
 800c278:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c27c:	440b      	add	r3, r1
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	4413      	add	r3, r2
 800c282:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	f023 0307 	bic.w	r3, r3, #7
 800c28a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	f003 0307 	and.w	r3, r3, #7
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00c      	beq.n	800c2b0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29a:	b672      	cpsid	i
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	b662      	cpsie	i
 800c2aa:	617b      	str	r3, [r7, #20]
}
 800c2ac:	bf00      	nop
 800c2ae:	e7fe      	b.n	800c2ae <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d01f      	beq.n	800c2f6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	61fb      	str	r3, [r7, #28]
 800c2ba:	e012      	b.n	800c2e2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2bc:	68ba      	ldr	r2, [r7, #8]
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	7819      	ldrb	r1, [r3, #0]
 800c2c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	3334      	adds	r3, #52	; 0x34
 800c2cc:	460a      	mov	r2, r1
 800c2ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d006      	beq.n	800c2ea <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	61fb      	str	r3, [r7, #28]
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	2b0f      	cmp	r3, #15
 800c2e6:	d9e9      	bls.n	800c2bc <prvInitialiseNewTask+0x68>
 800c2e8:	e000      	b.n	800c2ec <prvInitialiseNewTask+0x98>
			{
				break;
 800c2ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c2f4:	e003      	b.n	800c2fe <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c300:	2b06      	cmp	r3, #6
 800c302:	d901      	bls.n	800c308 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c304:	2306      	movs	r3, #6
 800c306:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c30c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c312:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c316:	2200      	movs	r2, #0
 800c318:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	3304      	adds	r3, #4
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fe fede 	bl	800b0e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c326:	3318      	adds	r3, #24
 800c328:	4618      	mov	r0, r3
 800c32a:	f7fe fed9 	bl	800b0e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c332:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	f1c3 0207 	rsb	r2, r3, #7
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c342:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c346:	2200      	movs	r2, #0
 800c348:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34e:	2200      	movs	r2, #0
 800c350:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c356:	334c      	adds	r3, #76	; 0x4c
 800c358:	224c      	movs	r2, #76	; 0x4c
 800c35a:	2100      	movs	r1, #0
 800c35c:	4618      	mov	r0, r3
 800c35e:	f00e ffb8 	bl	801b2d2 <memset>
 800c362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c364:	4a0c      	ldr	r2, [pc, #48]	; (800c398 <prvInitialiseNewTask+0x144>)
 800c366:	651a      	str	r2, [r3, #80]	; 0x50
 800c368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36a:	4a0c      	ldr	r2, [pc, #48]	; (800c39c <prvInitialiseNewTask+0x148>)
 800c36c:	655a      	str	r2, [r3, #84]	; 0x54
 800c36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c370:	4a0b      	ldr	r2, [pc, #44]	; (800c3a0 <prvInitialiseNewTask+0x14c>)
 800c372:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c374:	683a      	ldr	r2, [r7, #0]
 800c376:	68f9      	ldr	r1, [r7, #12]
 800c378:	69b8      	ldr	r0, [r7, #24]
 800c37a:	f001 f94b 	bl	800d614 <pxPortInitialiseStack>
 800c37e:	4602      	mov	r2, r0
 800c380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c382:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c386:	2b00      	cmp	r3, #0
 800c388:	d002      	beq.n	800c390 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c38e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c390:	bf00      	nop
 800c392:	3720      	adds	r7, #32
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	2001de44 	.word	0x2001de44
 800c39c:	2001deac 	.word	0x2001deac
 800c3a0:	2001df14 	.word	0x2001df14

0800c3a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c3ac:	f001 fa3e 	bl	800d82c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c3b0:	4b2a      	ldr	r3, [pc, #168]	; (800c45c <prvAddNewTaskToReadyList+0xb8>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	4a29      	ldr	r2, [pc, #164]	; (800c45c <prvAddNewTaskToReadyList+0xb8>)
 800c3b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c3ba:	4b29      	ldr	r3, [pc, #164]	; (800c460 <prvAddNewTaskToReadyList+0xbc>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d109      	bne.n	800c3d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c3c2:	4a27      	ldr	r2, [pc, #156]	; (800c460 <prvAddNewTaskToReadyList+0xbc>)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3c8:	4b24      	ldr	r3, [pc, #144]	; (800c45c <prvAddNewTaskToReadyList+0xb8>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d110      	bne.n	800c3f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c3d0:	f000 fc0c 	bl	800cbec <prvInitialiseTaskLists>
 800c3d4:	e00d      	b.n	800c3f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c3d6:	4b23      	ldr	r3, [pc, #140]	; (800c464 <prvAddNewTaskToReadyList+0xc0>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d109      	bne.n	800c3f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3de:	4b20      	ldr	r3, [pc, #128]	; (800c460 <prvAddNewTaskToReadyList+0xbc>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d802      	bhi.n	800c3f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c3ec:	4a1c      	ldr	r2, [pc, #112]	; (800c460 <prvAddNewTaskToReadyList+0xbc>)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c3f2:	4b1d      	ldr	r3, [pc, #116]	; (800c468 <prvAddNewTaskToReadyList+0xc4>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	4a1b      	ldr	r2, [pc, #108]	; (800c468 <prvAddNewTaskToReadyList+0xc4>)
 800c3fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c400:	2201      	movs	r2, #1
 800c402:	409a      	lsls	r2, r3
 800c404:	4b19      	ldr	r3, [pc, #100]	; (800c46c <prvAddNewTaskToReadyList+0xc8>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4313      	orrs	r3, r2
 800c40a:	4a18      	ldr	r2, [pc, #96]	; (800c46c <prvAddNewTaskToReadyList+0xc8>)
 800c40c:	6013      	str	r3, [r2, #0]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c412:	4613      	mov	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	4413      	add	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4a15      	ldr	r2, [pc, #84]	; (800c470 <prvAddNewTaskToReadyList+0xcc>)
 800c41c:	441a      	add	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3304      	adds	r3, #4
 800c422:	4619      	mov	r1, r3
 800c424:	4610      	mov	r0, r2
 800c426:	f7fe fe68 	bl	800b0fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c42a:	f001 fa33 	bl	800d894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c42e:	4b0d      	ldr	r3, [pc, #52]	; (800c464 <prvAddNewTaskToReadyList+0xc0>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00e      	beq.n	800c454 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c436:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <prvAddNewTaskToReadyList+0xbc>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c440:	429a      	cmp	r2, r3
 800c442:	d207      	bcs.n	800c454 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c444:	4b0b      	ldr	r3, [pc, #44]	; (800c474 <prvAddNewTaskToReadyList+0xd0>)
 800c446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c44a:	601a      	str	r2, [r3, #0]
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c454:	bf00      	nop
 800c456:	3708      	adds	r7, #8
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	2000a640 	.word	0x2000a640
 800c460:	2000a540 	.word	0x2000a540
 800c464:	2000a64c 	.word	0x2000a64c
 800c468:	2000a65c 	.word	0x2000a65c
 800c46c:	2000a648 	.word	0x2000a648
 800c470:	2000a544 	.word	0x2000a544
 800c474:	e000ed04 	.word	0xe000ed04

0800c478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c480:	2300      	movs	r3, #0
 800c482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d019      	beq.n	800c4be <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c48a:	4b14      	ldr	r3, [pc, #80]	; (800c4dc <vTaskDelay+0x64>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00c      	beq.n	800c4ac <vTaskDelay+0x34>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	b672      	cpsid	i
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	b662      	cpsie	i
 800c4a6:	60bb      	str	r3, [r7, #8]
}
 800c4a8:	bf00      	nop
 800c4aa:	e7fe      	b.n	800c4aa <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c4ac:	f000 f888 	bl	800c5c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f001 f848 	bl	800d548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c4b8:	f000 f890 	bl	800c5dc <xTaskResumeAll>
 800c4bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d107      	bne.n	800c4d4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c4c4:	4b06      	ldr	r3, [pc, #24]	; (800c4e0 <vTaskDelay+0x68>)
 800c4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4d4:	bf00      	nop
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	2000a668 	.word	0x2000a668
 800c4e0:	e000ed04 	.word	0xe000ed04

0800c4e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b08a      	sub	sp, #40	; 0x28
 800c4e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c4f2:	463a      	mov	r2, r7
 800c4f4:	1d39      	adds	r1, r7, #4
 800c4f6:	f107 0308 	add.w	r3, r7, #8
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7f4 fcd0 	bl	8000ea0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	9202      	str	r2, [sp, #8]
 800c508:	9301      	str	r3, [sp, #4]
 800c50a:	2300      	movs	r3, #0
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	2300      	movs	r3, #0
 800c510:	460a      	mov	r2, r1
 800c512:	4923      	ldr	r1, [pc, #140]	; (800c5a0 <vTaskStartScheduler+0xbc>)
 800c514:	4823      	ldr	r0, [pc, #140]	; (800c5a4 <vTaskStartScheduler+0xc0>)
 800c516:	f7ff fdf5 	bl	800c104 <xTaskCreateStatic>
 800c51a:	4603      	mov	r3, r0
 800c51c:	4a22      	ldr	r2, [pc, #136]	; (800c5a8 <vTaskStartScheduler+0xc4>)
 800c51e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c520:	4b21      	ldr	r3, [pc, #132]	; (800c5a8 <vTaskStartScheduler+0xc4>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d002      	beq.n	800c52e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c528:	2301      	movs	r3, #1
 800c52a:	617b      	str	r3, [r7, #20]
 800c52c:	e001      	b.n	800c532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c52e:	2300      	movs	r3, #0
 800c530:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d11d      	bne.n	800c574 <vTaskStartScheduler+0x90>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53c:	b672      	cpsid	i
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	b662      	cpsie	i
 800c54c:	613b      	str	r3, [r7, #16]
}
 800c54e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c550:	4b16      	ldr	r3, [pc, #88]	; (800c5ac <vTaskStartScheduler+0xc8>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	334c      	adds	r3, #76	; 0x4c
 800c556:	4a16      	ldr	r2, [pc, #88]	; (800c5b0 <vTaskStartScheduler+0xcc>)
 800c558:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c55a:	4b16      	ldr	r3, [pc, #88]	; (800c5b4 <vTaskStartScheduler+0xd0>)
 800c55c:	f04f 32ff 	mov.w	r2, #4294967295
 800c560:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c562:	4b15      	ldr	r3, [pc, #84]	; (800c5b8 <vTaskStartScheduler+0xd4>)
 800c564:	2201      	movs	r2, #1
 800c566:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c568:	4b14      	ldr	r3, [pc, #80]	; (800c5bc <vTaskStartScheduler+0xd8>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c56e:	f001 f8df 	bl	800d730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c572:	e010      	b.n	800c596 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c57a:	d10c      	bne.n	800c596 <vTaskStartScheduler+0xb2>
	__asm volatile
 800c57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c580:	b672      	cpsid	i
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	b662      	cpsie	i
 800c590:	60fb      	str	r3, [r7, #12]
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <vTaskStartScheduler+0xb0>
}
 800c596:	bf00      	nop
 800c598:	3718      	adds	r7, #24
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	0801d20c 	.word	0x0801d20c
 800c5a4:	0800cbbd 	.word	0x0800cbbd
 800c5a8:	2000a664 	.word	0x2000a664
 800c5ac:	2000a540 	.word	0x2000a540
 800c5b0:	20000090 	.word	0x20000090
 800c5b4:	2000a660 	.word	0x2000a660
 800c5b8:	2000a64c 	.word	0x2000a64c
 800c5bc:	2000a644 	.word	0x2000a644

0800c5c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c5c4:	4b04      	ldr	r3, [pc, #16]	; (800c5d8 <vTaskSuspendAll+0x18>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	4a03      	ldr	r2, [pc, #12]	; (800c5d8 <vTaskSuspendAll+0x18>)
 800c5cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c5ce:	bf00      	nop
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr
 800c5d8:	2000a668 	.word	0x2000a668

0800c5dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c5ea:	4b42      	ldr	r3, [pc, #264]	; (800c6f4 <xTaskResumeAll+0x118>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10c      	bne.n	800c60c <xTaskResumeAll+0x30>
	__asm volatile
 800c5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f6:	b672      	cpsid	i
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	b662      	cpsie	i
 800c606:	603b      	str	r3, [r7, #0]
}
 800c608:	bf00      	nop
 800c60a:	e7fe      	b.n	800c60a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c60c:	f001 f90e 	bl	800d82c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c610:	4b38      	ldr	r3, [pc, #224]	; (800c6f4 <xTaskResumeAll+0x118>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	3b01      	subs	r3, #1
 800c616:	4a37      	ldr	r2, [pc, #220]	; (800c6f4 <xTaskResumeAll+0x118>)
 800c618:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c61a:	4b36      	ldr	r3, [pc, #216]	; (800c6f4 <xTaskResumeAll+0x118>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d161      	bne.n	800c6e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c622:	4b35      	ldr	r3, [pc, #212]	; (800c6f8 <xTaskResumeAll+0x11c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d05d      	beq.n	800c6e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c62a:	e02e      	b.n	800c68a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c62c:	4b33      	ldr	r3, [pc, #204]	; (800c6fc <xTaskResumeAll+0x120>)
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	3318      	adds	r3, #24
 800c638:	4618      	mov	r0, r3
 800c63a:	f7fe fdbb 	bl	800b1b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	3304      	adds	r3, #4
 800c642:	4618      	mov	r0, r3
 800c644:	f7fe fdb6 	bl	800b1b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64c:	2201      	movs	r2, #1
 800c64e:	409a      	lsls	r2, r3
 800c650:	4b2b      	ldr	r3, [pc, #172]	; (800c700 <xTaskResumeAll+0x124>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4313      	orrs	r3, r2
 800c656:	4a2a      	ldr	r2, [pc, #168]	; (800c700 <xTaskResumeAll+0x124>)
 800c658:	6013      	str	r3, [r2, #0]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c65e:	4613      	mov	r3, r2
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4413      	add	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	4a27      	ldr	r2, [pc, #156]	; (800c704 <xTaskResumeAll+0x128>)
 800c668:	441a      	add	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	3304      	adds	r3, #4
 800c66e:	4619      	mov	r1, r3
 800c670:	4610      	mov	r0, r2
 800c672:	f7fe fd42 	bl	800b0fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67a:	4b23      	ldr	r3, [pc, #140]	; (800c708 <xTaskResumeAll+0x12c>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c680:	429a      	cmp	r2, r3
 800c682:	d302      	bcc.n	800c68a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c684:	4b21      	ldr	r3, [pc, #132]	; (800c70c <xTaskResumeAll+0x130>)
 800c686:	2201      	movs	r2, #1
 800c688:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c68a:	4b1c      	ldr	r3, [pc, #112]	; (800c6fc <xTaskResumeAll+0x120>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1cc      	bne.n	800c62c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d001      	beq.n	800c69c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c698:	f000 fb4c 	bl	800cd34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c69c:	4b1c      	ldr	r3, [pc, #112]	; (800c710 <xTaskResumeAll+0x134>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d010      	beq.n	800c6ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c6a8:	f000 f858 	bl	800c75c <xTaskIncrementTick>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d002      	beq.n	800c6b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c6b2:	4b16      	ldr	r3, [pc, #88]	; (800c70c <xTaskResumeAll+0x130>)
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1f1      	bne.n	800c6a8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800c6c4:	4b12      	ldr	r3, [pc, #72]	; (800c710 <xTaskResumeAll+0x134>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c6ca:	4b10      	ldr	r3, [pc, #64]	; (800c70c <xTaskResumeAll+0x130>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d009      	beq.n	800c6e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c6d6:	4b0f      	ldr	r3, [pc, #60]	; (800c714 <xTaskResumeAll+0x138>)
 800c6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6dc:	601a      	str	r2, [r3, #0]
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6e6:	f001 f8d5 	bl	800d894 <vPortExitCritical>

	return xAlreadyYielded;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	2000a668 	.word	0x2000a668
 800c6f8:	2000a640 	.word	0x2000a640
 800c6fc:	2000a600 	.word	0x2000a600
 800c700:	2000a648 	.word	0x2000a648
 800c704:	2000a544 	.word	0x2000a544
 800c708:	2000a540 	.word	0x2000a540
 800c70c:	2000a654 	.word	0x2000a654
 800c710:	2000a650 	.word	0x2000a650
 800c714:	e000ed04 	.word	0xe000ed04

0800c718 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c71e:	4b05      	ldr	r3, [pc, #20]	; (800c734 <xTaskGetTickCount+0x1c>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c724:	687b      	ldr	r3, [r7, #4]
}
 800c726:	4618      	mov	r0, r3
 800c728:	370c      	adds	r7, #12
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop
 800c734:	2000a644 	.word	0x2000a644

0800c738 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c73e:	f001 f95d 	bl	800d9fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c742:	2300      	movs	r3, #0
 800c744:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c746:	4b04      	ldr	r3, [pc, #16]	; (800c758 <xTaskGetTickCountFromISR+0x20>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c74c:	683b      	ldr	r3, [r7, #0]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	2000a644 	.word	0x2000a644

0800c75c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c762:	2300      	movs	r3, #0
 800c764:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c766:	4b4f      	ldr	r3, [pc, #316]	; (800c8a4 <xTaskIncrementTick+0x148>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f040 808a 	bne.w	800c884 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c770:	4b4d      	ldr	r3, [pc, #308]	; (800c8a8 <xTaskIncrementTick+0x14c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3301      	adds	r3, #1
 800c776:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c778:	4a4b      	ldr	r2, [pc, #300]	; (800c8a8 <xTaskIncrementTick+0x14c>)
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d122      	bne.n	800c7ca <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c784:	4b49      	ldr	r3, [pc, #292]	; (800c8ac <xTaskIncrementTick+0x150>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00c      	beq.n	800c7a8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	b672      	cpsid	i
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	b662      	cpsie	i
 800c7a2:	603b      	str	r3, [r7, #0]
}
 800c7a4:	bf00      	nop
 800c7a6:	e7fe      	b.n	800c7a6 <xTaskIncrementTick+0x4a>
 800c7a8:	4b40      	ldr	r3, [pc, #256]	; (800c8ac <xTaskIncrementTick+0x150>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	60fb      	str	r3, [r7, #12]
 800c7ae:	4b40      	ldr	r3, [pc, #256]	; (800c8b0 <xTaskIncrementTick+0x154>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a3e      	ldr	r2, [pc, #248]	; (800c8ac <xTaskIncrementTick+0x150>)
 800c7b4:	6013      	str	r3, [r2, #0]
 800c7b6:	4a3e      	ldr	r2, [pc, #248]	; (800c8b0 <xTaskIncrementTick+0x154>)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6013      	str	r3, [r2, #0]
 800c7bc:	4b3d      	ldr	r3, [pc, #244]	; (800c8b4 <xTaskIncrementTick+0x158>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	4a3c      	ldr	r2, [pc, #240]	; (800c8b4 <xTaskIncrementTick+0x158>)
 800c7c4:	6013      	str	r3, [r2, #0]
 800c7c6:	f000 fab5 	bl	800cd34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c7ca:	4b3b      	ldr	r3, [pc, #236]	; (800c8b8 <xTaskIncrementTick+0x15c>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	693a      	ldr	r2, [r7, #16]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d348      	bcc.n	800c866 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7d4:	4b35      	ldr	r3, [pc, #212]	; (800c8ac <xTaskIncrementTick+0x150>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d104      	bne.n	800c7e8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7de:	4b36      	ldr	r3, [pc, #216]	; (800c8b8 <xTaskIncrementTick+0x15c>)
 800c7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e4:	601a      	str	r2, [r3, #0]
					break;
 800c7e6:	e03e      	b.n	800c866 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7e8:	4b30      	ldr	r3, [pc, #192]	; (800c8ac <xTaskIncrementTick+0x150>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	68db      	ldr	r3, [r3, #12]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c7f8:	693a      	ldr	r2, [r7, #16]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d203      	bcs.n	800c808 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c800:	4a2d      	ldr	r2, [pc, #180]	; (800c8b8 <xTaskIncrementTick+0x15c>)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c806:	e02e      	b.n	800c866 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	3304      	adds	r3, #4
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7fe fcd1 	bl	800b1b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c816:	2b00      	cmp	r3, #0
 800c818:	d004      	beq.n	800c824 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	3318      	adds	r3, #24
 800c81e:	4618      	mov	r0, r3
 800c820:	f7fe fcc8 	bl	800b1b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c828:	2201      	movs	r2, #1
 800c82a:	409a      	lsls	r2, r3
 800c82c:	4b23      	ldr	r3, [pc, #140]	; (800c8bc <xTaskIncrementTick+0x160>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4313      	orrs	r3, r2
 800c832:	4a22      	ldr	r2, [pc, #136]	; (800c8bc <xTaskIncrementTick+0x160>)
 800c834:	6013      	str	r3, [r2, #0]
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c83a:	4613      	mov	r3, r2
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	4413      	add	r3, r2
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4a1f      	ldr	r2, [pc, #124]	; (800c8c0 <xTaskIncrementTick+0x164>)
 800c844:	441a      	add	r2, r3
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	3304      	adds	r3, #4
 800c84a:	4619      	mov	r1, r3
 800c84c:	4610      	mov	r0, r2
 800c84e:	f7fe fc54 	bl	800b0fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c856:	4b1b      	ldr	r3, [pc, #108]	; (800c8c4 <xTaskIncrementTick+0x168>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d3b9      	bcc.n	800c7d4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c860:	2301      	movs	r3, #1
 800c862:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c864:	e7b6      	b.n	800c7d4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c866:	4b17      	ldr	r3, [pc, #92]	; (800c8c4 <xTaskIncrementTick+0x168>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86c:	4914      	ldr	r1, [pc, #80]	; (800c8c0 <xTaskIncrementTick+0x164>)
 800c86e:	4613      	mov	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	440b      	add	r3, r1
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d907      	bls.n	800c88e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800c87e:	2301      	movs	r3, #1
 800c880:	617b      	str	r3, [r7, #20]
 800c882:	e004      	b.n	800c88e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c884:	4b10      	ldr	r3, [pc, #64]	; (800c8c8 <xTaskIncrementTick+0x16c>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3301      	adds	r3, #1
 800c88a:	4a0f      	ldr	r2, [pc, #60]	; (800c8c8 <xTaskIncrementTick+0x16c>)
 800c88c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c88e:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <xTaskIncrementTick+0x170>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d001      	beq.n	800c89a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800c896:	2301      	movs	r3, #1
 800c898:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c89a:	697b      	ldr	r3, [r7, #20]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	2000a668 	.word	0x2000a668
 800c8a8:	2000a644 	.word	0x2000a644
 800c8ac:	2000a5f8 	.word	0x2000a5f8
 800c8b0:	2000a5fc 	.word	0x2000a5fc
 800c8b4:	2000a658 	.word	0x2000a658
 800c8b8:	2000a660 	.word	0x2000a660
 800c8bc:	2000a648 	.word	0x2000a648
 800c8c0:	2000a544 	.word	0x2000a544
 800c8c4:	2000a540 	.word	0x2000a540
 800c8c8:	2000a650 	.word	0x2000a650
 800c8cc:	2000a654 	.word	0x2000a654

0800c8d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b087      	sub	sp, #28
 800c8d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c8d6:	4b2a      	ldr	r3, [pc, #168]	; (800c980 <vTaskSwitchContext+0xb0>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d003      	beq.n	800c8e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c8de:	4b29      	ldr	r3, [pc, #164]	; (800c984 <vTaskSwitchContext+0xb4>)
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c8e4:	e046      	b.n	800c974 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c8e6:	4b27      	ldr	r3, [pc, #156]	; (800c984 <vTaskSwitchContext+0xb4>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8ec:	4b26      	ldr	r3, [pc, #152]	; (800c988 <vTaskSwitchContext+0xb8>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	fab3 f383 	clz	r3, r3
 800c8f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c8fa:	7afb      	ldrb	r3, [r7, #11]
 800c8fc:	f1c3 031f 	rsb	r3, r3, #31
 800c900:	617b      	str	r3, [r7, #20]
 800c902:	4922      	ldr	r1, [pc, #136]	; (800c98c <vTaskSwitchContext+0xbc>)
 800c904:	697a      	ldr	r2, [r7, #20]
 800c906:	4613      	mov	r3, r2
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	4413      	add	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	440b      	add	r3, r1
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d10c      	bne.n	800c930 <vTaskSwitchContext+0x60>
	__asm volatile
 800c916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91a:	b672      	cpsid	i
 800c91c:	f383 8811 	msr	BASEPRI, r3
 800c920:	f3bf 8f6f 	isb	sy
 800c924:	f3bf 8f4f 	dsb	sy
 800c928:	b662      	cpsie	i
 800c92a:	607b      	str	r3, [r7, #4]
}
 800c92c:	bf00      	nop
 800c92e:	e7fe      	b.n	800c92e <vTaskSwitchContext+0x5e>
 800c930:	697a      	ldr	r2, [r7, #20]
 800c932:	4613      	mov	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	4a14      	ldr	r2, [pc, #80]	; (800c98c <vTaskSwitchContext+0xbc>)
 800c93c:	4413      	add	r3, r2
 800c93e:	613b      	str	r3, [r7, #16]
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	685a      	ldr	r2, [r3, #4]
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	605a      	str	r2, [r3, #4]
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	685a      	ldr	r2, [r3, #4]
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	3308      	adds	r3, #8
 800c952:	429a      	cmp	r2, r3
 800c954:	d104      	bne.n	800c960 <vTaskSwitchContext+0x90>
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	605a      	str	r2, [r3, #4]
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	4a0a      	ldr	r2, [pc, #40]	; (800c990 <vTaskSwitchContext+0xc0>)
 800c968:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c96a:	4b09      	ldr	r3, [pc, #36]	; (800c990 <vTaskSwitchContext+0xc0>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	334c      	adds	r3, #76	; 0x4c
 800c970:	4a08      	ldr	r2, [pc, #32]	; (800c994 <vTaskSwitchContext+0xc4>)
 800c972:	6013      	str	r3, [r2, #0]
}
 800c974:	bf00      	nop
 800c976:	371c      	adds	r7, #28
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	2000a668 	.word	0x2000a668
 800c984:	2000a654 	.word	0x2000a654
 800c988:	2000a648 	.word	0x2000a648
 800c98c:	2000a544 	.word	0x2000a544
 800c990:	2000a540 	.word	0x2000a540
 800c994:	20000090 	.word	0x20000090

0800c998 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10c      	bne.n	800c9c2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ac:	b672      	cpsid	i
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	b662      	cpsie	i
 800c9bc:	60fb      	str	r3, [r7, #12]
}
 800c9be:	bf00      	nop
 800c9c0:	e7fe      	b.n	800c9c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c9c2:	4b07      	ldr	r3, [pc, #28]	; (800c9e0 <vTaskPlaceOnEventList+0x48>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	3318      	adds	r3, #24
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7fe fbb9 	bl	800b142 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	6838      	ldr	r0, [r7, #0]
 800c9d4:	f000 fdb8 	bl	800d548 <prvAddCurrentTaskToDelayedList>
}
 800c9d8:	bf00      	nop
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	2000a540 	.word	0x2000a540

0800c9e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10c      	bne.n	800ca14 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fe:	b672      	cpsid	i
 800ca00:	f383 8811 	msr	BASEPRI, r3
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	b662      	cpsie	i
 800ca0e:	60fb      	str	r3, [r7, #12]
}
 800ca10:	bf00      	nop
 800ca12:	e7fe      	b.n	800ca12 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	3318      	adds	r3, #24
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7fe fbcb 	bl	800b1b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca1e:	4b1d      	ldr	r3, [pc, #116]	; (800ca94 <xTaskRemoveFromEventList+0xb0>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d11c      	bne.n	800ca60 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	3304      	adds	r3, #4
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fe fbc2 	bl	800b1b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca34:	2201      	movs	r2, #1
 800ca36:	409a      	lsls	r2, r3
 800ca38:	4b17      	ldr	r3, [pc, #92]	; (800ca98 <xTaskRemoveFromEventList+0xb4>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	4a16      	ldr	r2, [pc, #88]	; (800ca98 <xTaskRemoveFromEventList+0xb4>)
 800ca40:	6013      	str	r3, [r2, #0]
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca46:	4613      	mov	r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4413      	add	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4a13      	ldr	r2, [pc, #76]	; (800ca9c <xTaskRemoveFromEventList+0xb8>)
 800ca50:	441a      	add	r2, r3
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	3304      	adds	r3, #4
 800ca56:	4619      	mov	r1, r3
 800ca58:	4610      	mov	r0, r2
 800ca5a:	f7fe fb4e 	bl	800b0fa <vListInsertEnd>
 800ca5e:	e005      	b.n	800ca6c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	3318      	adds	r3, #24
 800ca64:	4619      	mov	r1, r3
 800ca66:	480e      	ldr	r0, [pc, #56]	; (800caa0 <xTaskRemoveFromEventList+0xbc>)
 800ca68:	f7fe fb47 	bl	800b0fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca70:	4b0c      	ldr	r3, [pc, #48]	; (800caa4 <xTaskRemoveFromEventList+0xc0>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d905      	bls.n	800ca86 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ca7e:	4b0a      	ldr	r3, [pc, #40]	; (800caa8 <xTaskRemoveFromEventList+0xc4>)
 800ca80:	2201      	movs	r2, #1
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	e001      	b.n	800ca8a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ca86:	2300      	movs	r3, #0
 800ca88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca8a:	697b      	ldr	r3, [r7, #20]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	2000a668 	.word	0x2000a668
 800ca98:	2000a648 	.word	0x2000a648
 800ca9c:	2000a544 	.word	0x2000a544
 800caa0:	2000a600 	.word	0x2000a600
 800caa4:	2000a540 	.word	0x2000a540
 800caa8:	2000a654 	.word	0x2000a654

0800caac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cab4:	4b06      	ldr	r3, [pc, #24]	; (800cad0 <vTaskInternalSetTimeOutState+0x24>)
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cabc:	4b05      	ldr	r3, [pc, #20]	; (800cad4 <vTaskInternalSetTimeOutState+0x28>)
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	605a      	str	r2, [r3, #4]
}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr
 800cad0:	2000a658 	.word	0x2000a658
 800cad4:	2000a644 	.word	0x2000a644

0800cad8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b088      	sub	sp, #32
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10c      	bne.n	800cb02 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800cae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caec:	b672      	cpsid	i
 800caee:	f383 8811 	msr	BASEPRI, r3
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	f3bf 8f4f 	dsb	sy
 800cafa:	b662      	cpsie	i
 800cafc:	613b      	str	r3, [r7, #16]
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d10c      	bne.n	800cb22 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800cb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0c:	b672      	cpsid	i
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	b662      	cpsie	i
 800cb1c:	60fb      	str	r3, [r7, #12]
}
 800cb1e:	bf00      	nop
 800cb20:	e7fe      	b.n	800cb20 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800cb22:	f000 fe83 	bl	800d82c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cb26:	4b1d      	ldr	r3, [pc, #116]	; (800cb9c <xTaskCheckForTimeOut+0xc4>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	69ba      	ldr	r2, [r7, #24]
 800cb32:	1ad3      	subs	r3, r2, r3
 800cb34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb3e:	d102      	bne.n	800cb46 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cb40:	2300      	movs	r3, #0
 800cb42:	61fb      	str	r3, [r7, #28]
 800cb44:	e023      	b.n	800cb8e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	4b15      	ldr	r3, [pc, #84]	; (800cba0 <xTaskCheckForTimeOut+0xc8>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d007      	beq.n	800cb62 <xTaskCheckForTimeOut+0x8a>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	69ba      	ldr	r2, [r7, #24]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d302      	bcc.n	800cb62 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	61fb      	str	r3, [r7, #28]
 800cb60:	e015      	b.n	800cb8e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d20b      	bcs.n	800cb84 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	1ad2      	subs	r2, r2, r3
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff ff97 	bl	800caac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	61fb      	str	r3, [r7, #28]
 800cb82:	e004      	b.n	800cb8e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2200      	movs	r2, #0
 800cb88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb8e:	f000 fe81 	bl	800d894 <vPortExitCritical>

	return xReturn;
 800cb92:	69fb      	ldr	r3, [r7, #28]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3720      	adds	r7, #32
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	2000a644 	.word	0x2000a644
 800cba0:	2000a658 	.word	0x2000a658

0800cba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cba4:	b480      	push	{r7}
 800cba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cba8:	4b03      	ldr	r3, [pc, #12]	; (800cbb8 <vTaskMissedYield+0x14>)
 800cbaa:	2201      	movs	r2, #1
 800cbac:	601a      	str	r2, [r3, #0]
}
 800cbae:	bf00      	nop
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr
 800cbb8:	2000a654 	.word	0x2000a654

0800cbbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cbc4:	f000 f852 	bl	800cc6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cbc8:	4b06      	ldr	r3, [pc, #24]	; (800cbe4 <prvIdleTask+0x28>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d9f9      	bls.n	800cbc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cbd0:	4b05      	ldr	r3, [pc, #20]	; (800cbe8 <prvIdleTask+0x2c>)
 800cbd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbd6:	601a      	str	r2, [r3, #0]
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cbe0:	e7f0      	b.n	800cbc4 <prvIdleTask+0x8>
 800cbe2:	bf00      	nop
 800cbe4:	2000a544 	.word	0x2000a544
 800cbe8:	e000ed04 	.word	0xe000ed04

0800cbec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	607b      	str	r3, [r7, #4]
 800cbf6:	e00c      	b.n	800cc12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	4413      	add	r3, r2
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	4a12      	ldr	r2, [pc, #72]	; (800cc4c <prvInitialiseTaskLists+0x60>)
 800cc04:	4413      	add	r3, r2
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7fe fa4a 	bl	800b0a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	607b      	str	r3, [r7, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b06      	cmp	r3, #6
 800cc16:	d9ef      	bls.n	800cbf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cc18:	480d      	ldr	r0, [pc, #52]	; (800cc50 <prvInitialiseTaskLists+0x64>)
 800cc1a:	f7fe fa41 	bl	800b0a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cc1e:	480d      	ldr	r0, [pc, #52]	; (800cc54 <prvInitialiseTaskLists+0x68>)
 800cc20:	f7fe fa3e 	bl	800b0a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cc24:	480c      	ldr	r0, [pc, #48]	; (800cc58 <prvInitialiseTaskLists+0x6c>)
 800cc26:	f7fe fa3b 	bl	800b0a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cc2a:	480c      	ldr	r0, [pc, #48]	; (800cc5c <prvInitialiseTaskLists+0x70>)
 800cc2c:	f7fe fa38 	bl	800b0a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cc30:	480b      	ldr	r0, [pc, #44]	; (800cc60 <prvInitialiseTaskLists+0x74>)
 800cc32:	f7fe fa35 	bl	800b0a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cc36:	4b0b      	ldr	r3, [pc, #44]	; (800cc64 <prvInitialiseTaskLists+0x78>)
 800cc38:	4a05      	ldr	r2, [pc, #20]	; (800cc50 <prvInitialiseTaskLists+0x64>)
 800cc3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cc3c:	4b0a      	ldr	r3, [pc, #40]	; (800cc68 <prvInitialiseTaskLists+0x7c>)
 800cc3e:	4a05      	ldr	r2, [pc, #20]	; (800cc54 <prvInitialiseTaskLists+0x68>)
 800cc40:	601a      	str	r2, [r3, #0]
}
 800cc42:	bf00      	nop
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	2000a544 	.word	0x2000a544
 800cc50:	2000a5d0 	.word	0x2000a5d0
 800cc54:	2000a5e4 	.word	0x2000a5e4
 800cc58:	2000a600 	.word	0x2000a600
 800cc5c:	2000a614 	.word	0x2000a614
 800cc60:	2000a62c 	.word	0x2000a62c
 800cc64:	2000a5f8 	.word	0x2000a5f8
 800cc68:	2000a5fc 	.word	0x2000a5fc

0800cc6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc72:	e019      	b.n	800cca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cc74:	f000 fdda 	bl	800d82c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc78:	4b10      	ldr	r3, [pc, #64]	; (800ccbc <prvCheckTasksWaitingTermination+0x50>)
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	3304      	adds	r3, #4
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7fe fa95 	bl	800b1b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cc8a:	4b0d      	ldr	r3, [pc, #52]	; (800ccc0 <prvCheckTasksWaitingTermination+0x54>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	4a0b      	ldr	r2, [pc, #44]	; (800ccc0 <prvCheckTasksWaitingTermination+0x54>)
 800cc92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc94:	4b0b      	ldr	r3, [pc, #44]	; (800ccc4 <prvCheckTasksWaitingTermination+0x58>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	4a0a      	ldr	r2, [pc, #40]	; (800ccc4 <prvCheckTasksWaitingTermination+0x58>)
 800cc9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc9e:	f000 fdf9 	bl	800d894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 f810 	bl	800ccc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cca8:	4b06      	ldr	r3, [pc, #24]	; (800ccc4 <prvCheckTasksWaitingTermination+0x58>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1e1      	bne.n	800cc74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ccb0:	bf00      	nop
 800ccb2:	bf00      	nop
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	2000a614 	.word	0x2000a614
 800ccc0:	2000a640 	.word	0x2000a640
 800ccc4:	2000a628 	.word	0x2000a628

0800ccc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	334c      	adds	r3, #76	; 0x4c
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f00e fb19 	bl	801b30c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d108      	bne.n	800ccf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce8:	4618      	mov	r0, r3
 800ccea:	f000 ff95 	bl	800dc18 <vPortFree>
				vPortFree( pxTCB );
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 ff92 	bl	800dc18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ccf4:	e01a      	b.n	800cd2c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d103      	bne.n	800cd08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 ff89 	bl	800dc18 <vPortFree>
	}
 800cd06:	e011      	b.n	800cd2c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	d00c      	beq.n	800cd2c <prvDeleteTCB+0x64>
	__asm volatile
 800cd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd16:	b672      	cpsid	i
 800cd18:	f383 8811 	msr	BASEPRI, r3
 800cd1c:	f3bf 8f6f 	isb	sy
 800cd20:	f3bf 8f4f 	dsb	sy
 800cd24:	b662      	cpsie	i
 800cd26:	60fb      	str	r3, [r7, #12]
}
 800cd28:	bf00      	nop
 800cd2a:	e7fe      	b.n	800cd2a <prvDeleteTCB+0x62>
	}
 800cd2c:	bf00      	nop
 800cd2e:	3710      	adds	r7, #16
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cd34:	b480      	push	{r7}
 800cd36:	b083      	sub	sp, #12
 800cd38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd3a:	4b0c      	ldr	r3, [pc, #48]	; (800cd6c <prvResetNextTaskUnblockTime+0x38>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d104      	bne.n	800cd4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cd44:	4b0a      	ldr	r3, [pc, #40]	; (800cd70 <prvResetNextTaskUnblockTime+0x3c>)
 800cd46:	f04f 32ff 	mov.w	r2, #4294967295
 800cd4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cd4c:	e008      	b.n	800cd60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd4e:	4b07      	ldr	r3, [pc, #28]	; (800cd6c <prvResetNextTaskUnblockTime+0x38>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	4a04      	ldr	r2, [pc, #16]	; (800cd70 <prvResetNextTaskUnblockTime+0x3c>)
 800cd5e:	6013      	str	r3, [r2, #0]
}
 800cd60:	bf00      	nop
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr
 800cd6c:	2000a5f8 	.word	0x2000a5f8
 800cd70:	2000a660 	.word	0x2000a660

0800cd74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cd7a:	4b0b      	ldr	r3, [pc, #44]	; (800cda8 <xTaskGetSchedulerState+0x34>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d102      	bne.n	800cd88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd82:	2301      	movs	r3, #1
 800cd84:	607b      	str	r3, [r7, #4]
 800cd86:	e008      	b.n	800cd9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd88:	4b08      	ldr	r3, [pc, #32]	; (800cdac <xTaskGetSchedulerState+0x38>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d102      	bne.n	800cd96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cd90:	2302      	movs	r3, #2
 800cd92:	607b      	str	r3, [r7, #4]
 800cd94:	e001      	b.n	800cd9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cd96:	2300      	movs	r3, #0
 800cd98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd9a:	687b      	ldr	r3, [r7, #4]
	}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr
 800cda8:	2000a64c 	.word	0x2000a64c
 800cdac:	2000a668 	.word	0x2000a668

0800cdb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d069      	beq.n	800ce9a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdca:	4b36      	ldr	r3, [pc, #216]	; (800cea4 <xTaskPriorityInherit+0xf4>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d259      	bcs.n	800ce88 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	699b      	ldr	r3, [r3, #24]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	db06      	blt.n	800cdea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cddc:	4b31      	ldr	r3, [pc, #196]	; (800cea4 <xTaskPriorityInherit+0xf4>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde2:	f1c3 0207 	rsb	r2, r3, #7
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	6959      	ldr	r1, [r3, #20]
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	4413      	add	r3, r2
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	4a2b      	ldr	r2, [pc, #172]	; (800cea8 <xTaskPriorityInherit+0xf8>)
 800cdfc:	4413      	add	r3, r2
 800cdfe:	4299      	cmp	r1, r3
 800ce00:	d13a      	bne.n	800ce78 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	3304      	adds	r3, #4
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fe f9d4 	bl	800b1b4 <uxListRemove>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d115      	bne.n	800ce3e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce16:	4924      	ldr	r1, [pc, #144]	; (800cea8 <xTaskPriorityInherit+0xf8>)
 800ce18:	4613      	mov	r3, r2
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	4413      	add	r3, r2
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	440b      	add	r3, r1
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10a      	bne.n	800ce3e <xTaskPriorityInherit+0x8e>
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce32:	43da      	mvns	r2, r3
 800ce34:	4b1d      	ldr	r3, [pc, #116]	; (800ceac <xTaskPriorityInherit+0xfc>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4013      	ands	r3, r2
 800ce3a:	4a1c      	ldr	r2, [pc, #112]	; (800ceac <xTaskPriorityInherit+0xfc>)
 800ce3c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce3e:	4b19      	ldr	r3, [pc, #100]	; (800cea4 <xTaskPriorityInherit+0xf4>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	409a      	lsls	r2, r3
 800ce50:	4b16      	ldr	r3, [pc, #88]	; (800ceac <xTaskPriorityInherit+0xfc>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	4a15      	ldr	r2, [pc, #84]	; (800ceac <xTaskPriorityInherit+0xfc>)
 800ce58:	6013      	str	r3, [r2, #0]
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce5e:	4613      	mov	r3, r2
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	4413      	add	r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4a10      	ldr	r2, [pc, #64]	; (800cea8 <xTaskPriorityInherit+0xf8>)
 800ce68:	441a      	add	r2, r3
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4610      	mov	r0, r2
 800ce72:	f7fe f942 	bl	800b0fa <vListInsertEnd>
 800ce76:	e004      	b.n	800ce82 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce78:	4b0a      	ldr	r3, [pc, #40]	; (800cea4 <xTaskPriorityInherit+0xf4>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ce82:	2301      	movs	r3, #1
 800ce84:	60fb      	str	r3, [r7, #12]
 800ce86:	e008      	b.n	800ce9a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce8c:	4b05      	ldr	r3, [pc, #20]	; (800cea4 <xTaskPriorityInherit+0xf4>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d201      	bcs.n	800ce9a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ce96:	2301      	movs	r3, #1
 800ce98:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
	}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	2000a540 	.word	0x2000a540
 800cea8:	2000a544 	.word	0x2000a544
 800ceac:	2000a648 	.word	0x2000a648

0800ceb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cebc:	2300      	movs	r3, #0
 800cebe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d072      	beq.n	800cfac <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cec6:	4b3c      	ldr	r3, [pc, #240]	; (800cfb8 <xTaskPriorityDisinherit+0x108>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	693a      	ldr	r2, [r7, #16]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d00c      	beq.n	800ceea <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ced0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced4:	b672      	cpsid	i
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	b662      	cpsie	i
 800cee4:	60fb      	str	r3, [r7, #12]
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d10c      	bne.n	800cf0c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800cef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef6:	b672      	cpsid	i
 800cef8:	f383 8811 	msr	BASEPRI, r3
 800cefc:	f3bf 8f6f 	isb	sy
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	b662      	cpsie	i
 800cf06:	60bb      	str	r3, [r7, #8]
}
 800cf08:	bf00      	nop
 800cf0a:	e7fe      	b.n	800cf0a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf10:	1e5a      	subs	r2, r3, #1
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d044      	beq.n	800cfac <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d140      	bne.n	800cfac <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	3304      	adds	r3, #4
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fe f940 	bl	800b1b4 <uxListRemove>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d115      	bne.n	800cf66 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf3e:	491f      	ldr	r1, [pc, #124]	; (800cfbc <xTaskPriorityDisinherit+0x10c>)
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	440b      	add	r3, r1
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10a      	bne.n	800cf66 <xTaskPriorityDisinherit+0xb6>
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf54:	2201      	movs	r2, #1
 800cf56:	fa02 f303 	lsl.w	r3, r2, r3
 800cf5a:	43da      	mvns	r2, r3
 800cf5c:	4b18      	ldr	r3, [pc, #96]	; (800cfc0 <xTaskPriorityDisinherit+0x110>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4013      	ands	r3, r2
 800cf62:	4a17      	ldr	r2, [pc, #92]	; (800cfc0 <xTaskPriorityDisinherit+0x110>)
 800cf64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf72:	f1c3 0207 	rsb	r2, r3, #7
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf7e:	2201      	movs	r2, #1
 800cf80:	409a      	lsls	r2, r3
 800cf82:	4b0f      	ldr	r3, [pc, #60]	; (800cfc0 <xTaskPriorityDisinherit+0x110>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4313      	orrs	r3, r2
 800cf88:	4a0d      	ldr	r2, [pc, #52]	; (800cfc0 <xTaskPriorityDisinherit+0x110>)
 800cf8a:	6013      	str	r3, [r2, #0]
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf90:	4613      	mov	r3, r2
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	4413      	add	r3, r2
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	4a08      	ldr	r2, [pc, #32]	; (800cfbc <xTaskPriorityDisinherit+0x10c>)
 800cf9a:	441a      	add	r2, r3
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	4610      	mov	r0, r2
 800cfa4:	f7fe f8a9 	bl	800b0fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfac:	697b      	ldr	r3, [r7, #20]
	}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3718      	adds	r7, #24
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	2000a540 	.word	0x2000a540
 800cfbc:	2000a544 	.word	0x2000a544
 800cfc0:	2000a648 	.word	0x2000a648

0800cfc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b088      	sub	sp, #32
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 8087 	beq.w	800d0ec <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d10c      	bne.n	800d000 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800cfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfea:	b672      	cpsid	i
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	b662      	cpsie	i
 800cffa:	60fb      	str	r3, [r7, #12]
}
 800cffc:	bf00      	nop
 800cffe:	e7fe      	b.n	800cffe <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d004:	683a      	ldr	r2, [r7, #0]
 800d006:	429a      	cmp	r2, r3
 800d008:	d902      	bls.n	800d010 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	61fb      	str	r3, [r7, #28]
 800d00e:	e002      	b.n	800d016 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d014:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01a:	69fa      	ldr	r2, [r7, #28]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d065      	beq.n	800d0ec <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d024:	697a      	ldr	r2, [r7, #20]
 800d026:	429a      	cmp	r2, r3
 800d028:	d160      	bne.n	800d0ec <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d02a:	4b32      	ldr	r3, [pc, #200]	; (800d0f4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	69ba      	ldr	r2, [r7, #24]
 800d030:	429a      	cmp	r2, r3
 800d032:	d10c      	bne.n	800d04e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800d034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d038:	b672      	cpsid	i
 800d03a:	f383 8811 	msr	BASEPRI, r3
 800d03e:	f3bf 8f6f 	isb	sy
 800d042:	f3bf 8f4f 	dsb	sy
 800d046:	b662      	cpsie	i
 800d048:	60bb      	str	r3, [r7, #8]
}
 800d04a:	bf00      	nop
 800d04c:	e7fe      	b.n	800d04c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d052:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	69fa      	ldr	r2, [r7, #28]
 800d058:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d05a:	69bb      	ldr	r3, [r7, #24]
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	db04      	blt.n	800d06c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	f1c3 0207 	rsb	r2, r3, #7
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	6959      	ldr	r1, [r3, #20]
 800d070:	693a      	ldr	r2, [r7, #16]
 800d072:	4613      	mov	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4413      	add	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4a1f      	ldr	r2, [pc, #124]	; (800d0f8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d07c:	4413      	add	r3, r2
 800d07e:	4299      	cmp	r1, r3
 800d080:	d134      	bne.n	800d0ec <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	3304      	adds	r3, #4
 800d086:	4618      	mov	r0, r3
 800d088:	f7fe f894 	bl	800b1b4 <uxListRemove>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d115      	bne.n	800d0be <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d096:	4918      	ldr	r1, [pc, #96]	; (800d0f8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d098:	4613      	mov	r3, r2
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	4413      	add	r3, r2
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	440b      	add	r3, r1
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d10a      	bne.n	800d0be <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b2:	43da      	mvns	r2, r3
 800d0b4:	4b11      	ldr	r3, [pc, #68]	; (800d0fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4013      	ands	r3, r2
 800d0ba:	4a10      	ldr	r2, [pc, #64]	; (800d0fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d0bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	409a      	lsls	r2, r3
 800d0c6:	4b0d      	ldr	r3, [pc, #52]	; (800d0fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	4a0b      	ldr	r2, [pc, #44]	; (800d0fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d0ce:	6013      	str	r3, [r2, #0]
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4413      	add	r3, r2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4a06      	ldr	r2, [pc, #24]	; (800d0f8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d0de:	441a      	add	r2, r3
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	3304      	adds	r3, #4
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	4610      	mov	r0, r2
 800d0e8:	f7fe f807 	bl	800b0fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0ec:	bf00      	nop
 800d0ee:	3720      	adds	r7, #32
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	2000a540 	.word	0x2000a540
 800d0f8:	2000a544 	.word	0x2000a544
 800d0fc:	2000a648 	.word	0x2000a648

0800d100 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d100:	b480      	push	{r7}
 800d102:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d104:	4b07      	ldr	r3, [pc, #28]	; (800d124 <pvTaskIncrementMutexHeldCount+0x24>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d004      	beq.n	800d116 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d10c:	4b05      	ldr	r3, [pc, #20]	; (800d124 <pvTaskIncrementMutexHeldCount+0x24>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d112:	3201      	adds	r2, #1
 800d114:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d116:	4b03      	ldr	r3, [pc, #12]	; (800d124 <pvTaskIncrementMutexHeldCount+0x24>)
 800d118:	681b      	ldr	r3, [r3, #0]
	}
 800d11a:	4618      	mov	r0, r3
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr
 800d124:	2000a540 	.word	0x2000a540

0800d128 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
 800d134:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d136:	f000 fb79 	bl	800d82c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d13a:	4b29      	ldr	r3, [pc, #164]	; (800d1e0 <xTaskNotifyWait+0xb8>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d142:	b2db      	uxtb	r3, r3
 800d144:	2b02      	cmp	r3, #2
 800d146:	d01c      	beq.n	800d182 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d148:	4b25      	ldr	r3, [pc, #148]	; (800d1e0 <xTaskNotifyWait+0xb8>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	43d2      	mvns	r2, r2
 800d154:	400a      	ands	r2, r1
 800d156:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d15a:	4b21      	ldr	r3, [pc, #132]	; (800d1e0 <xTaskNotifyWait+0xb8>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d00b      	beq.n	800d182 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d16a:	2101      	movs	r1, #1
 800d16c:	6838      	ldr	r0, [r7, #0]
 800d16e:	f000 f9eb 	bl	800d548 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d172:	4b1c      	ldr	r3, [pc, #112]	; (800d1e4 <xTaskNotifyWait+0xbc>)
 800d174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d178:	601a      	str	r2, [r3, #0]
 800d17a:	f3bf 8f4f 	dsb	sy
 800d17e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d182:	f000 fb87 	bl	800d894 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d186:	f000 fb51 	bl	800d82c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d005      	beq.n	800d19c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d190:	4b13      	ldr	r3, [pc, #76]	; (800d1e0 <xTaskNotifyWait+0xb8>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d19c:	4b10      	ldr	r3, [pc, #64]	; (800d1e0 <xTaskNotifyWait+0xb8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	2b02      	cmp	r3, #2
 800d1a8:	d002      	beq.n	800d1b0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	617b      	str	r3, [r7, #20]
 800d1ae:	e00a      	b.n	800d1c6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d1b0:	4b0b      	ldr	r3, [pc, #44]	; (800d1e0 <xTaskNotifyWait+0xb8>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800d1b8:	68ba      	ldr	r2, [r7, #8]
 800d1ba:	43d2      	mvns	r2, r2
 800d1bc:	400a      	ands	r2, r1
 800d1be:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d1c6:	4b06      	ldr	r3, [pc, #24]	; (800d1e0 <xTaskNotifyWait+0xb8>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800d1d0:	f000 fb60 	bl	800d894 <vPortExitCritical>

		return xReturn;
 800d1d4:	697b      	ldr	r3, [r7, #20]
	}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3718      	adds	r7, #24
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	2000a540 	.word	0x2000a540
 800d1e4:	e000ed04 	.word	0xe000ed04

0800d1e8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b08a      	sub	sp, #40	; 0x28
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	60b9      	str	r1, [r7, #8]
 800d1f2:	603b      	str	r3, [r7, #0]
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10c      	bne.n	800d21c <xTaskGenericNotify+0x34>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d206:	b672      	cpsid	i
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	b662      	cpsie	i
 800d216:	61bb      	str	r3, [r7, #24]
}
 800d218:	bf00      	nop
 800d21a:	e7fe      	b.n	800d21a <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d220:	f000 fb04 	bl	800d82c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d004      	beq.n	800d234 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d22a:	6a3b      	ldr	r3, [r7, #32]
 800d22c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d234:	6a3b      	ldr	r3, [r7, #32]
 800d236:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d23a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d23c:	6a3b      	ldr	r3, [r7, #32]
 800d23e:	2202      	movs	r2, #2
 800d240:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800d244:	79fb      	ldrb	r3, [r7, #7]
 800d246:	2b04      	cmp	r3, #4
 800d248:	d82d      	bhi.n	800d2a6 <xTaskGenericNotify+0xbe>
 800d24a:	a201      	add	r2, pc, #4	; (adr r2, 800d250 <xTaskGenericNotify+0x68>)
 800d24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d250:	0800d2cd 	.word	0x0800d2cd
 800d254:	0800d265 	.word	0x0800d265
 800d258:	0800d277 	.word	0x0800d277
 800d25c:	0800d287 	.word	0x0800d287
 800d260:	0800d291 	.word	0x0800d291
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	431a      	orrs	r2, r3
 800d26e:	6a3b      	ldr	r3, [r7, #32]
 800d270:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800d274:	e02d      	b.n	800d2d2 <xTaskGenericNotify+0xea>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d276:	6a3b      	ldr	r3, [r7, #32]
 800d278:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d27c:	1c5a      	adds	r2, r3, #1
 800d27e:	6a3b      	ldr	r3, [r7, #32]
 800d280:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800d284:	e025      	b.n	800d2d2 <xTaskGenericNotify+0xea>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	68ba      	ldr	r2, [r7, #8]
 800d28a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800d28e:	e020      	b.n	800d2d2 <xTaskGenericNotify+0xea>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d290:	7ffb      	ldrb	r3, [r7, #31]
 800d292:	2b02      	cmp	r3, #2
 800d294:	d004      	beq.n	800d2a0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d296:	6a3b      	ldr	r3, [r7, #32]
 800d298:	68ba      	ldr	r2, [r7, #8]
 800d29a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d29e:	e018      	b.n	800d2d2 <xTaskGenericNotify+0xea>
						xReturn = pdFAIL;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d2a4:	e015      	b.n	800d2d2 <xTaskGenericNotify+0xea>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d2a6:	6a3b      	ldr	r3, [r7, #32]
 800d2a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b0:	d00e      	beq.n	800d2d0 <xTaskGenericNotify+0xe8>
	__asm volatile
 800d2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b6:	b672      	cpsid	i
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	b662      	cpsie	i
 800d2c6:	617b      	str	r3, [r7, #20]
}
 800d2c8:	bf00      	nop
 800d2ca:	e7fe      	b.n	800d2ca <xTaskGenericNotify+0xe2>
					break;
 800d2cc:	bf00      	nop
 800d2ce:	e000      	b.n	800d2d2 <xTaskGenericNotify+0xea>

					break;
 800d2d0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d2d2:	7ffb      	ldrb	r3, [r7, #31]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d13b      	bne.n	800d350 <xTaskGenericNotify+0x168>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2d8:	6a3b      	ldr	r3, [r7, #32]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fd ff69 	bl	800b1b4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d2e2:	6a3b      	ldr	r3, [r7, #32]
 800d2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	409a      	lsls	r2, r3
 800d2ea:	4b1d      	ldr	r3, [pc, #116]	; (800d360 <xTaskGenericNotify+0x178>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	4a1b      	ldr	r2, [pc, #108]	; (800d360 <xTaskGenericNotify+0x178>)
 800d2f2:	6013      	str	r3, [r2, #0]
 800d2f4:	6a3b      	ldr	r3, [r7, #32]
 800d2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	4413      	add	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	4a18      	ldr	r2, [pc, #96]	; (800d364 <xTaskGenericNotify+0x17c>)
 800d302:	441a      	add	r2, r3
 800d304:	6a3b      	ldr	r3, [r7, #32]
 800d306:	3304      	adds	r3, #4
 800d308:	4619      	mov	r1, r3
 800d30a:	4610      	mov	r0, r2
 800d30c:	f7fd fef5 	bl	800b0fa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d310:	6a3b      	ldr	r3, [r7, #32]
 800d312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d314:	2b00      	cmp	r3, #0
 800d316:	d00c      	beq.n	800d332 <xTaskGenericNotify+0x14a>
	__asm volatile
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	b672      	cpsid	i
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	b662      	cpsie	i
 800d32c:	613b      	str	r3, [r7, #16]
}
 800d32e:	bf00      	nop
 800d330:	e7fe      	b.n	800d330 <xTaskGenericNotify+0x148>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d332:	6a3b      	ldr	r3, [r7, #32]
 800d334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d336:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <xTaskGenericNotify+0x180>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d907      	bls.n	800d350 <xTaskGenericNotify+0x168>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d340:	4b0a      	ldr	r3, [pc, #40]	; (800d36c <xTaskGenericNotify+0x184>)
 800d342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d346:	601a      	str	r2, [r3, #0]
 800d348:	f3bf 8f4f 	dsb	sy
 800d34c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d350:	f000 faa0 	bl	800d894 <vPortExitCritical>

		return xReturn;
 800d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d356:	4618      	mov	r0, r3
 800d358:	3728      	adds	r7, #40	; 0x28
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	2000a648 	.word	0x2000a648
 800d364:	2000a544 	.word	0x2000a544
 800d368:	2000a540 	.word	0x2000a540
 800d36c:	e000ed04 	.word	0xe000ed04

0800d370 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d370:	b580      	push	{r7, lr}
 800d372:	b08e      	sub	sp, #56	; 0x38
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	603b      	str	r3, [r7, #0]
 800d37c:	4613      	mov	r3, r2
 800d37e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d380:	2301      	movs	r3, #1
 800d382:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10c      	bne.n	800d3a4 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 800d38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38e:	b672      	cpsid	i
 800d390:	f383 8811 	msr	BASEPRI, r3
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	b662      	cpsie	i
 800d39e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d3a0:	bf00      	nop
 800d3a2:	e7fe      	b.n	800d3a2 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3a4:	f000 fb2a 	bl	800d9fc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800d3ac:	f3ef 8211 	mrs	r2, BASEPRI
 800d3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b4:	b672      	cpsid	i
 800d3b6:	f383 8811 	msr	BASEPRI, r3
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	b662      	cpsie	i
 800d3c4:	623a      	str	r2, [r7, #32]
 800d3c6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d3c8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d004      	beq.n	800d3dc <xTaskGenericNotifyFromISR+0x6c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3de:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d3e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e8:	2202      	movs	r2, #2
 800d3ea:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800d3ee:	79fb      	ldrb	r3, [r7, #7]
 800d3f0:	2b04      	cmp	r3, #4
 800d3f2:	d82f      	bhi.n	800d454 <xTaskGenericNotifyFromISR+0xe4>
 800d3f4:	a201      	add	r2, pc, #4	; (adr r2, 800d3fc <xTaskGenericNotifyFromISR+0x8c>)
 800d3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3fa:	bf00      	nop
 800d3fc:	0800d47b 	.word	0x0800d47b
 800d400:	0800d411 	.word	0x0800d411
 800d404:	0800d423 	.word	0x0800d423
 800d408:	0800d433 	.word	0x0800d433
 800d40c:	0800d43d 	.word	0x0800d43d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d412:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	431a      	orrs	r2, r3
 800d41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800d420:	e02e      	b.n	800d480 <xTaskGenericNotifyFromISR+0x110>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d428:	1c5a      	adds	r2, r3, #1
 800d42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800d430:	e026      	b.n	800d480 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	68ba      	ldr	r2, [r7, #8]
 800d436:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800d43a:	e021      	b.n	800d480 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d43c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d440:	2b02      	cmp	r3, #2
 800d442:	d004      	beq.n	800d44e <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d446:	68ba      	ldr	r2, [r7, #8]
 800d448:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d44c:	e018      	b.n	800d480 <xTaskGenericNotifyFromISR+0x110>
						xReturn = pdFAIL;
 800d44e:	2300      	movs	r3, #0
 800d450:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d452:	e015      	b.n	800d480 <xTaskGenericNotifyFromISR+0x110>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d45e:	d00e      	beq.n	800d47e <xTaskGenericNotifyFromISR+0x10e>
	__asm volatile
 800d460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d464:	b672      	cpsid	i
 800d466:	f383 8811 	msr	BASEPRI, r3
 800d46a:	f3bf 8f6f 	isb	sy
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	b662      	cpsie	i
 800d474:	61bb      	str	r3, [r7, #24]
}
 800d476:	bf00      	nop
 800d478:	e7fe      	b.n	800d478 <xTaskGenericNotifyFromISR+0x108>
					break;
 800d47a:	bf00      	nop
 800d47c:	e000      	b.n	800d480 <xTaskGenericNotifyFromISR+0x110>
					break;
 800d47e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d480:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d484:	2b01      	cmp	r3, #1
 800d486:	d147      	bne.n	800d518 <xTaskGenericNotifyFromISR+0x1a8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00c      	beq.n	800d4aa <xTaskGenericNotifyFromISR+0x13a>
	__asm volatile
 800d490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d494:	b672      	cpsid	i
 800d496:	f383 8811 	msr	BASEPRI, r3
 800d49a:	f3bf 8f6f 	isb	sy
 800d49e:	f3bf 8f4f 	dsb	sy
 800d4a2:	b662      	cpsie	i
 800d4a4:	617b      	str	r3, [r7, #20]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <xTaskGenericNotifyFromISR+0x138>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4aa:	4b21      	ldr	r3, [pc, #132]	; (800d530 <xTaskGenericNotifyFromISR+0x1c0>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d11c      	bne.n	800d4ec <xTaskGenericNotifyFromISR+0x17c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b4:	3304      	adds	r3, #4
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fd fe7c 	bl	800b1b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	409a      	lsls	r2, r3
 800d4c4:	4b1b      	ldr	r3, [pc, #108]	; (800d534 <xTaskGenericNotifyFromISR+0x1c4>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	4a1a      	ldr	r2, [pc, #104]	; (800d534 <xTaskGenericNotifyFromISR+0x1c4>)
 800d4cc:	6013      	str	r3, [r2, #0]
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	4413      	add	r3, r2
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	4a17      	ldr	r2, [pc, #92]	; (800d538 <xTaskGenericNotifyFromISR+0x1c8>)
 800d4dc:	441a      	add	r2, r3
 800d4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	f7fd fe08 	bl	800b0fa <vListInsertEnd>
 800d4ea:	e005      	b.n	800d4f8 <xTaskGenericNotifyFromISR+0x188>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ee:	3318      	adds	r3, #24
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	4812      	ldr	r0, [pc, #72]	; (800d53c <xTaskGenericNotifyFromISR+0x1cc>)
 800d4f4:	f7fd fe01 	bl	800b0fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4fc:	4b10      	ldr	r3, [pc, #64]	; (800d540 <xTaskGenericNotifyFromISR+0x1d0>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d502:	429a      	cmp	r2, r3
 800d504:	d908      	bls.n	800d518 <xTaskGenericNotifyFromISR+0x1a8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d002      	beq.n	800d512 <xTaskGenericNotifyFromISR+0x1a2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d50e:	2201      	movs	r2, #1
 800d510:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d512:	4b0c      	ldr	r3, [pc, #48]	; (800d544 <xTaskGenericNotifyFromISR+0x1d4>)
 800d514:	2201      	movs	r2, #1
 800d516:	601a      	str	r2, [r3, #0]
 800d518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	f383 8811 	msr	BASEPRI, r3
}
 800d522:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d526:	4618      	mov	r0, r3
 800d528:	3738      	adds	r7, #56	; 0x38
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	2000a668 	.word	0x2000a668
 800d534:	2000a648 	.word	0x2000a648
 800d538:	2000a544 	.word	0x2000a544
 800d53c:	2000a600 	.word	0x2000a600
 800d540:	2000a540 	.word	0x2000a540
 800d544:	2000a654 	.word	0x2000a654

0800d548 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d552:	4b29      	ldr	r3, [pc, #164]	; (800d5f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d558:	4b28      	ldr	r3, [pc, #160]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	3304      	adds	r3, #4
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fd fe28 	bl	800b1b4 <uxListRemove>
 800d564:	4603      	mov	r3, r0
 800d566:	2b00      	cmp	r3, #0
 800d568:	d10b      	bne.n	800d582 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d56a:	4b24      	ldr	r3, [pc, #144]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d570:	2201      	movs	r2, #1
 800d572:	fa02 f303 	lsl.w	r3, r2, r3
 800d576:	43da      	mvns	r2, r3
 800d578:	4b21      	ldr	r3, [pc, #132]	; (800d600 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4013      	ands	r3, r2
 800d57e:	4a20      	ldr	r2, [pc, #128]	; (800d600 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d580:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d588:	d10a      	bne.n	800d5a0 <prvAddCurrentTaskToDelayedList+0x58>
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d007      	beq.n	800d5a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d590:	4b1a      	ldr	r3, [pc, #104]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	3304      	adds	r3, #4
 800d596:	4619      	mov	r1, r3
 800d598:	481a      	ldr	r0, [pc, #104]	; (800d604 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d59a:	f7fd fdae 	bl	800b0fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d59e:	e026      	b.n	800d5ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5a8:	4b14      	ldr	r3, [pc, #80]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	68ba      	ldr	r2, [r7, #8]
 800d5ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5b0:	68ba      	ldr	r2, [r7, #8]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d209      	bcs.n	800d5cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5b8:	4b13      	ldr	r3, [pc, #76]	; (800d608 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	4b0f      	ldr	r3, [pc, #60]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	3304      	adds	r3, #4
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	f7fd fdbc 	bl	800b142 <vListInsert>
}
 800d5ca:	e010      	b.n	800d5ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5cc:	4b0f      	ldr	r3, [pc, #60]	; (800d60c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	4b0a      	ldr	r3, [pc, #40]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	4610      	mov	r0, r2
 800d5da:	f7fd fdb2 	bl	800b142 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5de:	4b0c      	ldr	r3, [pc, #48]	; (800d610 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	68ba      	ldr	r2, [r7, #8]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d202      	bcs.n	800d5ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d5e8:	4a09      	ldr	r2, [pc, #36]	; (800d610 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	6013      	str	r3, [r2, #0]
}
 800d5ee:	bf00      	nop
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	2000a644 	.word	0x2000a644
 800d5fc:	2000a540 	.word	0x2000a540
 800d600:	2000a648 	.word	0x2000a648
 800d604:	2000a62c 	.word	0x2000a62c
 800d608:	2000a5fc 	.word	0x2000a5fc
 800d60c:	2000a5f8 	.word	0x2000a5f8
 800d610:	2000a660 	.word	0x2000a660

0800d614 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d614:	b480      	push	{r7}
 800d616:	b085      	sub	sp, #20
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	3b04      	subs	r3, #4
 800d624:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d62c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	3b04      	subs	r3, #4
 800d632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f023 0201 	bic.w	r2, r3, #1
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	3b04      	subs	r3, #4
 800d642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d644:	4a0c      	ldr	r2, [pc, #48]	; (800d678 <pxPortInitialiseStack+0x64>)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	3b14      	subs	r3, #20
 800d64e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	3b04      	subs	r3, #4
 800d65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f06f 0202 	mvn.w	r2, #2
 800d662:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3b20      	subs	r3, #32
 800d668:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d66a:	68fb      	ldr	r3, [r7, #12]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3714      	adds	r7, #20
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	0800d67d 	.word	0x0800d67d

0800d67c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d686:	4b14      	ldr	r3, [pc, #80]	; (800d6d8 <prvTaskExitError+0x5c>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d68e:	d00c      	beq.n	800d6aa <prvTaskExitError+0x2e>
	__asm volatile
 800d690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d694:	b672      	cpsid	i
 800d696:	f383 8811 	msr	BASEPRI, r3
 800d69a:	f3bf 8f6f 	isb	sy
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	b662      	cpsie	i
 800d6a4:	60fb      	str	r3, [r7, #12]
}
 800d6a6:	bf00      	nop
 800d6a8:	e7fe      	b.n	800d6a8 <prvTaskExitError+0x2c>
	__asm volatile
 800d6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ae:	b672      	cpsid	i
 800d6b0:	f383 8811 	msr	BASEPRI, r3
 800d6b4:	f3bf 8f6f 	isb	sy
 800d6b8:	f3bf 8f4f 	dsb	sy
 800d6bc:	b662      	cpsie	i
 800d6be:	60bb      	str	r3, [r7, #8]
}
 800d6c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d6c2:	bf00      	nop
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d0fc      	beq.n	800d6c4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d6ca:	bf00      	nop
 800d6cc:	bf00      	nop
 800d6ce:	3714      	adds	r7, #20
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr
 800d6d8:	20000028 	.word	0x20000028
 800d6dc:	00000000 	.word	0x00000000

0800d6e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d6e0:	4b07      	ldr	r3, [pc, #28]	; (800d700 <pxCurrentTCBConst2>)
 800d6e2:	6819      	ldr	r1, [r3, #0]
 800d6e4:	6808      	ldr	r0, [r1, #0]
 800d6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ea:	f380 8809 	msr	PSP, r0
 800d6ee:	f3bf 8f6f 	isb	sy
 800d6f2:	f04f 0000 	mov.w	r0, #0
 800d6f6:	f380 8811 	msr	BASEPRI, r0
 800d6fa:	4770      	bx	lr
 800d6fc:	f3af 8000 	nop.w

0800d700 <pxCurrentTCBConst2>:
 800d700:	2000a540 	.word	0x2000a540
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d704:	bf00      	nop
 800d706:	bf00      	nop

0800d708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d708:	4808      	ldr	r0, [pc, #32]	; (800d72c <prvPortStartFirstTask+0x24>)
 800d70a:	6800      	ldr	r0, [r0, #0]
 800d70c:	6800      	ldr	r0, [r0, #0]
 800d70e:	f380 8808 	msr	MSP, r0
 800d712:	f04f 0000 	mov.w	r0, #0
 800d716:	f380 8814 	msr	CONTROL, r0
 800d71a:	b662      	cpsie	i
 800d71c:	b661      	cpsie	f
 800d71e:	f3bf 8f4f 	dsb	sy
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	df00      	svc	0
 800d728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d72a:	bf00      	nop
 800d72c:	e000ed08 	.word	0xe000ed08

0800d730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d736:	4b37      	ldr	r3, [pc, #220]	; (800d814 <xPortStartScheduler+0xe4>)
 800d738:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	22ff      	movs	r2, #255	; 0xff
 800d746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d750:	78fb      	ldrb	r3, [r7, #3]
 800d752:	b2db      	uxtb	r3, r3
 800d754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	4b2f      	ldr	r3, [pc, #188]	; (800d818 <xPortStartScheduler+0xe8>)
 800d75c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d75e:	4b2f      	ldr	r3, [pc, #188]	; (800d81c <xPortStartScheduler+0xec>)
 800d760:	2207      	movs	r2, #7
 800d762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d764:	e009      	b.n	800d77a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d766:	4b2d      	ldr	r3, [pc, #180]	; (800d81c <xPortStartScheduler+0xec>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	3b01      	subs	r3, #1
 800d76c:	4a2b      	ldr	r2, [pc, #172]	; (800d81c <xPortStartScheduler+0xec>)
 800d76e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d770:	78fb      	ldrb	r3, [r7, #3]
 800d772:	b2db      	uxtb	r3, r3
 800d774:	005b      	lsls	r3, r3, #1
 800d776:	b2db      	uxtb	r3, r3
 800d778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d77a:	78fb      	ldrb	r3, [r7, #3]
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d782:	2b80      	cmp	r3, #128	; 0x80
 800d784:	d0ef      	beq.n	800d766 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d786:	4b25      	ldr	r3, [pc, #148]	; (800d81c <xPortStartScheduler+0xec>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f1c3 0307 	rsb	r3, r3, #7
 800d78e:	2b04      	cmp	r3, #4
 800d790:	d00c      	beq.n	800d7ac <xPortStartScheduler+0x7c>
	__asm volatile
 800d792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d796:	b672      	cpsid	i
 800d798:	f383 8811 	msr	BASEPRI, r3
 800d79c:	f3bf 8f6f 	isb	sy
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	b662      	cpsie	i
 800d7a6:	60bb      	str	r3, [r7, #8]
}
 800d7a8:	bf00      	nop
 800d7aa:	e7fe      	b.n	800d7aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d7ac:	4b1b      	ldr	r3, [pc, #108]	; (800d81c <xPortStartScheduler+0xec>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	021b      	lsls	r3, r3, #8
 800d7b2:	4a1a      	ldr	r2, [pc, #104]	; (800d81c <xPortStartScheduler+0xec>)
 800d7b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d7b6:	4b19      	ldr	r3, [pc, #100]	; (800d81c <xPortStartScheduler+0xec>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d7be:	4a17      	ldr	r2, [pc, #92]	; (800d81c <xPortStartScheduler+0xec>)
 800d7c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	b2da      	uxtb	r2, r3
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d7ca:	4b15      	ldr	r3, [pc, #84]	; (800d820 <xPortStartScheduler+0xf0>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a14      	ldr	r2, [pc, #80]	; (800d820 <xPortStartScheduler+0xf0>)
 800d7d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d7d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d7d6:	4b12      	ldr	r3, [pc, #72]	; (800d820 <xPortStartScheduler+0xf0>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a11      	ldr	r2, [pc, #68]	; (800d820 <xPortStartScheduler+0xf0>)
 800d7dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d7e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d7e2:	f000 f8dd 	bl	800d9a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d7e6:	4b0f      	ldr	r3, [pc, #60]	; (800d824 <xPortStartScheduler+0xf4>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d7ec:	f000 f8fc 	bl	800d9e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d7f0:	4b0d      	ldr	r3, [pc, #52]	; (800d828 <xPortStartScheduler+0xf8>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4a0c      	ldr	r2, [pc, #48]	; (800d828 <xPortStartScheduler+0xf8>)
 800d7f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d7fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d7fc:	f7ff ff84 	bl	800d708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d800:	f7ff f866 	bl	800c8d0 <vTaskSwitchContext>
	prvTaskExitError();
 800d804:	f7ff ff3a 	bl	800d67c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d808:	2300      	movs	r3, #0
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	e000e400 	.word	0xe000e400
 800d818:	2000a66c 	.word	0x2000a66c
 800d81c:	2000a670 	.word	0x2000a670
 800d820:	e000ed20 	.word	0xe000ed20
 800d824:	20000028 	.word	0x20000028
 800d828:	e000ef34 	.word	0xe000ef34

0800d82c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
	__asm volatile
 800d832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d836:	b672      	cpsid	i
 800d838:	f383 8811 	msr	BASEPRI, r3
 800d83c:	f3bf 8f6f 	isb	sy
 800d840:	f3bf 8f4f 	dsb	sy
 800d844:	b662      	cpsie	i
 800d846:	607b      	str	r3, [r7, #4]
}
 800d848:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d84a:	4b10      	ldr	r3, [pc, #64]	; (800d88c <vPortEnterCritical+0x60>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3301      	adds	r3, #1
 800d850:	4a0e      	ldr	r2, [pc, #56]	; (800d88c <vPortEnterCritical+0x60>)
 800d852:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d854:	4b0d      	ldr	r3, [pc, #52]	; (800d88c <vPortEnterCritical+0x60>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d111      	bne.n	800d880 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d85c:	4b0c      	ldr	r3, [pc, #48]	; (800d890 <vPortEnterCritical+0x64>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	b2db      	uxtb	r3, r3
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00c      	beq.n	800d880 <vPortEnterCritical+0x54>
	__asm volatile
 800d866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86a:	b672      	cpsid	i
 800d86c:	f383 8811 	msr	BASEPRI, r3
 800d870:	f3bf 8f6f 	isb	sy
 800d874:	f3bf 8f4f 	dsb	sy
 800d878:	b662      	cpsie	i
 800d87a:	603b      	str	r3, [r7, #0]
}
 800d87c:	bf00      	nop
 800d87e:	e7fe      	b.n	800d87e <vPortEnterCritical+0x52>
	}
}
 800d880:	bf00      	nop
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr
 800d88c:	20000028 	.word	0x20000028
 800d890:	e000ed04 	.word	0xe000ed04

0800d894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d89a:	4b13      	ldr	r3, [pc, #76]	; (800d8e8 <vPortExitCritical+0x54>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10c      	bne.n	800d8bc <vPortExitCritical+0x28>
	__asm volatile
 800d8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a6:	b672      	cpsid	i
 800d8a8:	f383 8811 	msr	BASEPRI, r3
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	b662      	cpsie	i
 800d8b6:	607b      	str	r3, [r7, #4]
}
 800d8b8:	bf00      	nop
 800d8ba:	e7fe      	b.n	800d8ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d8bc:	4b0a      	ldr	r3, [pc, #40]	; (800d8e8 <vPortExitCritical+0x54>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	4a09      	ldr	r2, [pc, #36]	; (800d8e8 <vPortExitCritical+0x54>)
 800d8c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d8c6:	4b08      	ldr	r3, [pc, #32]	; (800d8e8 <vPortExitCritical+0x54>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d105      	bne.n	800d8da <vPortExitCritical+0x46>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	f383 8811 	msr	BASEPRI, r3
}
 800d8d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d8da:	bf00      	nop
 800d8dc:	370c      	adds	r7, #12
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	20000028 	.word	0x20000028
 800d8ec:	00000000 	.word	0x00000000

0800d8f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d8f0:	f3ef 8009 	mrs	r0, PSP
 800d8f4:	f3bf 8f6f 	isb	sy
 800d8f8:	4b15      	ldr	r3, [pc, #84]	; (800d950 <pxCurrentTCBConst>)
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	f01e 0f10 	tst.w	lr, #16
 800d900:	bf08      	it	eq
 800d902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d90a:	6010      	str	r0, [r2, #0]
 800d90c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d910:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d914:	b672      	cpsid	i
 800d916:	f380 8811 	msr	BASEPRI, r0
 800d91a:	f3bf 8f4f 	dsb	sy
 800d91e:	f3bf 8f6f 	isb	sy
 800d922:	b662      	cpsie	i
 800d924:	f7fe ffd4 	bl	800c8d0 <vTaskSwitchContext>
 800d928:	f04f 0000 	mov.w	r0, #0
 800d92c:	f380 8811 	msr	BASEPRI, r0
 800d930:	bc09      	pop	{r0, r3}
 800d932:	6819      	ldr	r1, [r3, #0]
 800d934:	6808      	ldr	r0, [r1, #0]
 800d936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93a:	f01e 0f10 	tst.w	lr, #16
 800d93e:	bf08      	it	eq
 800d940:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d944:	f380 8809 	msr	PSP, r0
 800d948:	f3bf 8f6f 	isb	sy
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop

0800d950 <pxCurrentTCBConst>:
 800d950:	2000a540 	.word	0x2000a540
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d954:	bf00      	nop
 800d956:	bf00      	nop

0800d958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
	__asm volatile
 800d95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d962:	b672      	cpsid	i
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	b662      	cpsie	i
 800d972:	607b      	str	r3, [r7, #4]
}
 800d974:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d976:	f7fe fef1 	bl	800c75c <xTaskIncrementTick>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d003      	beq.n	800d988 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d980:	4b06      	ldr	r3, [pc, #24]	; (800d99c <SysTick_Handler+0x44>)
 800d982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d986:	601a      	str	r2, [r3, #0]
 800d988:	2300      	movs	r3, #0
 800d98a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	f383 8811 	msr	BASEPRI, r3
}
 800d992:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d994:	bf00      	nop
 800d996:	3708      	adds	r7, #8
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	e000ed04 	.word	0xe000ed04

0800d9a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d9a4:	4b0b      	ldr	r3, [pc, #44]	; (800d9d4 <vPortSetupTimerInterrupt+0x34>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d9aa:	4b0b      	ldr	r3, [pc, #44]	; (800d9d8 <vPortSetupTimerInterrupt+0x38>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d9b0:	4b0a      	ldr	r3, [pc, #40]	; (800d9dc <vPortSetupTimerInterrupt+0x3c>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a0a      	ldr	r2, [pc, #40]	; (800d9e0 <vPortSetupTimerInterrupt+0x40>)
 800d9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ba:	099b      	lsrs	r3, r3, #6
 800d9bc:	4a09      	ldr	r2, [pc, #36]	; (800d9e4 <vPortSetupTimerInterrupt+0x44>)
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d9c2:	4b04      	ldr	r3, [pc, #16]	; (800d9d4 <vPortSetupTimerInterrupt+0x34>)
 800d9c4:	2207      	movs	r2, #7
 800d9c6:	601a      	str	r2, [r3, #0]
}
 800d9c8:	bf00      	nop
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	e000e010 	.word	0xe000e010
 800d9d8:	e000e018 	.word	0xe000e018
 800d9dc:	20000008 	.word	0x20000008
 800d9e0:	10624dd3 	.word	0x10624dd3
 800d9e4:	e000e014 	.word	0xe000e014

0800d9e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d9e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d9f8 <vPortEnableVFP+0x10>
 800d9ec:	6801      	ldr	r1, [r0, #0]
 800d9ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d9f2:	6001      	str	r1, [r0, #0]
 800d9f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d9f6:	bf00      	nop
 800d9f8:	e000ed88 	.word	0xe000ed88

0800d9fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800da02:	f3ef 8305 	mrs	r3, IPSR
 800da06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2b0f      	cmp	r3, #15
 800da0c:	d916      	bls.n	800da3c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800da0e:	4a19      	ldr	r2, [pc, #100]	; (800da74 <vPortValidateInterruptPriority+0x78>)
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	4413      	add	r3, r2
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800da18:	4b17      	ldr	r3, [pc, #92]	; (800da78 <vPortValidateInterruptPriority+0x7c>)
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	7afa      	ldrb	r2, [r7, #11]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d20c      	bcs.n	800da3c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	b672      	cpsid	i
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	b662      	cpsie	i
 800da36:	607b      	str	r3, [r7, #4]
}
 800da38:	bf00      	nop
 800da3a:	e7fe      	b.n	800da3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800da3c:	4b0f      	ldr	r3, [pc, #60]	; (800da7c <vPortValidateInterruptPriority+0x80>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800da44:	4b0e      	ldr	r3, [pc, #56]	; (800da80 <vPortValidateInterruptPriority+0x84>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d90c      	bls.n	800da66 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	b672      	cpsid	i
 800da52:	f383 8811 	msr	BASEPRI, r3
 800da56:	f3bf 8f6f 	isb	sy
 800da5a:	f3bf 8f4f 	dsb	sy
 800da5e:	b662      	cpsie	i
 800da60:	603b      	str	r3, [r7, #0]
}
 800da62:	bf00      	nop
 800da64:	e7fe      	b.n	800da64 <vPortValidateInterruptPriority+0x68>
	}
 800da66:	bf00      	nop
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	e000e3f0 	.word	0xe000e3f0
 800da78:	2000a66c 	.word	0x2000a66c
 800da7c:	e000ed0c 	.word	0xe000ed0c
 800da80:	2000a670 	.word	0x2000a670

0800da84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b08a      	sub	sp, #40	; 0x28
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da8c:	2300      	movs	r3, #0
 800da8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da90:	f7fe fd96 	bl	800c5c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da94:	4b5b      	ldr	r3, [pc, #364]	; (800dc04 <pvPortMalloc+0x180>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d101      	bne.n	800daa0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da9c:	f000 f91a 	bl	800dcd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800daa0:	4b59      	ldr	r3, [pc, #356]	; (800dc08 <pvPortMalloc+0x184>)
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	4013      	ands	r3, r2
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f040 8092 	bne.w	800dbd2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d01f      	beq.n	800daf4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800dab4:	2208      	movs	r2, #8
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4413      	add	r3, r2
 800daba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f003 0307 	and.w	r3, r3, #7
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d016      	beq.n	800daf4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f023 0307 	bic.w	r3, r3, #7
 800dacc:	3308      	adds	r3, #8
 800dace:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f003 0307 	and.w	r3, r3, #7
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00c      	beq.n	800daf4 <pvPortMalloc+0x70>
	__asm volatile
 800dada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dade:	b672      	cpsid	i
 800dae0:	f383 8811 	msr	BASEPRI, r3
 800dae4:	f3bf 8f6f 	isb	sy
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	b662      	cpsie	i
 800daee:	617b      	str	r3, [r7, #20]
}
 800daf0:	bf00      	nop
 800daf2:	e7fe      	b.n	800daf2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d06b      	beq.n	800dbd2 <pvPortMalloc+0x14e>
 800dafa:	4b44      	ldr	r3, [pc, #272]	; (800dc0c <pvPortMalloc+0x188>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	429a      	cmp	r2, r3
 800db02:	d866      	bhi.n	800dbd2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800db04:	4b42      	ldr	r3, [pc, #264]	; (800dc10 <pvPortMalloc+0x18c>)
 800db06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800db08:	4b41      	ldr	r3, [pc, #260]	; (800dc10 <pvPortMalloc+0x18c>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db0e:	e004      	b.n	800db1a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800db14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	429a      	cmp	r2, r3
 800db22:	d903      	bls.n	800db2c <pvPortMalloc+0xa8>
 800db24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1f1      	bne.n	800db10 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800db2c:	4b35      	ldr	r3, [pc, #212]	; (800dc04 <pvPortMalloc+0x180>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db32:	429a      	cmp	r2, r3
 800db34:	d04d      	beq.n	800dbd2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db36:	6a3b      	ldr	r3, [r7, #32]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2208      	movs	r2, #8
 800db3c:	4413      	add	r3, r2
 800db3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	6a3b      	ldr	r3, [r7, #32]
 800db46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800db48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4a:	685a      	ldr	r2, [r3, #4]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	1ad2      	subs	r2, r2, r3
 800db50:	2308      	movs	r3, #8
 800db52:	005b      	lsls	r3, r3, #1
 800db54:	429a      	cmp	r2, r3
 800db56:	d921      	bls.n	800db9c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4413      	add	r3, r2
 800db5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db60:	69bb      	ldr	r3, [r7, #24]
 800db62:	f003 0307 	and.w	r3, r3, #7
 800db66:	2b00      	cmp	r3, #0
 800db68:	d00c      	beq.n	800db84 <pvPortMalloc+0x100>
	__asm volatile
 800db6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6e:	b672      	cpsid	i
 800db70:	f383 8811 	msr	BASEPRI, r3
 800db74:	f3bf 8f6f 	isb	sy
 800db78:	f3bf 8f4f 	dsb	sy
 800db7c:	b662      	cpsie	i
 800db7e:	613b      	str	r3, [r7, #16]
}
 800db80:	bf00      	nop
 800db82:	e7fe      	b.n	800db82 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	685a      	ldr	r2, [r3, #4]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	1ad2      	subs	r2, r2, r3
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db96:	69b8      	ldr	r0, [r7, #24]
 800db98:	f000 f8fe 	bl	800dd98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db9c:	4b1b      	ldr	r3, [pc, #108]	; (800dc0c <pvPortMalloc+0x188>)
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	1ad3      	subs	r3, r2, r3
 800dba6:	4a19      	ldr	r2, [pc, #100]	; (800dc0c <pvPortMalloc+0x188>)
 800dba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dbaa:	4b18      	ldr	r3, [pc, #96]	; (800dc0c <pvPortMalloc+0x188>)
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	4b19      	ldr	r3, [pc, #100]	; (800dc14 <pvPortMalloc+0x190>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d203      	bcs.n	800dbbe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dbb6:	4b15      	ldr	r3, [pc, #84]	; (800dc0c <pvPortMalloc+0x188>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a16      	ldr	r2, [pc, #88]	; (800dc14 <pvPortMalloc+0x190>)
 800dbbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc0:	685a      	ldr	r2, [r3, #4]
 800dbc2:	4b11      	ldr	r3, [pc, #68]	; (800dc08 <pvPortMalloc+0x184>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	431a      	orrs	r2, r3
 800dbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	2200      	movs	r2, #0
 800dbd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dbd2:	f7fe fd03 	bl	800c5dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	f003 0307 	and.w	r3, r3, #7
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00c      	beq.n	800dbfa <pvPortMalloc+0x176>
	__asm volatile
 800dbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe4:	b672      	cpsid	i
 800dbe6:	f383 8811 	msr	BASEPRI, r3
 800dbea:	f3bf 8f6f 	isb	sy
 800dbee:	f3bf 8f4f 	dsb	sy
 800dbf2:	b662      	cpsie	i
 800dbf4:	60fb      	str	r3, [r7, #12]
}
 800dbf6:	bf00      	nop
 800dbf8:	e7fe      	b.n	800dbf8 <pvPortMalloc+0x174>
	return pvReturn;
 800dbfa:	69fb      	ldr	r3, [r7, #28]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3728      	adds	r7, #40	; 0x28
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	2000e27c 	.word	0x2000e27c
 800dc08:	2000e288 	.word	0x2000e288
 800dc0c:	2000e280 	.word	0x2000e280
 800dc10:	2000e274 	.word	0x2000e274
 800dc14:	2000e284 	.word	0x2000e284

0800dc18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b086      	sub	sp, #24
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d04c      	beq.n	800dcc4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dc2a:	2308      	movs	r3, #8
 800dc2c:	425b      	negs	r3, r3
 800dc2e:	697a      	ldr	r2, [r7, #20]
 800dc30:	4413      	add	r3, r2
 800dc32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	685a      	ldr	r2, [r3, #4]
 800dc3c:	4b23      	ldr	r3, [pc, #140]	; (800dccc <vPortFree+0xb4>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4013      	ands	r3, r2
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d10c      	bne.n	800dc60 <vPortFree+0x48>
	__asm volatile
 800dc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4a:	b672      	cpsid	i
 800dc4c:	f383 8811 	msr	BASEPRI, r3
 800dc50:	f3bf 8f6f 	isb	sy
 800dc54:	f3bf 8f4f 	dsb	sy
 800dc58:	b662      	cpsie	i
 800dc5a:	60fb      	str	r3, [r7, #12]
}
 800dc5c:	bf00      	nop
 800dc5e:	e7fe      	b.n	800dc5e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d00c      	beq.n	800dc82 <vPortFree+0x6a>
	__asm volatile
 800dc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6c:	b672      	cpsid	i
 800dc6e:	f383 8811 	msr	BASEPRI, r3
 800dc72:	f3bf 8f6f 	isb	sy
 800dc76:	f3bf 8f4f 	dsb	sy
 800dc7a:	b662      	cpsie	i
 800dc7c:	60bb      	str	r3, [r7, #8]
}
 800dc7e:	bf00      	nop
 800dc80:	e7fe      	b.n	800dc80 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	685a      	ldr	r2, [r3, #4]
 800dc86:	4b11      	ldr	r3, [pc, #68]	; (800dccc <vPortFree+0xb4>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4013      	ands	r3, r2
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d019      	beq.n	800dcc4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d115      	bne.n	800dcc4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	685a      	ldr	r2, [r3, #4]
 800dc9c:	4b0b      	ldr	r3, [pc, #44]	; (800dccc <vPortFree+0xb4>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	43db      	mvns	r3, r3
 800dca2:	401a      	ands	r2, r3
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dca8:	f7fe fc8a 	bl	800c5c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	685a      	ldr	r2, [r3, #4]
 800dcb0:	4b07      	ldr	r3, [pc, #28]	; (800dcd0 <vPortFree+0xb8>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	4a06      	ldr	r2, [pc, #24]	; (800dcd0 <vPortFree+0xb8>)
 800dcb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dcba:	6938      	ldr	r0, [r7, #16]
 800dcbc:	f000 f86c 	bl	800dd98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dcc0:	f7fe fc8c 	bl	800c5dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dcc4:	bf00      	nop
 800dcc6:	3718      	adds	r7, #24
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	2000e288 	.word	0x2000e288
 800dcd0:	2000e280 	.word	0x2000e280

0800dcd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dcda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dcde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dce0:	4b27      	ldr	r3, [pc, #156]	; (800dd80 <prvHeapInit+0xac>)
 800dce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f003 0307 	and.w	r3, r3, #7
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00c      	beq.n	800dd08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	3307      	adds	r3, #7
 800dcf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f023 0307 	bic.w	r3, r3, #7
 800dcfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dcfc:	68ba      	ldr	r2, [r7, #8]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	4a1f      	ldr	r2, [pc, #124]	; (800dd80 <prvHeapInit+0xac>)
 800dd04:	4413      	add	r3, r2
 800dd06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dd0c:	4a1d      	ldr	r2, [pc, #116]	; (800dd84 <prvHeapInit+0xb0>)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dd12:	4b1c      	ldr	r3, [pc, #112]	; (800dd84 <prvHeapInit+0xb0>)
 800dd14:	2200      	movs	r2, #0
 800dd16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	68ba      	ldr	r2, [r7, #8]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dd20:	2208      	movs	r2, #8
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	1a9b      	subs	r3, r3, r2
 800dd26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f023 0307 	bic.w	r3, r3, #7
 800dd2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	4a15      	ldr	r2, [pc, #84]	; (800dd88 <prvHeapInit+0xb4>)
 800dd34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dd36:	4b14      	ldr	r3, [pc, #80]	; (800dd88 <prvHeapInit+0xb4>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dd3e:	4b12      	ldr	r3, [pc, #72]	; (800dd88 <prvHeapInit+0xb4>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2200      	movs	r2, #0
 800dd44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	68fa      	ldr	r2, [r7, #12]
 800dd4e:	1ad2      	subs	r2, r2, r3
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dd54:	4b0c      	ldr	r3, [pc, #48]	; (800dd88 <prvHeapInit+0xb4>)
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	4a0a      	ldr	r2, [pc, #40]	; (800dd8c <prvHeapInit+0xb8>)
 800dd62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	4a09      	ldr	r2, [pc, #36]	; (800dd90 <prvHeapInit+0xbc>)
 800dd6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd6c:	4b09      	ldr	r3, [pc, #36]	; (800dd94 <prvHeapInit+0xc0>)
 800dd6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dd72:	601a      	str	r2, [r3, #0]
}
 800dd74:	bf00      	nop
 800dd76:	3714      	adds	r7, #20
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr
 800dd80:	2000a674 	.word	0x2000a674
 800dd84:	2000e274 	.word	0x2000e274
 800dd88:	2000e27c 	.word	0x2000e27c
 800dd8c:	2000e284 	.word	0x2000e284
 800dd90:	2000e280 	.word	0x2000e280
 800dd94:	2000e288 	.word	0x2000e288

0800dd98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b085      	sub	sp, #20
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dda0:	4b28      	ldr	r3, [pc, #160]	; (800de44 <prvInsertBlockIntoFreeList+0xac>)
 800dda2:	60fb      	str	r3, [r7, #12]
 800dda4:	e002      	b.n	800ddac <prvInsertBlockIntoFreeList+0x14>
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	60fb      	str	r3, [r7, #12]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d8f7      	bhi.n	800dda6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	68ba      	ldr	r2, [r7, #8]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d108      	bne.n	800ddda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	685a      	ldr	r2, [r3, #4]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	441a      	add	r2, r3
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	68ba      	ldr	r2, [r7, #8]
 800dde4:	441a      	add	r2, r3
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d118      	bne.n	800de20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	4b15      	ldr	r3, [pc, #84]	; (800de48 <prvInsertBlockIntoFreeList+0xb0>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d00d      	beq.n	800de16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	685a      	ldr	r2, [r3, #4]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	441a      	add	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	681a      	ldr	r2, [r3, #0]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	e008      	b.n	800de28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800de16:	4b0c      	ldr	r3, [pc, #48]	; (800de48 <prvInsertBlockIntoFreeList+0xb0>)
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	601a      	str	r2, [r3, #0]
 800de1e:	e003      	b.n	800de28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d002      	beq.n	800de36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de36:	bf00      	nop
 800de38:	3714      	adds	r7, #20
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop
 800de44:	2000e274 	.word	0x2000e274
 800de48:	2000e27c 	.word	0x2000e27c

0800de4c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800de56:	f009 fecd 	bl	8017bf4 <sys_timeouts_sleeptime>
 800de5a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de62:	d10b      	bne.n	800de7c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800de64:	4813      	ldr	r0, [pc, #76]	; (800deb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800de66:	f00c fc42 	bl	801a6ee <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800de6a:	2200      	movs	r2, #0
 800de6c:	6839      	ldr	r1, [r7, #0]
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f00c fbb4 	bl	801a5dc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800de74:	480f      	ldr	r0, [pc, #60]	; (800deb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800de76:	f00c fc2b 	bl	801a6d0 <sys_mutex_lock>
    return;
 800de7a:	e018      	b.n	800deae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d102      	bne.n	800de88 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800de82:	f009 fe7d 	bl	8017b80 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800de86:	e7e6      	b.n	800de56 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800de88:	480a      	ldr	r0, [pc, #40]	; (800deb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800de8a:	f00c fc30 	bl	801a6ee <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	6839      	ldr	r1, [r7, #0]
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f00c fba2 	bl	801a5dc <sys_arch_mbox_fetch>
 800de98:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800de9a:	4806      	ldr	r0, [pc, #24]	; (800deb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800de9c:	f00c fc18 	bl	801a6d0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dea6:	d102      	bne.n	800deae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800dea8:	f009 fe6a 	bl	8017b80 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800deac:	e7d3      	b.n	800de56 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	2000e298 	.word	0x2000e298

0800deb8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800dec0:	4810      	ldr	r0, [pc, #64]	; (800df04 <tcpip_thread+0x4c>)
 800dec2:	f00c fc05 	bl	801a6d0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800dec6:	4b10      	ldr	r3, [pc, #64]	; (800df08 <tcpip_thread+0x50>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d005      	beq.n	800deda <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800dece:	4b0e      	ldr	r3, [pc, #56]	; (800df08 <tcpip_thread+0x50>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	4a0e      	ldr	r2, [pc, #56]	; (800df0c <tcpip_thread+0x54>)
 800ded4:	6812      	ldr	r2, [r2, #0]
 800ded6:	4610      	mov	r0, r2
 800ded8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800deda:	f107 030c 	add.w	r3, r7, #12
 800dede:	4619      	mov	r1, r3
 800dee0:	480b      	ldr	r0, [pc, #44]	; (800df10 <tcpip_thread+0x58>)
 800dee2:	f7ff ffb3 	bl	800de4c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d106      	bne.n	800defa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800deec:	4b09      	ldr	r3, [pc, #36]	; (800df14 <tcpip_thread+0x5c>)
 800deee:	2291      	movs	r2, #145	; 0x91
 800def0:	4909      	ldr	r1, [pc, #36]	; (800df18 <tcpip_thread+0x60>)
 800def2:	480a      	ldr	r0, [pc, #40]	; (800df1c <tcpip_thread+0x64>)
 800def4:	f00d f988 	bl	801b208 <iprintf>
      continue;
 800def8:	e003      	b.n	800df02 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	4618      	mov	r0, r3
 800defe:	f000 f80f 	bl	800df20 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800df02:	e7ea      	b.n	800deda <tcpip_thread+0x22>
 800df04:	2000e298 	.word	0x2000e298
 800df08:	2000e28c 	.word	0x2000e28c
 800df0c:	2000e290 	.word	0x2000e290
 800df10:	2000e294 	.word	0x2000e294
 800df14:	0801d214 	.word	0x0801d214
 800df18:	0801d244 	.word	0x0801d244
 800df1c:	0801d264 	.word	0x0801d264

0800df20 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	2b02      	cmp	r3, #2
 800df2e:	d026      	beq.n	800df7e <tcpip_thread_handle_msg+0x5e>
 800df30:	2b02      	cmp	r3, #2
 800df32:	dc2b      	bgt.n	800df8c <tcpip_thread_handle_msg+0x6c>
 800df34:	2b00      	cmp	r3, #0
 800df36:	d002      	beq.n	800df3e <tcpip_thread_handle_msg+0x1e>
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d015      	beq.n	800df68 <tcpip_thread_handle_msg+0x48>
 800df3c:	e026      	b.n	800df8c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	6850      	ldr	r0, [r2, #4]
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	6892      	ldr	r2, [r2, #8]
 800df4a:	4611      	mov	r1, r2
 800df4c:	4798      	blx	r3
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d004      	beq.n	800df5e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	4618      	mov	r0, r3
 800df5a:	f003 f96d 	bl	8011238 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800df5e:	6879      	ldr	r1, [r7, #4]
 800df60:	2009      	movs	r0, #9
 800df62:	f002 fac1 	bl	80104e8 <memp_free>
      break;
 800df66:	e018      	b.n	800df9a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	6892      	ldr	r2, [r2, #8]
 800df70:	4610      	mov	r0, r2
 800df72:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800df74:	6879      	ldr	r1, [r7, #4]
 800df76:	2008      	movs	r0, #8
 800df78:	f002 fab6 	bl	80104e8 <memp_free>
      break;
 800df7c:	e00d      	b.n	800df9a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	6892      	ldr	r2, [r2, #8]
 800df86:	4610      	mov	r0, r2
 800df88:	4798      	blx	r3
      break;
 800df8a:	e006      	b.n	800df9a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800df8c:	4b05      	ldr	r3, [pc, #20]	; (800dfa4 <tcpip_thread_handle_msg+0x84>)
 800df8e:	22cf      	movs	r2, #207	; 0xcf
 800df90:	4905      	ldr	r1, [pc, #20]	; (800dfa8 <tcpip_thread_handle_msg+0x88>)
 800df92:	4806      	ldr	r0, [pc, #24]	; (800dfac <tcpip_thread_handle_msg+0x8c>)
 800df94:	f00d f938 	bl	801b208 <iprintf>
      break;
 800df98:	bf00      	nop
  }
}
 800df9a:	bf00      	nop
 800df9c:	3708      	adds	r7, #8
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	0801d214 	.word	0x0801d214
 800dfa8:	0801d244 	.word	0x0801d244
 800dfac:	0801d264 	.word	0x0801d264

0800dfb0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b086      	sub	sp, #24
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	60f8      	str	r0, [r7, #12]
 800dfb8:	60b9      	str	r1, [r7, #8]
 800dfba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dfbc:	481a      	ldr	r0, [pc, #104]	; (800e028 <tcpip_inpkt+0x78>)
 800dfbe:	f00c fb4c 	bl	801a65a <sys_mbox_valid>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d105      	bne.n	800dfd4 <tcpip_inpkt+0x24>
 800dfc8:	4b18      	ldr	r3, [pc, #96]	; (800e02c <tcpip_inpkt+0x7c>)
 800dfca:	22fc      	movs	r2, #252	; 0xfc
 800dfcc:	4918      	ldr	r1, [pc, #96]	; (800e030 <tcpip_inpkt+0x80>)
 800dfce:	4819      	ldr	r0, [pc, #100]	; (800e034 <tcpip_inpkt+0x84>)
 800dfd0:	f00d f91a 	bl	801b208 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800dfd4:	2009      	movs	r0, #9
 800dfd6:	f002 fa11 	bl	80103fc <memp_malloc>
 800dfda:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d102      	bne.n	800dfe8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800dfe2:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe6:	e01a      	b.n	800e01e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	2200      	movs	r2, #0
 800dfec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	68ba      	ldr	r2, [r7, #8]
 800dff8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e000:	6979      	ldr	r1, [r7, #20]
 800e002:	4809      	ldr	r0, [pc, #36]	; (800e028 <tcpip_inpkt+0x78>)
 800e004:	f00c fad0 	bl	801a5a8 <sys_mbox_trypost>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d006      	beq.n	800e01c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e00e:	6979      	ldr	r1, [r7, #20]
 800e010:	2009      	movs	r0, #9
 800e012:	f002 fa69 	bl	80104e8 <memp_free>
    return ERR_MEM;
 800e016:	f04f 33ff 	mov.w	r3, #4294967295
 800e01a:	e000      	b.n	800e01e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e01c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3718      	adds	r7, #24
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	2000e294 	.word	0x2000e294
 800e02c:	0801d214 	.word	0x0801d214
 800e030:	0801d28c 	.word	0x0801d28c
 800e034:	0801d264 	.word	0x0801d264

0800e038 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e048:	f003 0318 	and.w	r3, r3, #24
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d006      	beq.n	800e05e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e050:	4a08      	ldr	r2, [pc, #32]	; (800e074 <tcpip_input+0x3c>)
 800e052:	6839      	ldr	r1, [r7, #0]
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7ff ffab 	bl	800dfb0 <tcpip_inpkt>
 800e05a:	4603      	mov	r3, r0
 800e05c:	e005      	b.n	800e06a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e05e:	4a06      	ldr	r2, [pc, #24]	; (800e078 <tcpip_input+0x40>)
 800e060:	6839      	ldr	r1, [r7, #0]
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7ff ffa4 	bl	800dfb0 <tcpip_inpkt>
 800e068:	4603      	mov	r3, r0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	0801a3b9 	.word	0x0801a3b9
 800e078:	080192c1 	.word	0x080192c1

0800e07c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e086:	4819      	ldr	r0, [pc, #100]	; (800e0ec <tcpip_try_callback+0x70>)
 800e088:	f00c fae7 	bl	801a65a <sys_mbox_valid>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d106      	bne.n	800e0a0 <tcpip_try_callback+0x24>
 800e092:	4b17      	ldr	r3, [pc, #92]	; (800e0f0 <tcpip_try_callback+0x74>)
 800e094:	f240 125d 	movw	r2, #349	; 0x15d
 800e098:	4916      	ldr	r1, [pc, #88]	; (800e0f4 <tcpip_try_callback+0x78>)
 800e09a:	4817      	ldr	r0, [pc, #92]	; (800e0f8 <tcpip_try_callback+0x7c>)
 800e09c:	f00d f8b4 	bl	801b208 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e0a0:	2008      	movs	r0, #8
 800e0a2:	f002 f9ab 	bl	80103fc <memp_malloc>
 800e0a6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d102      	bne.n	800e0b4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e0b2:	e017      	b.n	800e0e4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	683a      	ldr	r2, [r7, #0]
 800e0c4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e0c6:	68f9      	ldr	r1, [r7, #12]
 800e0c8:	4808      	ldr	r0, [pc, #32]	; (800e0ec <tcpip_try_callback+0x70>)
 800e0ca:	f00c fa6d 	bl	801a5a8 <sys_mbox_trypost>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d006      	beq.n	800e0e2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800e0d4:	68f9      	ldr	r1, [r7, #12]
 800e0d6:	2008      	movs	r0, #8
 800e0d8:	f002 fa06 	bl	80104e8 <memp_free>
    return ERR_MEM;
 800e0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e0:	e000      	b.n	800e0e4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	2000e294 	.word	0x2000e294
 800e0f0:	0801d214 	.word	0x0801d214
 800e0f4:	0801d28c 	.word	0x0801d28c
 800e0f8:	0801d264 	.word	0x0801d264

0800e0fc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af02      	add	r7, sp, #8
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e106:	f001 fca7 	bl	800fa58 <lwip_init>

  tcpip_init_done = initfunc;
 800e10a:	4a17      	ldr	r2, [pc, #92]	; (800e168 <tcpip_init+0x6c>)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e110:	4a16      	ldr	r2, [pc, #88]	; (800e16c <tcpip_init+0x70>)
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e116:	2106      	movs	r1, #6
 800e118:	4815      	ldr	r0, [pc, #84]	; (800e170 <tcpip_init+0x74>)
 800e11a:	f00c fa23 	bl	801a564 <sys_mbox_new>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d006      	beq.n	800e132 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e124:	4b13      	ldr	r3, [pc, #76]	; (800e174 <tcpip_init+0x78>)
 800e126:	f240 2261 	movw	r2, #609	; 0x261
 800e12a:	4913      	ldr	r1, [pc, #76]	; (800e178 <tcpip_init+0x7c>)
 800e12c:	4813      	ldr	r0, [pc, #76]	; (800e17c <tcpip_init+0x80>)
 800e12e:	f00d f86b 	bl	801b208 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e132:	4813      	ldr	r0, [pc, #76]	; (800e180 <tcpip_init+0x84>)
 800e134:	f00c fab0 	bl	801a698 <sys_mutex_new>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d006      	beq.n	800e14c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e13e:	4b0d      	ldr	r3, [pc, #52]	; (800e174 <tcpip_init+0x78>)
 800e140:	f240 2265 	movw	r2, #613	; 0x265
 800e144:	490f      	ldr	r1, [pc, #60]	; (800e184 <tcpip_init+0x88>)
 800e146:	480d      	ldr	r0, [pc, #52]	; (800e17c <tcpip_init+0x80>)
 800e148:	f00d f85e 	bl	801b208 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e14c:	2300      	movs	r3, #0
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e154:	2200      	movs	r2, #0
 800e156:	490c      	ldr	r1, [pc, #48]	; (800e188 <tcpip_init+0x8c>)
 800e158:	480c      	ldr	r0, [pc, #48]	; (800e18c <tcpip_init+0x90>)
 800e15a:	f00c fad5 	bl	801a708 <sys_thread_new>
}
 800e15e:	bf00      	nop
 800e160:	3708      	adds	r7, #8
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	2000e28c 	.word	0x2000e28c
 800e16c:	2000e290 	.word	0x2000e290
 800e170:	2000e294 	.word	0x2000e294
 800e174:	0801d214 	.word	0x0801d214
 800e178:	0801d29c 	.word	0x0801d29c
 800e17c:	0801d264 	.word	0x0801d264
 800e180:	2000e298 	.word	0x2000e298
 800e184:	0801d2c0 	.word	0x0801d2c0
 800e188:	0800deb9 	.word	0x0800deb9
 800e18c:	0801d2e4 	.word	0x0801d2e4

0800e190 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	88db      	ldrh	r3, [r3, #6]
 800e19c:	3301      	adds	r3, #1
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	88db      	ldrh	r3, [r3, #6]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d105      	bne.n	800e1b8 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	88db      	ldrh	r3, [r3, #6]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	88db      	ldrh	r3, [r3, #6]
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	370c      	adds	r7, #12
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	881b      	ldrh	r3, [r3, #0]
 800e1d8:	461a      	mov	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4413      	add	r3, r2
 800e1de:	78fa      	ldrb	r2, [r7, #3]
 800e1e0:	711a      	strb	r2, [r3, #4]
  rb->put++;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	881b      	ldrh	r3, [r3, #0]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	881b      	ldrh	r3, [r3, #0]
 800e1f2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d902      	bls.n	800e200 <mqtt_ringbuf_put+0x38>
    rb->put = 0;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	801a      	strh	r2, [r3, #0]
  }
}
 800e200:	bf00      	nop
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr

0800e20c <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	885b      	ldrh	r3, [r3, #2]
 800e218:	461a      	mov	r2, r3
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	4413      	add	r3, r2
 800e21e:	3304      	adds	r3, #4
}
 800e220:	4618      	mov	r0, r3
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	460b      	mov	r3, r1
 800e236:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 800e238:	887b      	ldrh	r3, [r7, #2]
 800e23a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e23e:	4293      	cmp	r3, r2
 800e240:	d905      	bls.n	800e24e <mqtt_ringbuf_advance_get_idx+0x22>
 800e242:	4b0f      	ldr	r3, [pc, #60]	; (800e280 <mqtt_ringbuf_advance_get_idx+0x54>)
 800e244:	22cb      	movs	r2, #203	; 0xcb
 800e246:	490f      	ldr	r1, [pc, #60]	; (800e284 <mqtt_ringbuf_advance_get_idx+0x58>)
 800e248:	480f      	ldr	r0, [pc, #60]	; (800e288 <mqtt_ringbuf_advance_get_idx+0x5c>)
 800e24a:	f00c ffdd 	bl	801b208 <iprintf>

  rb->get += len;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	885a      	ldrh	r2, [r3, #2]
 800e252:	887b      	ldrh	r3, [r7, #2]
 800e254:	4413      	add	r3, r2
 800e256:	b29a      	uxth	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	885b      	ldrh	r3, [r3, #2]
 800e260:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e264:	4293      	cmp	r3, r2
 800e266:	d906      	bls.n	800e276 <mqtt_ringbuf_advance_get_idx+0x4a>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	885a      	ldrh	r2, [r3, #2]
 800e26c:	4b07      	ldr	r3, [pc, #28]	; (800e28c <mqtt_ringbuf_advance_get_idx+0x60>)
 800e26e:	4413      	add	r3, r2
 800e270:	b29a      	uxth	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	805a      	strh	r2, [r3, #2]
  }
}
 800e276:	bf00      	nop
 800e278:	3708      	adds	r7, #8
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	0801d2f4 	.word	0x0801d2f4
 800e284:	0801d32c 	.word	0x0801d32c
 800e288:	0801d36c 	.word	0x0801d36c
 800e28c:	ffffb1e0 	.word	0xffffb1e0

0800e290 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 800e290:	b480      	push	{r7}
 800e292:	b085      	sub	sp, #20
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	881b      	ldrh	r3, [r3, #0]
 800e29c:	461a      	mov	r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	885b      	ldrh	r3, [r3, #2]
 800e2a2:	1ad3      	subs	r3, r2, r3
 800e2a4:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2ac:	d304      	bcc.n	800e2b8 <mqtt_ringbuf_len+0x28>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e2b4:	4413      	add	r3, r2
 800e2b6:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	b29b      	uxth	r3, r3
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3714      	adds	r7, #20
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 800e2c8:	b590      	push	{r4, r7, lr}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f7ff ffda 	bl	800e290 <mqtt_ringbuf_len>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	461a      	mov	r2, r3
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	885b      	ldrh	r3, [r3, #2]
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e2ea:	1a5b      	subs	r3, r3, r1
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	da04      	bge.n	800e2fa <mqtt_output_send+0x32>
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7ff ffcd 	bl	800e290 <mqtt_ringbuf_len>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	e005      	b.n	800e306 <mqtt_output_send+0x3e>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	885a      	ldrh	r2, [r3, #2]
 800e2fe:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e302:	1a9b      	subs	r3, r3, r2
 800e304:	b29b      	uxth	r3, r3
 800e306:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e30e:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d105      	bne.n	800e322 <mqtt_output_send+0x5a>
 800e316:	4b49      	ldr	r3, [pc, #292]	; (800e43c <mqtt_output_send+0x174>)
 800e318:	22f0      	movs	r2, #240	; 0xf0
 800e31a:	4949      	ldr	r1, [pc, #292]	; (800e440 <mqtt_output_send+0x178>)
 800e31c:	4849      	ldr	r0, [pc, #292]	; (800e444 <mqtt_output_send+0x17c>)
 800e31e:	f00c ff73 	bl	801b208 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 800e322:	89bb      	ldrh	r3, [r7, #12]
 800e324:	2b00      	cmp	r3, #0
 800e326:	f000 8085 	beq.w	800e434 <mqtt_output_send+0x16c>
 800e32a:	897b      	ldrh	r3, [r7, #10]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	f000 8081 	beq.w	800e434 <mqtt_output_send+0x16c>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 800e332:	89ba      	ldrh	r2, [r7, #12]
 800e334:	897b      	ldrh	r3, [r7, #10]
 800e336:	429a      	cmp	r2, r3
 800e338:	d90d      	bls.n	800e356 <mqtt_output_send+0x8e>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 800e33a:	897b      	ldrh	r3, [r7, #10]
 800e33c:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7ff ffa6 	bl	800e290 <mqtt_ringbuf_len>
 800e344:	4603      	mov	r3, r0
 800e346:	461a      	mov	r2, r3
 800e348:	897b      	ldrh	r3, [r7, #10]
 800e34a:	4293      	cmp	r3, r2
 800e34c:	bf34      	ite	cc
 800e34e:	2301      	movcc	r3, #1
 800e350:	2300      	movcs	r3, #0
 800e352:	b2db      	uxtb	r3, r3
 800e354:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f7ff ff58 	bl	800e20c <mqtt_ringbuf_get_ptr>
 800e35c:	4601      	mov	r1, r0
 800e35e:	7bbb      	ldrb	r3, [r7, #14]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d001      	beq.n	800e368 <mqtt_output_send+0xa0>
 800e364:	2303      	movs	r3, #3
 800e366:	e000      	b.n	800e36a <mqtt_output_send+0xa2>
 800e368:	2301      	movs	r3, #1
 800e36a:	89ba      	ldrh	r2, [r7, #12]
 800e36c:	6838      	ldr	r0, [r7, #0]
 800e36e:	f007 fd65 	bl	8015e3c <tcp_write>
 800e372:	4603      	mov	r3, r0
 800e374:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 800e376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d14d      	bne.n	800e41a <mqtt_output_send+0x152>
 800e37e:	7bbb      	ldrb	r3, [r7, #14]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d04a      	beq.n	800e41a <mqtt_output_send+0x152>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800e384:	89bb      	ldrh	r3, [r7, #12]
 800e386:	4619      	mov	r1, r3
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f7ff ff4f 	bl	800e22c <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e394:	461c      	mov	r4, r3
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f7ff ff7a 	bl	800e290 <mqtt_ringbuf_len>
 800e39c:	4603      	mov	r3, r0
 800e39e:	461a      	mov	r2, r3
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	885b      	ldrh	r3, [r3, #2]
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e3aa:	1a5b      	subs	r3, r3, r1
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	da04      	bge.n	800e3ba <mqtt_output_send+0xf2>
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f7ff ff6d 	bl	800e290 <mqtt_ringbuf_len>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	e005      	b.n	800e3c6 <mqtt_output_send+0xfe>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	885b      	ldrh	r3, [r3, #2]
 800e3be:	461a      	mov	r2, r3
 800e3c0:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e3c4:	1a9b      	subs	r3, r3, r2
 800e3c6:	42a3      	cmp	r3, r4
 800e3c8:	dd03      	ble.n	800e3d2 <mqtt_output_send+0x10a>
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e3d0:	e017      	b.n	800e402 <mqtt_output_send+0x13a>
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f7ff ff5c 	bl	800e290 <mqtt_ringbuf_len>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	461a      	mov	r2, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	885b      	ldrh	r3, [r3, #2]
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e3e6:	1a5b      	subs	r3, r3, r1
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	da04      	bge.n	800e3f6 <mqtt_output_send+0x12e>
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7ff ff4f 	bl	800e290 <mqtt_ringbuf_len>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	e005      	b.n	800e402 <mqtt_output_send+0x13a>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	885a      	ldrh	r2, [r3, #2]
 800e3fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e3fe:	1a9b      	subs	r3, r3, r2
 800e400:	b29b      	uxth	r3, r3
 800e402:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f7ff ff01 	bl	800e20c <mqtt_ringbuf_get_ptr>
 800e40a:	4601      	mov	r1, r0
 800e40c:	89ba      	ldrh	r2, [r7, #12]
 800e40e:	2301      	movs	r3, #1
 800e410:	6838      	ldr	r0, [r7, #0]
 800e412:	f007 fd13 	bl	8015e3c <tcp_write>
 800e416:	4603      	mov	r3, r0
 800e418:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 800e41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d109      	bne.n	800e436 <mqtt_output_send+0x16e>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800e422:	89bb      	ldrh	r3, [r7, #12]
 800e424:	4619      	mov	r1, r3
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7ff ff00 	bl	800e22c <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 800e42c:	6838      	ldr	r0, [r7, #0]
 800e42e:	f008 faef 	bl	8016a10 <tcp_output>
 800e432:	e000      	b.n	800e436 <mqtt_output_send+0x16e>
    return;
 800e434:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 800e436:	3714      	adds	r7, #20
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd90      	pop	{r4, r7, pc}
 800e43c:	0801d2f4 	.word	0x0801d2f4
 800e440:	0801d394 	.word	0x0801d394
 800e444:	0801d36c 	.word	0x0801d36c

0800e448 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b086      	sub	sp, #24
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	603b      	str	r3, [r7, #0]
 800e454:	4613      	mov	r3, r2
 800e456:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 800e458:	2300      	movs	r3, #0
 800e45a:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d106      	bne.n	800e470 <mqtt_create_request+0x28>
 800e462:	4b19      	ldr	r3, [pc, #100]	; (800e4c8 <mqtt_create_request+0x80>)
 800e464:	f240 1223 	movw	r2, #291	; 0x123
 800e468:	4918      	ldr	r1, [pc, #96]	; (800e4cc <mqtt_create_request+0x84>)
 800e46a:	4819      	ldr	r0, [pc, #100]	; (800e4d0 <mqtt_create_request+0x88>)
 800e46c:	f00c fecc 	bl	801b208 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800e470:	2300      	movs	r3, #0
 800e472:	74fb      	strb	r3, [r7, #19]
 800e474:	e01f      	b.n	800e4b6 <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 800e476:	7cfb      	ldrb	r3, [r7, #19]
 800e478:	011b      	lsls	r3, r3, #4
 800e47a:	68fa      	ldr	r2, [r7, #12]
 800e47c:	4413      	add	r3, r2
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	7cfb      	ldrb	r3, [r7, #19]
 800e482:	011b      	lsls	r3, r3, #4
 800e484:	68f9      	ldr	r1, [r7, #12]
 800e486:	440b      	add	r3, r1
 800e488:	429a      	cmp	r2, r3
 800e48a:	d111      	bne.n	800e4b0 <mqtt_create_request+0x68>
      r = &r_objs[n];
 800e48c:	7cfb      	ldrb	r3, [r7, #19]
 800e48e:	011b      	lsls	r3, r3, #4
 800e490:	68fa      	ldr	r2, [r7, #12]
 800e492:	4413      	add	r3, r2
 800e494:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	2200      	movs	r2, #0
 800e49a:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	6a3a      	ldr	r2, [r7, #32]
 800e4a6:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	88fa      	ldrh	r2, [r7, #6]
 800e4ac:	819a      	strh	r2, [r3, #12]
      break;
 800e4ae:	e006      	b.n	800e4be <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 800e4b0:	7cfb      	ldrb	r3, [r7, #19]
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	74fb      	strb	r3, [r7, #19]
 800e4b6:	7cfb      	ldrb	r3, [r7, #19]
 800e4b8:	68ba      	ldr	r2, [r7, #8]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d8db      	bhi.n	800e476 <mqtt_create_request+0x2e>
    }
  }
  return r;
 800e4be:	697b      	ldr	r3, [r7, #20]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3718      	adds	r7, #24
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	0801d2f4 	.word	0x0801d2f4
 800e4cc:	0801d3b4 	.word	0x0801d3b4
 800e4d0:	0801d36c 	.word	0x0801d36c

0800e4d4 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b086      	sub	sp, #24
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d106      	bne.n	800e4fa <mqtt_append_request+0x26>
 800e4ec:	4b1b      	ldr	r3, [pc, #108]	; (800e55c <mqtt_append_request+0x88>)
 800e4ee:	f240 123f 	movw	r2, #319	; 0x13f
 800e4f2:	491b      	ldr	r1, [pc, #108]	; (800e560 <mqtt_append_request+0x8c>)
 800e4f4:	481b      	ldr	r0, [pc, #108]	; (800e564 <mqtt_append_request+0x90>)
 800e4f6:	f00c fe87 	bl	801b208 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	60fb      	str	r3, [r7, #12]
 800e500:	e00a      	b.n	800e518 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	89da      	ldrh	r2, [r3, #14]
 800e506:	8a7b      	ldrh	r3, [r7, #18]
 800e508:	4413      	add	r3, r2
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	827b      	strh	r3, [r7, #18]
    head = iter;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	60fb      	str	r3, [r7, #12]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1f1      	bne.n	800e502 <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 800e51e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e522:	2b1e      	cmp	r3, #30
 800e524:	dd06      	ble.n	800e534 <mqtt_append_request+0x60>
 800e526:	4b0d      	ldr	r3, [pc, #52]	; (800e55c <mqtt_append_request+0x88>)
 800e528:	f240 1247 	movw	r2, #327	; 0x147
 800e52c:	490e      	ldr	r1, [pc, #56]	; (800e568 <mqtt_append_request+0x94>)
 800e52e:	480d      	ldr	r0, [pc, #52]	; (800e564 <mqtt_append_request+0x90>)
 800e530:	f00c fe6a 	bl	801b208 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 800e534:	8a7b      	ldrh	r3, [r7, #18]
 800e536:	f1c3 031e 	rsb	r3, r3, #30
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d103      	bne.n	800e54e <mqtt_append_request+0x7a>
    *tail = r;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	683a      	ldr	r2, [r7, #0]
 800e54a:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 800e54c:	e002      	b.n	800e554 <mqtt_append_request+0x80>
    head->next = r;
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	683a      	ldr	r2, [r7, #0]
 800e552:	601a      	str	r2, [r3, #0]
}
 800e554:	bf00      	nop
 800e556:	3718      	adds	r7, #24
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	0801d2f4 	.word	0x0801d2f4
 800e560:	0801d3d8 	.word	0x0801d3d8
 800e564:	0801d36c 	.word	0x0801d36c
 800e568:	0801d3fc 	.word	0x0801d3fc

0800e56c <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d002      	beq.n	800e580 <mqtt_delete_request+0x14>
    r->next = r;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	687a      	ldr	r2, [r7, #4]
 800e57e:	601a      	str	r2, [r3, #0]
  }
}
 800e580:	bf00      	nop
 800e582:	370c      	adds	r7, #12
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr

0800e58c <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	460b      	mov	r3, r1
 800e596:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800e598:	2300      	movs	r3, #0
 800e59a:	60fb      	str	r3, [r7, #12]
 800e59c:	2300      	movs	r3, #0
 800e59e:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d106      	bne.n	800e5b4 <mqtt_take_request+0x28>
 800e5a6:	4b1f      	ldr	r3, [pc, #124]	; (800e624 <mqtt_take_request+0x98>)
 800e5a8:	f240 1267 	movw	r2, #359	; 0x167
 800e5ac:	491e      	ldr	r1, [pc, #120]	; (800e628 <mqtt_take_request+0x9c>)
 800e5ae:	481f      	ldr	r0, [pc, #124]	; (800e62c <mqtt_take_request+0xa0>)
 800e5b0:	f00c fe2a 	bl	801b208 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	60fb      	str	r3, [r7, #12]
 800e5ba:	e009      	b.n	800e5d0 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	899b      	ldrh	r3, [r3, #12]
 800e5c0:	887a      	ldrh	r2, [r7, #2]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d008      	beq.n	800e5d8 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	60fb      	str	r3, [r7, #12]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d1f2      	bne.n	800e5bc <mqtt_take_request+0x30>
 800e5d6:	e000      	b.n	800e5da <mqtt_take_request+0x4e>
      break;
 800e5d8:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d01c      	beq.n	800e61a <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d104      	bne.n	800e5f0 <mqtt_take_request+0x64>
      *tail = iter->next;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	601a      	str	r2, [r3, #0]
 800e5ee:	e003      	b.n	800e5f8 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d009      	beq.n	800e614 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	89d9      	ldrh	r1, [r3, #14]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	89da      	ldrh	r2, [r3, #14]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	440a      	add	r2, r1
 800e610:	b292      	uxth	r2, r2
 800e612:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2200      	movs	r2, #0
 800e618:	601a      	str	r2, [r3, #0]
  }
  return iter;
 800e61a:	68fb      	ldr	r3, [r7, #12]
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}
 800e624:	0801d2f4 	.word	0x0801d2f4
 800e628:	0801d434 	.word	0x0801d434
 800e62c:	0801d36c 	.word	0x0801d36c

0800e630 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b084      	sub	sp, #16
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	460b      	mov	r3, r1
 800e63a:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d106      	bne.n	800e650 <mqtt_request_time_elapsed+0x20>
 800e642:	4b21      	ldr	r3, [pc, #132]	; (800e6c8 <mqtt_request_time_elapsed+0x98>)
 800e644:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 800e648:	4920      	ldr	r1, [pc, #128]	; (800e6cc <mqtt_request_time_elapsed+0x9c>)
 800e64a:	4821      	ldr	r0, [pc, #132]	; (800e6d0 <mqtt_request_time_elapsed+0xa0>)
 800e64c:	f00c fddc 	bl	801b208 <iprintf>
  r = *tail;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 800e656:	e02c      	b.n	800e6b2 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 800e658:	78fb      	ldrb	r3, [r7, #3]
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	89db      	ldrh	r3, [r3, #14]
 800e660:	429a      	cmp	r2, r3
 800e662:	d31c      	bcc.n	800e69e <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	89db      	ldrh	r3, [r3, #14]
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	78fa      	ldrb	r2, [r7, #3]
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d007      	beq.n	800e690 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	6892      	ldr	r2, [r2, #8]
 800e688:	f06f 0102 	mvn.w	r1, #2
 800e68c:	4610      	mov	r0, r2
 800e68e:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800e690:	68f8      	ldr	r0, [r7, #12]
 800e692:	f7ff ff6b 	bl	800e56c <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	60fb      	str	r3, [r7, #12]
 800e69c:	e009      	b.n	800e6b2 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	89da      	ldrh	r2, [r3, #14]
 800e6a2:	78fb      	ldrb	r3, [r7, #3]
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	1ad3      	subs	r3, r2, r3
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	81da      	strh	r2, [r3, #14]
      t = 0;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 800e6b2:	78fb      	ldrb	r3, [r7, #3]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d002      	beq.n	800e6be <mqtt_request_time_elapsed+0x8e>
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d1cc      	bne.n	800e658 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 800e6be:	bf00      	nop
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	0801d2f4 	.word	0x0801d2f4
 800e6cc:	0801d454 	.word	0x0801d454
 800e6d0:	0801d36c 	.word	0x0801d36c

0800e6d4 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d106      	bne.n	800e6f0 <mqtt_clear_requests+0x1c>
 800e6e2:	4b0e      	ldr	r3, [pc, #56]	; (800e71c <mqtt_clear_requests+0x48>)
 800e6e4:	f240 12a7 	movw	r2, #423	; 0x1a7
 800e6e8:	490d      	ldr	r1, [pc, #52]	; (800e720 <mqtt_clear_requests+0x4c>)
 800e6ea:	480e      	ldr	r0, [pc, #56]	; (800e724 <mqtt_clear_requests+0x50>)
 800e6ec:	f00c fd8c 	bl	801b208 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	60fb      	str	r3, [r7, #12]
 800e6f6:	e007      	b.n	800e708 <mqtt_clear_requests+0x34>
    next = iter->next;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 800e6fe:	68f8      	ldr	r0, [r7, #12]
 800e700:	f7ff ff34 	bl	800e56c <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	60fb      	str	r3, [r7, #12]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d1f4      	bne.n	800e6f8 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2200      	movs	r2, #0
 800e712:	601a      	str	r2, [r3, #0]
}
 800e714:	bf00      	nop
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	0801d2f4 	.word	0x0801d2f4
 800e720:	0801d47c 	.word	0x0801d47c
 800e724:	0801d36c 	.word	0x0801d36c

0800e728 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d106      	bne.n	800e746 <mqtt_init_requests+0x1e>
 800e738:	4b0f      	ldr	r3, [pc, #60]	; (800e778 <mqtt_init_requests+0x50>)
 800e73a:	f240 12b7 	movw	r2, #439	; 0x1b7
 800e73e:	490f      	ldr	r1, [pc, #60]	; (800e77c <mqtt_init_requests+0x54>)
 800e740:	480f      	ldr	r0, [pc, #60]	; (800e780 <mqtt_init_requests+0x58>)
 800e742:	f00c fd61 	bl	801b208 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800e746:	2300      	movs	r3, #0
 800e748:	73fb      	strb	r3, [r7, #15]
 800e74a:	e00b      	b.n	800e764 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 800e74c:	7bfb      	ldrb	r3, [r7, #15]
 800e74e:	011a      	lsls	r2, r3, #4
 800e750:	7bfb      	ldrb	r3, [r7, #15]
 800e752:	011b      	lsls	r3, r3, #4
 800e754:	6879      	ldr	r1, [r7, #4]
 800e756:	440b      	add	r3, r1
 800e758:	6879      	ldr	r1, [r7, #4]
 800e75a:	440a      	add	r2, r1
 800e75c:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 800e75e:	7bfb      	ldrb	r3, [r7, #15]
 800e760:	3301      	adds	r3, #1
 800e762:	73fb      	strb	r3, [r7, #15]
 800e764:	7bfb      	ldrb	r3, [r7, #15]
 800e766:	683a      	ldr	r2, [r7, #0]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d8ef      	bhi.n	800e74c <mqtt_init_requests+0x24>
  }
}
 800e76c:	bf00      	nop
 800e76e:	bf00      	nop
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	0801d2f4 	.word	0x0801d2f4
 800e77c:	0801d4a0 	.word	0x0801d4a0
 800e780:	0801d36c 	.word	0x0801d36c

0800e784 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	460b      	mov	r3, r1
 800e78e:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 800e790:	78fb      	ldrb	r3, [r7, #3]
 800e792:	4619      	mov	r1, r3
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f7ff fd17 	bl	800e1c8 <mqtt_ringbuf_put>
}
 800e79a:	bf00      	nop
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}

0800e7a2 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 800e7a2:	b580      	push	{r7, lr}
 800e7a4:	b082      	sub	sp, #8
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 800e7ae:	887b      	ldrh	r3, [r7, #2]
 800e7b0:	0a1b      	lsrs	r3, r3, #8
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7ff fd05 	bl	800e1c8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 800e7be:	887b      	ldrh	r3, [r7, #2]
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f7ff fcff 	bl	800e1c8 <mqtt_ringbuf_put>
}
 800e7ca:	bf00      	nop
 800e7cc:	3708      	adds	r7, #8
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}

0800e7d2 <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 800e7d2:	b580      	push	{r7, lr}
 800e7d4:	b086      	sub	sp, #24
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	60f8      	str	r0, [r7, #12]
 800e7da:	60b9      	str	r1, [r7, #8]
 800e7dc:	4613      	mov	r3, r2
 800e7de:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	82fb      	strh	r3, [r7, #22]
 800e7e4:	e00a      	b.n	800e7fc <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 800e7e6:	8afb      	ldrh	r3, [r7, #22]
 800e7e8:	68ba      	ldr	r2, [r7, #8]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	68f8      	ldr	r0, [r7, #12]
 800e7f2:	f7ff fce9 	bl	800e1c8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800e7f6:	8afb      	ldrh	r3, [r7, #22]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	82fb      	strh	r3, [r7, #22]
 800e7fc:	8afa      	ldrh	r2, [r7, #22]
 800e7fe:	88fb      	ldrh	r3, [r7, #6]
 800e800:	429a      	cmp	r2, r3
 800e802:	d3f0      	bcc.n	800e7e6 <mqtt_output_append_buf+0x14>
  }
}
 800e804:	bf00      	nop
 800e806:	bf00      	nop
 800e808:	3718      	adds	r7, #24
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 800e80e:	b580      	push	{r7, lr}
 800e810:	b086      	sub	sp, #24
 800e812:	af00      	add	r7, sp, #0
 800e814:	60f8      	str	r0, [r7, #12]
 800e816:	60b9      	str	r1, [r7, #8]
 800e818:	4613      	mov	r3, r2
 800e81a:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 800e81c:	88fb      	ldrh	r3, [r7, #6]
 800e81e:	0a1b      	lsrs	r3, r3, #8
 800e820:	b29b      	uxth	r3, r3
 800e822:	b2db      	uxtb	r3, r3
 800e824:	4619      	mov	r1, r3
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f7ff fcce 	bl	800e1c8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 800e82c:	88fb      	ldrh	r3, [r7, #6]
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	4619      	mov	r1, r3
 800e832:	68f8      	ldr	r0, [r7, #12]
 800e834:	f7ff fcc8 	bl	800e1c8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800e838:	2300      	movs	r3, #0
 800e83a:	82fb      	strh	r3, [r7, #22]
 800e83c:	e00a      	b.n	800e854 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 800e83e:	8afb      	ldrh	r3, [r7, #22]
 800e840:	68ba      	ldr	r2, [r7, #8]
 800e842:	4413      	add	r3, r2
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	4619      	mov	r1, r3
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f7ff fcbd 	bl	800e1c8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800e84e:	8afb      	ldrh	r3, [r7, #22]
 800e850:	3301      	adds	r3, #1
 800e852:	82fb      	strh	r3, [r7, #22]
 800e854:	8afa      	ldrh	r2, [r7, #22]
 800e856:	88fb      	ldrh	r3, [r7, #6]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d3f0      	bcc.n	800e83e <mqtt_output_append_string+0x30>
  }
}
 800e85c:	bf00      	nop
 800e85e:	bf00      	nop
 800e860:	3718      	adds	r7, #24
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}

0800e866 <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 800e866:	b580      	push	{r7, lr}
 800e868:	b082      	sub	sp, #8
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
 800e86e:	4608      	mov	r0, r1
 800e870:	4611      	mov	r1, r2
 800e872:	461a      	mov	r2, r3
 800e874:	4603      	mov	r3, r0
 800e876:	70fb      	strb	r3, [r7, #3]
 800e878:	460b      	mov	r3, r1
 800e87a:	70bb      	strb	r3, [r7, #2]
 800e87c:	4613      	mov	r3, r2
 800e87e:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 800e880:	78fb      	ldrb	r3, [r7, #3]
 800e882:	011b      	lsls	r3, r3, #4
 800e884:	b25a      	sxtb	r2, r3
 800e886:	78bb      	ldrb	r3, [r7, #2]
 800e888:	00db      	lsls	r3, r3, #3
 800e88a:	b25b      	sxtb	r3, r3
 800e88c:	f003 0308 	and.w	r3, r3, #8
 800e890:	b25b      	sxtb	r3, r3
 800e892:	4313      	orrs	r3, r2
 800e894:	b25a      	sxtb	r2, r3
 800e896:	787b      	ldrb	r3, [r7, #1]
 800e898:	005b      	lsls	r3, r3, #1
 800e89a:	b25b      	sxtb	r3, r3
 800e89c:	f003 0306 	and.w	r3, r3, #6
 800e8a0:	b25b      	sxtb	r3, r3
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	b25a      	sxtb	r2, r3
 800e8a6:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800e8aa:	f003 0301 	and.w	r3, r3, #1
 800e8ae:	b25b      	sxtb	r3, r3
 800e8b0:	4313      	orrs	r3, r2
 800e8b2:	b25b      	sxtb	r3, r3
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7ff ff63 	bl	800e784 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800e8be:	8abb      	ldrh	r3, [r7, #20]
 800e8c0:	b25b      	sxtb	r3, r3
 800e8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8c6:	b25b      	sxtb	r3, r3
 800e8c8:	8aba      	ldrh	r2, [r7, #20]
 800e8ca:	2a7f      	cmp	r2, #127	; 0x7f
 800e8cc:	d902      	bls.n	800e8d4 <mqtt_output_append_fixed_header+0x6e>
 800e8ce:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800e8d2:	e000      	b.n	800e8d6 <mqtt_output_append_fixed_header+0x70>
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	b25b      	sxtb	r3, r3
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	4619      	mov	r1, r3
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f7ff ff50 	bl	800e784 <mqtt_output_append_u8>
    r_length >>= 7;
 800e8e4:	8abb      	ldrh	r3, [r7, #20]
 800e8e6:	09db      	lsrs	r3, r3, #7
 800e8e8:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 800e8ea:	8abb      	ldrh	r3, [r7, #20]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d1e6      	bne.n	800e8be <mqtt_output_append_fixed_header+0x58>
}
 800e8f0:	bf00      	nop
 800e8f2:	bf00      	nop
 800e8f4:	3708      	adds	r7, #8
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
	...

0800e8fc <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 800e8fc:	b590      	push	{r4, r7, lr}
 800e8fe:	b085      	sub	sp, #20
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	460b      	mov	r3, r1
 800e906:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 800e908:	887b      	ldrh	r3, [r7, #2]
 800e90a:	3301      	adds	r3, #1
 800e90c:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d106      	bne.n	800e922 <mqtt_output_check_space+0x26>
 800e914:	4b10      	ldr	r3, [pc, #64]	; (800e958 <mqtt_output_check_space+0x5c>)
 800e916:	f240 2207 	movw	r2, #519	; 0x207
 800e91a:	4910      	ldr	r1, [pc, #64]	; (800e95c <mqtt_output_check_space+0x60>)
 800e91c:	4810      	ldr	r0, [pc, #64]	; (800e960 <mqtt_output_check_space+0x64>)
 800e91e:	f00c fc73 	bl	801b208 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 800e922:	89fb      	ldrh	r3, [r7, #14]
 800e924:	3301      	adds	r3, #1
 800e926:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 800e928:	887b      	ldrh	r3, [r7, #2]
 800e92a:	09db      	lsrs	r3, r3, #7
 800e92c:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 800e92e:	887b      	ldrh	r3, [r7, #2]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d1f6      	bne.n	800e922 <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 800e934:	89fc      	ldrh	r4, [r7, #14]
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f7ff fcaa 	bl	800e290 <mqtt_ringbuf_len>
 800e93c:	4603      	mov	r3, r0
 800e93e:	461a      	mov	r2, r3
 800e940:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e944:	1a9b      	subs	r3, r3, r2
 800e946:	429c      	cmp	r4, r3
 800e948:	bfd4      	ite	le
 800e94a:	2301      	movle	r3, #1
 800e94c:	2300      	movgt	r3, #0
 800e94e:	b2db      	uxtb	r3, r3
}
 800e950:	4618      	mov	r0, r3
 800e952:	3714      	adds	r7, #20
 800e954:	46bd      	mov	sp, r7
 800e956:	bd90      	pop	{r4, r7, pc}
 800e958:	0801d2f4 	.word	0x0801d2f4
 800e95c:	0801d4c4 	.word	0x0801d4c4
 800e960:	0801d36c 	.word	0x0801d36c

0800e964 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	460b      	mov	r3, r1
 800e96e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d106      	bne.n	800e984 <mqtt_close+0x20>
 800e976:	4b27      	ldr	r3, [pc, #156]	; (800ea14 <mqtt_close+0xb0>)
 800e978:	f240 221b 	movw	r2, #539	; 0x21b
 800e97c:	4926      	ldr	r1, [pc, #152]	; (800ea18 <mqtt_close+0xb4>)
 800e97e:	4827      	ldr	r0, [pc, #156]	; (800ea1c <mqtt_close+0xb8>)
 800e980:	f00c fc42 	bl	801b208 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d024      	beq.n	800e9d6 <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	2100      	movs	r1, #0
 800e992:	4618      	mov	r0, r3
 800e994:	f004 fb3a 	bl	801300c <tcp_recv>
    altcp_err(client->conn,  NULL);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	68db      	ldr	r3, [r3, #12]
 800e99c:	2100      	movs	r1, #0
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f004 fb78 	bl	8013094 <tcp_err>
    altcp_sent(client->conn, NULL);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f004 fb50 	bl	8013050 <tcp_sent>
    res = altcp_close(client->conn);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	68db      	ldr	r3, [r3, #12]
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f003 f94d 	bl	8011c54 <tcp_close>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 800e9be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d004      	beq.n	800e9d0 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f003 fa2c 	bl	8011e28 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	3318      	adds	r3, #24
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7ff fe7a 	bl	800e6d4 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 800e9e0:	6879      	ldr	r1, [r7, #4]
 800e9e2:	480f      	ldr	r0, [pc, #60]	; (800ea20 <mqtt_close+0xbc>)
 800e9e4:	f009 f892 	bl	8017b0c <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	7a9b      	ldrb	r3, [r3, #10]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d00d      	beq.n	800ea0c <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	695b      	ldr	r3, [r3, #20]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d006      	beq.n	800ea0c <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	695b      	ldr	r3, [r3, #20]
 800ea02:	687a      	ldr	r2, [r7, #4]
 800ea04:	6911      	ldr	r1, [r2, #16]
 800ea06:	887a      	ldrh	r2, [r7, #2]
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	4798      	blx	r3
    }
  }
}
 800ea0c:	bf00      	nop
 800ea0e:	3710      	adds	r7, #16
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	0801d2f4 	.word	0x0801d2f4
 800ea18:	0801d4e8 	.word	0x0801d4e8
 800ea1c:	0801d36c 	.word	0x0801d36c
 800ea20:	0800ea25 	.word	0x0800ea25

0800ea24 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b086      	sub	sp, #24
 800ea28:	af02      	add	r7, sp, #8
 800ea2a:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d106      	bne.n	800ea48 <mqtt_cyclic_timer+0x24>
 800ea3a:	4b42      	ldr	r3, [pc, #264]	; (800eb44 <mqtt_cyclic_timer+0x120>)
 800ea3c:	f44f 7211 	mov.w	r2, #580	; 0x244
 800ea40:	4941      	ldr	r1, [pc, #260]	; (800eb48 <mqtt_cyclic_timer+0x124>)
 800ea42:	4842      	ldr	r0, [pc, #264]	; (800eb4c <mqtt_cyclic_timer+0x128>)
 800ea44:	f00c fbe0 	bl	801b208 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	7a9b      	ldrb	r3, [r3, #10]
 800ea4c:	2b02      	cmp	r3, #2
 800ea4e:	d115      	bne.n	800ea7c <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	881b      	ldrh	r3, [r3, #0]
 800ea54:	3301      	adds	r3, #1
 800ea56:	b29a      	uxth	r2, r3
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	881b      	ldrh	r3, [r3, #0]
 800ea60:	461a      	mov	r2, r3
 800ea62:	4613      	mov	r3, r2
 800ea64:	009b      	lsls	r3, r3, #2
 800ea66:	4413      	add	r3, r2
 800ea68:	2b63      	cmp	r3, #99	; 0x63
 800ea6a:	dd5e      	ble.n	800eb2a <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800ea6c:	f240 1101 	movw	r1, #257	; 0x101
 800ea70:	68b8      	ldr	r0, [r7, #8]
 800ea72:	f7ff ff77 	bl	800e964 <mqtt_close>
      restart_timer = 0;
 800ea76:	2300      	movs	r3, #0
 800ea78:	73fb      	strb	r3, [r7, #15]
 800ea7a:	e056      	b.n	800eb2a <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	7a9b      	ldrb	r3, [r3, #10]
 800ea80:	2b03      	cmp	r3, #3
 800ea82:	d150      	bne.n	800eb26 <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	3318      	adds	r3, #24
 800ea88:	2105      	movs	r1, #5
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7ff fdd0 	bl	800e630 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	885b      	ldrh	r3, [r3, #2]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d048      	beq.n	800eb2a <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	889b      	ldrh	r3, [r3, #4]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	889b      	ldrh	r3, [r3, #4]
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	4613      	mov	r3, r2
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	441a      	add	r2, r3
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	885b      	ldrh	r3, [r3, #2]
 800eab4:	4619      	mov	r1, r3
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	885b      	ldrh	r3, [r3, #2]
 800eaba:	085b      	lsrs	r3, r3, #1
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	440b      	add	r3, r1
 800eac0:	429a      	cmp	r2, r3
 800eac2:	dd06      	ble.n	800ead2 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800eac4:	f240 1101 	movw	r1, #257	; 0x101
 800eac8:	68b8      	ldr	r0, [r7, #8]
 800eaca:	f7ff ff4b 	bl	800e964 <mqtt_close>
        restart_timer = 0;
 800eace:	2300      	movs	r3, #0
 800ead0:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	881b      	ldrh	r3, [r3, #0]
 800ead6:	461a      	mov	r2, r3
 800ead8:	4613      	mov	r3, r2
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	4413      	add	r3, r2
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	8852      	ldrh	r2, [r2, #2]
 800eae2:	4293      	cmp	r3, r2
 800eae4:	db18      	blt.n	800eb18 <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	33ec      	adds	r3, #236	; 0xec
 800eaea:	2100      	movs	r1, #0
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7ff ff05 	bl	800e8fc <mqtt_output_check_space>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d018      	beq.n	800eb2a <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800eafe:	2300      	movs	r3, #0
 800eb00:	9301      	str	r3, [sp, #4]
 800eb02:	2300      	movs	r3, #0
 800eb04:	9300      	str	r3, [sp, #0]
 800eb06:	2300      	movs	r3, #0
 800eb08:	2200      	movs	r2, #0
 800eb0a:	210c      	movs	r1, #12
 800eb0c:	f7ff feab 	bl	800e866 <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	2200      	movs	r2, #0
 800eb14:	801a      	strh	r2, [r3, #0]
 800eb16:	e008      	b.n	800eb2a <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	881b      	ldrh	r3, [r3, #0]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	b29a      	uxth	r2, r3
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	801a      	strh	r2, [r3, #0]
 800eb24:	e001      	b.n	800eb2a <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800eb26:	2300      	movs	r3, #0
 800eb28:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800eb2a:	7bfb      	ldrb	r3, [r7, #15]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d005      	beq.n	800eb3c <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	4907      	ldr	r1, [pc, #28]	; (800eb50 <mqtt_cyclic_timer+0x12c>)
 800eb34:	f241 3088 	movw	r0, #5000	; 0x1388
 800eb38:	f008 ffc2 	bl	8017ac0 <sys_timeout>
  }
}
 800eb3c:	bf00      	nop
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}
 800eb44:	0801d2f4 	.word	0x0801d2f4
 800eb48:	0801d504 	.word	0x0801d504
 800eb4c:	0801d36c 	.word	0x0801d36c
 800eb50:	0800ea25 	.word	0x0800ea25

0800eb54 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b086      	sub	sp, #24
 800eb58:	af02      	add	r7, sp, #8
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	4608      	mov	r0, r1
 800eb5e:	4611      	mov	r1, r2
 800eb60:	461a      	mov	r2, r3
 800eb62:	4603      	mov	r3, r0
 800eb64:	70fb      	strb	r3, [r7, #3]
 800eb66:	460b      	mov	r3, r1
 800eb68:	803b      	strh	r3, [r7, #0]
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	33ec      	adds	r3, #236	; 0xec
 800eb76:	2102      	movs	r1, #2
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7ff febf 	bl	800e8fc <mqtt_output_check_space>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d01c      	beq.n	800ebbe <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800eb8a:	78bb      	ldrb	r3, [r7, #2]
 800eb8c:	78f9      	ldrb	r1, [r7, #3]
 800eb8e:	2202      	movs	r2, #2
 800eb90:	9201      	str	r2, [sp, #4]
 800eb92:	2200      	movs	r2, #0
 800eb94:	9200      	str	r2, [sp, #0]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f7ff fe65 	bl	800e866 <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	33ec      	adds	r3, #236	; 0xec
 800eba0:	883a      	ldrh	r2, [r7, #0]
 800eba2:	4611      	mov	r1, r2
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7ff fdfc 	bl	800e7a2 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	4610      	mov	r0, r2
 800ebb8:	f7ff fb86 	bl	800e2c8 <mqtt_output_send>
 800ebbc:	e001      	b.n	800ebc2 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 800ebbe:	23ff      	movs	r3, #255	; 0xff
 800ebc0:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800ebc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3710      	adds	r7, #16
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 800ebce:	b580      	push	{r7, lr}
 800ebd0:	b082      	sub	sp, #8
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d00c      	beq.n	800ebfc <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	6890      	ldr	r0, [r2, #8]
 800ebea:	78fa      	ldrb	r2, [r7, #3]
 800ebec:	2a02      	cmp	r2, #2
 800ebee:	d801      	bhi.n	800ebf4 <mqtt_incomming_suback+0x26>
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	e001      	b.n	800ebf8 <mqtt_incomming_suback+0x2a>
 800ebf4:	f06f 020c 	mvn.w	r2, #12
 800ebf8:	4611      	mov	r1, r2
 800ebfa:	4798      	blx	r3
  }
}
 800ebfc:	bf00      	nop
 800ebfe:	3708      	adds	r7, #8
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800ec04:	b590      	push	{r4, r7, lr}
 800ec06:	b08f      	sub	sp, #60	; 0x3c
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	607b      	str	r3, [r7, #4]
 800ec0e:	460b      	mov	r3, r1
 800ec10:	72fb      	strb	r3, [r7, #11]
 800ec12:	4613      	mov	r3, r2
 800ec14:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800ec16:	2300      	movs	r3, #0
 800ec18:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800ec20:	7afb      	ldrb	r3, [r7, #11]
 800ec22:	4413      	add	r3, r2
 800ec24:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800ec26:	7afb      	ldrb	r3, [r7, #11]
 800ec28:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800ec2c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ec34:	091b      	lsrs	r3, r3, #4
 800ec36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec42:	2b7f      	cmp	r3, #127	; 0x7f
 800ec44:	d906      	bls.n	800ec54 <mqtt_message_received+0x50>
 800ec46:	4b97      	ldr	r3, [pc, #604]	; (800eea4 <mqtt_message_received+0x2a0>)
 800ec48:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ec4c:	4996      	ldr	r1, [pc, #600]	; (800eea8 <mqtt_message_received+0x2a4>)
 800ec4e:	4897      	ldr	r0, [pc, #604]	; (800eeac <mqtt_message_received+0x2a8>)
 800ec50:	f00c fada 	bl	801b208 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 800ec54:	7afa      	ldrb	r2, [r7, #11]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d906      	bls.n	800ec6c <mqtt_message_received+0x68>
 800ec5e:	4b91      	ldr	r3, [pc, #580]	; (800eea4 <mqtt_message_received+0x2a0>)
 800ec60:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800ec64:	4992      	ldr	r1, [pc, #584]	; (800eeb0 <mqtt_message_received+0x2ac>)
 800ec66:	4891      	ldr	r0, [pc, #580]	; (800eeac <mqtt_message_received+0x2a8>)
 800ec68:	f00c face 	bl	801b208 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 800ec6c:	7afa      	ldrb	r2, [r7, #11]
 800ec6e:	893b      	ldrh	r3, [r7, #8]
 800ec70:	4413      	add	r3, r2
 800ec72:	2b80      	cmp	r3, #128	; 0x80
 800ec74:	dd09      	ble.n	800ec8a <mqtt_message_received+0x86>
 800ec76:	4b8b      	ldr	r3, [pc, #556]	; (800eea4 <mqtt_message_received+0x2a0>)
 800ec78:	f240 22ad 	movw	r2, #685	; 0x2ad
 800ec7c:	498d      	ldr	r1, [pc, #564]	; (800eeb4 <mqtt_message_received+0x2b0>)
 800ec7e:	488b      	ldr	r0, [pc, #556]	; (800eeac <mqtt_message_received+0x2a8>)
 800ec80:	f00c fac2 	bl	801b208 <iprintf>
 800ec84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec88:	e16f      	b.n	800ef6a <mqtt_message_received+0x366>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800ec8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec8e:	2b02      	cmp	r3, #2
 800ec90:	d123      	bne.n	800ecda <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	7a9b      	ldrb	r3, [r3, #10]
 800ec96:	2b02      	cmp	r3, #2
 800ec98:	f040 8152 	bne.w	800ef40 <mqtt_message_received+0x33c>
      if (length < 2) {
 800ec9c:	893b      	ldrh	r3, [r7, #8]
 800ec9e:	2b01      	cmp	r3, #1
 800eca0:	f240 8150 	bls.w	800ef44 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800eca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca6:	3301      	adds	r3, #1
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 800ecac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	f040 8146 	bne.w	800ef40 <mqtt_message_received+0x33c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2203      	movs	r2, #3
 800ecbe:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	695b      	ldr	r3, [r3, #20]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	f000 813b 	beq.w	800ef40 <mqtt_message_received+0x33c>
          client->connect_cb(client, client->connect_arg, res);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	695b      	ldr	r3, [r3, #20]
 800ecce:	68fa      	ldr	r2, [r7, #12]
 800ecd0:	6911      	ldr	r1, [r2, #16]
 800ecd2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	4798      	blx	r3
 800ecd8:	e132      	b.n	800ef40 <mqtt_message_received+0x33c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800ecda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecde:	2b0d      	cmp	r3, #13
 800ece0:	f000 812e 	beq.w	800ef40 <mqtt_message_received+0x33c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800ece4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ece8:	2b03      	cmp	r3, #3
 800ecea:	f040 80c0 	bne.w	800ee6e <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 800ecf2:	893b      	ldrh	r3, [r7, #8]
 800ecf4:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ecfc:	105b      	asrs	r3, r3, #1
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	f003 0303 	and.w	r3, r3, #3
 800ed04:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed0a:	2b80      	cmp	r3, #128	; 0x80
 800ed0c:	d87d      	bhi.n	800ee0a <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 800ed0e:	7ffb      	ldrb	r3, [r7, #31]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d001      	beq.n	800ed18 <mqtt_message_received+0x114>
 800ed14:	2302      	movs	r3, #2
 800ed16:	e000      	b.n	800ed1a <mqtt_message_received+0x116>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 800ed1c:	8bbb      	ldrh	r3, [r7, #28]
 800ed1e:	1c5a      	adds	r2, r3, #1
 800ed20:	893b      	ldrh	r3, [r7, #8]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	f280 8110 	bge.w	800ef48 <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 800ed28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800ed2e:	8b7b      	ldrh	r3, [r7, #26]
 800ed30:	021b      	lsls	r3, r3, #8
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed36:	3301      	adds	r3, #1
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	4413      	add	r3, r2
 800ed3e:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 800ed40:	8b7a      	ldrh	r2, [r7, #26]
 800ed42:	8939      	ldrh	r1, [r7, #8]
 800ed44:	8bbb      	ldrh	r3, [r7, #28]
 800ed46:	3302      	adds	r3, #2
 800ed48:	1acb      	subs	r3, r1, r3
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	f300 80fe 	bgt.w	800ef4c <mqtt_message_received+0x348>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 800ed50:	8b7a      	ldrh	r2, [r7, #26]
 800ed52:	8bbb      	ldrh	r3, [r7, #28]
 800ed54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed56:	1acb      	subs	r3, r1, r3
 800ed58:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	f200 80f6 	bhi.w	800ef4c <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 800ed60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed62:	3302      	adds	r3, #2
 800ed64:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800ed66:	8b7b      	ldrh	r3, [r7, #26]
 800ed68:	3302      	adds	r3, #2
 800ed6a:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 800ed6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ed6e:	7ffa      	ldrb	r2, [r7, #31]
 800ed70:	2a00      	cmp	r2, #0
 800ed72:	d001      	beq.n	800ed78 <mqtt_message_received+0x174>
 800ed74:	2202      	movs	r2, #2
 800ed76:	e000      	b.n	800ed7a <mqtt_message_received+0x176>
 800ed78:	2201      	movs	r2, #1
 800ed7a:	4413      	add	r3, r2
 800ed7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	f0c0 80e6 	bcc.w	800ef50 <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800ed84:	7ffb      	ldrb	r3, [r7, #31]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d01a      	beq.n	800edc0 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 800ed8a:	893a      	ldrh	r2, [r7, #8]
 800ed8c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ed8e:	3302      	adds	r3, #2
 800ed90:	429a      	cmp	r2, r3
 800ed92:	f0c0 80df 	bcc.w	800ef54 <mqtt_message_received+0x350>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800ed96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ed98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed9a:	4413      	add	r3, r2
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	021b      	lsls	r3, r3, #8
 800eda2:	b29a      	uxth	r2, r3
 800eda4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800eda6:	3301      	adds	r3, #1
 800eda8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edaa:	440b      	add	r3, r1
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	b29b      	uxth	r3, r3
 800edb0:	4413      	add	r3, r2
 800edb2:	b29a      	uxth	r2, r3
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 800edb8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800edba:	3302      	adds	r3, #2
 800edbc:	863b      	strh	r3, [r7, #48]	; 0x30
 800edbe:	e002      	b.n	800edc6 <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2200      	movs	r2, #0
 800edc4:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800edc6:	8b7b      	ldrh	r3, [r7, #26]
 800edc8:	697a      	ldr	r2, [r7, #20]
 800edca:	4413      	add	r3, r2
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 800edd0:	8b7b      	ldrh	r3, [r7, #26]
 800edd2:	697a      	ldr	r2, [r7, #20]
 800edd4:	4413      	add	r3, r2
 800edd6:	2200      	movs	r2, #0
 800edd8:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 800edda:	893a      	ldrh	r2, [r7, #8]
 800eddc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800edde:	1ad3      	subs	r3, r2, r3
 800ede0:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 800ede2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ede4:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edea:	2b00      	cmp	r3, #0
 800edec:	d008      	beq.n	800ee00 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edf2:	68fa      	ldr	r2, [r7, #12]
 800edf4:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800edf6:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	440a      	add	r2, r1
 800edfc:	6979      	ldr	r1, [r7, #20]
 800edfe:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 800ee00:	8b7b      	ldrh	r3, [r7, #26]
 800ee02:	697a      	ldr	r2, [r7, #20]
 800ee04:	4413      	add	r3, r2
 800ee06:	7cfa      	ldrb	r2, [r7, #19]
 800ee08:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800ee0a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d103      	bne.n	800ee18 <mqtt_message_received+0x214>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f040 8094 	bne.w	800ef40 <mqtt_message_received+0x33c>
      if (length < (size_t)(payload_offset + payload_length)) {
 800ee18:	893b      	ldrh	r3, [r7, #8]
 800ee1a:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800ee1c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ee1e:	440a      	add	r2, r1
 800ee20:	4293      	cmp	r3, r2
 800ee22:	f0c0 8099 	bcc.w	800ef58 <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800ee2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ee30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee32:	18d1      	adds	r1, r2, r3
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	bf0c      	ite	eq
 800ee3a:	2301      	moveq	r3, #1
 800ee3c:	2300      	movne	r3, #0
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ee42:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d17a      	bne.n	800ef40 <mqtt_message_received+0x33c>
 800ee4a:	7ffb      	ldrb	r3, [r7, #31]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d077      	beq.n	800ef40 <mqtt_message_received+0x33c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800ee50:	7ffb      	ldrb	r3, [r7, #31]
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	d101      	bne.n	800ee5a <mqtt_message_received+0x256>
 800ee56:	2304      	movs	r3, #4
 800ee58:	e000      	b.n	800ee5c <mqtt_message_received+0x258>
 800ee5a:	2305      	movs	r3, #5
 800ee5c:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	891a      	ldrh	r2, [r3, #8]
 800ee62:	7cb9      	ldrb	r1, [r7, #18]
 800ee64:	2300      	movs	r3, #0
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f7ff fe74 	bl	800eb54 <pub_ack_rec_rel_response>
 800ee6c:	e068      	b.n	800ef40 <mqtt_message_received+0x33c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 800ee6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	b29b      	uxth	r3, r3
 800ee74:	021b      	lsls	r3, r3, #8
 800ee76:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 800ee78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	b29a      	uxth	r2, r3
 800ee80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee82:	4313      	orrs	r3, r2
 800ee84:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 800ee86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d067      	beq.n	800ef5c <mqtt_message_received+0x358>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 800ee8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee90:	2b05      	cmp	r3, #5
 800ee92:	d111      	bne.n	800eeb8 <mqtt_message_received+0x2b4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800ee94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee96:	2301      	movs	r3, #1
 800ee98:	2106      	movs	r1, #6
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f7ff fe5a 	bl	800eb54 <pub_ack_rec_rel_response>
 800eea0:	e04e      	b.n	800ef40 <mqtt_message_received+0x33c>
 800eea2:	bf00      	nop
 800eea4:	0801d2f4 	.word	0x0801d2f4
 800eea8:	0801d528 	.word	0x0801d528
 800eeac:	0801d36c 	.word	0x0801d36c
 800eeb0:	0801d558 	.word	0x0801d558
 800eeb4:	0801d57c 	.word	0x0801d57c

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800eeb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eebc:	2b06      	cmp	r3, #6
 800eebe:	d106      	bne.n	800eece <mqtt_message_received+0x2ca>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800eec0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eec2:	2300      	movs	r3, #0
 800eec4:	2107      	movs	r1, #7
 800eec6:	68f8      	ldr	r0, [r7, #12]
 800eec8:	f7ff fe44 	bl	800eb54 <pub_ack_rec_rel_response>
 800eecc:	e038      	b.n	800ef40 <mqtt_message_received+0x33c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 800eece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eed2:	2b09      	cmp	r3, #9
 800eed4:	d00b      	beq.n	800eeee <mqtt_message_received+0x2ea>
 800eed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeda:	2b0b      	cmp	r3, #11
 800eedc:	d007      	beq.n	800eeee <mqtt_message_received+0x2ea>
 800eede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eee2:	2b07      	cmp	r3, #7
 800eee4:	d003      	beq.n	800eeee <mqtt_message_received+0x2ea>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800eee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeea:	2b04      	cmp	r3, #4
 800eeec:	d138      	bne.n	800ef60 <mqtt_message_received+0x35c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	3318      	adds	r3, #24
 800eef2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eef4:	4611      	mov	r1, r2
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7ff fb48 	bl	800e58c <mqtt_take_request>
 800eefc:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 800eefe:	6a3b      	ldr	r3, [r7, #32]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d01c      	beq.n	800ef3e <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800ef04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef08:	2b09      	cmp	r3, #9
 800ef0a:	d10a      	bne.n	800ef22 <mqtt_message_received+0x31e>
          if (length < 3) {
 800ef0c:	893b      	ldrh	r3, [r7, #8]
 800ef0e:	2b02      	cmp	r3, #2
 800ef10:	d928      	bls.n	800ef64 <mqtt_message_received+0x360>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 800ef12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef14:	3302      	adds	r3, #2
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	4619      	mov	r1, r3
 800ef1a:	6a38      	ldr	r0, [r7, #32]
 800ef1c:	f7ff fe57 	bl	800ebce <mqtt_incomming_suback>
 800ef20:	e00a      	b.n	800ef38 <mqtt_message_received+0x334>
          }
        } else if (r->cb != NULL) {
 800ef22:	6a3b      	ldr	r3, [r7, #32]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d006      	beq.n	800ef38 <mqtt_message_received+0x334>
          r->cb(r->arg, ERR_OK);
 800ef2a:	6a3b      	ldr	r3, [r7, #32]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	6a3a      	ldr	r2, [r7, #32]
 800ef30:	6892      	ldr	r2, [r2, #8]
 800ef32:	2100      	movs	r1, #0
 800ef34:	4610      	mov	r0, r2
 800ef36:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800ef38:	6a38      	ldr	r0, [r7, #32]
 800ef3a:	f7ff fb17 	bl	800e56c <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800ef3e:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800ef40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ef42:	e012      	b.n	800ef6a <mqtt_message_received+0x366>
        goto out_disconnect;
 800ef44:	bf00      	nop
 800ef46:	e00e      	b.n	800ef66 <mqtt_message_received+0x362>
        goto out_disconnect;
 800ef48:	bf00      	nop
 800ef4a:	e00c      	b.n	800ef66 <mqtt_message_received+0x362>
        goto out_disconnect;
 800ef4c:	bf00      	nop
 800ef4e:	e00a      	b.n	800ef66 <mqtt_message_received+0x362>
        goto out_disconnect;
 800ef50:	bf00      	nop
 800ef52:	e008      	b.n	800ef66 <mqtt_message_received+0x362>
          goto out_disconnect;
 800ef54:	bf00      	nop
 800ef56:	e006      	b.n	800ef66 <mqtt_message_received+0x362>
        goto out_disconnect;
 800ef58:	bf00      	nop
 800ef5a:	e004      	b.n	800ef66 <mqtt_message_received+0x362>
      goto out_disconnect;
 800ef5c:	bf00      	nop
 800ef5e:	e002      	b.n	800ef66 <mqtt_message_received+0x362>
      goto out_disconnect;
 800ef60:	bf00      	nop
 800ef62:	e000      	b.n	800ef66 <mqtt_message_received+0x362>
            goto out_disconnect;
 800ef64:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800ef66:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	373c      	adds	r7, #60	; 0x3c
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd90      	pop	{r4, r7, pc}
 800ef72:	bf00      	nop

0800ef74 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b088      	sub	sp, #32
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 800ef82:	2300      	movs	r3, #0
 800ef84:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 800ef8e:	e0bc      	b.n	800f10a <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800ef90:	7dfb      	ldrb	r3, [r7, #23]
 800ef92:	2b01      	cmp	r3, #1
 800ef94:	d903      	bls.n	800ef9e <mqtt_parse_incoming+0x2a>
 800ef96:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	da4d      	bge.n	800f03a <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 800ef9e:	7dfa      	ldrb	r2, [r7, #23]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d206      	bcs.n	800efb6 <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 800efa8:	7dfb      	ldrb	r3, [r7, #23]
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	4413      	add	r3, r2
 800efae:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800efb2:	75bb      	strb	r3, [r7, #22]
 800efb4:	e012      	b.n	800efdc <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 800efb6:	8bfb      	ldrh	r3, [r7, #30]
 800efb8:	1c5a      	adds	r2, r3, #1
 800efba:	83fa      	strh	r2, [r7, #30]
 800efbc:	4619      	mov	r1, r3
 800efbe:	6838      	ldr	r0, [r7, #0]
 800efc0:	f002 fbfe 	bl	80117c0 <pbuf_get_at>
 800efc4:	4603      	mov	r3, r0
 800efc6:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efcc:	1c59      	adds	r1, r3, #1
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	6691      	str	r1, [r2, #104]	; 0x68
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	4413      	add	r3, r2
 800efd6:	7dba      	ldrb	r2, [r7, #22]
 800efd8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 800efdc:	7dfb      	ldrb	r3, [r7, #23]
 800efde:	3301      	adds	r3, #1
 800efe0:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 800efe2:	7dfb      	ldrb	r3, [r7, #23]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	f240 8090 	bls.w	800f10a <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800efea:	7dbb      	ldrb	r3, [r7, #22]
 800efec:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800eff0:	7dfb      	ldrb	r3, [r7, #23]
 800eff2:	1e9a      	subs	r2, r3, #2
 800eff4:	4613      	mov	r3, r2
 800eff6:	00db      	lsls	r3, r3, #3
 800eff8:	1a9b      	subs	r3, r3, r2
 800effa:	fa01 f303 	lsl.w	r3, r1, r3
 800effe:	69ba      	ldr	r2, [r7, #24]
 800f000:	4313      	orrs	r3, r2
 800f002:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800f004:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	db7e      	blt.n	800f10a <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d10b      	bne.n	800f02a <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800f012:	7df9      	ldrb	r1, [r7, #23]
 800f014:	2300      	movs	r3, #0
 800f016:	2200      	movs	r2, #0
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f7ff fdf3 	bl	800ec04 <mqtt_message_received>
            client->msg_idx = 0;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 800f024:	2300      	movs	r3, #0
 800f026:	75fb      	strb	r3, [r7, #23]
 800f028:	e06f      	b.n	800f10a <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800f02a:	7dfa      	ldrb	r2, [r7, #23]
 800f02c:	69bb      	ldr	r3, [r7, #24]
 800f02e:	441a      	add	r2, r3
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f034:	1ad3      	subs	r3, r2, r3
 800f036:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 800f038:	e067      	b.n	800f10a <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f03e:	7dfb      	ldrb	r3, [r7, #23]
 800f040:	1ad3      	subs	r3, r2, r3
 800f042:	7dfa      	ldrb	r2, [r7, #23]
 800f044:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800f048:	fbb3 f1f2 	udiv	r1, r3, r2
 800f04c:	fb01 f202 	mul.w	r2, r1, r2
 800f050:	1a9b      	subs	r3, r3, r2
 800f052:	b29a      	uxth	r2, r3
 800f054:	7dfb      	ldrb	r3, [r7, #23]
 800f056:	b29b      	uxth	r3, r3
 800f058:	4413      	add	r3, r2
 800f05a:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	891a      	ldrh	r2, [r3, #8]
 800f060:	8bfb      	ldrh	r3, [r7, #30]
 800f062:	1ad3      	subs	r3, r2, r3
 800f064:	b29b      	uxth	r3, r3
 800f066:	461a      	mov	r2, r3
 800f068:	69bb      	ldr	r3, [r7, #24]
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d905      	bls.n	800f07a <mqtt_parse_incoming+0x106>
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	891a      	ldrh	r2, [r3, #8]
 800f072:	8bfb      	ldrh	r3, [r7, #30]
 800f074:	1ad3      	subs	r3, r2, r3
 800f076:	b29b      	uxth	r3, r3
 800f078:	e001      	b.n	800f07e <mqtt_parse_incoming+0x10a>
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 800f080:	8a7b      	ldrh	r3, [r7, #18]
 800f082:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800f086:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 800f088:	8aba      	ldrh	r2, [r7, #20]
 800f08a:	8a3b      	ldrh	r3, [r7, #16]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d901      	bls.n	800f094 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 800f090:	8a3b      	ldrh	r3, [r7, #16]
 800f092:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800f09a:	8a7b      	ldrh	r3, [r7, #18]
 800f09c:	18d1      	adds	r1, r2, r3
 800f09e:	8bfb      	ldrh	r3, [r7, #30]
 800f0a0:	8aba      	ldrh	r2, [r7, #20]
 800f0a2:	6838      	ldr	r0, [r7, #0]
 800f0a4:	f002 fabe 	bl	8011624 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f0ac:	8abb      	ldrh	r3, [r7, #20]
 800f0ae:	441a      	add	r2, r3
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 800f0b4:	8bfa      	ldrh	r2, [r7, #30]
 800f0b6:	8abb      	ldrh	r3, [r7, #20]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 800f0bc:	8abb      	ldrh	r3, [r7, #20]
 800f0be:	69ba      	ldr	r2, [r7, #24]
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 800f0c4:	69bb      	ldr	r3, [r7, #24]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d003      	beq.n	800f0d2 <mqtt_parse_incoming+0x15e>
 800f0ca:	8aba      	ldrh	r2, [r7, #20]
 800f0cc:	8a3b      	ldrh	r3, [r7, #16]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d11b      	bne.n	800f10a <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800f0d2:	8a7a      	ldrh	r2, [r7, #18]
 800f0d4:	8abb      	ldrh	r3, [r7, #20]
 800f0d6:	4413      	add	r3, r2
 800f0d8:	b29a      	uxth	r2, r3
 800f0da:	7dfb      	ldrb	r3, [r7, #23]
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	7df9      	ldrb	r1, [r7, #23]
 800f0e4:	69bb      	ldr	r3, [r7, #24]
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f7ff fd8c 	bl	800ec04 <mqtt_message_received>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 800f0f0:	89fb      	ldrh	r3, [r7, #14]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d001      	beq.n	800f0fa <mqtt_parse_incoming+0x186>
          return res;
 800f0f6:	89fb      	ldrh	r3, [r7, #14]
 800f0f8:	e00e      	b.n	800f118 <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d104      	bne.n	800f10a <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2200      	movs	r2, #0
 800f104:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800f106:	2300      	movs	r3, #0
 800f108:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	891b      	ldrh	r3, [r3, #8]
 800f10e:	8bfa      	ldrh	r2, [r7, #30]
 800f110:	429a      	cmp	r2, r3
 800f112:	f4ff af3d 	bcc.w	800ef90 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800f116:	2300      	movs	r3, #0
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3720      	adds	r7, #32
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b086      	sub	sp, #24
 800f124:	af00      	add	r7, sp, #0
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	607a      	str	r2, [r7, #4]
 800f12c:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d106      	bne.n	800f146 <mqtt_tcp_recv_cb+0x26>
 800f138:	4b24      	ldr	r3, [pc, #144]	; (800f1cc <mqtt_tcp_recv_cb+0xac>)
 800f13a:	f240 32a7 	movw	r2, #935	; 0x3a7
 800f13e:	4924      	ldr	r1, [pc, #144]	; (800f1d0 <mqtt_tcp_recv_cb+0xb0>)
 800f140:	4824      	ldr	r0, [pc, #144]	; (800f1d4 <mqtt_tcp_recv_cb+0xb4>)
 800f142:	f00c f861 	bl	801b208 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	68db      	ldr	r3, [r3, #12]
 800f14a:	68ba      	ldr	r2, [r7, #8]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d006      	beq.n	800f15e <mqtt_tcp_recv_cb+0x3e>
 800f150:	4b1e      	ldr	r3, [pc, #120]	; (800f1cc <mqtt_tcp_recv_cb+0xac>)
 800f152:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f156:	4920      	ldr	r1, [pc, #128]	; (800f1d8 <mqtt_tcp_recv_cb+0xb8>)
 800f158:	481e      	ldr	r0, [pc, #120]	; (800f1d4 <mqtt_tcp_recv_cb+0xb4>)
 800f15a:	f00c f855 	bl	801b208 <iprintf>

  if (p == NULL) {
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d105      	bne.n	800f170 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800f164:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f168:	6978      	ldr	r0, [r7, #20]
 800f16a:	f7ff fbfb 	bl	800e964 <mqtt_close>
 800f16e:	e027      	b.n	800f1c0 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 800f170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d005      	beq.n	800f184 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f002 f85d 	bl	8011238 <pbuf_free>
      return err;
 800f17e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f182:	e01e      	b.n	800f1c2 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	891b      	ldrh	r3, [r3, #8]
 800f188:	4619      	mov	r1, r3
 800f18a:	68b8      	ldr	r0, [r7, #8]
 800f18c:	f002 ff4a 	bl	8012024 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 800f190:	6879      	ldr	r1, [r7, #4]
 800f192:	6978      	ldr	r0, [r7, #20]
 800f194:	f7ff feee 	bl	800ef74 <mqtt_parse_incoming>
 800f198:	4603      	mov	r3, r0
 800f19a:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f002 f84b 	bl	8011238 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800f1a2:	8a7b      	ldrh	r3, [r7, #18]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d004      	beq.n	800f1b2 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 800f1a8:	8a7b      	ldrh	r3, [r7, #18]
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	6978      	ldr	r0, [r7, #20]
 800f1ae:	f7ff fbd9 	bl	800e964 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	885b      	ldrh	r3, [r3, #2]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d002      	beq.n	800f1c0 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800f1c0:	2300      	movs	r3, #0
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3718      	adds	r7, #24
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	0801d2f4 	.word	0x0801d2f4
 800f1d0:	0801d594 	.word	0x0801d594
 800f1d4:	0801d36c 	.word	0x0801d36c
 800f1d8:	0801d5b8 	.word	0x0801d5b8

0800f1dc <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b086      	sub	sp, #24
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	4613      	mov	r3, r2
 800f1e8:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	7a9b      	ldrb	r3, [r3, #10]
 800f1f2:	2b03      	cmp	r3, #3
 800f1f4:	d127      	bne.n	800f246 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	2200      	movs	r2, #0
 800f200:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800f202:	e00d      	b.n	800f220 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d006      	beq.n	800f21a <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	693a      	ldr	r2, [r7, #16]
 800f212:	6892      	ldr	r2, [r2, #8]
 800f214:	2100      	movs	r1, #0
 800f216:	4610      	mov	r0, r2
 800f218:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800f21a:	6938      	ldr	r0, [r7, #16]
 800f21c:	f7ff f9a6 	bl	800e56c <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	3318      	adds	r3, #24
 800f224:	2100      	movs	r1, #0
 800f226:	4618      	mov	r0, r3
 800f228:	f7ff f9b0 	bl	800e58c <mqtt_take_request>
 800f22c:	6138      	str	r0, [r7, #16]
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d1e7      	bne.n	800f204 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	4619      	mov	r1, r3
 800f240:	4610      	mov	r0, r2
 800f242:	f7ff f841 	bl	800e2c8 <mqtt_output_send>
  }
  return ERR_OK;
 800f246:	2300      	movs	r3, #0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3718      	adds	r7, #24
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	460b      	mov	r3, r1
 800f25a:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d106      	bne.n	800f274 <mqtt_tcp_err_cb+0x24>
 800f266:	4b09      	ldr	r3, [pc, #36]	; (800f28c <mqtt_tcp_err_cb+0x3c>)
 800f268:	f240 32f6 	movw	r2, #1014	; 0x3f6
 800f26c:	4908      	ldr	r1, [pc, #32]	; (800f290 <mqtt_tcp_err_cb+0x40>)
 800f26e:	4809      	ldr	r0, [pc, #36]	; (800f294 <mqtt_tcp_err_cb+0x44>)
 800f270:	f00b ffca 	bl	801b208 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2200      	movs	r2, #0
 800f278:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800f27a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	f7ff fb70 	bl	800e964 <mqtt_close>
}
 800f284:	bf00      	nop
 800f286:	3710      	adds	r7, #16
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	0801d2f4 	.word	0x0801d2f4
 800f290:	0801d5e0 	.word	0x0801d5e0
 800f294:	0801d36c 	.word	0x0801d36c

0800f298 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b084      	sub	sp, #16
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	7a9b      	ldrb	r3, [r3, #10]
 800f2aa:	2b03      	cmp	r3, #3
 800f2ac:	d105      	bne.n	800f2ba <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	33ec      	adds	r3, #236	; 0xec
 800f2b2:	6839      	ldr	r1, [r7, #0]
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7ff f807 	bl	800e2c8 <mqtt_output_send>
  }
  return ERR_OK;
 800f2ba:	2300      	movs	r3, #0
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3710      	adds	r7, #16
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b086      	sub	sp, #24
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	4613      	mov	r3, r2
 800f2d0:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800f2d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d002      	beq.n	800f2e4 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800f2de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2e2:	e025      	b.n	800f330 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800f2ea:	4913      	ldr	r1, [pc, #76]	; (800f338 <mqtt_tcp_connect_cb+0x74>)
 800f2ec:	68b8      	ldr	r0, [r7, #8]
 800f2ee:	f003 fe8d 	bl	801300c <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800f2f2:	4912      	ldr	r1, [pc, #72]	; (800f33c <mqtt_tcp_connect_cb+0x78>)
 800f2f4:	68b8      	ldr	r0, [r7, #8]
 800f2f6:	f003 feab 	bl	8013050 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800f2fa:	2202      	movs	r2, #2
 800f2fc:	4910      	ldr	r1, [pc, #64]	; (800f340 <mqtt_tcp_connect_cb+0x7c>)
 800f2fe:	68b8      	ldr	r0, [r7, #8]
 800f300:	f003 feea 	bl	80130d8 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	2202      	movs	r2, #2
 800f308:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800f30a:	697a      	ldr	r2, [r7, #20]
 800f30c:	490d      	ldr	r1, [pc, #52]	; (800f344 <mqtt_tcp_connect_cb+0x80>)
 800f30e:	f241 3088 	movw	r0, #5000	; 0x1388
 800f312:	f008 fbd5 	bl	8017ac0 <sys_timeout>
  client->cyclic_tick = 0;
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	2200      	movs	r2, #0
 800f31a:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	4619      	mov	r1, r3
 800f328:	4610      	mov	r0, r2
 800f32a:	f7fe ffcd 	bl	800e2c8 <mqtt_output_send>

  return ERR_OK;
 800f32e:	2300      	movs	r3, #0
}
 800f330:	4618      	mov	r0, r3
 800f332:	3718      	adds	r7, #24
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	0800f121 	.word	0x0800f121
 800f33c:	0800f1dd 	.word	0x0800f1dd
 800f340:	0800f299 	.word	0x0800f299
 800f344:	0800ea25 	.word	0x0800ea25

0800f348 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b08c      	sub	sp, #48	; 0x30
 800f34c:	af02      	add	r7, sp, #8
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
 800f354:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d106      	bne.n	800f36a <mqtt_publish+0x22>
 800f35c:	4b5d      	ldr	r3, [pc, #372]	; (800f4d4 <mqtt_publish+0x18c>)
 800f35e:	f240 4254 	movw	r2, #1108	; 0x454
 800f362:	495d      	ldr	r1, [pc, #372]	; (800f4d8 <mqtt_publish+0x190>)
 800f364:	485d      	ldr	r0, [pc, #372]	; (800f4dc <mqtt_publish+0x194>)
 800f366:	f00b ff4f 	bl	801b208 <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d106      	bne.n	800f37e <mqtt_publish+0x36>
 800f370:	4b58      	ldr	r3, [pc, #352]	; (800f4d4 <mqtt_publish+0x18c>)
 800f372:	f240 4255 	movw	r2, #1109	; 0x455
 800f376:	495a      	ldr	r1, [pc, #360]	; (800f4e0 <mqtt_publish+0x198>)
 800f378:	4858      	ldr	r0, [pc, #352]	; (800f4dc <mqtt_publish+0x194>)
 800f37a:	f00b ff45 	bl	801b208 <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	7a9b      	ldrb	r3, [r3, #10]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d109      	bne.n	800f39a <mqtt_publish+0x52>
 800f386:	4b53      	ldr	r3, [pc, #332]	; (800f4d4 <mqtt_publish+0x18c>)
 800f388:	f240 4256 	movw	r2, #1110	; 0x456
 800f38c:	4955      	ldr	r1, [pc, #340]	; (800f4e4 <mqtt_publish+0x19c>)
 800f38e:	4853      	ldr	r0, [pc, #332]	; (800f4dc <mqtt_publish+0x194>)
 800f390:	f00b ff3a 	bl	801b208 <iprintf>
 800f394:	f06f 030a 	mvn.w	r3, #10
 800f398:	e097      	b.n	800f4ca <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 800f39a:	68b8      	ldr	r0, [r7, #8]
 800f39c:	f7f0 ffa0 	bl	80002e0 <strlen>
 800f3a0:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800f3a2:	69fb      	ldr	r3, [r7, #28]
 800f3a4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d909      	bls.n	800f3c0 <mqtt_publish+0x78>
 800f3ac:	4b49      	ldr	r3, [pc, #292]	; (800f4d4 <mqtt_publish+0x18c>)
 800f3ae:	f240 4259 	movw	r2, #1113	; 0x459
 800f3b2:	494d      	ldr	r1, [pc, #308]	; (800f4e8 <mqtt_publish+0x1a0>)
 800f3b4:	4849      	ldr	r0, [pc, #292]	; (800f4dc <mqtt_publish+0x194>)
 800f3b6:	f00b ff27 	bl	801b208 <iprintf>
 800f3ba:	f06f 030f 	mvn.w	r3, #15
 800f3be:	e084      	b.n	800f4ca <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 800f3c4:	8b7b      	ldrh	r3, [r7, #26]
 800f3c6:	1c9a      	adds	r2, r3, #2
 800f3c8:	887b      	ldrh	r3, [r7, #2]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 800f3ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d008      	beq.n	800f3e8 <mqtt_publish+0xa0>
    total_len += 2;
 800f3d6:	6a3b      	ldr	r3, [r7, #32]
 800f3d8:	3302      	adds	r3, #2
 800f3da:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 800f3dc:	68f8      	ldr	r0, [r7, #12]
 800f3de:	f7fe fed7 	bl	800e190 <msg_generate_packet_id>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f3e6:	e001      	b.n	800f3ec <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800f3ec:	6a3b      	ldr	r3, [r7, #32]
 800f3ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3f2:	d309      	bcc.n	800f408 <mqtt_publish+0xc0>
 800f3f4:	4b37      	ldr	r3, [pc, #220]	; (800f4d4 <mqtt_publish+0x18c>)
 800f3f6:	f240 4265 	movw	r2, #1125	; 0x465
 800f3fa:	493c      	ldr	r1, [pc, #240]	; (800f4ec <mqtt_publish+0x1a4>)
 800f3fc:	4837      	ldr	r0, [pc, #220]	; (800f4dc <mqtt_publish+0x194>)
 800f3fe:	f00b ff03 	bl	801b208 <iprintf>
 800f402:	f06f 030f 	mvn.w	r3, #15
 800f406:	e060      	b.n	800f4ca <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 800f408:	6a3b      	ldr	r3, [r7, #32]
 800f40a:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f103 001c 	add.w	r0, r3, #28
 800f412:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f416:	9300      	str	r3, [sp, #0]
 800f418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41a:	2104      	movs	r1, #4
 800f41c:	f7ff f814 	bl	800e448 <mqtt_create_request>
 800f420:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d102      	bne.n	800f42e <mqtt_publish+0xe6>
    return ERR_MEM;
 800f428:	f04f 33ff 	mov.w	r3, #4294967295
 800f42c:	e04d      	b.n	800f4ca <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	33ec      	adds	r3, #236	; 0xec
 800f432:	8b3a      	ldrh	r2, [r7, #24]
 800f434:	4611      	mov	r1, r2
 800f436:	4618      	mov	r0, r3
 800f438:	f7ff fa60 	bl	800e8fc <mqtt_output_check_space>
 800f43c:	4603      	mov	r3, r0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d105      	bne.n	800f44e <mqtt_publish+0x106>
    mqtt_delete_request(r);
 800f442:	6978      	ldr	r0, [r7, #20]
 800f444:	f7ff f892 	bl	800e56c <mqtt_delete_request>
    return ERR_MEM;
 800f448:	f04f 33ff 	mov.w	r3, #4294967295
 800f44c:	e03d      	b.n	800f4ca <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800f454:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800f458:	8b3b      	ldrh	r3, [r7, #24]
 800f45a:	9301      	str	r3, [sp, #4]
 800f45c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f460:	9300      	str	r3, [sp, #0]
 800f462:	4613      	mov	r3, r2
 800f464:	2200      	movs	r2, #0
 800f466:	2103      	movs	r1, #3
 800f468:	f7ff f9fd 	bl	800e866 <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	33ec      	adds	r3, #236	; 0xec
 800f470:	8b7a      	ldrh	r2, [r7, #26]
 800f472:	68b9      	ldr	r1, [r7, #8]
 800f474:	4618      	mov	r0, r3
 800f476:	f7ff f9ca 	bl	800e80e <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 800f47a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d006      	beq.n	800f490 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	33ec      	adds	r3, #236	; 0xec
 800f486:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f488:	4611      	mov	r1, r2
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7ff f989 	bl	800e7a2 <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d009      	beq.n	800f4aa <mqtt_publish+0x162>
 800f496:	887b      	ldrh	r3, [r7, #2]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d006      	beq.n	800f4aa <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	33ec      	adds	r3, #236	; 0xec
 800f4a0:	887a      	ldrh	r2, [r7, #2]
 800f4a2:	6879      	ldr	r1, [r7, #4]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7ff f994 	bl	800e7d2 <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	3318      	adds	r3, #24
 800f4ae:	6979      	ldr	r1, [r7, #20]
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f7ff f80f 	bl	800e4d4 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	4610      	mov	r0, r2
 800f4c4:	f7fe ff00 	bl	800e2c8 <mqtt_output_send>
  return ERR_OK;
 800f4c8:	2300      	movs	r3, #0
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3728      	adds	r7, #40	; 0x28
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	0801d2f4 	.word	0x0801d2f4
 800f4d8:	0801d600 	.word	0x0801d600
 800f4dc:	0801d36c 	.word	0x0801d36c
 800f4e0:	0801d620 	.word	0x0801d620
 800f4e4:	0801d63c 	.word	0x0801d63c
 800f4e8:	0801d65c 	.word	0x0801d65c
 800f4ec:	0801d680 	.word	0x0801d680

0800f4f0 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 800f4f4:	f644 7110 	movw	r1, #20240	; 0x4f10
 800f4f8:	2001      	movs	r0, #1
 800f4fa:	f000 feb9 	bl	8010270 <mem_calloc>
 800f4fe:	4603      	mov	r3, r0
}
 800f500:	4618      	mov	r0, r3
 800f502:	bd80      	pop	{r7, pc}

0800f504 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b08c      	sub	sp, #48	; 0x30
 800f508:	af02      	add	r7, sp, #8
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	603b      	str	r3, [r7, #0]
 800f510:	4613      	mov	r3, r2
 800f512:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800f514:	230a      	movs	r3, #10
 800f516:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 800f518:	2300      	movs	r3, #0
 800f51a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f51e:	2300      	movs	r3, #0
 800f520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f524:	2300      	movs	r3, #0
 800f526:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 800f52a:	2300      	movs	r3, #0
 800f52c:	83fb      	strh	r3, [r7, #30]
 800f52e:	2300      	movs	r3, #0
 800f530:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d106      	bne.n	800f546 <mqtt_client_connect+0x42>
 800f538:	4b9e      	ldr	r3, [pc, #632]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f53a:	f240 520f 	movw	r2, #1295	; 0x50f
 800f53e:	499e      	ldr	r1, [pc, #632]	; (800f7b8 <mqtt_client_connect+0x2b4>)
 800f540:	489e      	ldr	r0, [pc, #632]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f542:	f00b fe61 	bl	801b208 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d106      	bne.n	800f55a <mqtt_client_connect+0x56>
 800f54c:	4b99      	ldr	r3, [pc, #612]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f54e:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800f552:	499b      	ldr	r1, [pc, #620]	; (800f7c0 <mqtt_client_connect+0x2bc>)
 800f554:	4899      	ldr	r0, [pc, #612]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f556:	f00b fe57 	bl	801b208 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800f55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d106      	bne.n	800f56e <mqtt_client_connect+0x6a>
 800f560:	4b94      	ldr	r3, [pc, #592]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f562:	f240 5211 	movw	r2, #1297	; 0x511
 800f566:	4997      	ldr	r1, [pc, #604]	; (800f7c4 <mqtt_client_connect+0x2c0>)
 800f568:	4894      	ldr	r0, [pc, #592]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f56a:	f00b fe4d 	bl	801b208 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800f56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d106      	bne.n	800f584 <mqtt_client_connect+0x80>
 800f576:	4b8f      	ldr	r3, [pc, #572]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f578:	f240 5212 	movw	r2, #1298	; 0x512
 800f57c:	4992      	ldr	r1, [pc, #584]	; (800f7c8 <mqtt_client_connect+0x2c4>)
 800f57e:	488f      	ldr	r0, [pc, #572]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f580:	f00b fe42 	bl	801b208 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	7a9b      	ldrb	r3, [r3, #10]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d002      	beq.n	800f592 <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 800f58c:	f06f 0309 	mvn.w	r3, #9
 800f590:	e21f      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800f592:	f644 7210 	movw	r2, #20240	; 0x4f10
 800f596:	2100      	movs	r1, #0
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f00b fe9a 	bl	801b2d2 <memset>
  client->connect_arg = arg;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5a2:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	683a      	ldr	r2, [r7, #0]
 800f5a8:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 800f5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ac:	899a      	ldrh	r2, [r3, #12]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	331c      	adds	r3, #28
 800f5b6:	2104      	movs	r1, #4
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7ff f8b5 	bl	800e728 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800f5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5c0:	691b      	ldr	r3, [r3, #16]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d073      	beq.n	800f6ae <mqtt_client_connect+0x1aa>
 800f5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5c8:	695b      	ldr	r3, [r3, #20]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d06f      	beq.n	800f6ae <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 800f5ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f5d2:	f043 0304 	orr.w	r3, r3, #4
 800f5d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 800f5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5dc:	7e1b      	ldrb	r3, [r3, #24]
 800f5de:	00db      	lsls	r3, r3, #3
 800f5e0:	b25b      	sxtb	r3, r3
 800f5e2:	f003 0318 	and.w	r3, r3, #24
 800f5e6:	b25a      	sxtb	r2, r3
 800f5e8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f5ec:	4313      	orrs	r3, r2
 800f5ee:	b25b      	sxtb	r3, r3
 800f5f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 800f5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5f6:	7e5b      	ldrb	r3, [r3, #25]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d005      	beq.n	800f608 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800f5fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f600:	f043 0320 	orr.w	r3, r3, #32
 800f604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 800f608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7f0 fe67 	bl	80002e0 <strlen>
 800f612:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800f614:	69bb      	ldr	r3, [r7, #24]
 800f616:	2bff      	cmp	r3, #255	; 0xff
 800f618:	d909      	bls.n	800f62e <mqtt_client_connect+0x12a>
 800f61a:	4b66      	ldr	r3, [pc, #408]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f61c:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 800f620:	496a      	ldr	r1, [pc, #424]	; (800f7cc <mqtt_client_connect+0x2c8>)
 800f622:	4866      	ldr	r0, [pc, #408]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f624:	f00b fdf0 	bl	801b208 <iprintf>
 800f628:	f06f 0305 	mvn.w	r3, #5
 800f62c:	e1d1      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800f62e:	69bb      	ldr	r3, [r7, #24]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d109      	bne.n	800f648 <mqtt_client_connect+0x144>
 800f634:	4b5f      	ldr	r3, [pc, #380]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f636:	f240 5229 	movw	r2, #1321	; 0x529
 800f63a:	4965      	ldr	r1, [pc, #404]	; (800f7d0 <mqtt_client_connect+0x2cc>)
 800f63c:	485f      	ldr	r0, [pc, #380]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f63e:	f00b fde3 	bl	801b208 <iprintf>
 800f642:	f06f 0305 	mvn.w	r3, #5
 800f646:	e1c4      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 800f648:	69bb      	ldr	r3, [r7, #24]
 800f64a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 800f64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f650:	695b      	ldr	r3, [r3, #20]
 800f652:	4618      	mov	r0, r3
 800f654:	f7f0 fe44 	bl	80002e0 <strlen>
 800f658:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800f65a:	69bb      	ldr	r3, [r7, #24]
 800f65c:	2bff      	cmp	r3, #255	; 0xff
 800f65e:	d909      	bls.n	800f674 <mqtt_client_connect+0x170>
 800f660:	4b54      	ldr	r3, [pc, #336]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f662:	f240 522c 	movw	r2, #1324	; 0x52c
 800f666:	495b      	ldr	r1, [pc, #364]	; (800f7d4 <mqtt_client_connect+0x2d0>)
 800f668:	4854      	ldr	r0, [pc, #336]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f66a:	f00b fdcd 	bl	801b208 <iprintf>
 800f66e:	f06f 0305 	mvn.w	r3, #5
 800f672:	e1ae      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 800f674:	69bb      	ldr	r3, [r7, #24]
 800f676:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800f67a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f67c:	1c9a      	adds	r2, r3, #2
 800f67e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f682:	4413      	add	r3, r2
 800f684:	1c9a      	adds	r2, r3, #2
 800f686:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f68a:	4413      	add	r3, r2
 800f68c:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f694:	d309      	bcc.n	800f6aa <mqtt_client_connect+0x1a6>
 800f696:	4b47      	ldr	r3, [pc, #284]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f698:	f240 522f 	movw	r2, #1327	; 0x52f
 800f69c:	494e      	ldr	r1, [pc, #312]	; (800f7d8 <mqtt_client_connect+0x2d4>)
 800f69e:	4847      	ldr	r0, [pc, #284]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f6a0:	f00b fdb2 	bl	801b208 <iprintf>
 800f6a4:	f06f 0305 	mvn.w	r3, #5
 800f6a8:	e193      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800f6aa:	69bb      	ldr	r3, [r7, #24]
 800f6ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 800f6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d03d      	beq.n	800f732 <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 800f6b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f6ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f6be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 800f6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7f0 fe0a 	bl	80002e0 <strlen>
 800f6cc:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800f6ce:	69bb      	ldr	r3, [r7, #24]
 800f6d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6d4:	d309      	bcc.n	800f6ea <mqtt_client_connect+0x1e6>
 800f6d6:	4b37      	ldr	r3, [pc, #220]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f6d8:	f240 5235 	movw	r2, #1333	; 0x535
 800f6dc:	493f      	ldr	r1, [pc, #252]	; (800f7dc <mqtt_client_connect+0x2d8>)
 800f6de:	4837      	ldr	r0, [pc, #220]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f6e0:	f00b fd92 	bl	801b208 <iprintf>
 800f6e4:	f06f 0305 	mvn.w	r3, #5
 800f6e8:	e173      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 800f6ea:	69bb      	ldr	r3, [r7, #24]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d109      	bne.n	800f704 <mqtt_client_connect+0x200>
 800f6f0:	4b30      	ldr	r3, [pc, #192]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f6f2:	f240 5236 	movw	r2, #1334	; 0x536
 800f6f6:	493a      	ldr	r1, [pc, #232]	; (800f7e0 <mqtt_client_connect+0x2dc>)
 800f6f8:	4830      	ldr	r0, [pc, #192]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f6fa:	f00b fd85 	bl	801b208 <iprintf>
 800f6fe:	f06f 0305 	mvn.w	r3, #5
 800f702:	e166      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 800f704:	69bb      	ldr	r3, [r7, #24]
 800f706:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 800f708:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f70a:	1c9a      	adds	r2, r3, #2
 800f70c:	8bfb      	ldrh	r3, [r7, #30]
 800f70e:	4413      	add	r3, r2
 800f710:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800f712:	69bb      	ldr	r3, [r7, #24]
 800f714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f718:	d309      	bcc.n	800f72e <mqtt_client_connect+0x22a>
 800f71a:	4b26      	ldr	r3, [pc, #152]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f71c:	f240 5239 	movw	r2, #1337	; 0x539
 800f720:	492d      	ldr	r1, [pc, #180]	; (800f7d8 <mqtt_client_connect+0x2d4>)
 800f722:	4826      	ldr	r0, [pc, #152]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f724:	f00b fd70 	bl	801b208 <iprintf>
 800f728:	f06f 0305 	mvn.w	r3, #5
 800f72c:	e151      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 800f732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d05a      	beq.n	800f7f0 <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800f73a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 800f746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f748:	689b      	ldr	r3, [r3, #8]
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7f0 fdc8 	bl	80002e0 <strlen>
 800f750:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800f752:	69bb      	ldr	r3, [r7, #24]
 800f754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f758:	d309      	bcc.n	800f76e <mqtt_client_connect+0x26a>
 800f75a:	4b16      	ldr	r3, [pc, #88]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f75c:	f240 523f 	movw	r2, #1343	; 0x53f
 800f760:	4920      	ldr	r1, [pc, #128]	; (800f7e4 <mqtt_client_connect+0x2e0>)
 800f762:	4816      	ldr	r0, [pc, #88]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f764:	f00b fd50 	bl	801b208 <iprintf>
 800f768:	f06f 0305 	mvn.w	r3, #5
 800f76c:	e131      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800f76e:	69bb      	ldr	r3, [r7, #24]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d109      	bne.n	800f788 <mqtt_client_connect+0x284>
 800f774:	4b0f      	ldr	r3, [pc, #60]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f776:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800f77a:	491b      	ldr	r1, [pc, #108]	; (800f7e8 <mqtt_client_connect+0x2e4>)
 800f77c:	480f      	ldr	r0, [pc, #60]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f77e:	f00b fd43 	bl	801b208 <iprintf>
 800f782:	f06f 0305 	mvn.w	r3, #5
 800f786:	e124      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 800f78c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f78e:	1c9a      	adds	r2, r3, #2
 800f790:	8bbb      	ldrh	r3, [r7, #28]
 800f792:	4413      	add	r3, r2
 800f794:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800f796:	69bb      	ldr	r3, [r7, #24]
 800f798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f79c:	d326      	bcc.n	800f7ec <mqtt_client_connect+0x2e8>
 800f79e:	4b05      	ldr	r3, [pc, #20]	; (800f7b4 <mqtt_client_connect+0x2b0>)
 800f7a0:	f240 5243 	movw	r2, #1347	; 0x543
 800f7a4:	490c      	ldr	r1, [pc, #48]	; (800f7d8 <mqtt_client_connect+0x2d4>)
 800f7a6:	4805      	ldr	r0, [pc, #20]	; (800f7bc <mqtt_client_connect+0x2b8>)
 800f7a8:	f00b fd2e 	bl	801b208 <iprintf>
 800f7ac:	f06f 0305 	mvn.w	r3, #5
 800f7b0:	e10f      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
 800f7b2:	bf00      	nop
 800f7b4:	0801d2f4 	.word	0x0801d2f4
 800f7b8:	0801d774 	.word	0x0801d774
 800f7bc:	0801d36c 	.word	0x0801d36c
 800f7c0:	0801d798 	.word	0x0801d798
 800f7c4:	0801d7c0 	.word	0x0801d7c0
 800f7c8:	0801d7ec 	.word	0x0801d7ec
 800f7cc:	0801d820 	.word	0x0801d820
 800f7d0:	0801d860 	.word	0x0801d860
 800f7d4:	0801d8a0 	.word	0x0801d8a0
 800f7d8:	0801d8dc 	.word	0x0801d8dc
 800f7dc:	0801d90c 	.word	0x0801d90c
 800f7e0:	0801d94c 	.word	0x0801d94c
 800f7e4:	0801d990 	.word	0x0801d990
 800f7e8:	0801d9d0 	.word	0x0801d9d0
    remaining_length = (u16_t)len;
 800f7ec:	69bb      	ldr	r3, [r7, #24]
 800f7ee:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800f7f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f7f4:	f043 0302 	orr.w	r3, r3, #2
 800f7f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 800f7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4618      	mov	r0, r3
 800f802:	f7f0 fd6d 	bl	80002e0 <strlen>
 800f806:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800f808:	69bb      	ldr	r3, [r7, #24]
 800f80a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f80e:	d309      	bcc.n	800f824 <mqtt_client_connect+0x320>
 800f810:	4b72      	ldr	r3, [pc, #456]	; (800f9dc <mqtt_client_connect+0x4d8>)
 800f812:	f240 524b 	movw	r2, #1355	; 0x54b
 800f816:	4972      	ldr	r1, [pc, #456]	; (800f9e0 <mqtt_client_connect+0x4dc>)
 800f818:	4872      	ldr	r0, [pc, #456]	; (800f9e4 <mqtt_client_connect+0x4e0>)
 800f81a:	f00b fcf5 	bl	801b208 <iprintf>
 800f81e:	f06f 0305 	mvn.w	r3, #5
 800f822:	e0d6      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 800f824:	69bb      	ldr	r3, [r7, #24]
 800f826:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 800f828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f82a:	1c9a      	adds	r2, r3, #2
 800f82c:	8afb      	ldrh	r3, [r7, #22]
 800f82e:	4413      	add	r3, r2
 800f830:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800f832:	69bb      	ldr	r3, [r7, #24]
 800f834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f838:	d309      	bcc.n	800f84e <mqtt_client_connect+0x34a>
 800f83a:	4b68      	ldr	r3, [pc, #416]	; (800f9dc <mqtt_client_connect+0x4d8>)
 800f83c:	f240 524e 	movw	r2, #1358	; 0x54e
 800f840:	4969      	ldr	r1, [pc, #420]	; (800f9e8 <mqtt_client_connect+0x4e4>)
 800f842:	4868      	ldr	r0, [pc, #416]	; (800f9e4 <mqtt_client_connect+0x4e0>)
 800f844:	f00b fce0 	bl	801b208 <iprintf>
 800f848:	f06f 0305 	mvn.w	r3, #5
 800f84c:	e0c1      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 800f84e:	69bb      	ldr	r3, [r7, #24]
 800f850:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	33ec      	adds	r3, #236	; 0xec
 800f856:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f858:	4611      	mov	r1, r2
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7ff f84e 	bl	800e8fc <mqtt_output_check_space>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d102      	bne.n	800f86c <mqtt_client_connect+0x368>
    return ERR_MEM;
 800f866:	f04f 33ff 	mov.w	r3, #4294967295
 800f86a:	e0b2      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 800f86c:	2000      	movs	r0, #0
 800f86e:	f003 fbad 	bl	8012fcc <tcp_new_ip_type>
 800f872:	4602      	mov	r2, r0
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	68db      	ldr	r3, [r3, #12]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d102      	bne.n	800f886 <mqtt_client_connect+0x382>
    return ERR_MEM;
 800f880:	f04f 33ff 	mov.w	r3, #4294967295
 800f884:	e0a5      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	68f9      	ldr	r1, [r7, #12]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f003 fbab 	bl	8012fe8 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	2200      	movs	r2, #0
 800f898:	4954      	ldr	r1, [pc, #336]	; (800f9ec <mqtt_client_connect+0x4e8>)
 800f89a:	4618      	mov	r0, r3
 800f89c:	f002 fad0 	bl	8011e40 <tcp_bind>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800f8a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	f040 8084 	bne.w	800f9b8 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	68d8      	ldr	r0, [r3, #12]
 800f8b4:	88fa      	ldrh	r2, [r7, #6]
 800f8b6:	4b4e      	ldr	r3, [pc, #312]	; (800f9f0 <mqtt_client_connect+0x4ec>)
 800f8b8:	68b9      	ldr	r1, [r7, #8]
 800f8ba:	f002 fc4b 	bl	8012154 <tcp_connect>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800f8c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d177      	bne.n	800f9bc <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	68db      	ldr	r3, [r3, #12]
 800f8d0:	4948      	ldr	r1, [pc, #288]	; (800f9f4 <mqtt_client_connect+0x4f0>)
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f003 fbde 	bl	8013094 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	2201      	movs	r2, #1
 800f8dc:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800f8e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8e6:	9301      	str	r3, [sp, #4]
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	9300      	str	r3, [sp, #0]
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	2101      	movs	r1, #1
 800f8f2:	f7fe ffb8 	bl	800e866 <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	33ec      	adds	r3, #236	; 0xec
 800f8fa:	2204      	movs	r2, #4
 800f8fc:	493e      	ldr	r1, [pc, #248]	; (800f9f8 <mqtt_client_connect+0x4f4>)
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7fe ff85 	bl	800e80e <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	33ec      	adds	r3, #236	; 0xec
 800f908:	2104      	movs	r1, #4
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fe ff3a 	bl	800e784 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	33ec      	adds	r3, #236	; 0xec
 800f914:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800f918:	4611      	mov	r1, r2
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fe ff32 	bl	800e784 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800f926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f928:	899b      	ldrh	r3, [r3, #12]
 800f92a:	4619      	mov	r1, r3
 800f92c:	4610      	mov	r0, r2
 800f92e:	f7fe ff38 	bl	800e7a2 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800f938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	8afa      	ldrh	r2, [r7, #22]
 800f93e:	4619      	mov	r1, r3
 800f940:	f7fe ff65 	bl	800e80e <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800f944:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f948:	f003 0304 	and.w	r3, r3, #4
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d015      	beq.n	800f97c <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800f956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f958:	691b      	ldr	r3, [r3, #16]
 800f95a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f95e:	b292      	uxth	r2, r2
 800f960:	4619      	mov	r1, r3
 800f962:	f7fe ff54 	bl	800e80e <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800f96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f96e:	695b      	ldr	r3, [r3, #20]
 800f970:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800f974:	b292      	uxth	r2, r2
 800f976:	4619      	mov	r1, r3
 800f978:	f7fe ff49 	bl	800e80e <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 800f97c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f980:	2b00      	cmp	r3, #0
 800f982:	da08      	bge.n	800f996 <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800f98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	8bfa      	ldrh	r2, [r7, #30]
 800f990:	4619      	mov	r1, r3
 800f992:	f7fe ff3c 	bl	800e80e <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800f996:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f99a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d008      	beq.n	800f9b4 <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800f9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9aa:	689b      	ldr	r3, [r3, #8]
 800f9ac:	8bba      	ldrh	r2, [r7, #28]
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	f7fe ff2d 	bl	800e80e <mqtt_output_append_string>
  }
  return ERR_OK;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	e00c      	b.n	800f9d2 <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 800f9b8:	bf00      	nop
 800f9ba:	e000      	b.n	800f9be <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 800f9bc:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	68db      	ldr	r3, [r3, #12]
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f002 fa30 	bl	8011e28 <tcp_abort>
  client->conn = NULL;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	60da      	str	r2, [r3, #12]
  return err;
 800f9ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3728      	adds	r7, #40	; 0x28
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}
 800f9da:	bf00      	nop
 800f9dc:	0801d2f4 	.word	0x0801d2f4
 800f9e0:	0801da14 	.word	0x0801da14
 800f9e4:	0801d36c 	.word	0x0801d36c
 800f9e8:	0801d8dc 	.word	0x0801d8dc
 800f9ec:	08020588 	.word	0x08020588
 800f9f0:	0800f2c5 	.word	0x0800f2c5
 800f9f4:	0800f251 	.word	0x0800f251
 800f9f8:	0801da50 	.word	0x0801da50

0800f9fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b083      	sub	sp, #12
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	4603      	mov	r3, r0
 800fa04:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fa06:	88fb      	ldrh	r3, [r7, #6]
 800fa08:	021b      	lsls	r3, r3, #8
 800fa0a:	b21a      	sxth	r2, r3
 800fa0c:	88fb      	ldrh	r3, [r7, #6]
 800fa0e:	0a1b      	lsrs	r3, r3, #8
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	b21b      	sxth	r3, r3
 800fa14:	4313      	orrs	r3, r2
 800fa16:	b21b      	sxth	r3, r3
 800fa18:	b29b      	uxth	r3, r3
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	370c      	adds	r7, #12
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr

0800fa26 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fa26:	b480      	push	{r7}
 800fa28:	b083      	sub	sp, #12
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	061a      	lsls	r2, r3, #24
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	021b      	lsls	r3, r3, #8
 800fa36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fa3a:	431a      	orrs	r2, r3
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	0a1b      	lsrs	r3, r3, #8
 800fa40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fa44:	431a      	orrs	r2, r3
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	0e1b      	lsrs	r3, r3, #24
 800fa4a:	4313      	orrs	r3, r2
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800fa62:	f00a fe0b 	bl	801a67c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800fa66:	f000 f8d5 	bl	800fc14 <mem_init>
  memp_init();
 800fa6a:	f000 fc59 	bl	8010320 <memp_init>
  pbuf_init();
  netif_init();
 800fa6e:	f000 fd65 	bl	801053c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fa72:	f008 f8f7 	bl	8017c64 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fa76:	f001 fedd 	bl	8011834 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fa7a:	f007 ffff 	bl	8017a7c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fa7e:	bf00      	nop
 800fa80:	3708      	adds	r7, #8
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}
	...

0800fa88 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b083      	sub	sp, #12
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	4603      	mov	r3, r0
 800fa90:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800fa92:	4b05      	ldr	r3, [pc, #20]	; (800faa8 <ptr_to_mem+0x20>)
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	88fb      	ldrh	r3, [r7, #6]
 800fa98:	4413      	add	r3, r2
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	370c      	adds	r7, #12
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr
 800faa6:	bf00      	nop
 800faa8:	20016ec8 	.word	0x20016ec8

0800faac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fab4:	4b05      	ldr	r3, [pc, #20]	; (800facc <mem_to_ptr+0x20>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	687a      	ldr	r2, [r7, #4]
 800faba:	1ad3      	subs	r3, r2, r3
 800fabc:	b29b      	uxth	r3, r3
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	370c      	adds	r7, #12
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr
 800faca:	bf00      	nop
 800facc:	20016ec8 	.word	0x20016ec8

0800fad0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fad0:	b590      	push	{r4, r7, lr}
 800fad2:	b085      	sub	sp, #20
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fad8:	4b45      	ldr	r3, [pc, #276]	; (800fbf0 <plug_holes+0x120>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d206      	bcs.n	800faf0 <plug_holes+0x20>
 800fae2:	4b44      	ldr	r3, [pc, #272]	; (800fbf4 <plug_holes+0x124>)
 800fae4:	f240 12df 	movw	r2, #479	; 0x1df
 800fae8:	4943      	ldr	r1, [pc, #268]	; (800fbf8 <plug_holes+0x128>)
 800faea:	4844      	ldr	r0, [pc, #272]	; (800fbfc <plug_holes+0x12c>)
 800faec:	f00b fb8c 	bl	801b208 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800faf0:	4b43      	ldr	r3, [pc, #268]	; (800fc00 <plug_holes+0x130>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d306      	bcc.n	800fb08 <plug_holes+0x38>
 800fafa:	4b3e      	ldr	r3, [pc, #248]	; (800fbf4 <plug_holes+0x124>)
 800fafc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fb00:	4940      	ldr	r1, [pc, #256]	; (800fc04 <plug_holes+0x134>)
 800fb02:	483e      	ldr	r0, [pc, #248]	; (800fbfc <plug_holes+0x12c>)
 800fb04:	f00b fb80 	bl	801b208 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	791b      	ldrb	r3, [r3, #4]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d006      	beq.n	800fb1e <plug_holes+0x4e>
 800fb10:	4b38      	ldr	r3, [pc, #224]	; (800fbf4 <plug_holes+0x124>)
 800fb12:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fb16:	493c      	ldr	r1, [pc, #240]	; (800fc08 <plug_holes+0x138>)
 800fb18:	4838      	ldr	r0, [pc, #224]	; (800fbfc <plug_holes+0x12c>)
 800fb1a:	f00b fb75 	bl	801b208 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	881b      	ldrh	r3, [r3, #0]
 800fb22:	f5b3 4f0c 	cmp.w	r3, #35840	; 0x8c00
 800fb26:	d906      	bls.n	800fb36 <plug_holes+0x66>
 800fb28:	4b32      	ldr	r3, [pc, #200]	; (800fbf4 <plug_holes+0x124>)
 800fb2a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800fb2e:	4937      	ldr	r1, [pc, #220]	; (800fc0c <plug_holes+0x13c>)
 800fb30:	4832      	ldr	r0, [pc, #200]	; (800fbfc <plug_holes+0x12c>)
 800fb32:	f00b fb69 	bl	801b208 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	881b      	ldrh	r3, [r3, #0]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7ff ffa4 	bl	800fa88 <ptr_to_mem>
 800fb40:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fb42:	687a      	ldr	r2, [r7, #4]
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d024      	beq.n	800fb94 <plug_holes+0xc4>
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	791b      	ldrb	r3, [r3, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d120      	bne.n	800fb94 <plug_holes+0xc4>
 800fb52:	4b2b      	ldr	r3, [pc, #172]	; (800fc00 <plug_holes+0x130>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d01b      	beq.n	800fb94 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fb5c:	4b2c      	ldr	r3, [pc, #176]	; (800fc10 <plug_holes+0x140>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d102      	bne.n	800fb6c <plug_holes+0x9c>
      lfree = mem;
 800fb66:	4a2a      	ldr	r2, [pc, #168]	; (800fc10 <plug_holes+0x140>)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	881a      	ldrh	r2, [r3, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	881b      	ldrh	r3, [r3, #0]
 800fb78:	f5b3 4f0c 	cmp.w	r3, #35840	; 0x8c00
 800fb7c:	d00a      	beq.n	800fb94 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	881b      	ldrh	r3, [r3, #0]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7ff ff80 	bl	800fa88 <ptr_to_mem>
 800fb88:	4604      	mov	r4, r0
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f7ff ff8e 	bl	800faac <mem_to_ptr>
 800fb90:	4603      	mov	r3, r0
 800fb92:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	885b      	ldrh	r3, [r3, #2]
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7ff ff75 	bl	800fa88 <ptr_to_mem>
 800fb9e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fba0:	68ba      	ldr	r2, [r7, #8]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d01f      	beq.n	800fbe8 <plug_holes+0x118>
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	791b      	ldrb	r3, [r3, #4]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d11b      	bne.n	800fbe8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fbb0:	4b17      	ldr	r3, [pc, #92]	; (800fc10 <plug_holes+0x140>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d102      	bne.n	800fbc0 <plug_holes+0xf0>
      lfree = pmem;
 800fbba:	4a15      	ldr	r2, [pc, #84]	; (800fc10 <plug_holes+0x140>)
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	881a      	ldrh	r2, [r3, #0]
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	881b      	ldrh	r3, [r3, #0]
 800fbcc:	f5b3 4f0c 	cmp.w	r3, #35840	; 0x8c00
 800fbd0:	d00a      	beq.n	800fbe8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	881b      	ldrh	r3, [r3, #0]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7ff ff56 	bl	800fa88 <ptr_to_mem>
 800fbdc:	4604      	mov	r4, r0
 800fbde:	68b8      	ldr	r0, [r7, #8]
 800fbe0:	f7ff ff64 	bl	800faac <mem_to_ptr>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800fbe8:	bf00      	nop
 800fbea:	3714      	adds	r7, #20
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd90      	pop	{r4, r7, pc}
 800fbf0:	20016ec8 	.word	0x20016ec8
 800fbf4:	0801daa4 	.word	0x0801daa4
 800fbf8:	0801dad4 	.word	0x0801dad4
 800fbfc:	0801daec 	.word	0x0801daec
 800fc00:	20016ecc 	.word	0x20016ecc
 800fc04:	0801db14 	.word	0x0801db14
 800fc08:	0801db30 	.word	0x0801db30
 800fc0c:	0801db4c 	.word	0x0801db4c
 800fc10:	20016ed4 	.word	0x20016ed4

0800fc14 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fc1a:	4b1f      	ldr	r3, [pc, #124]	; (800fc98 <mem_init+0x84>)
 800fc1c:	3303      	adds	r3, #3
 800fc1e:	f023 0303 	bic.w	r3, r3, #3
 800fc22:	461a      	mov	r2, r3
 800fc24:	4b1d      	ldr	r3, [pc, #116]	; (800fc9c <mem_init+0x88>)
 800fc26:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fc28:	4b1c      	ldr	r3, [pc, #112]	; (800fc9c <mem_init+0x88>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800fc34:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fc42:	f44f 400c 	mov.w	r0, #35840	; 0x8c00
 800fc46:	f7ff ff1f 	bl	800fa88 <ptr_to_mem>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	4a14      	ldr	r2, [pc, #80]	; (800fca0 <mem_init+0x8c>)
 800fc4e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fc50:	4b13      	ldr	r3, [pc, #76]	; (800fca0 <mem_init+0x8c>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	2201      	movs	r2, #1
 800fc56:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fc58:	4b11      	ldr	r3, [pc, #68]	; (800fca0 <mem_init+0x8c>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800fc60:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fc62:	4b0f      	ldr	r3, [pc, #60]	; (800fca0 <mem_init+0x8c>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800fc6a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fc6c:	4b0b      	ldr	r3, [pc, #44]	; (800fc9c <mem_init+0x88>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	4a0c      	ldr	r2, [pc, #48]	; (800fca4 <mem_init+0x90>)
 800fc72:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800fc74:	480c      	ldr	r0, [pc, #48]	; (800fca8 <mem_init+0x94>)
 800fc76:	f00a fd0f 	bl	801a698 <sys_mutex_new>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d006      	beq.n	800fc8e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800fc80:	4b0a      	ldr	r3, [pc, #40]	; (800fcac <mem_init+0x98>)
 800fc82:	f240 221f 	movw	r2, #543	; 0x21f
 800fc86:	490a      	ldr	r1, [pc, #40]	; (800fcb0 <mem_init+0x9c>)
 800fc88:	480a      	ldr	r0, [pc, #40]	; (800fcb4 <mem_init+0xa0>)
 800fc8a:	f00b fabd 	bl	801b208 <iprintf>
  }
}
 800fc8e:	bf00      	nop
 800fc90:	3708      	adds	r7, #8
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}
 800fc96:	bf00      	nop
 800fc98:	2000e2b4 	.word	0x2000e2b4
 800fc9c:	20016ec8 	.word	0x20016ec8
 800fca0:	20016ecc 	.word	0x20016ecc
 800fca4:	20016ed4 	.word	0x20016ed4
 800fca8:	20016ed0 	.word	0x20016ed0
 800fcac:	0801daa4 	.word	0x0801daa4
 800fcb0:	0801db78 	.word	0x0801db78
 800fcb4:	0801daec 	.word	0x0801daec

0800fcb8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b086      	sub	sp, #24
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f7ff fef3 	bl	800faac <mem_to_ptr>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	881b      	ldrh	r3, [r3, #0]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7ff feda 	bl	800fa88 <ptr_to_mem>
 800fcd4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	885b      	ldrh	r3, [r3, #2]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7ff fed4 	bl	800fa88 <ptr_to_mem>
 800fce0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	881b      	ldrh	r3, [r3, #0]
 800fce6:	f5b3 4f0c 	cmp.w	r3, #35840	; 0x8c00
 800fcea:	d818      	bhi.n	800fd1e <mem_link_valid+0x66>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	885b      	ldrh	r3, [r3, #2]
 800fcf0:	f5b3 4f0c 	cmp.w	r3, #35840	; 0x8c00
 800fcf4:	d813      	bhi.n	800fd1e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fcfa:	8afa      	ldrh	r2, [r7, #22]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d004      	beq.n	800fd0a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	881b      	ldrh	r3, [r3, #0]
 800fd04:	8afa      	ldrh	r2, [r7, #22]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d109      	bne.n	800fd1e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fd0a:	4b08      	ldr	r3, [pc, #32]	; (800fd2c <mem_link_valid+0x74>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fd0e:	693a      	ldr	r2, [r7, #16]
 800fd10:	429a      	cmp	r2, r3
 800fd12:	d006      	beq.n	800fd22 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	885b      	ldrh	r3, [r3, #2]
 800fd18:	8afa      	ldrh	r2, [r7, #22]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d001      	beq.n	800fd22 <mem_link_valid+0x6a>
    return 0;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	e000      	b.n	800fd24 <mem_link_valid+0x6c>
  }
  return 1;
 800fd22:	2301      	movs	r3, #1
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3718      	adds	r7, #24
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	20016ecc 	.word	0x20016ecc

0800fd30 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b088      	sub	sp, #32
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d070      	beq.n	800fe20 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f003 0303 	and.w	r3, r3, #3
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00d      	beq.n	800fd64 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fd48:	4b37      	ldr	r3, [pc, #220]	; (800fe28 <mem_free+0xf8>)
 800fd4a:	f240 2273 	movw	r2, #627	; 0x273
 800fd4e:	4937      	ldr	r1, [pc, #220]	; (800fe2c <mem_free+0xfc>)
 800fd50:	4837      	ldr	r0, [pc, #220]	; (800fe30 <mem_free+0x100>)
 800fd52:	f00b fa59 	bl	801b208 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fd56:	f00a fcfd 	bl	801a754 <sys_arch_protect>
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	f00a fd07 	bl	801a770 <sys_arch_unprotect>
    return;
 800fd62:	e05e      	b.n	800fe22 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	3b08      	subs	r3, #8
 800fd68:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fd6a:	4b32      	ldr	r3, [pc, #200]	; (800fe34 <mem_free+0x104>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	69fa      	ldr	r2, [r7, #28]
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d306      	bcc.n	800fd82 <mem_free+0x52>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f103 020c 	add.w	r2, r3, #12
 800fd7a:	4b2f      	ldr	r3, [pc, #188]	; (800fe38 <mem_free+0x108>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d90d      	bls.n	800fd9e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fd82:	4b29      	ldr	r3, [pc, #164]	; (800fe28 <mem_free+0xf8>)
 800fd84:	f240 227f 	movw	r2, #639	; 0x27f
 800fd88:	492c      	ldr	r1, [pc, #176]	; (800fe3c <mem_free+0x10c>)
 800fd8a:	4829      	ldr	r0, [pc, #164]	; (800fe30 <mem_free+0x100>)
 800fd8c:	f00b fa3c 	bl	801b208 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fd90:	f00a fce0 	bl	801a754 <sys_arch_protect>
 800fd94:	6138      	str	r0, [r7, #16]
 800fd96:	6938      	ldr	r0, [r7, #16]
 800fd98:	f00a fcea 	bl	801a770 <sys_arch_unprotect>
    return;
 800fd9c:	e041      	b.n	800fe22 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fd9e:	4828      	ldr	r0, [pc, #160]	; (800fe40 <mem_free+0x110>)
 800fda0:	f00a fc96 	bl	801a6d0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800fda4:	69fb      	ldr	r3, [r7, #28]
 800fda6:	791b      	ldrb	r3, [r3, #4]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d110      	bne.n	800fdce <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fdac:	4b1e      	ldr	r3, [pc, #120]	; (800fe28 <mem_free+0xf8>)
 800fdae:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800fdb2:	4924      	ldr	r1, [pc, #144]	; (800fe44 <mem_free+0x114>)
 800fdb4:	481e      	ldr	r0, [pc, #120]	; (800fe30 <mem_free+0x100>)
 800fdb6:	f00b fa27 	bl	801b208 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fdba:	4821      	ldr	r0, [pc, #132]	; (800fe40 <mem_free+0x110>)
 800fdbc:	f00a fc97 	bl	801a6ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fdc0:	f00a fcc8 	bl	801a754 <sys_arch_protect>
 800fdc4:	6178      	str	r0, [r7, #20]
 800fdc6:	6978      	ldr	r0, [r7, #20]
 800fdc8:	f00a fcd2 	bl	801a770 <sys_arch_unprotect>
    return;
 800fdcc:	e029      	b.n	800fe22 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800fdce:	69f8      	ldr	r0, [r7, #28]
 800fdd0:	f7ff ff72 	bl	800fcb8 <mem_link_valid>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d110      	bne.n	800fdfc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fdda:	4b13      	ldr	r3, [pc, #76]	; (800fe28 <mem_free+0xf8>)
 800fddc:	f240 2295 	movw	r2, #661	; 0x295
 800fde0:	4919      	ldr	r1, [pc, #100]	; (800fe48 <mem_free+0x118>)
 800fde2:	4813      	ldr	r0, [pc, #76]	; (800fe30 <mem_free+0x100>)
 800fde4:	f00b fa10 	bl	801b208 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fde8:	4815      	ldr	r0, [pc, #84]	; (800fe40 <mem_free+0x110>)
 800fdea:	f00a fc80 	bl	801a6ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fdee:	f00a fcb1 	bl	801a754 <sys_arch_protect>
 800fdf2:	61b8      	str	r0, [r7, #24]
 800fdf4:	69b8      	ldr	r0, [r7, #24]
 800fdf6:	f00a fcbb 	bl	801a770 <sys_arch_unprotect>
    return;
 800fdfa:	e012      	b.n	800fe22 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800fe02:	4b12      	ldr	r3, [pc, #72]	; (800fe4c <mem_free+0x11c>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	69fa      	ldr	r2, [r7, #28]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d202      	bcs.n	800fe12 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fe0c:	4a0f      	ldr	r2, [pc, #60]	; (800fe4c <mem_free+0x11c>)
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fe12:	69f8      	ldr	r0, [r7, #28]
 800fe14:	f7ff fe5c 	bl	800fad0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fe18:	4809      	ldr	r0, [pc, #36]	; (800fe40 <mem_free+0x110>)
 800fe1a:	f00a fc68 	bl	801a6ee <sys_mutex_unlock>
 800fe1e:	e000      	b.n	800fe22 <mem_free+0xf2>
    return;
 800fe20:	bf00      	nop
}
 800fe22:	3720      	adds	r7, #32
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	0801daa4 	.word	0x0801daa4
 800fe2c:	0801db94 	.word	0x0801db94
 800fe30:	0801daec 	.word	0x0801daec
 800fe34:	20016ec8 	.word	0x20016ec8
 800fe38:	20016ecc 	.word	0x20016ecc
 800fe3c:	0801dbb8 	.word	0x0801dbb8
 800fe40:	20016ed0 	.word	0x20016ed0
 800fe44:	0801dbd4 	.word	0x0801dbd4
 800fe48:	0801dbfc 	.word	0x0801dbfc
 800fe4c:	20016ed4 	.word	0x20016ed4

0800fe50 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b088      	sub	sp, #32
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	460b      	mov	r3, r1
 800fe5a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fe5c:	887b      	ldrh	r3, [r7, #2]
 800fe5e:	3303      	adds	r3, #3
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	f023 0303 	bic.w	r3, r3, #3
 800fe66:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800fe68:	8bfb      	ldrh	r3, [r7, #30]
 800fe6a:	2b0b      	cmp	r3, #11
 800fe6c:	d801      	bhi.n	800fe72 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fe6e:	230c      	movs	r3, #12
 800fe70:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fe72:	8bfb      	ldrh	r3, [r7, #30]
 800fe74:	f5b3 4f0c 	cmp.w	r3, #35840	; 0x8c00
 800fe78:	d803      	bhi.n	800fe82 <mem_trim+0x32>
 800fe7a:	8bfa      	ldrh	r2, [r7, #30]
 800fe7c:	887b      	ldrh	r3, [r7, #2]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d201      	bcs.n	800fe86 <mem_trim+0x36>
    return NULL;
 800fe82:	2300      	movs	r3, #0
 800fe84:	e0d8      	b.n	8010038 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fe86:	4b6e      	ldr	r3, [pc, #440]	; (8010040 <mem_trim+0x1f0>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	687a      	ldr	r2, [r7, #4]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d304      	bcc.n	800fe9a <mem_trim+0x4a>
 800fe90:	4b6c      	ldr	r3, [pc, #432]	; (8010044 <mem_trim+0x1f4>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d306      	bcc.n	800fea8 <mem_trim+0x58>
 800fe9a:	4b6b      	ldr	r3, [pc, #428]	; (8010048 <mem_trim+0x1f8>)
 800fe9c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fea0:	496a      	ldr	r1, [pc, #424]	; (801004c <mem_trim+0x1fc>)
 800fea2:	486b      	ldr	r0, [pc, #428]	; (8010050 <mem_trim+0x200>)
 800fea4:	f00b f9b0 	bl	801b208 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fea8:	4b65      	ldr	r3, [pc, #404]	; (8010040 <mem_trim+0x1f0>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	687a      	ldr	r2, [r7, #4]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d304      	bcc.n	800febc <mem_trim+0x6c>
 800feb2:	4b64      	ldr	r3, [pc, #400]	; (8010044 <mem_trim+0x1f4>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d307      	bcc.n	800fecc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800febc:	f00a fc4a 	bl	801a754 <sys_arch_protect>
 800fec0:	60b8      	str	r0, [r7, #8]
 800fec2:	68b8      	ldr	r0, [r7, #8]
 800fec4:	f00a fc54 	bl	801a770 <sys_arch_unprotect>
    return rmem;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	e0b5      	b.n	8010038 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	3b08      	subs	r3, #8
 800fed0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fed2:	69b8      	ldr	r0, [r7, #24]
 800fed4:	f7ff fdea 	bl	800faac <mem_to_ptr>
 800fed8:	4603      	mov	r3, r0
 800feda:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	881a      	ldrh	r2, [r3, #0]
 800fee0:	8afb      	ldrh	r3, [r7, #22]
 800fee2:	1ad3      	subs	r3, r2, r3
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	3b08      	subs	r3, #8
 800fee8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800feea:	8bfa      	ldrh	r2, [r7, #30]
 800feec:	8abb      	ldrh	r3, [r7, #20]
 800feee:	429a      	cmp	r2, r3
 800fef0:	d906      	bls.n	800ff00 <mem_trim+0xb0>
 800fef2:	4b55      	ldr	r3, [pc, #340]	; (8010048 <mem_trim+0x1f8>)
 800fef4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fef8:	4956      	ldr	r1, [pc, #344]	; (8010054 <mem_trim+0x204>)
 800fefa:	4855      	ldr	r0, [pc, #340]	; (8010050 <mem_trim+0x200>)
 800fefc:	f00b f984 	bl	801b208 <iprintf>
  if (newsize > size) {
 800ff00:	8bfa      	ldrh	r2, [r7, #30]
 800ff02:	8abb      	ldrh	r3, [r7, #20]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d901      	bls.n	800ff0c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	e095      	b.n	8010038 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ff0c:	8bfa      	ldrh	r2, [r7, #30]
 800ff0e:	8abb      	ldrh	r3, [r7, #20]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d101      	bne.n	800ff18 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	e08f      	b.n	8010038 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ff18:	484f      	ldr	r0, [pc, #316]	; (8010058 <mem_trim+0x208>)
 800ff1a:	f00a fbd9 	bl	801a6d0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ff1e:	69bb      	ldr	r3, [r7, #24]
 800ff20:	881b      	ldrh	r3, [r3, #0]
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7ff fdb0 	bl	800fa88 <ptr_to_mem>
 800ff28:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	791b      	ldrb	r3, [r3, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d13f      	bne.n	800ffb2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ff32:	69bb      	ldr	r3, [r7, #24]
 800ff34:	881b      	ldrh	r3, [r3, #0]
 800ff36:	f5b3 4f0c 	cmp.w	r3, #35840	; 0x8c00
 800ff3a:	d106      	bne.n	800ff4a <mem_trim+0xfa>
 800ff3c:	4b42      	ldr	r3, [pc, #264]	; (8010048 <mem_trim+0x1f8>)
 800ff3e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ff42:	4946      	ldr	r1, [pc, #280]	; (801005c <mem_trim+0x20c>)
 800ff44:	4842      	ldr	r0, [pc, #264]	; (8010050 <mem_trim+0x200>)
 800ff46:	f00b f95f 	bl	801b208 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ff4a:	693b      	ldr	r3, [r7, #16]
 800ff4c:	881b      	ldrh	r3, [r3, #0]
 800ff4e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ff50:	8afa      	ldrh	r2, [r7, #22]
 800ff52:	8bfb      	ldrh	r3, [r7, #30]
 800ff54:	4413      	add	r3, r2
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	3308      	adds	r3, #8
 800ff5a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ff5c:	4b40      	ldr	r3, [pc, #256]	; (8010060 <mem_trim+0x210>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	693a      	ldr	r2, [r7, #16]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d106      	bne.n	800ff74 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ff66:	89fb      	ldrh	r3, [r7, #14]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7ff fd8d 	bl	800fa88 <ptr_to_mem>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	4a3b      	ldr	r2, [pc, #236]	; (8010060 <mem_trim+0x210>)
 800ff72:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ff74:	89fb      	ldrh	r3, [r7, #14]
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7ff fd86 	bl	800fa88 <ptr_to_mem>
 800ff7c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	2200      	movs	r2, #0
 800ff82:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	89ba      	ldrh	r2, [r7, #12]
 800ff88:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	8afa      	ldrh	r2, [r7, #22]
 800ff8e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ff90:	69bb      	ldr	r3, [r7, #24]
 800ff92:	89fa      	ldrh	r2, [r7, #14]
 800ff94:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	881b      	ldrh	r3, [r3, #0]
 800ff9a:	f5b3 4f0c 	cmp.w	r3, #35840	; 0x8c00
 800ff9e:	d047      	beq.n	8010030 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	881b      	ldrh	r3, [r3, #0]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7ff fd6f 	bl	800fa88 <ptr_to_mem>
 800ffaa:	4602      	mov	r2, r0
 800ffac:	89fb      	ldrh	r3, [r7, #14]
 800ffae:	8053      	strh	r3, [r2, #2]
 800ffb0:	e03e      	b.n	8010030 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ffb2:	8bfb      	ldrh	r3, [r7, #30]
 800ffb4:	f103 0214 	add.w	r2, r3, #20
 800ffb8:	8abb      	ldrh	r3, [r7, #20]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d838      	bhi.n	8010030 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ffbe:	8afa      	ldrh	r2, [r7, #22]
 800ffc0:	8bfb      	ldrh	r3, [r7, #30]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	3308      	adds	r3, #8
 800ffc8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ffca:	69bb      	ldr	r3, [r7, #24]
 800ffcc:	881b      	ldrh	r3, [r3, #0]
 800ffce:	f5b3 4f0c 	cmp.w	r3, #35840	; 0x8c00
 800ffd2:	d106      	bne.n	800ffe2 <mem_trim+0x192>
 800ffd4:	4b1c      	ldr	r3, [pc, #112]	; (8010048 <mem_trim+0x1f8>)
 800ffd6:	f240 3216 	movw	r2, #790	; 0x316
 800ffda:	4920      	ldr	r1, [pc, #128]	; (801005c <mem_trim+0x20c>)
 800ffdc:	481c      	ldr	r0, [pc, #112]	; (8010050 <mem_trim+0x200>)
 800ffde:	f00b f913 	bl	801b208 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ffe2:	89fb      	ldrh	r3, [r7, #14]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7ff fd4f 	bl	800fa88 <ptr_to_mem>
 800ffea:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ffec:	4b1c      	ldr	r3, [pc, #112]	; (8010060 <mem_trim+0x210>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	693a      	ldr	r2, [r7, #16]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d202      	bcs.n	800fffc <mem_trim+0x1ac>
      lfree = mem2;
 800fff6:	4a1a      	ldr	r2, [pc, #104]	; (8010060 <mem_trim+0x210>)
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	2200      	movs	r2, #0
 8010000:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	881a      	ldrh	r2, [r3, #0]
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	8afa      	ldrh	r2, [r7, #22]
 801000e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010010:	69bb      	ldr	r3, [r7, #24]
 8010012:	89fa      	ldrh	r2, [r7, #14]
 8010014:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	881b      	ldrh	r3, [r3, #0]
 801001a:	f5b3 4f0c 	cmp.w	r3, #35840	; 0x8c00
 801001e:	d007      	beq.n	8010030 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	881b      	ldrh	r3, [r3, #0]
 8010024:	4618      	mov	r0, r3
 8010026:	f7ff fd2f 	bl	800fa88 <ptr_to_mem>
 801002a:	4602      	mov	r2, r0
 801002c:	89fb      	ldrh	r3, [r7, #14]
 801002e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010030:	4809      	ldr	r0, [pc, #36]	; (8010058 <mem_trim+0x208>)
 8010032:	f00a fb5c 	bl	801a6ee <sys_mutex_unlock>
  return rmem;
 8010036:	687b      	ldr	r3, [r7, #4]
}
 8010038:	4618      	mov	r0, r3
 801003a:	3720      	adds	r7, #32
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}
 8010040:	20016ec8 	.word	0x20016ec8
 8010044:	20016ecc 	.word	0x20016ecc
 8010048:	0801daa4 	.word	0x0801daa4
 801004c:	0801dc30 	.word	0x0801dc30
 8010050:	0801daec 	.word	0x0801daec
 8010054:	0801dc48 	.word	0x0801dc48
 8010058:	20016ed0 	.word	0x20016ed0
 801005c:	0801dc68 	.word	0x0801dc68
 8010060:	20016ed4 	.word	0x20016ed4

08010064 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b088      	sub	sp, #32
 8010068:	af00      	add	r7, sp, #0
 801006a:	4603      	mov	r3, r0
 801006c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801006e:	88fb      	ldrh	r3, [r7, #6]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d101      	bne.n	8010078 <mem_malloc+0x14>
    return NULL;
 8010074:	2300      	movs	r3, #0
 8010076:	e0e2      	b.n	801023e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010078:	88fb      	ldrh	r3, [r7, #6]
 801007a:	3303      	adds	r3, #3
 801007c:	b29b      	uxth	r3, r3
 801007e:	f023 0303 	bic.w	r3, r3, #3
 8010082:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010084:	8bbb      	ldrh	r3, [r7, #28]
 8010086:	2b0b      	cmp	r3, #11
 8010088:	d801      	bhi.n	801008e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801008a:	230c      	movs	r3, #12
 801008c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801008e:	8bbb      	ldrh	r3, [r7, #28]
 8010090:	f5b3 4f0c 	cmp.w	r3, #35840	; 0x8c00
 8010094:	d803      	bhi.n	801009e <mem_malloc+0x3a>
 8010096:	8bba      	ldrh	r2, [r7, #28]
 8010098:	88fb      	ldrh	r3, [r7, #6]
 801009a:	429a      	cmp	r2, r3
 801009c:	d201      	bcs.n	80100a2 <mem_malloc+0x3e>
    return NULL;
 801009e:	2300      	movs	r3, #0
 80100a0:	e0cd      	b.n	801023e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80100a2:	4869      	ldr	r0, [pc, #420]	; (8010248 <mem_malloc+0x1e4>)
 80100a4:	f00a fb14 	bl	801a6d0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80100a8:	4b68      	ldr	r3, [pc, #416]	; (801024c <mem_malloc+0x1e8>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7ff fcfd 	bl	800faac <mem_to_ptr>
 80100b2:	4603      	mov	r3, r0
 80100b4:	83fb      	strh	r3, [r7, #30]
 80100b6:	e0b7      	b.n	8010228 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80100b8:	8bfb      	ldrh	r3, [r7, #30]
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7ff fce4 	bl	800fa88 <ptr_to_mem>
 80100c0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	791b      	ldrb	r3, [r3, #4]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	f040 80a7 	bne.w	801021a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	881b      	ldrh	r3, [r3, #0]
 80100d0:	461a      	mov	r2, r3
 80100d2:	8bfb      	ldrh	r3, [r7, #30]
 80100d4:	1ad3      	subs	r3, r2, r3
 80100d6:	f1a3 0208 	sub.w	r2, r3, #8
 80100da:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80100dc:	429a      	cmp	r2, r3
 80100de:	f0c0 809c 	bcc.w	801021a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	881b      	ldrh	r3, [r3, #0]
 80100e6:	461a      	mov	r2, r3
 80100e8:	8bfb      	ldrh	r3, [r7, #30]
 80100ea:	1ad3      	subs	r3, r2, r3
 80100ec:	f1a3 0208 	sub.w	r2, r3, #8
 80100f0:	8bbb      	ldrh	r3, [r7, #28]
 80100f2:	3314      	adds	r3, #20
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d333      	bcc.n	8010160 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80100f8:	8bfa      	ldrh	r2, [r7, #30]
 80100fa:	8bbb      	ldrh	r3, [r7, #28]
 80100fc:	4413      	add	r3, r2
 80100fe:	b29b      	uxth	r3, r3
 8010100:	3308      	adds	r3, #8
 8010102:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010104:	8a7b      	ldrh	r3, [r7, #18]
 8010106:	f5b3 4f0c 	cmp.w	r3, #35840	; 0x8c00
 801010a:	d106      	bne.n	801011a <mem_malloc+0xb6>
 801010c:	4b50      	ldr	r3, [pc, #320]	; (8010250 <mem_malloc+0x1ec>)
 801010e:	f240 3287 	movw	r2, #903	; 0x387
 8010112:	4950      	ldr	r1, [pc, #320]	; (8010254 <mem_malloc+0x1f0>)
 8010114:	4850      	ldr	r0, [pc, #320]	; (8010258 <mem_malloc+0x1f4>)
 8010116:	f00b f877 	bl	801b208 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801011a:	8a7b      	ldrh	r3, [r7, #18]
 801011c:	4618      	mov	r0, r3
 801011e:	f7ff fcb3 	bl	800fa88 <ptr_to_mem>
 8010122:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2200      	movs	r2, #0
 8010128:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	881a      	ldrh	r2, [r3, #0]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	8bfa      	ldrh	r2, [r7, #30]
 8010136:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	8a7a      	ldrh	r2, [r7, #18]
 801013c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	2201      	movs	r2, #1
 8010142:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	881b      	ldrh	r3, [r3, #0]
 8010148:	f5b3 4f0c 	cmp.w	r3, #35840	; 0x8c00
 801014c:	d00b      	beq.n	8010166 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	881b      	ldrh	r3, [r3, #0]
 8010152:	4618      	mov	r0, r3
 8010154:	f7ff fc98 	bl	800fa88 <ptr_to_mem>
 8010158:	4602      	mov	r2, r0
 801015a:	8a7b      	ldrh	r3, [r7, #18]
 801015c:	8053      	strh	r3, [r2, #2]
 801015e:	e002      	b.n	8010166 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	2201      	movs	r2, #1
 8010164:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010166:	4b39      	ldr	r3, [pc, #228]	; (801024c <mem_malloc+0x1e8>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	697a      	ldr	r2, [r7, #20]
 801016c:	429a      	cmp	r2, r3
 801016e:	d127      	bne.n	80101c0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010170:	4b36      	ldr	r3, [pc, #216]	; (801024c <mem_malloc+0x1e8>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010176:	e005      	b.n	8010184 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	881b      	ldrh	r3, [r3, #0]
 801017c:	4618      	mov	r0, r3
 801017e:	f7ff fc83 	bl	800fa88 <ptr_to_mem>
 8010182:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010184:	69bb      	ldr	r3, [r7, #24]
 8010186:	791b      	ldrb	r3, [r3, #4]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d004      	beq.n	8010196 <mem_malloc+0x132>
 801018c:	4b33      	ldr	r3, [pc, #204]	; (801025c <mem_malloc+0x1f8>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	69ba      	ldr	r2, [r7, #24]
 8010192:	429a      	cmp	r2, r3
 8010194:	d1f0      	bne.n	8010178 <mem_malloc+0x114>
          }
          lfree = cur;
 8010196:	4a2d      	ldr	r2, [pc, #180]	; (801024c <mem_malloc+0x1e8>)
 8010198:	69bb      	ldr	r3, [r7, #24]
 801019a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801019c:	4b2b      	ldr	r3, [pc, #172]	; (801024c <mem_malloc+0x1e8>)
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	4b2e      	ldr	r3, [pc, #184]	; (801025c <mem_malloc+0x1f8>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d00b      	beq.n	80101c0 <mem_malloc+0x15c>
 80101a8:	4b28      	ldr	r3, [pc, #160]	; (801024c <mem_malloc+0x1e8>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	791b      	ldrb	r3, [r3, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d006      	beq.n	80101c0 <mem_malloc+0x15c>
 80101b2:	4b27      	ldr	r3, [pc, #156]	; (8010250 <mem_malloc+0x1ec>)
 80101b4:	f240 32b5 	movw	r2, #949	; 0x3b5
 80101b8:	4929      	ldr	r1, [pc, #164]	; (8010260 <mem_malloc+0x1fc>)
 80101ba:	4827      	ldr	r0, [pc, #156]	; (8010258 <mem_malloc+0x1f4>)
 80101bc:	f00b f824 	bl	801b208 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80101c0:	4821      	ldr	r0, [pc, #132]	; (8010248 <mem_malloc+0x1e4>)
 80101c2:	f00a fa94 	bl	801a6ee <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80101c6:	8bba      	ldrh	r2, [r7, #28]
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	4413      	add	r3, r2
 80101cc:	3308      	adds	r3, #8
 80101ce:	4a23      	ldr	r2, [pc, #140]	; (801025c <mem_malloc+0x1f8>)
 80101d0:	6812      	ldr	r2, [r2, #0]
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d906      	bls.n	80101e4 <mem_malloc+0x180>
 80101d6:	4b1e      	ldr	r3, [pc, #120]	; (8010250 <mem_malloc+0x1ec>)
 80101d8:	f240 32b9 	movw	r2, #953	; 0x3b9
 80101dc:	4921      	ldr	r1, [pc, #132]	; (8010264 <mem_malloc+0x200>)
 80101de:	481e      	ldr	r0, [pc, #120]	; (8010258 <mem_malloc+0x1f4>)
 80101e0:	f00b f812 	bl	801b208 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	f003 0303 	and.w	r3, r3, #3
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d006      	beq.n	80101fc <mem_malloc+0x198>
 80101ee:	4b18      	ldr	r3, [pc, #96]	; (8010250 <mem_malloc+0x1ec>)
 80101f0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80101f4:	491c      	ldr	r1, [pc, #112]	; (8010268 <mem_malloc+0x204>)
 80101f6:	4818      	ldr	r0, [pc, #96]	; (8010258 <mem_malloc+0x1f4>)
 80101f8:	f00b f806 	bl	801b208 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	f003 0303 	and.w	r3, r3, #3
 8010202:	2b00      	cmp	r3, #0
 8010204:	d006      	beq.n	8010214 <mem_malloc+0x1b0>
 8010206:	4b12      	ldr	r3, [pc, #72]	; (8010250 <mem_malloc+0x1ec>)
 8010208:	f240 32bd 	movw	r2, #957	; 0x3bd
 801020c:	4917      	ldr	r1, [pc, #92]	; (801026c <mem_malloc+0x208>)
 801020e:	4812      	ldr	r0, [pc, #72]	; (8010258 <mem_malloc+0x1f4>)
 8010210:	f00a fffa 	bl	801b208 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	3308      	adds	r3, #8
 8010218:	e011      	b.n	801023e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801021a:	8bfb      	ldrh	r3, [r7, #30]
 801021c:	4618      	mov	r0, r3
 801021e:	f7ff fc33 	bl	800fa88 <ptr_to_mem>
 8010222:	4603      	mov	r3, r0
 8010224:	881b      	ldrh	r3, [r3, #0]
 8010226:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010228:	8bfa      	ldrh	r2, [r7, #30]
 801022a:	8bbb      	ldrh	r3, [r7, #28]
 801022c:	f5c3 430c 	rsb	r3, r3, #35840	; 0x8c00
 8010230:	429a      	cmp	r2, r3
 8010232:	f4ff af41 	bcc.w	80100b8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010236:	4804      	ldr	r0, [pc, #16]	; (8010248 <mem_malloc+0x1e4>)
 8010238:	f00a fa59 	bl	801a6ee <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801023c:	2300      	movs	r3, #0
}
 801023e:	4618      	mov	r0, r3
 8010240:	3720      	adds	r7, #32
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}
 8010246:	bf00      	nop
 8010248:	20016ed0 	.word	0x20016ed0
 801024c:	20016ed4 	.word	0x20016ed4
 8010250:	0801daa4 	.word	0x0801daa4
 8010254:	0801dc68 	.word	0x0801dc68
 8010258:	0801daec 	.word	0x0801daec
 801025c:	20016ecc 	.word	0x20016ecc
 8010260:	0801dc7c 	.word	0x0801dc7c
 8010264:	0801dc98 	.word	0x0801dc98
 8010268:	0801dcc8 	.word	0x0801dcc8
 801026c:	0801dcf8 	.word	0x0801dcf8

08010270 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b084      	sub	sp, #16
 8010274:	af00      	add	r7, sp, #0
 8010276:	4603      	mov	r3, r0
 8010278:	460a      	mov	r2, r1
 801027a:	80fb      	strh	r3, [r7, #6]
 801027c:	4613      	mov	r3, r2
 801027e:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8010280:	88fb      	ldrh	r3, [r7, #6]
 8010282:	88ba      	ldrh	r2, [r7, #4]
 8010284:	fb02 f303 	mul.w	r3, r2, r3
 8010288:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	b29b      	uxth	r3, r3
 801028e:	461a      	mov	r2, r3
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	4293      	cmp	r3, r2
 8010294:	d001      	beq.n	801029a <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 8010296:	2300      	movs	r3, #0
 8010298:	e00e      	b.n	80102b8 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	b29b      	uxth	r3, r3
 801029e:	4618      	mov	r0, r3
 80102a0:	f7ff fee0 	bl	8010064 <mem_malloc>
 80102a4:	60b8      	str	r0, [r7, #8]
  if (p) {
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d004      	beq.n	80102b6 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	2100      	movs	r1, #0
 80102b0:	68b8      	ldr	r0, [r7, #8]
 80102b2:	f00b f80e 	bl	801b2d2 <memset>
  }
  return p;
 80102b6:	68bb      	ldr	r3, [r7, #8]
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3710      	adds	r7, #16
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80102c0:	b480      	push	{r7}
 80102c2:	b085      	sub	sp, #20
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	689b      	ldr	r3, [r3, #8]
 80102cc:	2200      	movs	r2, #0
 80102ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	3303      	adds	r3, #3
 80102d6:	f023 0303 	bic.w	r3, r3, #3
 80102da:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80102dc:	2300      	movs	r3, #0
 80102de:	60fb      	str	r3, [r7, #12]
 80102e0:	e011      	b.n	8010306 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	689b      	ldr	r3, [r3, #8]
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	68ba      	ldr	r2, [r7, #8]
 80102f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	881b      	ldrh	r3, [r3, #0]
 80102f8:	461a      	mov	r2, r3
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	4413      	add	r3, r2
 80102fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	3301      	adds	r3, #1
 8010304:	60fb      	str	r3, [r7, #12]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	885b      	ldrh	r3, [r3, #2]
 801030a:	461a      	mov	r2, r3
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	4293      	cmp	r3, r2
 8010310:	dbe7      	blt.n	80102e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010312:	bf00      	nop
 8010314:	bf00      	nop
 8010316:	3714      	adds	r7, #20
 8010318:	46bd      	mov	sp, r7
 801031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031e:	4770      	bx	lr

08010320 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010326:	2300      	movs	r3, #0
 8010328:	80fb      	strh	r3, [r7, #6]
 801032a:	e009      	b.n	8010340 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801032c:	88fb      	ldrh	r3, [r7, #6]
 801032e:	4a08      	ldr	r2, [pc, #32]	; (8010350 <memp_init+0x30>)
 8010330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010334:	4618      	mov	r0, r3
 8010336:	f7ff ffc3 	bl	80102c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801033a:	88fb      	ldrh	r3, [r7, #6]
 801033c:	3301      	adds	r3, #1
 801033e:	80fb      	strh	r3, [r7, #6]
 8010340:	88fb      	ldrh	r3, [r7, #6]
 8010342:	2b0c      	cmp	r3, #12
 8010344:	d9f2      	bls.n	801032c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010346:	bf00      	nop
 8010348:	bf00      	nop
 801034a:	3708      	adds	r7, #8
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}
 8010350:	08020514 	.word	0x08020514

08010354 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801035c:	f00a f9fa 	bl	801a754 <sys_arch_protect>
 8010360:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	689b      	ldr	r3, [r3, #8]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d015      	beq.n	801039c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	689b      	ldr	r3, [r3, #8]
 8010374:	68ba      	ldr	r2, [r7, #8]
 8010376:	6812      	ldr	r2, [r2, #0]
 8010378:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	f003 0303 	and.w	r3, r3, #3
 8010380:	2b00      	cmp	r3, #0
 8010382:	d006      	beq.n	8010392 <do_memp_malloc_pool+0x3e>
 8010384:	4b09      	ldr	r3, [pc, #36]	; (80103ac <do_memp_malloc_pool+0x58>)
 8010386:	f44f 728c 	mov.w	r2, #280	; 0x118
 801038a:	4909      	ldr	r1, [pc, #36]	; (80103b0 <do_memp_malloc_pool+0x5c>)
 801038c:	4809      	ldr	r0, [pc, #36]	; (80103b4 <do_memp_malloc_pool+0x60>)
 801038e:	f00a ff3b 	bl	801b208 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010392:	68f8      	ldr	r0, [r7, #12]
 8010394:	f00a f9ec 	bl	801a770 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	e003      	b.n	80103a4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801039c:	68f8      	ldr	r0, [r7, #12]
 801039e:	f00a f9e7 	bl	801a770 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80103a2:	2300      	movs	r3, #0
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3710      	adds	r7, #16
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	0801dd1c 	.word	0x0801dd1c
 80103b0:	0801dd4c 	.word	0x0801dd4c
 80103b4:	0801dd70 	.word	0x0801dd70

080103b8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d106      	bne.n	80103d4 <memp_malloc_pool+0x1c>
 80103c6:	4b0a      	ldr	r3, [pc, #40]	; (80103f0 <memp_malloc_pool+0x38>)
 80103c8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80103cc:	4909      	ldr	r1, [pc, #36]	; (80103f4 <memp_malloc_pool+0x3c>)
 80103ce:	480a      	ldr	r0, [pc, #40]	; (80103f8 <memp_malloc_pool+0x40>)
 80103d0:	f00a ff1a 	bl	801b208 <iprintf>
  if (desc == NULL) {
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d101      	bne.n	80103de <memp_malloc_pool+0x26>
    return NULL;
 80103da:	2300      	movs	r3, #0
 80103dc:	e003      	b.n	80103e6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f7ff ffb8 	bl	8010354 <do_memp_malloc_pool>
 80103e4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3708      	adds	r7, #8
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	0801dd1c 	.word	0x0801dd1c
 80103f4:	0801dd98 	.word	0x0801dd98
 80103f8:	0801dd70 	.word	0x0801dd70

080103fc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b084      	sub	sp, #16
 8010400:	af00      	add	r7, sp, #0
 8010402:	4603      	mov	r3, r0
 8010404:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010406:	79fb      	ldrb	r3, [r7, #7]
 8010408:	2b0c      	cmp	r3, #12
 801040a:	d908      	bls.n	801041e <memp_malloc+0x22>
 801040c:	4b0a      	ldr	r3, [pc, #40]	; (8010438 <memp_malloc+0x3c>)
 801040e:	f240 1257 	movw	r2, #343	; 0x157
 8010412:	490a      	ldr	r1, [pc, #40]	; (801043c <memp_malloc+0x40>)
 8010414:	480a      	ldr	r0, [pc, #40]	; (8010440 <memp_malloc+0x44>)
 8010416:	f00a fef7 	bl	801b208 <iprintf>
 801041a:	2300      	movs	r3, #0
 801041c:	e008      	b.n	8010430 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801041e:	79fb      	ldrb	r3, [r7, #7]
 8010420:	4a08      	ldr	r2, [pc, #32]	; (8010444 <memp_malloc+0x48>)
 8010422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010426:	4618      	mov	r0, r3
 8010428:	f7ff ff94 	bl	8010354 <do_memp_malloc_pool>
 801042c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801042e:	68fb      	ldr	r3, [r7, #12]
}
 8010430:	4618      	mov	r0, r3
 8010432:	3710      	adds	r7, #16
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	0801dd1c 	.word	0x0801dd1c
 801043c:	0801ddac 	.word	0x0801ddac
 8010440:	0801dd70 	.word	0x0801dd70
 8010444:	08020514 	.word	0x08020514

08010448 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	f003 0303 	and.w	r3, r3, #3
 8010458:	2b00      	cmp	r3, #0
 801045a:	d006      	beq.n	801046a <do_memp_free_pool+0x22>
 801045c:	4b0d      	ldr	r3, [pc, #52]	; (8010494 <do_memp_free_pool+0x4c>)
 801045e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010462:	490d      	ldr	r1, [pc, #52]	; (8010498 <do_memp_free_pool+0x50>)
 8010464:	480d      	ldr	r0, [pc, #52]	; (801049c <do_memp_free_pool+0x54>)
 8010466:	f00a fecf 	bl	801b208 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801046e:	f00a f971 	bl	801a754 <sys_arch_protect>
 8010472:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	689b      	ldr	r3, [r3, #8]
 8010478:	681a      	ldr	r2, [r3, #0]
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	689b      	ldr	r3, [r3, #8]
 8010482:	68fa      	ldr	r2, [r7, #12]
 8010484:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010486:	68b8      	ldr	r0, [r7, #8]
 8010488:	f00a f972 	bl	801a770 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801048c:	bf00      	nop
 801048e:	3710      	adds	r7, #16
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}
 8010494:	0801dd1c 	.word	0x0801dd1c
 8010498:	0801ddcc 	.word	0x0801ddcc
 801049c:	0801dd70 	.word	0x0801dd70

080104a0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d106      	bne.n	80104be <memp_free_pool+0x1e>
 80104b0:	4b0a      	ldr	r3, [pc, #40]	; (80104dc <memp_free_pool+0x3c>)
 80104b2:	f240 1295 	movw	r2, #405	; 0x195
 80104b6:	490a      	ldr	r1, [pc, #40]	; (80104e0 <memp_free_pool+0x40>)
 80104b8:	480a      	ldr	r0, [pc, #40]	; (80104e4 <memp_free_pool+0x44>)
 80104ba:	f00a fea5 	bl	801b208 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d007      	beq.n	80104d4 <memp_free_pool+0x34>
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d004      	beq.n	80104d4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80104ca:	6839      	ldr	r1, [r7, #0]
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f7ff ffbb 	bl	8010448 <do_memp_free_pool>
 80104d2:	e000      	b.n	80104d6 <memp_free_pool+0x36>
    return;
 80104d4:	bf00      	nop
}
 80104d6:	3708      	adds	r7, #8
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	0801dd1c 	.word	0x0801dd1c
 80104e0:	0801dd98 	.word	0x0801dd98
 80104e4:	0801dd70 	.word	0x0801dd70

080104e8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	4603      	mov	r3, r0
 80104f0:	6039      	str	r1, [r7, #0]
 80104f2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80104f4:	79fb      	ldrb	r3, [r7, #7]
 80104f6:	2b0c      	cmp	r3, #12
 80104f8:	d907      	bls.n	801050a <memp_free+0x22>
 80104fa:	4b0c      	ldr	r3, [pc, #48]	; (801052c <memp_free+0x44>)
 80104fc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010500:	490b      	ldr	r1, [pc, #44]	; (8010530 <memp_free+0x48>)
 8010502:	480c      	ldr	r0, [pc, #48]	; (8010534 <memp_free+0x4c>)
 8010504:	f00a fe80 	bl	801b208 <iprintf>
 8010508:	e00c      	b.n	8010524 <memp_free+0x3c>

  if (mem == NULL) {
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d008      	beq.n	8010522 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010510:	79fb      	ldrb	r3, [r7, #7]
 8010512:	4a09      	ldr	r2, [pc, #36]	; (8010538 <memp_free+0x50>)
 8010514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010518:	6839      	ldr	r1, [r7, #0]
 801051a:	4618      	mov	r0, r3
 801051c:	f7ff ff94 	bl	8010448 <do_memp_free_pool>
 8010520:	e000      	b.n	8010524 <memp_free+0x3c>
    return;
 8010522:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010524:	3708      	adds	r7, #8
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}
 801052a:	bf00      	nop
 801052c:	0801dd1c 	.word	0x0801dd1c
 8010530:	0801ddec 	.word	0x0801ddec
 8010534:	0801dd70 	.word	0x0801dd70
 8010538:	08020514 	.word	0x08020514

0801053c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801053c:	b480      	push	{r7}
 801053e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010540:	bf00      	nop
 8010542:	46bd      	mov	sp, r7
 8010544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010548:	4770      	bx	lr
	...

0801054c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b086      	sub	sp, #24
 8010550:	af00      	add	r7, sp, #0
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	607a      	str	r2, [r7, #4]
 8010558:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d108      	bne.n	8010572 <netif_add+0x26>
 8010560:	4b57      	ldr	r3, [pc, #348]	; (80106c0 <netif_add+0x174>)
 8010562:	f240 1227 	movw	r2, #295	; 0x127
 8010566:	4957      	ldr	r1, [pc, #348]	; (80106c4 <netif_add+0x178>)
 8010568:	4857      	ldr	r0, [pc, #348]	; (80106c8 <netif_add+0x17c>)
 801056a:	f00a fe4d 	bl	801b208 <iprintf>
 801056e:	2300      	movs	r3, #0
 8010570:	e0a2      	b.n	80106b8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010574:	2b00      	cmp	r3, #0
 8010576:	d108      	bne.n	801058a <netif_add+0x3e>
 8010578:	4b51      	ldr	r3, [pc, #324]	; (80106c0 <netif_add+0x174>)
 801057a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801057e:	4953      	ldr	r1, [pc, #332]	; (80106cc <netif_add+0x180>)
 8010580:	4851      	ldr	r0, [pc, #324]	; (80106c8 <netif_add+0x17c>)
 8010582:	f00a fe41 	bl	801b208 <iprintf>
 8010586:	2300      	movs	r3, #0
 8010588:	e096      	b.n	80106b8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d101      	bne.n	8010594 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010590:	4b4f      	ldr	r3, [pc, #316]	; (80106d0 <netif_add+0x184>)
 8010592:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d101      	bne.n	801059e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801059a:	4b4d      	ldr	r3, [pc, #308]	; (80106d0 <netif_add+0x184>)
 801059c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d101      	bne.n	80105a8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80105a4:	4b4a      	ldr	r3, [pc, #296]	; (80106d0 <netif_add+0x184>)
 80105a6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2200      	movs	r2, #0
 80105ac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2200      	movs	r2, #0
 80105b2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	2200      	movs	r2, #0
 80105b8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	4a45      	ldr	r2, [pc, #276]	; (80106d4 <netif_add+0x188>)
 80105be:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	2200      	movs	r2, #0
 80105c4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2200      	movs	r2, #0
 80105ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2200      	movs	r2, #0
 80105d2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	6a3a      	ldr	r2, [r7, #32]
 80105d8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80105da:	4b3f      	ldr	r3, [pc, #252]	; (80106d8 <netif_add+0x18c>)
 80105dc:	781a      	ldrb	r2, [r3, #0]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105e8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	687a      	ldr	r2, [r7, #4]
 80105ee:	68b9      	ldr	r1, [r7, #8]
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f000 f913 	bl	801081c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80105f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f8:	68f8      	ldr	r0, [r7, #12]
 80105fa:	4798      	blx	r3
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d001      	beq.n	8010606 <netif_add+0xba>
    return NULL;
 8010602:	2300      	movs	r3, #0
 8010604:	e058      	b.n	80106b8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801060c:	2bff      	cmp	r3, #255	; 0xff
 801060e:	d103      	bne.n	8010618 <netif_add+0xcc>
        netif->num = 0;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2200      	movs	r2, #0
 8010614:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8010618:	2300      	movs	r3, #0
 801061a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801061c:	4b2f      	ldr	r3, [pc, #188]	; (80106dc <netif_add+0x190>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	617b      	str	r3, [r7, #20]
 8010622:	e02b      	b.n	801067c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010624:	697a      	ldr	r2, [r7, #20]
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	429a      	cmp	r2, r3
 801062a:	d106      	bne.n	801063a <netif_add+0xee>
 801062c:	4b24      	ldr	r3, [pc, #144]	; (80106c0 <netif_add+0x174>)
 801062e:	f240 128b 	movw	r2, #395	; 0x18b
 8010632:	492b      	ldr	r1, [pc, #172]	; (80106e0 <netif_add+0x194>)
 8010634:	4824      	ldr	r0, [pc, #144]	; (80106c8 <netif_add+0x17c>)
 8010636:	f00a fde7 	bl	801b208 <iprintf>
        num_netifs++;
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	3301      	adds	r3, #1
 801063e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	2bff      	cmp	r3, #255	; 0xff
 8010644:	dd06      	ble.n	8010654 <netif_add+0x108>
 8010646:	4b1e      	ldr	r3, [pc, #120]	; (80106c0 <netif_add+0x174>)
 8010648:	f240 128d 	movw	r2, #397	; 0x18d
 801064c:	4925      	ldr	r1, [pc, #148]	; (80106e4 <netif_add+0x198>)
 801064e:	481e      	ldr	r0, [pc, #120]	; (80106c8 <netif_add+0x17c>)
 8010650:	f00a fdda 	bl	801b208 <iprintf>
        if (netif2->num == netif->num) {
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010660:	429a      	cmp	r2, r3
 8010662:	d108      	bne.n	8010676 <netif_add+0x12a>
          netif->num++;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801066a:	3301      	adds	r3, #1
 801066c:	b2da      	uxtb	r2, r3
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8010674:	e005      	b.n	8010682 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	617b      	str	r3, [r7, #20]
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d1d0      	bne.n	8010624 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d1be      	bne.n	8010606 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801068e:	2bfe      	cmp	r3, #254	; 0xfe
 8010690:	d103      	bne.n	801069a <netif_add+0x14e>
    netif_num = 0;
 8010692:	4b11      	ldr	r3, [pc, #68]	; (80106d8 <netif_add+0x18c>)
 8010694:	2200      	movs	r2, #0
 8010696:	701a      	strb	r2, [r3, #0]
 8010698:	e006      	b.n	80106a8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80106a0:	3301      	adds	r3, #1
 80106a2:	b2da      	uxtb	r2, r3
 80106a4:	4b0c      	ldr	r3, [pc, #48]	; (80106d8 <netif_add+0x18c>)
 80106a6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80106a8:	4b0c      	ldr	r3, [pc, #48]	; (80106dc <netif_add+0x190>)
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80106b0:	4a0a      	ldr	r2, [pc, #40]	; (80106dc <netif_add+0x190>)
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80106b6:	68fb      	ldr	r3, [r7, #12]
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3718      	adds	r7, #24
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	0801de08 	.word	0x0801de08
 80106c4:	0801de9c 	.word	0x0801de9c
 80106c8:	0801de58 	.word	0x0801de58
 80106cc:	0801deb8 	.word	0x0801deb8
 80106d0:	08020588 	.word	0x08020588
 80106d4:	08010af7 	.word	0x08010af7
 80106d8:	2001dce0 	.word	0x2001dce0
 80106dc:	2001dcd8 	.word	0x2001dcd8
 80106e0:	0801dedc 	.word	0x0801dedc
 80106e4:	0801def0 	.word	0x0801def0

080106e8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80106f2:	6839      	ldr	r1, [r7, #0]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f002 fe95 	bl	8013424 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80106fa:	6839      	ldr	r1, [r7, #0]
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f007 fc3b 	bl	8017f78 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010702:	bf00      	nop
 8010704:	3708      	adds	r7, #8
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
	...

0801070c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b086      	sub	sp, #24
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d106      	bne.n	801072c <netif_do_set_ipaddr+0x20>
 801071e:	4b1d      	ldr	r3, [pc, #116]	; (8010794 <netif_do_set_ipaddr+0x88>)
 8010720:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010724:	491c      	ldr	r1, [pc, #112]	; (8010798 <netif_do_set_ipaddr+0x8c>)
 8010726:	481d      	ldr	r0, [pc, #116]	; (801079c <netif_do_set_ipaddr+0x90>)
 8010728:	f00a fd6e 	bl	801b208 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d106      	bne.n	8010740 <netif_do_set_ipaddr+0x34>
 8010732:	4b18      	ldr	r3, [pc, #96]	; (8010794 <netif_do_set_ipaddr+0x88>)
 8010734:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010738:	4917      	ldr	r1, [pc, #92]	; (8010798 <netif_do_set_ipaddr+0x8c>)
 801073a:	4818      	ldr	r0, [pc, #96]	; (801079c <netif_do_set_ipaddr+0x90>)
 801073c:	f00a fd64 	bl	801b208 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	3304      	adds	r3, #4
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	429a      	cmp	r2, r3
 801074c:	d01c      	beq.n	8010788 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	3304      	adds	r3, #4
 8010758:	681a      	ldr	r2, [r3, #0]
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801075e:	f107 0314 	add.w	r3, r7, #20
 8010762:	4619      	mov	r1, r3
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f7ff ffbf 	bl	80106e8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d002      	beq.n	8010776 <netif_do_set_ipaddr+0x6a>
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	e000      	b.n	8010778 <netif_do_set_ipaddr+0x6c>
 8010776:	2300      	movs	r3, #0
 8010778:	68fa      	ldr	r2, [r7, #12]
 801077a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801077c:	2101      	movs	r1, #1
 801077e:	68f8      	ldr	r0, [r7, #12]
 8010780:	f000 f8d2 	bl	8010928 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010784:	2301      	movs	r3, #1
 8010786:	e000      	b.n	801078a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010788:	2300      	movs	r3, #0
}
 801078a:	4618      	mov	r0, r3
 801078c:	3718      	adds	r7, #24
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	0801de08 	.word	0x0801de08
 8010798:	0801df20 	.word	0x0801df20
 801079c:	0801de58 	.word	0x0801de58

080107a0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b085      	sub	sp, #20
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	60f8      	str	r0, [r7, #12]
 80107a8:	60b9      	str	r1, [r7, #8]
 80107aa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	681a      	ldr	r2, [r3, #0]
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	3308      	adds	r3, #8
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d00a      	beq.n	80107d0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d002      	beq.n	80107c6 <netif_do_set_netmask+0x26>
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	e000      	b.n	80107c8 <netif_do_set_netmask+0x28>
 80107c6:	2300      	movs	r3, #0
 80107c8:	68fa      	ldr	r2, [r7, #12]
 80107ca:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80107cc:	2301      	movs	r3, #1
 80107ce:	e000      	b.n	80107d2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80107d0:	2300      	movs	r3, #0
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3714      	adds	r7, #20
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr

080107de <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80107de:	b480      	push	{r7}
 80107e0:	b085      	sub	sp, #20
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	60f8      	str	r0, [r7, #12]
 80107e6:	60b9      	str	r1, [r7, #8]
 80107e8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	330c      	adds	r3, #12
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d00a      	beq.n	801080e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d002      	beq.n	8010804 <netif_do_set_gw+0x26>
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	e000      	b.n	8010806 <netif_do_set_gw+0x28>
 8010804:	2300      	movs	r3, #0
 8010806:	68fa      	ldr	r2, [r7, #12]
 8010808:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801080a:	2301      	movs	r3, #1
 801080c:	e000      	b.n	8010810 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801080e:	2300      	movs	r3, #0
}
 8010810:	4618      	mov	r0, r3
 8010812:	3714      	adds	r7, #20
 8010814:	46bd      	mov	sp, r7
 8010816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081a:	4770      	bx	lr

0801081c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b088      	sub	sp, #32
 8010820:	af00      	add	r7, sp, #0
 8010822:	60f8      	str	r0, [r7, #12]
 8010824:	60b9      	str	r1, [r7, #8]
 8010826:	607a      	str	r2, [r7, #4]
 8010828:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801082a:	2300      	movs	r3, #0
 801082c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801082e:	2300      	movs	r3, #0
 8010830:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d101      	bne.n	801083c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010838:	4b1c      	ldr	r3, [pc, #112]	; (80108ac <netif_set_addr+0x90>)
 801083a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d101      	bne.n	8010846 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010842:	4b1a      	ldr	r3, [pc, #104]	; (80108ac <netif_set_addr+0x90>)
 8010844:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d101      	bne.n	8010850 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801084c:	4b17      	ldr	r3, [pc, #92]	; (80108ac <netif_set_addr+0x90>)
 801084e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d003      	beq.n	801085e <netif_set_addr+0x42>
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d101      	bne.n	8010862 <netif_set_addr+0x46>
 801085e:	2301      	movs	r3, #1
 8010860:	e000      	b.n	8010864 <netif_set_addr+0x48>
 8010862:	2300      	movs	r3, #0
 8010864:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d006      	beq.n	801087a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801086c:	f107 0310 	add.w	r3, r7, #16
 8010870:	461a      	mov	r2, r3
 8010872:	68b9      	ldr	r1, [r7, #8]
 8010874:	68f8      	ldr	r0, [r7, #12]
 8010876:	f7ff ff49 	bl	801070c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801087a:	69fa      	ldr	r2, [r7, #28]
 801087c:	6879      	ldr	r1, [r7, #4]
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	f7ff ff8e 	bl	80107a0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010884:	69ba      	ldr	r2, [r7, #24]
 8010886:	6839      	ldr	r1, [r7, #0]
 8010888:	68f8      	ldr	r0, [r7, #12]
 801088a:	f7ff ffa8 	bl	80107de <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d106      	bne.n	80108a2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010894:	f107 0310 	add.w	r3, r7, #16
 8010898:	461a      	mov	r2, r3
 801089a:	68b9      	ldr	r1, [r7, #8]
 801089c:	68f8      	ldr	r0, [r7, #12]
 801089e:	f7ff ff35 	bl	801070c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80108a2:	bf00      	nop
 80108a4:	3720      	adds	r7, #32
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	08020588 	.word	0x08020588

080108b0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80108b0:	b480      	push	{r7}
 80108b2:	b083      	sub	sp, #12
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80108b8:	4a04      	ldr	r2, [pc, #16]	; (80108cc <netif_set_default+0x1c>)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80108be:	bf00      	nop
 80108c0:	370c      	adds	r7, #12
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr
 80108ca:	bf00      	nop
 80108cc:	2001dcdc 	.word	0x2001dcdc

080108d0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d107      	bne.n	80108ee <netif_set_up+0x1e>
 80108de:	4b0f      	ldr	r3, [pc, #60]	; (801091c <netif_set_up+0x4c>)
 80108e0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80108e4:	490e      	ldr	r1, [pc, #56]	; (8010920 <netif_set_up+0x50>)
 80108e6:	480f      	ldr	r0, [pc, #60]	; (8010924 <netif_set_up+0x54>)
 80108e8:	f00a fc8e 	bl	801b208 <iprintf>
 80108ec:	e013      	b.n	8010916 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80108f4:	f003 0301 	and.w	r3, r3, #1
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d10c      	bne.n	8010916 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010902:	f043 0301 	orr.w	r3, r3, #1
 8010906:	b2da      	uxtb	r2, r3
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801090e:	2103      	movs	r1, #3
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f000 f809 	bl	8010928 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010916:	3708      	adds	r7, #8
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	0801de08 	.word	0x0801de08
 8010920:	0801df90 	.word	0x0801df90
 8010924:	0801de58 	.word	0x0801de58

08010928 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	460b      	mov	r3, r1
 8010932:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d106      	bne.n	8010948 <netif_issue_reports+0x20>
 801093a:	4b18      	ldr	r3, [pc, #96]	; (801099c <netif_issue_reports+0x74>)
 801093c:	f240 326d 	movw	r2, #877	; 0x36d
 8010940:	4917      	ldr	r1, [pc, #92]	; (80109a0 <netif_issue_reports+0x78>)
 8010942:	4818      	ldr	r0, [pc, #96]	; (80109a4 <netif_issue_reports+0x7c>)
 8010944:	f00a fc60 	bl	801b208 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801094e:	f003 0304 	and.w	r3, r3, #4
 8010952:	2b00      	cmp	r3, #0
 8010954:	d01e      	beq.n	8010994 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801095c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010960:	2b00      	cmp	r3, #0
 8010962:	d017      	beq.n	8010994 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010964:	78fb      	ldrb	r3, [r7, #3]
 8010966:	f003 0301 	and.w	r3, r3, #1
 801096a:	2b00      	cmp	r3, #0
 801096c:	d013      	beq.n	8010996 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	3304      	adds	r3, #4
 8010972:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010974:	2b00      	cmp	r3, #0
 8010976:	d00e      	beq.n	8010996 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801097e:	f003 0308 	and.w	r3, r3, #8
 8010982:	2b00      	cmp	r3, #0
 8010984:	d007      	beq.n	8010996 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	3304      	adds	r3, #4
 801098a:	4619      	mov	r1, r3
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f008 fa5d 	bl	8018e4c <etharp_request>
 8010992:	e000      	b.n	8010996 <netif_issue_reports+0x6e>
    return;
 8010994:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010996:	3708      	adds	r7, #8
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}
 801099c:	0801de08 	.word	0x0801de08
 80109a0:	0801dfac 	.word	0x0801dfac
 80109a4:	0801de58 	.word	0x0801de58

080109a8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d107      	bne.n	80109c6 <netif_set_down+0x1e>
 80109b6:	4b12      	ldr	r3, [pc, #72]	; (8010a00 <netif_set_down+0x58>)
 80109b8:	f240 329b 	movw	r2, #923	; 0x39b
 80109bc:	4911      	ldr	r1, [pc, #68]	; (8010a04 <netif_set_down+0x5c>)
 80109be:	4812      	ldr	r0, [pc, #72]	; (8010a08 <netif_set_down+0x60>)
 80109c0:	f00a fc22 	bl	801b208 <iprintf>
 80109c4:	e019      	b.n	80109fa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109cc:	f003 0301 	and.w	r3, r3, #1
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d012      	beq.n	80109fa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109da:	f023 0301 	bic.w	r3, r3, #1
 80109de:	b2da      	uxtb	r2, r3
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109ec:	f003 0308 	and.w	r3, r3, #8
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d002      	beq.n	80109fa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f007 fde7 	bl	80185c8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80109fa:	3708      	adds	r7, #8
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}
 8010a00:	0801de08 	.word	0x0801de08
 8010a04:	0801dfd0 	.word	0x0801dfd0
 8010a08:	0801de58 	.word	0x0801de58

08010a0c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d107      	bne.n	8010a2a <netif_set_link_up+0x1e>
 8010a1a:	4b13      	ldr	r3, [pc, #76]	; (8010a68 <netif_set_link_up+0x5c>)
 8010a1c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010a20:	4912      	ldr	r1, [pc, #72]	; (8010a6c <netif_set_link_up+0x60>)
 8010a22:	4813      	ldr	r0, [pc, #76]	; (8010a70 <netif_set_link_up+0x64>)
 8010a24:	f00a fbf0 	bl	801b208 <iprintf>
 8010a28:	e01b      	b.n	8010a62 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010a30:	f003 0304 	and.w	r3, r3, #4
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d114      	bne.n	8010a62 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010a3e:	f043 0304 	orr.w	r3, r3, #4
 8010a42:	b2da      	uxtb	r2, r3
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010a4a:	2103      	movs	r1, #3
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f7ff ff6b 	bl	8010928 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	69db      	ldr	r3, [r3, #28]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d003      	beq.n	8010a62 <netif_set_link_up+0x56>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	69db      	ldr	r3, [r3, #28]
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010a62:	3708      	adds	r7, #8
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	0801de08 	.word	0x0801de08
 8010a6c:	0801dff0 	.word	0x0801dff0
 8010a70:	0801de58 	.word	0x0801de58

08010a74 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d107      	bne.n	8010a92 <netif_set_link_down+0x1e>
 8010a82:	4b11      	ldr	r3, [pc, #68]	; (8010ac8 <netif_set_link_down+0x54>)
 8010a84:	f240 4206 	movw	r2, #1030	; 0x406
 8010a88:	4910      	ldr	r1, [pc, #64]	; (8010acc <netif_set_link_down+0x58>)
 8010a8a:	4811      	ldr	r0, [pc, #68]	; (8010ad0 <netif_set_link_down+0x5c>)
 8010a8c:	f00a fbbc 	bl	801b208 <iprintf>
 8010a90:	e017      	b.n	8010ac2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010a98:	f003 0304 	and.w	r3, r3, #4
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d010      	beq.n	8010ac2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010aa6:	f023 0304 	bic.w	r3, r3, #4
 8010aaa:	b2da      	uxtb	r2, r3
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	69db      	ldr	r3, [r3, #28]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d003      	beq.n	8010ac2 <netif_set_link_down+0x4e>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	69db      	ldr	r3, [r3, #28]
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010ac2:	3708      	adds	r7, #8
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	0801de08 	.word	0x0801de08
 8010acc:	0801e014 	.word	0x0801e014
 8010ad0:	0801de58 	.word	0x0801de58

08010ad4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b083      	sub	sp, #12
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d002      	beq.n	8010aea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	683a      	ldr	r2, [r7, #0]
 8010ae8:	61da      	str	r2, [r3, #28]
  }
}
 8010aea:	bf00      	nop
 8010aec:	370c      	adds	r7, #12
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr

08010af6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010af6:	b480      	push	{r7}
 8010af8:	b085      	sub	sp, #20
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	60f8      	str	r0, [r7, #12]
 8010afe:	60b9      	str	r1, [r7, #8]
 8010b00:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010b02:	f06f 030b 	mvn.w	r3, #11
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3714      	adds	r7, #20
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr
	...

08010b14 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010b14:	b480      	push	{r7}
 8010b16:	b085      	sub	sp, #20
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010b1e:	79fb      	ldrb	r3, [r7, #7]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d013      	beq.n	8010b4c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010b24:	4b0d      	ldr	r3, [pc, #52]	; (8010b5c <netif_get_by_index+0x48>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	60fb      	str	r3, [r7, #12]
 8010b2a:	e00c      	b.n	8010b46 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b32:	3301      	adds	r3, #1
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	79fa      	ldrb	r2, [r7, #7]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d101      	bne.n	8010b40 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	e006      	b.n	8010b4e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	60fb      	str	r3, [r7, #12]
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d1ef      	bne.n	8010b2c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010b4c:	2300      	movs	r3, #0
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3714      	adds	r7, #20
 8010b52:	46bd      	mov	sp, r7
 8010b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b58:	4770      	bx	lr
 8010b5a:	bf00      	nop
 8010b5c:	2001dcd8 	.word	0x2001dcd8

08010b60 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010b66:	f009 fdf5 	bl	801a754 <sys_arch_protect>
 8010b6a:	6038      	str	r0, [r7, #0]
 8010b6c:	4b0d      	ldr	r3, [pc, #52]	; (8010ba4 <pbuf_free_ooseq+0x44>)
 8010b6e:	2200      	movs	r2, #0
 8010b70:	701a      	strb	r2, [r3, #0]
 8010b72:	6838      	ldr	r0, [r7, #0]
 8010b74:	f009 fdfc 	bl	801a770 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010b78:	4b0b      	ldr	r3, [pc, #44]	; (8010ba8 <pbuf_free_ooseq+0x48>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	607b      	str	r3, [r7, #4]
 8010b7e:	e00a      	b.n	8010b96 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d003      	beq.n	8010b90 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f002 fc89 	bl	80134a0 <tcp_free_ooseq>
      return;
 8010b8e:	e005      	b.n	8010b9c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	68db      	ldr	r3, [r3, #12]
 8010b94:	607b      	str	r3, [r7, #4]
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d1f1      	bne.n	8010b80 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010b9c:	3708      	adds	r7, #8
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	2001dce1 	.word	0x2001dce1
 8010ba8:	2001dcf0 	.word	0x2001dcf0

08010bac <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010bb4:	f7ff ffd4 	bl	8010b60 <pbuf_free_ooseq>
}
 8010bb8:	bf00      	nop
 8010bba:	3708      	adds	r7, #8
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010bc6:	f009 fdc5 	bl	801a754 <sys_arch_protect>
 8010bca:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010bcc:	4b0f      	ldr	r3, [pc, #60]	; (8010c0c <pbuf_pool_is_empty+0x4c>)
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010bd2:	4b0e      	ldr	r3, [pc, #56]	; (8010c0c <pbuf_pool_is_empty+0x4c>)
 8010bd4:	2201      	movs	r2, #1
 8010bd6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f009 fdc9 	bl	801a770 <sys_arch_unprotect>

  if (!queued) {
 8010bde:	78fb      	ldrb	r3, [r7, #3]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d10f      	bne.n	8010c04 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010be4:	2100      	movs	r1, #0
 8010be6:	480a      	ldr	r0, [pc, #40]	; (8010c10 <pbuf_pool_is_empty+0x50>)
 8010be8:	f7fd fa48 	bl	800e07c <tcpip_try_callback>
 8010bec:	4603      	mov	r3, r0
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d008      	beq.n	8010c04 <pbuf_pool_is_empty+0x44>
 8010bf2:	f009 fdaf 	bl	801a754 <sys_arch_protect>
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	4b04      	ldr	r3, [pc, #16]	; (8010c0c <pbuf_pool_is_empty+0x4c>)
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	701a      	strb	r2, [r3, #0]
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f009 fdb6 	bl	801a770 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010c04:	bf00      	nop
 8010c06:	3708      	adds	r7, #8
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}
 8010c0c:	2001dce1 	.word	0x2001dce1
 8010c10:	08010bad 	.word	0x08010bad

08010c14 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010c14:	b480      	push	{r7}
 8010c16:	b085      	sub	sp, #20
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	60b9      	str	r1, [r7, #8]
 8010c1e:	4611      	mov	r1, r2
 8010c20:	461a      	mov	r2, r3
 8010c22:	460b      	mov	r3, r1
 8010c24:	80fb      	strh	r3, [r7, #6]
 8010c26:	4613      	mov	r3, r2
 8010c28:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	68ba      	ldr	r2, [r7, #8]
 8010c34:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	88fa      	ldrh	r2, [r7, #6]
 8010c3a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	88ba      	ldrh	r2, [r7, #4]
 8010c40:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010c42:	8b3b      	ldrh	r3, [r7, #24]
 8010c44:	b2da      	uxtb	r2, r3
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	7f3a      	ldrb	r2, [r7, #28]
 8010c4e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	2201      	movs	r2, #1
 8010c54:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	2200      	movs	r2, #0
 8010c5a:	73da      	strb	r2, [r3, #15]
}
 8010c5c:	bf00      	nop
 8010c5e:	3714      	adds	r7, #20
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr

08010c68 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b08c      	sub	sp, #48	; 0x30
 8010c6c:	af02      	add	r7, sp, #8
 8010c6e:	4603      	mov	r3, r0
 8010c70:	71fb      	strb	r3, [r7, #7]
 8010c72:	460b      	mov	r3, r1
 8010c74:	80bb      	strh	r3, [r7, #4]
 8010c76:	4613      	mov	r3, r2
 8010c78:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010c7a:	79fb      	ldrb	r3, [r7, #7]
 8010c7c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010c7e:	887b      	ldrh	r3, [r7, #2]
 8010c80:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010c84:	f000 8082 	beq.w	8010d8c <pbuf_alloc+0x124>
 8010c88:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010c8c:	f300 80ca 	bgt.w	8010e24 <pbuf_alloc+0x1bc>
 8010c90:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010c94:	d010      	beq.n	8010cb8 <pbuf_alloc+0x50>
 8010c96:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010c9a:	f300 80c3 	bgt.w	8010e24 <pbuf_alloc+0x1bc>
 8010c9e:	2b01      	cmp	r3, #1
 8010ca0:	d002      	beq.n	8010ca8 <pbuf_alloc+0x40>
 8010ca2:	2b41      	cmp	r3, #65	; 0x41
 8010ca4:	f040 80be 	bne.w	8010e24 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010ca8:	887a      	ldrh	r2, [r7, #2]
 8010caa:	88bb      	ldrh	r3, [r7, #4]
 8010cac:	4619      	mov	r1, r3
 8010cae:	2000      	movs	r0, #0
 8010cb0:	f000 f8d4 	bl	8010e5c <pbuf_alloc_reference>
 8010cb4:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010cb6:	e0bf      	b.n	8010e38 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010cc0:	88bb      	ldrh	r3, [r7, #4]
 8010cc2:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010cc4:	200c      	movs	r0, #12
 8010cc6:	f7ff fb99 	bl	80103fc <memp_malloc>
 8010cca:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d109      	bne.n	8010ce6 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8010cd2:	f7ff ff75 	bl	8010bc0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d002      	beq.n	8010ce2 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8010cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cde:	f000 faab 	bl	8011238 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	e0a9      	b.n	8010e3a <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010ce6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ce8:	3303      	adds	r3, #3
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	f023 0303 	bic.w	r3, r3, #3
 8010cf0:	b29a      	uxth	r2, r3
 8010cf2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8010cf6:	1a9b      	subs	r3, r3, r2
 8010cf8:	b29b      	uxth	r3, r3
 8010cfa:	8b7a      	ldrh	r2, [r7, #26]
 8010cfc:	4293      	cmp	r3, r2
 8010cfe:	bf28      	it	cs
 8010d00:	4613      	movcs	r3, r2
 8010d02:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d06:	3310      	adds	r3, #16
 8010d08:	693a      	ldr	r2, [r7, #16]
 8010d0a:	4413      	add	r3, r2
 8010d0c:	3303      	adds	r3, #3
 8010d0e:	f023 0303 	bic.w	r3, r3, #3
 8010d12:	4618      	mov	r0, r3
 8010d14:	89f9      	ldrh	r1, [r7, #14]
 8010d16:	8b7a      	ldrh	r2, [r7, #26]
 8010d18:	2300      	movs	r3, #0
 8010d1a:	9301      	str	r3, [sp, #4]
 8010d1c:	887b      	ldrh	r3, [r7, #2]
 8010d1e:	9300      	str	r3, [sp, #0]
 8010d20:	460b      	mov	r3, r1
 8010d22:	4601      	mov	r1, r0
 8010d24:	6938      	ldr	r0, [r7, #16]
 8010d26:	f7ff ff75 	bl	8010c14 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	f003 0303 	and.w	r3, r3, #3
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d006      	beq.n	8010d44 <pbuf_alloc+0xdc>
 8010d36:	4b43      	ldr	r3, [pc, #268]	; (8010e44 <pbuf_alloc+0x1dc>)
 8010d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010d3c:	4942      	ldr	r1, [pc, #264]	; (8010e48 <pbuf_alloc+0x1e0>)
 8010d3e:	4843      	ldr	r0, [pc, #268]	; (8010e4c <pbuf_alloc+0x1e4>)
 8010d40:	f00a fa62 	bl	801b208 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010d44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d46:	3303      	adds	r3, #3
 8010d48:	f023 0303 	bic.w	r3, r3, #3
 8010d4c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010d50:	4293      	cmp	r3, r2
 8010d52:	d106      	bne.n	8010d62 <pbuf_alloc+0xfa>
 8010d54:	4b3b      	ldr	r3, [pc, #236]	; (8010e44 <pbuf_alloc+0x1dc>)
 8010d56:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010d5a:	493d      	ldr	r1, [pc, #244]	; (8010e50 <pbuf_alloc+0x1e8>)
 8010d5c:	483b      	ldr	r0, [pc, #236]	; (8010e4c <pbuf_alloc+0x1e4>)
 8010d5e:	f00a fa53 	bl	801b208 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d102      	bne.n	8010d6e <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8010d6c:	e002      	b.n	8010d74 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010d6e:	69fb      	ldr	r3, [r7, #28]
 8010d70:	693a      	ldr	r2, [r7, #16]
 8010d72:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010d78:	8b7a      	ldrh	r2, [r7, #26]
 8010d7a:	89fb      	ldrh	r3, [r7, #14]
 8010d7c:	1ad3      	subs	r3, r2, r3
 8010d7e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010d80:	2300      	movs	r3, #0
 8010d82:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010d84:	8b7b      	ldrh	r3, [r7, #26]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d19c      	bne.n	8010cc4 <pbuf_alloc+0x5c>
      break;
 8010d8a:	e055      	b.n	8010e38 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010d8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d8e:	3303      	adds	r3, #3
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	f023 0303 	bic.w	r3, r3, #3
 8010d96:	b29a      	uxth	r2, r3
 8010d98:	88bb      	ldrh	r3, [r7, #4]
 8010d9a:	3303      	adds	r3, #3
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	f023 0303 	bic.w	r3, r3, #3
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	4413      	add	r3, r2
 8010da6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010da8:	8b3b      	ldrh	r3, [r7, #24]
 8010daa:	3310      	adds	r3, #16
 8010dac:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010dae:	8b3a      	ldrh	r2, [r7, #24]
 8010db0:	88bb      	ldrh	r3, [r7, #4]
 8010db2:	3303      	adds	r3, #3
 8010db4:	f023 0303 	bic.w	r3, r3, #3
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d306      	bcc.n	8010dca <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010dbc:	8afa      	ldrh	r2, [r7, #22]
 8010dbe:	88bb      	ldrh	r3, [r7, #4]
 8010dc0:	3303      	adds	r3, #3
 8010dc2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d201      	bcs.n	8010dce <pbuf_alloc+0x166>
        return NULL;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	e035      	b.n	8010e3a <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010dce:	8afb      	ldrh	r3, [r7, #22]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7ff f947 	bl	8010064 <mem_malloc>
 8010dd6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d101      	bne.n	8010de2 <pbuf_alloc+0x17a>
        return NULL;
 8010dde:	2300      	movs	r3, #0
 8010de0:	e02b      	b.n	8010e3a <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010de2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010de4:	3310      	adds	r3, #16
 8010de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010de8:	4413      	add	r3, r2
 8010dea:	3303      	adds	r3, #3
 8010dec:	f023 0303 	bic.w	r3, r3, #3
 8010df0:	4618      	mov	r0, r3
 8010df2:	88b9      	ldrh	r1, [r7, #4]
 8010df4:	88ba      	ldrh	r2, [r7, #4]
 8010df6:	2300      	movs	r3, #0
 8010df8:	9301      	str	r3, [sp, #4]
 8010dfa:	887b      	ldrh	r3, [r7, #2]
 8010dfc:	9300      	str	r3, [sp, #0]
 8010dfe:	460b      	mov	r3, r1
 8010e00:	4601      	mov	r1, r0
 8010e02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e04:	f7ff ff06 	bl	8010c14 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0a:	685b      	ldr	r3, [r3, #4]
 8010e0c:	f003 0303 	and.w	r3, r3, #3
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d010      	beq.n	8010e36 <pbuf_alloc+0x1ce>
 8010e14:	4b0b      	ldr	r3, [pc, #44]	; (8010e44 <pbuf_alloc+0x1dc>)
 8010e16:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010e1a:	490e      	ldr	r1, [pc, #56]	; (8010e54 <pbuf_alloc+0x1ec>)
 8010e1c:	480b      	ldr	r0, [pc, #44]	; (8010e4c <pbuf_alloc+0x1e4>)
 8010e1e:	f00a f9f3 	bl	801b208 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010e22:	e008      	b.n	8010e36 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010e24:	4b07      	ldr	r3, [pc, #28]	; (8010e44 <pbuf_alloc+0x1dc>)
 8010e26:	f240 1227 	movw	r2, #295	; 0x127
 8010e2a:	490b      	ldr	r1, [pc, #44]	; (8010e58 <pbuf_alloc+0x1f0>)
 8010e2c:	4807      	ldr	r0, [pc, #28]	; (8010e4c <pbuf_alloc+0x1e4>)
 8010e2e:	f00a f9eb 	bl	801b208 <iprintf>
      return NULL;
 8010e32:	2300      	movs	r3, #0
 8010e34:	e001      	b.n	8010e3a <pbuf_alloc+0x1d2>
      break;
 8010e36:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3728      	adds	r7, #40	; 0x28
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}
 8010e42:	bf00      	nop
 8010e44:	0801e038 	.word	0x0801e038
 8010e48:	0801e068 	.word	0x0801e068
 8010e4c:	0801e098 	.word	0x0801e098
 8010e50:	0801e0c0 	.word	0x0801e0c0
 8010e54:	0801e0f4 	.word	0x0801e0f4
 8010e58:	0801e120 	.word	0x0801e120

08010e5c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b086      	sub	sp, #24
 8010e60:	af02      	add	r7, sp, #8
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	460b      	mov	r3, r1
 8010e66:	807b      	strh	r3, [r7, #2]
 8010e68:	4613      	mov	r3, r2
 8010e6a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010e6c:	883b      	ldrh	r3, [r7, #0]
 8010e6e:	2b41      	cmp	r3, #65	; 0x41
 8010e70:	d009      	beq.n	8010e86 <pbuf_alloc_reference+0x2a>
 8010e72:	883b      	ldrh	r3, [r7, #0]
 8010e74:	2b01      	cmp	r3, #1
 8010e76:	d006      	beq.n	8010e86 <pbuf_alloc_reference+0x2a>
 8010e78:	4b0f      	ldr	r3, [pc, #60]	; (8010eb8 <pbuf_alloc_reference+0x5c>)
 8010e7a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010e7e:	490f      	ldr	r1, [pc, #60]	; (8010ebc <pbuf_alloc_reference+0x60>)
 8010e80:	480f      	ldr	r0, [pc, #60]	; (8010ec0 <pbuf_alloc_reference+0x64>)
 8010e82:	f00a f9c1 	bl	801b208 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010e86:	200b      	movs	r0, #11
 8010e88:	f7ff fab8 	bl	80103fc <memp_malloc>
 8010e8c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d101      	bne.n	8010e98 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010e94:	2300      	movs	r3, #0
 8010e96:	e00b      	b.n	8010eb0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010e98:	8879      	ldrh	r1, [r7, #2]
 8010e9a:	887a      	ldrh	r2, [r7, #2]
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	9301      	str	r3, [sp, #4]
 8010ea0:	883b      	ldrh	r3, [r7, #0]
 8010ea2:	9300      	str	r3, [sp, #0]
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	6879      	ldr	r1, [r7, #4]
 8010ea8:	68f8      	ldr	r0, [r7, #12]
 8010eaa:	f7ff feb3 	bl	8010c14 <pbuf_init_alloced_pbuf>
  return p;
 8010eae:	68fb      	ldr	r3, [r7, #12]
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3710      	adds	r7, #16
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	0801e038 	.word	0x0801e038
 8010ebc:	0801e13c 	.word	0x0801e13c
 8010ec0:	0801e098 	.word	0x0801e098

08010ec4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b088      	sub	sp, #32
 8010ec8:	af02      	add	r7, sp, #8
 8010eca:	607b      	str	r3, [r7, #4]
 8010ecc:	4603      	mov	r3, r0
 8010ece:	73fb      	strb	r3, [r7, #15]
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	81bb      	strh	r3, [r7, #12]
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010ed8:	7bfb      	ldrb	r3, [r7, #15]
 8010eda:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010edc:	8a7b      	ldrh	r3, [r7, #18]
 8010ede:	3303      	adds	r3, #3
 8010ee0:	f023 0203 	bic.w	r2, r3, #3
 8010ee4:	89bb      	ldrh	r3, [r7, #12]
 8010ee6:	441a      	add	r2, r3
 8010ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d901      	bls.n	8010ef2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	e018      	b.n	8010f24 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010ef2:	6a3b      	ldr	r3, [r7, #32]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d007      	beq.n	8010f08 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010ef8:	8a7b      	ldrh	r3, [r7, #18]
 8010efa:	3303      	adds	r3, #3
 8010efc:	f023 0303 	bic.w	r3, r3, #3
 8010f00:	6a3a      	ldr	r2, [r7, #32]
 8010f02:	4413      	add	r3, r2
 8010f04:	617b      	str	r3, [r7, #20]
 8010f06:	e001      	b.n	8010f0c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	89b9      	ldrh	r1, [r7, #12]
 8010f10:	89ba      	ldrh	r2, [r7, #12]
 8010f12:	2302      	movs	r3, #2
 8010f14:	9301      	str	r3, [sp, #4]
 8010f16:	897b      	ldrh	r3, [r7, #10]
 8010f18:	9300      	str	r3, [sp, #0]
 8010f1a:	460b      	mov	r3, r1
 8010f1c:	6979      	ldr	r1, [r7, #20]
 8010f1e:	f7ff fe79 	bl	8010c14 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010f22:	687b      	ldr	r3, [r7, #4]
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3718      	adds	r7, #24
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	460b      	mov	r3, r1
 8010f36:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d106      	bne.n	8010f4c <pbuf_realloc+0x20>
 8010f3e:	4b3a      	ldr	r3, [pc, #232]	; (8011028 <pbuf_realloc+0xfc>)
 8010f40:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010f44:	4939      	ldr	r1, [pc, #228]	; (801102c <pbuf_realloc+0x100>)
 8010f46:	483a      	ldr	r0, [pc, #232]	; (8011030 <pbuf_realloc+0x104>)
 8010f48:	f00a f95e 	bl	801b208 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	891b      	ldrh	r3, [r3, #8]
 8010f50:	887a      	ldrh	r2, [r7, #2]
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d263      	bcs.n	801101e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	891a      	ldrh	r2, [r3, #8]
 8010f5a:	887b      	ldrh	r3, [r7, #2]
 8010f5c:	1ad3      	subs	r3, r2, r3
 8010f5e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010f60:	887b      	ldrh	r3, [r7, #2]
 8010f62:	817b      	strh	r3, [r7, #10]
  q = p;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010f68:	e018      	b.n	8010f9c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	895b      	ldrh	r3, [r3, #10]
 8010f6e:	897a      	ldrh	r2, [r7, #10]
 8010f70:	1ad3      	subs	r3, r2, r3
 8010f72:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	891a      	ldrh	r2, [r3, #8]
 8010f78:	893b      	ldrh	r3, [r7, #8]
 8010f7a:	1ad3      	subs	r3, r2, r3
 8010f7c:	b29a      	uxth	r2, r3
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d106      	bne.n	8010f9c <pbuf_realloc+0x70>
 8010f8e:	4b26      	ldr	r3, [pc, #152]	; (8011028 <pbuf_realloc+0xfc>)
 8010f90:	f240 12af 	movw	r2, #431	; 0x1af
 8010f94:	4927      	ldr	r1, [pc, #156]	; (8011034 <pbuf_realloc+0x108>)
 8010f96:	4826      	ldr	r0, [pc, #152]	; (8011030 <pbuf_realloc+0x104>)
 8010f98:	f00a f936 	bl	801b208 <iprintf>
  while (rem_len > q->len) {
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	895b      	ldrh	r3, [r3, #10]
 8010fa0:	897a      	ldrh	r2, [r7, #10]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d8e1      	bhi.n	8010f6a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	7b1b      	ldrb	r3, [r3, #12]
 8010faa:	f003 030f 	and.w	r3, r3, #15
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d121      	bne.n	8010ff6 <pbuf_realloc+0xca>
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	895b      	ldrh	r3, [r3, #10]
 8010fb6:	897a      	ldrh	r2, [r7, #10]
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d01c      	beq.n	8010ff6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	7b5b      	ldrb	r3, [r3, #13]
 8010fc0:	f003 0302 	and.w	r3, r3, #2
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d116      	bne.n	8010ff6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	685a      	ldr	r2, [r3, #4]
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	1ad3      	subs	r3, r2, r3
 8010fd0:	b29a      	uxth	r2, r3
 8010fd2:	897b      	ldrh	r3, [r7, #10]
 8010fd4:	4413      	add	r3, r2
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	4619      	mov	r1, r3
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	f7fe ff38 	bl	800fe50 <mem_trim>
 8010fe0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d106      	bne.n	8010ff6 <pbuf_realloc+0xca>
 8010fe8:	4b0f      	ldr	r3, [pc, #60]	; (8011028 <pbuf_realloc+0xfc>)
 8010fea:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010fee:	4912      	ldr	r1, [pc, #72]	; (8011038 <pbuf_realloc+0x10c>)
 8010ff0:	480f      	ldr	r0, [pc, #60]	; (8011030 <pbuf_realloc+0x104>)
 8010ff2:	f00a f909 	bl	801b208 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	897a      	ldrh	r2, [r7, #10]
 8010ffa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	895a      	ldrh	r2, [r3, #10]
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d004      	beq.n	8011016 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	4618      	mov	r0, r3
 8011012:	f000 f911 	bl	8011238 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	2200      	movs	r2, #0
 801101a:	601a      	str	r2, [r3, #0]
 801101c:	e000      	b.n	8011020 <pbuf_realloc+0xf4>
    return;
 801101e:	bf00      	nop

}
 8011020:	3710      	adds	r7, #16
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	0801e038 	.word	0x0801e038
 801102c:	0801e150 	.word	0x0801e150
 8011030:	0801e098 	.word	0x0801e098
 8011034:	0801e168 	.word	0x0801e168
 8011038:	0801e180 	.word	0x0801e180

0801103c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b086      	sub	sp, #24
 8011040:	af00      	add	r7, sp, #0
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	60b9      	str	r1, [r7, #8]
 8011046:	4613      	mov	r3, r2
 8011048:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d106      	bne.n	801105e <pbuf_add_header_impl+0x22>
 8011050:	4b2b      	ldr	r3, [pc, #172]	; (8011100 <pbuf_add_header_impl+0xc4>)
 8011052:	f240 12df 	movw	r2, #479	; 0x1df
 8011056:	492b      	ldr	r1, [pc, #172]	; (8011104 <pbuf_add_header_impl+0xc8>)
 8011058:	482b      	ldr	r0, [pc, #172]	; (8011108 <pbuf_add_header_impl+0xcc>)
 801105a:	f00a f8d5 	bl	801b208 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d003      	beq.n	801106c <pbuf_add_header_impl+0x30>
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801106a:	d301      	bcc.n	8011070 <pbuf_add_header_impl+0x34>
    return 1;
 801106c:	2301      	movs	r3, #1
 801106e:	e043      	b.n	80110f8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d101      	bne.n	801107a <pbuf_add_header_impl+0x3e>
    return 0;
 8011076:	2300      	movs	r3, #0
 8011078:	e03e      	b.n	80110f8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	891a      	ldrh	r2, [r3, #8]
 8011082:	8a7b      	ldrh	r3, [r7, #18]
 8011084:	4413      	add	r3, r2
 8011086:	b29b      	uxth	r3, r3
 8011088:	8a7a      	ldrh	r2, [r7, #18]
 801108a:	429a      	cmp	r2, r3
 801108c:	d901      	bls.n	8011092 <pbuf_add_header_impl+0x56>
    return 1;
 801108e:	2301      	movs	r3, #1
 8011090:	e032      	b.n	80110f8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	7b1b      	ldrb	r3, [r3, #12]
 8011096:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011098:	8a3b      	ldrh	r3, [r7, #16]
 801109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00c      	beq.n	80110bc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	685a      	ldr	r2, [r3, #4]
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	425b      	negs	r3, r3
 80110aa:	4413      	add	r3, r2
 80110ac:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	3310      	adds	r3, #16
 80110b2:	697a      	ldr	r2, [r7, #20]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d20d      	bcs.n	80110d4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80110b8:	2301      	movs	r3, #1
 80110ba:	e01d      	b.n	80110f8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80110bc:	79fb      	ldrb	r3, [r7, #7]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d006      	beq.n	80110d0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	685a      	ldr	r2, [r3, #4]
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	425b      	negs	r3, r3
 80110ca:	4413      	add	r3, r2
 80110cc:	617b      	str	r3, [r7, #20]
 80110ce:	e001      	b.n	80110d4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80110d0:	2301      	movs	r3, #1
 80110d2:	e011      	b.n	80110f8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	697a      	ldr	r2, [r7, #20]
 80110d8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	895a      	ldrh	r2, [r3, #10]
 80110de:	8a7b      	ldrh	r3, [r7, #18]
 80110e0:	4413      	add	r3, r2
 80110e2:	b29a      	uxth	r2, r3
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	891a      	ldrh	r2, [r3, #8]
 80110ec:	8a7b      	ldrh	r3, [r7, #18]
 80110ee:	4413      	add	r3, r2
 80110f0:	b29a      	uxth	r2, r3
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	811a      	strh	r2, [r3, #8]


  return 0;
 80110f6:	2300      	movs	r3, #0
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3718      	adds	r7, #24
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}
 8011100:	0801e038 	.word	0x0801e038
 8011104:	0801e19c 	.word	0x0801e19c
 8011108:	0801e098 	.word	0x0801e098

0801110c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011116:	2200      	movs	r2, #0
 8011118:	6839      	ldr	r1, [r7, #0]
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f7ff ff8e 	bl	801103c <pbuf_add_header_impl>
 8011120:	4603      	mov	r3, r0
}
 8011122:	4618      	mov	r0, r3
 8011124:	3708      	adds	r7, #8
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
	...

0801112c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b084      	sub	sp, #16
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d106      	bne.n	801114a <pbuf_remove_header+0x1e>
 801113c:	4b20      	ldr	r3, [pc, #128]	; (80111c0 <pbuf_remove_header+0x94>)
 801113e:	f240 224b 	movw	r2, #587	; 0x24b
 8011142:	4920      	ldr	r1, [pc, #128]	; (80111c4 <pbuf_remove_header+0x98>)
 8011144:	4820      	ldr	r0, [pc, #128]	; (80111c8 <pbuf_remove_header+0x9c>)
 8011146:	f00a f85f 	bl	801b208 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d003      	beq.n	8011158 <pbuf_remove_header+0x2c>
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011156:	d301      	bcc.n	801115c <pbuf_remove_header+0x30>
    return 1;
 8011158:	2301      	movs	r3, #1
 801115a:	e02c      	b.n	80111b6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d101      	bne.n	8011166 <pbuf_remove_header+0x3a>
    return 0;
 8011162:	2300      	movs	r3, #0
 8011164:	e027      	b.n	80111b6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	895b      	ldrh	r3, [r3, #10]
 801116e:	89fa      	ldrh	r2, [r7, #14]
 8011170:	429a      	cmp	r2, r3
 8011172:	d908      	bls.n	8011186 <pbuf_remove_header+0x5a>
 8011174:	4b12      	ldr	r3, [pc, #72]	; (80111c0 <pbuf_remove_header+0x94>)
 8011176:	f240 2255 	movw	r2, #597	; 0x255
 801117a:	4914      	ldr	r1, [pc, #80]	; (80111cc <pbuf_remove_header+0xa0>)
 801117c:	4812      	ldr	r0, [pc, #72]	; (80111c8 <pbuf_remove_header+0x9c>)
 801117e:	f00a f843 	bl	801b208 <iprintf>
 8011182:	2301      	movs	r3, #1
 8011184:	e017      	b.n	80111b6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	685a      	ldr	r2, [r3, #4]
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	441a      	add	r2, r3
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	895a      	ldrh	r2, [r3, #10]
 801119c:	89fb      	ldrh	r3, [r7, #14]
 801119e:	1ad3      	subs	r3, r2, r3
 80111a0:	b29a      	uxth	r2, r3
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	891a      	ldrh	r2, [r3, #8]
 80111aa:	89fb      	ldrh	r3, [r7, #14]
 80111ac:	1ad3      	subs	r3, r2, r3
 80111ae:	b29a      	uxth	r2, r3
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80111b4:	2300      	movs	r3, #0
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3710      	adds	r7, #16
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	bf00      	nop
 80111c0:	0801e038 	.word	0x0801e038
 80111c4:	0801e19c 	.word	0x0801e19c
 80111c8:	0801e098 	.word	0x0801e098
 80111cc:	0801e1a8 	.word	0x0801e1a8

080111d0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	460b      	mov	r3, r1
 80111da:	807b      	strh	r3, [r7, #2]
 80111dc:	4613      	mov	r3, r2
 80111de:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80111e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	da08      	bge.n	80111fa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80111e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80111ec:	425b      	negs	r3, r3
 80111ee:	4619      	mov	r1, r3
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f7ff ff9b 	bl	801112c <pbuf_remove_header>
 80111f6:	4603      	mov	r3, r0
 80111f8:	e007      	b.n	801120a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80111fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80111fe:	787a      	ldrb	r2, [r7, #1]
 8011200:	4619      	mov	r1, r3
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f7ff ff1a 	bl	801103c <pbuf_add_header_impl>
 8011208:	4603      	mov	r3, r0
  }
}
 801120a:	4618      	mov	r0, r3
 801120c:	3708      	adds	r7, #8
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}

08011212 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011212:	b580      	push	{r7, lr}
 8011214:	b082      	sub	sp, #8
 8011216:	af00      	add	r7, sp, #0
 8011218:	6078      	str	r0, [r7, #4]
 801121a:	460b      	mov	r3, r1
 801121c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801121e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011222:	2201      	movs	r2, #1
 8011224:	4619      	mov	r1, r3
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f7ff ffd2 	bl	80111d0 <pbuf_header_impl>
 801122c:	4603      	mov	r3, r0
}
 801122e:	4618      	mov	r0, r3
 8011230:	3708      	adds	r7, #8
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}
	...

08011238 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b088      	sub	sp, #32
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d10b      	bne.n	801125e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d106      	bne.n	801125a <pbuf_free+0x22>
 801124c:	4b3b      	ldr	r3, [pc, #236]	; (801133c <pbuf_free+0x104>)
 801124e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011252:	493b      	ldr	r1, [pc, #236]	; (8011340 <pbuf_free+0x108>)
 8011254:	483b      	ldr	r0, [pc, #236]	; (8011344 <pbuf_free+0x10c>)
 8011256:	f009 ffd7 	bl	801b208 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801125a:	2300      	movs	r3, #0
 801125c:	e069      	b.n	8011332 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801125e:	2300      	movs	r3, #0
 8011260:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011262:	e062      	b.n	801132a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011264:	f009 fa76 	bl	801a754 <sys_arch_protect>
 8011268:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	7b9b      	ldrb	r3, [r3, #14]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d106      	bne.n	8011280 <pbuf_free+0x48>
 8011272:	4b32      	ldr	r3, [pc, #200]	; (801133c <pbuf_free+0x104>)
 8011274:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011278:	4933      	ldr	r1, [pc, #204]	; (8011348 <pbuf_free+0x110>)
 801127a:	4832      	ldr	r0, [pc, #200]	; (8011344 <pbuf_free+0x10c>)
 801127c:	f009 ffc4 	bl	801b208 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	7b9b      	ldrb	r3, [r3, #14]
 8011284:	3b01      	subs	r3, #1
 8011286:	b2da      	uxtb	r2, r3
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	739a      	strb	r2, [r3, #14]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	7b9b      	ldrb	r3, [r3, #14]
 8011290:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011292:	69b8      	ldr	r0, [r7, #24]
 8011294:	f009 fa6c 	bl	801a770 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011298:	7dfb      	ldrb	r3, [r7, #23]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d143      	bne.n	8011326 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	7b1b      	ldrb	r3, [r3, #12]
 80112a8:	f003 030f 	and.w	r3, r3, #15
 80112ac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	7b5b      	ldrb	r3, [r3, #13]
 80112b2:	f003 0302 	and.w	r3, r3, #2
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d011      	beq.n	80112de <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	691b      	ldr	r3, [r3, #16]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d106      	bne.n	80112d4 <pbuf_free+0x9c>
 80112c6:	4b1d      	ldr	r3, [pc, #116]	; (801133c <pbuf_free+0x104>)
 80112c8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80112cc:	491f      	ldr	r1, [pc, #124]	; (801134c <pbuf_free+0x114>)
 80112ce:	481d      	ldr	r0, [pc, #116]	; (8011344 <pbuf_free+0x10c>)
 80112d0:	f009 ff9a 	bl	801b208 <iprintf>
        pc->custom_free_function(p);
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	691b      	ldr	r3, [r3, #16]
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	4798      	blx	r3
 80112dc:	e01d      	b.n	801131a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80112de:	7bfb      	ldrb	r3, [r7, #15]
 80112e0:	2b02      	cmp	r3, #2
 80112e2:	d104      	bne.n	80112ee <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80112e4:	6879      	ldr	r1, [r7, #4]
 80112e6:	200c      	movs	r0, #12
 80112e8:	f7ff f8fe 	bl	80104e8 <memp_free>
 80112ec:	e015      	b.n	801131a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80112ee:	7bfb      	ldrb	r3, [r7, #15]
 80112f0:	2b01      	cmp	r3, #1
 80112f2:	d104      	bne.n	80112fe <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80112f4:	6879      	ldr	r1, [r7, #4]
 80112f6:	200b      	movs	r0, #11
 80112f8:	f7ff f8f6 	bl	80104e8 <memp_free>
 80112fc:	e00d      	b.n	801131a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80112fe:	7bfb      	ldrb	r3, [r7, #15]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d103      	bne.n	801130c <pbuf_free+0xd4>
          mem_free(p);
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7fe fd13 	bl	800fd30 <mem_free>
 801130a:	e006      	b.n	801131a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801130c:	4b0b      	ldr	r3, [pc, #44]	; (801133c <pbuf_free+0x104>)
 801130e:	f240 320f 	movw	r2, #783	; 0x30f
 8011312:	490f      	ldr	r1, [pc, #60]	; (8011350 <pbuf_free+0x118>)
 8011314:	480b      	ldr	r0, [pc, #44]	; (8011344 <pbuf_free+0x10c>)
 8011316:	f009 ff77 	bl	801b208 <iprintf>
        }
      }
      count++;
 801131a:	7ffb      	ldrb	r3, [r7, #31]
 801131c:	3301      	adds	r3, #1
 801131e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	607b      	str	r3, [r7, #4]
 8011324:	e001      	b.n	801132a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011326:	2300      	movs	r3, #0
 8011328:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d199      	bne.n	8011264 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011330:	7ffb      	ldrb	r3, [r7, #31]
}
 8011332:	4618      	mov	r0, r3
 8011334:	3720      	adds	r7, #32
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}
 801133a:	bf00      	nop
 801133c:	0801e038 	.word	0x0801e038
 8011340:	0801e19c 	.word	0x0801e19c
 8011344:	0801e098 	.word	0x0801e098
 8011348:	0801e1c8 	.word	0x0801e1c8
 801134c:	0801e1e0 	.word	0x0801e1e0
 8011350:	0801e204 	.word	0x0801e204

08011354 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011354:	b480      	push	{r7}
 8011356:	b085      	sub	sp, #20
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801135c:	2300      	movs	r3, #0
 801135e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011360:	e005      	b.n	801136e <pbuf_clen+0x1a>
    ++len;
 8011362:	89fb      	ldrh	r3, [r7, #14]
 8011364:	3301      	adds	r3, #1
 8011366:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d1f6      	bne.n	8011362 <pbuf_clen+0xe>
  }
  return len;
 8011374:	89fb      	ldrh	r3, [r7, #14]
}
 8011376:	4618      	mov	r0, r3
 8011378:	3714      	adds	r7, #20
 801137a:	46bd      	mov	sp, r7
 801137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011380:	4770      	bx	lr
	...

08011384 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d016      	beq.n	80113c0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011392:	f009 f9df 	bl	801a754 <sys_arch_protect>
 8011396:	60f8      	str	r0, [r7, #12]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	7b9b      	ldrb	r3, [r3, #14]
 801139c:	3301      	adds	r3, #1
 801139e:	b2da      	uxtb	r2, r3
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	739a      	strb	r2, [r3, #14]
 80113a4:	68f8      	ldr	r0, [r7, #12]
 80113a6:	f009 f9e3 	bl	801a770 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	7b9b      	ldrb	r3, [r3, #14]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d106      	bne.n	80113c0 <pbuf_ref+0x3c>
 80113b2:	4b05      	ldr	r3, [pc, #20]	; (80113c8 <pbuf_ref+0x44>)
 80113b4:	f240 3242 	movw	r2, #834	; 0x342
 80113b8:	4904      	ldr	r1, [pc, #16]	; (80113cc <pbuf_ref+0x48>)
 80113ba:	4805      	ldr	r0, [pc, #20]	; (80113d0 <pbuf_ref+0x4c>)
 80113bc:	f009 ff24 	bl	801b208 <iprintf>
  }
}
 80113c0:	bf00      	nop
 80113c2:	3710      	adds	r7, #16
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	0801e038 	.word	0x0801e038
 80113cc:	0801e218 	.word	0x0801e218
 80113d0:	0801e098 	.word	0x0801e098

080113d4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b084      	sub	sp, #16
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d002      	beq.n	80113ea <pbuf_cat+0x16>
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d107      	bne.n	80113fa <pbuf_cat+0x26>
 80113ea:	4b20      	ldr	r3, [pc, #128]	; (801146c <pbuf_cat+0x98>)
 80113ec:	f240 3259 	movw	r2, #857	; 0x359
 80113f0:	491f      	ldr	r1, [pc, #124]	; (8011470 <pbuf_cat+0x9c>)
 80113f2:	4820      	ldr	r0, [pc, #128]	; (8011474 <pbuf_cat+0xa0>)
 80113f4:	f009 ff08 	bl	801b208 <iprintf>
 80113f8:	e034      	b.n	8011464 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	60fb      	str	r3, [r7, #12]
 80113fe:	e00a      	b.n	8011416 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	891a      	ldrh	r2, [r3, #8]
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	891b      	ldrh	r3, [r3, #8]
 8011408:	4413      	add	r3, r2
 801140a:	b29a      	uxth	r2, r3
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	60fb      	str	r3, [r7, #12]
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d1f0      	bne.n	8011400 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	891a      	ldrh	r2, [r3, #8]
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	895b      	ldrh	r3, [r3, #10]
 8011426:	429a      	cmp	r2, r3
 8011428:	d006      	beq.n	8011438 <pbuf_cat+0x64>
 801142a:	4b10      	ldr	r3, [pc, #64]	; (801146c <pbuf_cat+0x98>)
 801142c:	f240 3262 	movw	r2, #866	; 0x362
 8011430:	4911      	ldr	r1, [pc, #68]	; (8011478 <pbuf_cat+0xa4>)
 8011432:	4810      	ldr	r0, [pc, #64]	; (8011474 <pbuf_cat+0xa0>)
 8011434:	f009 fee8 	bl	801b208 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d006      	beq.n	801144e <pbuf_cat+0x7a>
 8011440:	4b0a      	ldr	r3, [pc, #40]	; (801146c <pbuf_cat+0x98>)
 8011442:	f240 3263 	movw	r2, #867	; 0x363
 8011446:	490d      	ldr	r1, [pc, #52]	; (801147c <pbuf_cat+0xa8>)
 8011448:	480a      	ldr	r0, [pc, #40]	; (8011474 <pbuf_cat+0xa0>)
 801144a:	f009 fedd 	bl	801b208 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	891a      	ldrh	r2, [r3, #8]
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	891b      	ldrh	r3, [r3, #8]
 8011456:	4413      	add	r3, r2
 8011458:	b29a      	uxth	r2, r3
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	683a      	ldr	r2, [r7, #0]
 8011462:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011464:	3710      	adds	r7, #16
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	0801e038 	.word	0x0801e038
 8011470:	0801e22c 	.word	0x0801e22c
 8011474:	0801e098 	.word	0x0801e098
 8011478:	0801e264 	.word	0x0801e264
 801147c:	0801e294 	.word	0x0801e294

08011480 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b086      	sub	sp, #24
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801148a:	2300      	movs	r3, #0
 801148c:	617b      	str	r3, [r7, #20]
 801148e:	2300      	movs	r3, #0
 8011490:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d008      	beq.n	80114aa <pbuf_copy+0x2a>
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d005      	beq.n	80114aa <pbuf_copy+0x2a>
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	891a      	ldrh	r2, [r3, #8]
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	891b      	ldrh	r3, [r3, #8]
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d209      	bcs.n	80114be <pbuf_copy+0x3e>
 80114aa:	4b57      	ldr	r3, [pc, #348]	; (8011608 <pbuf_copy+0x188>)
 80114ac:	f240 32c9 	movw	r2, #969	; 0x3c9
 80114b0:	4956      	ldr	r1, [pc, #344]	; (801160c <pbuf_copy+0x18c>)
 80114b2:	4857      	ldr	r0, [pc, #348]	; (8011610 <pbuf_copy+0x190>)
 80114b4:	f009 fea8 	bl	801b208 <iprintf>
 80114b8:	f06f 030f 	mvn.w	r3, #15
 80114bc:	e09f      	b.n	80115fe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	895b      	ldrh	r3, [r3, #10]
 80114c2:	461a      	mov	r2, r3
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	1ad2      	subs	r2, r2, r3
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	895b      	ldrh	r3, [r3, #10]
 80114cc:	4619      	mov	r1, r3
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	1acb      	subs	r3, r1, r3
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d306      	bcc.n	80114e4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	895b      	ldrh	r3, [r3, #10]
 80114da:	461a      	mov	r2, r3
 80114dc:	693b      	ldr	r3, [r7, #16]
 80114de:	1ad3      	subs	r3, r2, r3
 80114e0:	60fb      	str	r3, [r7, #12]
 80114e2:	e005      	b.n	80114f0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	895b      	ldrh	r3, [r3, #10]
 80114e8:	461a      	mov	r2, r3
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	1ad3      	subs	r3, r2, r3
 80114ee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	685a      	ldr	r2, [r3, #4]
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	18d0      	adds	r0, r2, r3
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	685a      	ldr	r2, [r3, #4]
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	4413      	add	r3, r2
 8011500:	68fa      	ldr	r2, [r7, #12]
 8011502:	4619      	mov	r1, r3
 8011504:	f009 ffb5 	bl	801b472 <memcpy>
    offset_to += len;
 8011508:	697a      	ldr	r2, [r7, #20]
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	4413      	add	r3, r2
 801150e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011510:	693a      	ldr	r2, [r7, #16]
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	4413      	add	r3, r2
 8011516:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	895b      	ldrh	r3, [r3, #10]
 801151c:	461a      	mov	r2, r3
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	4293      	cmp	r3, r2
 8011522:	d906      	bls.n	8011532 <pbuf_copy+0xb2>
 8011524:	4b38      	ldr	r3, [pc, #224]	; (8011608 <pbuf_copy+0x188>)
 8011526:	f240 32d9 	movw	r2, #985	; 0x3d9
 801152a:	493a      	ldr	r1, [pc, #232]	; (8011614 <pbuf_copy+0x194>)
 801152c:	4838      	ldr	r0, [pc, #224]	; (8011610 <pbuf_copy+0x190>)
 801152e:	f009 fe6b 	bl	801b208 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	895b      	ldrh	r3, [r3, #10]
 8011536:	461a      	mov	r2, r3
 8011538:	693b      	ldr	r3, [r7, #16]
 801153a:	4293      	cmp	r3, r2
 801153c:	d906      	bls.n	801154c <pbuf_copy+0xcc>
 801153e:	4b32      	ldr	r3, [pc, #200]	; (8011608 <pbuf_copy+0x188>)
 8011540:	f240 32da 	movw	r2, #986	; 0x3da
 8011544:	4934      	ldr	r1, [pc, #208]	; (8011618 <pbuf_copy+0x198>)
 8011546:	4832      	ldr	r0, [pc, #200]	; (8011610 <pbuf_copy+0x190>)
 8011548:	f009 fe5e 	bl	801b208 <iprintf>
    if (offset_from >= p_from->len) {
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	895b      	ldrh	r3, [r3, #10]
 8011550:	461a      	mov	r2, r3
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	4293      	cmp	r3, r2
 8011556:	d304      	bcc.n	8011562 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011558:	2300      	movs	r3, #0
 801155a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	895b      	ldrh	r3, [r3, #10]
 8011566:	461a      	mov	r2, r3
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	4293      	cmp	r3, r2
 801156c:	d114      	bne.n	8011598 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801156e:	2300      	movs	r3, #0
 8011570:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d10c      	bne.n	8011598 <pbuf_copy+0x118>
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d009      	beq.n	8011598 <pbuf_copy+0x118>
 8011584:	4b20      	ldr	r3, [pc, #128]	; (8011608 <pbuf_copy+0x188>)
 8011586:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801158a:	4924      	ldr	r1, [pc, #144]	; (801161c <pbuf_copy+0x19c>)
 801158c:	4820      	ldr	r0, [pc, #128]	; (8011610 <pbuf_copy+0x190>)
 801158e:	f009 fe3b 	bl	801b208 <iprintf>
 8011592:	f06f 030f 	mvn.w	r3, #15
 8011596:	e032      	b.n	80115fe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d013      	beq.n	80115c6 <pbuf_copy+0x146>
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	895a      	ldrh	r2, [r3, #10]
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	891b      	ldrh	r3, [r3, #8]
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d10d      	bne.n	80115c6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d009      	beq.n	80115c6 <pbuf_copy+0x146>
 80115b2:	4b15      	ldr	r3, [pc, #84]	; (8011608 <pbuf_copy+0x188>)
 80115b4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80115b8:	4919      	ldr	r1, [pc, #100]	; (8011620 <pbuf_copy+0x1a0>)
 80115ba:	4815      	ldr	r0, [pc, #84]	; (8011610 <pbuf_copy+0x190>)
 80115bc:	f009 fe24 	bl	801b208 <iprintf>
 80115c0:	f06f 0305 	mvn.w	r3, #5
 80115c4:	e01b      	b.n	80115fe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d013      	beq.n	80115f4 <pbuf_copy+0x174>
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	895a      	ldrh	r2, [r3, #10]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	891b      	ldrh	r3, [r3, #8]
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d10d      	bne.n	80115f4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d009      	beq.n	80115f4 <pbuf_copy+0x174>
 80115e0:	4b09      	ldr	r3, [pc, #36]	; (8011608 <pbuf_copy+0x188>)
 80115e2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80115e6:	490e      	ldr	r1, [pc, #56]	; (8011620 <pbuf_copy+0x1a0>)
 80115e8:	4809      	ldr	r0, [pc, #36]	; (8011610 <pbuf_copy+0x190>)
 80115ea:	f009 fe0d 	bl	801b208 <iprintf>
 80115ee:	f06f 0305 	mvn.w	r3, #5
 80115f2:	e004      	b.n	80115fe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f47f af61 	bne.w	80114be <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80115fc:	2300      	movs	r3, #0
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3718      	adds	r7, #24
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}
 8011606:	bf00      	nop
 8011608:	0801e038 	.word	0x0801e038
 801160c:	0801e2e0 	.word	0x0801e2e0
 8011610:	0801e098 	.word	0x0801e098
 8011614:	0801e310 	.word	0x0801e310
 8011618:	0801e328 	.word	0x0801e328
 801161c:	0801e344 	.word	0x0801e344
 8011620:	0801e354 	.word	0x0801e354

08011624 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b088      	sub	sp, #32
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	4611      	mov	r1, r2
 8011630:	461a      	mov	r2, r3
 8011632:	460b      	mov	r3, r1
 8011634:	80fb      	strh	r3, [r7, #6]
 8011636:	4613      	mov	r3, r2
 8011638:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801163a:	2300      	movs	r3, #0
 801163c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801163e:	2300      	movs	r3, #0
 8011640:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d108      	bne.n	801165a <pbuf_copy_partial+0x36>
 8011648:	4b2b      	ldr	r3, [pc, #172]	; (80116f8 <pbuf_copy_partial+0xd4>)
 801164a:	f240 420a 	movw	r2, #1034	; 0x40a
 801164e:	492b      	ldr	r1, [pc, #172]	; (80116fc <pbuf_copy_partial+0xd8>)
 8011650:	482b      	ldr	r0, [pc, #172]	; (8011700 <pbuf_copy_partial+0xdc>)
 8011652:	f009 fdd9 	bl	801b208 <iprintf>
 8011656:	2300      	movs	r3, #0
 8011658:	e04a      	b.n	80116f0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d108      	bne.n	8011672 <pbuf_copy_partial+0x4e>
 8011660:	4b25      	ldr	r3, [pc, #148]	; (80116f8 <pbuf_copy_partial+0xd4>)
 8011662:	f240 420b 	movw	r2, #1035	; 0x40b
 8011666:	4927      	ldr	r1, [pc, #156]	; (8011704 <pbuf_copy_partial+0xe0>)
 8011668:	4825      	ldr	r0, [pc, #148]	; (8011700 <pbuf_copy_partial+0xdc>)
 801166a:	f009 fdcd 	bl	801b208 <iprintf>
 801166e:	2300      	movs	r3, #0
 8011670:	e03e      	b.n	80116f0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	61fb      	str	r3, [r7, #28]
 8011676:	e034      	b.n	80116e2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011678:	88bb      	ldrh	r3, [r7, #4]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d00a      	beq.n	8011694 <pbuf_copy_partial+0x70>
 801167e:	69fb      	ldr	r3, [r7, #28]
 8011680:	895b      	ldrh	r3, [r3, #10]
 8011682:	88ba      	ldrh	r2, [r7, #4]
 8011684:	429a      	cmp	r2, r3
 8011686:	d305      	bcc.n	8011694 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011688:	69fb      	ldr	r3, [r7, #28]
 801168a:	895b      	ldrh	r3, [r3, #10]
 801168c:	88ba      	ldrh	r2, [r7, #4]
 801168e:	1ad3      	subs	r3, r2, r3
 8011690:	80bb      	strh	r3, [r7, #4]
 8011692:	e023      	b.n	80116dc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011694:	69fb      	ldr	r3, [r7, #28]
 8011696:	895a      	ldrh	r2, [r3, #10]
 8011698:	88bb      	ldrh	r3, [r7, #4]
 801169a:	1ad3      	subs	r3, r2, r3
 801169c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801169e:	8b3a      	ldrh	r2, [r7, #24]
 80116a0:	88fb      	ldrh	r3, [r7, #6]
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d901      	bls.n	80116aa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80116a6:	88fb      	ldrh	r3, [r7, #6]
 80116a8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80116aa:	8b7b      	ldrh	r3, [r7, #26]
 80116ac:	68ba      	ldr	r2, [r7, #8]
 80116ae:	18d0      	adds	r0, r2, r3
 80116b0:	69fb      	ldr	r3, [r7, #28]
 80116b2:	685a      	ldr	r2, [r3, #4]
 80116b4:	88bb      	ldrh	r3, [r7, #4]
 80116b6:	4413      	add	r3, r2
 80116b8:	8b3a      	ldrh	r2, [r7, #24]
 80116ba:	4619      	mov	r1, r3
 80116bc:	f009 fed9 	bl	801b472 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80116c0:	8afa      	ldrh	r2, [r7, #22]
 80116c2:	8b3b      	ldrh	r3, [r7, #24]
 80116c4:	4413      	add	r3, r2
 80116c6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80116c8:	8b7a      	ldrh	r2, [r7, #26]
 80116ca:	8b3b      	ldrh	r3, [r7, #24]
 80116cc:	4413      	add	r3, r2
 80116ce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80116d0:	88fa      	ldrh	r2, [r7, #6]
 80116d2:	8b3b      	ldrh	r3, [r7, #24]
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80116d8:	2300      	movs	r3, #0
 80116da:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80116dc:	69fb      	ldr	r3, [r7, #28]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	61fb      	str	r3, [r7, #28]
 80116e2:	88fb      	ldrh	r3, [r7, #6]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d002      	beq.n	80116ee <pbuf_copy_partial+0xca>
 80116e8:	69fb      	ldr	r3, [r7, #28]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d1c4      	bne.n	8011678 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80116ee:	8afb      	ldrh	r3, [r7, #22]
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3720      	adds	r7, #32
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	0801e038 	.word	0x0801e038
 80116fc:	0801e380 	.word	0x0801e380
 8011700:	0801e098 	.word	0x0801e098
 8011704:	0801e3a0 	.word	0x0801e3a0

08011708 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8011708:	b480      	push	{r7}
 801170a:	b087      	sub	sp, #28
 801170c:	af00      	add	r7, sp, #0
 801170e:	60f8      	str	r0, [r7, #12]
 8011710:	460b      	mov	r3, r1
 8011712:	607a      	str	r2, [r7, #4]
 8011714:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8011716:	897b      	ldrh	r3, [r7, #10]
 8011718:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801171e:	e007      	b.n	8011730 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	895b      	ldrh	r3, [r3, #10]
 8011724:	8afa      	ldrh	r2, [r7, #22]
 8011726:	1ad3      	subs	r3, r2, r3
 8011728:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d004      	beq.n	8011740 <pbuf_skip_const+0x38>
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	895b      	ldrh	r3, [r3, #10]
 801173a:	8afa      	ldrh	r2, [r7, #22]
 801173c:	429a      	cmp	r2, r3
 801173e:	d2ef      	bcs.n	8011720 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d002      	beq.n	801174c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	8afa      	ldrh	r2, [r7, #22]
 801174a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 801174c:	693b      	ldr	r3, [r7, #16]
}
 801174e:	4618      	mov	r0, r3
 8011750:	371c      	adds	r7, #28
 8011752:	46bd      	mov	sp, r7
 8011754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011758:	4770      	bx	lr
	...

0801175c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b084      	sub	sp, #16
 8011760:	af00      	add	r7, sp, #0
 8011762:	4603      	mov	r3, r0
 8011764:	603a      	str	r2, [r7, #0]
 8011766:	71fb      	strb	r3, [r7, #7]
 8011768:	460b      	mov	r3, r1
 801176a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	8919      	ldrh	r1, [r3, #8]
 8011770:	88ba      	ldrh	r2, [r7, #4]
 8011772:	79fb      	ldrb	r3, [r7, #7]
 8011774:	4618      	mov	r0, r3
 8011776:	f7ff fa77 	bl	8010c68 <pbuf_alloc>
 801177a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d101      	bne.n	8011786 <pbuf_clone+0x2a>
    return NULL;
 8011782:	2300      	movs	r3, #0
 8011784:	e011      	b.n	80117aa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011786:	6839      	ldr	r1, [r7, #0]
 8011788:	68f8      	ldr	r0, [r7, #12]
 801178a:	f7ff fe79 	bl	8011480 <pbuf_copy>
 801178e:	4603      	mov	r3, r0
 8011790:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011792:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d006      	beq.n	80117a8 <pbuf_clone+0x4c>
 801179a:	4b06      	ldr	r3, [pc, #24]	; (80117b4 <pbuf_clone+0x58>)
 801179c:	f240 5224 	movw	r2, #1316	; 0x524
 80117a0:	4905      	ldr	r1, [pc, #20]	; (80117b8 <pbuf_clone+0x5c>)
 80117a2:	4806      	ldr	r0, [pc, #24]	; (80117bc <pbuf_clone+0x60>)
 80117a4:	f009 fd30 	bl	801b208 <iprintf>
  return q;
 80117a8:	68fb      	ldr	r3, [r7, #12]
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3710      	adds	r7, #16
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}
 80117b2:	bf00      	nop
 80117b4:	0801e038 	.word	0x0801e038
 80117b8:	0801e4ac 	.word	0x0801e4ac
 80117bc:	0801e098 	.word	0x0801e098

080117c0 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b084      	sub	sp, #16
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	460b      	mov	r3, r1
 80117ca:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 80117cc:	887b      	ldrh	r3, [r7, #2]
 80117ce:	4619      	mov	r1, r3
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f000 f80c 	bl	80117ee <pbuf_try_get_at>
 80117d6:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	db02      	blt.n	80117e4 <pbuf_get_at+0x24>
    return (u8_t)ret;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	b2db      	uxtb	r3, r3
 80117e2:	e000      	b.n	80117e6 <pbuf_get_at+0x26>
  }
  return 0;
 80117e4:	2300      	movs	r3, #0
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3710      	adds	r7, #16
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}

080117ee <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 80117ee:	b580      	push	{r7, lr}
 80117f0:	b084      	sub	sp, #16
 80117f2:	af00      	add	r7, sp, #0
 80117f4:	6078      	str	r0, [r7, #4]
 80117f6:	460b      	mov	r3, r1
 80117f8:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 80117fa:	f107 020a 	add.w	r2, r7, #10
 80117fe:	887b      	ldrh	r3, [r7, #2]
 8011800:	4619      	mov	r1, r3
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f7ff ff80 	bl	8011708 <pbuf_skip_const>
 8011808:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d00a      	beq.n	8011826 <pbuf_try_get_at+0x38>
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	895a      	ldrh	r2, [r3, #10]
 8011814:	897b      	ldrh	r3, [r7, #10]
 8011816:	429a      	cmp	r2, r3
 8011818:	d905      	bls.n	8011826 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	685b      	ldr	r3, [r3, #4]
 801181e:	897a      	ldrh	r2, [r7, #10]
 8011820:	4413      	add	r3, r2
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	e001      	b.n	801182a <pbuf_try_get_at+0x3c>
  }
  return -1;
 8011826:	f04f 33ff 	mov.w	r3, #4294967295
}
 801182a:	4618      	mov	r0, r3
 801182c:	3710      	adds	r7, #16
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
	...

08011834 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011838:	f008 ffaa 	bl	801a790 <rand>
 801183c:	4603      	mov	r3, r0
 801183e:	b29b      	uxth	r3, r3
 8011840:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011844:	b29b      	uxth	r3, r3
 8011846:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801184a:	b29a      	uxth	r2, r3
 801184c:	4b01      	ldr	r3, [pc, #4]	; (8011854 <tcp_init+0x20>)
 801184e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011850:	bf00      	nop
 8011852:	bd80      	pop	{r7, pc}
 8011854:	2000002c 	.word	0x2000002c

08011858 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	7d1b      	ldrb	r3, [r3, #20]
 8011864:	2b01      	cmp	r3, #1
 8011866:	d105      	bne.n	8011874 <tcp_free+0x1c>
 8011868:	4b06      	ldr	r3, [pc, #24]	; (8011884 <tcp_free+0x2c>)
 801186a:	22d4      	movs	r2, #212	; 0xd4
 801186c:	4906      	ldr	r1, [pc, #24]	; (8011888 <tcp_free+0x30>)
 801186e:	4807      	ldr	r0, [pc, #28]	; (801188c <tcp_free+0x34>)
 8011870:	f009 fcca 	bl	801b208 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011874:	6879      	ldr	r1, [r7, #4]
 8011876:	2001      	movs	r0, #1
 8011878:	f7fe fe36 	bl	80104e8 <memp_free>
}
 801187c:	bf00      	nop
 801187e:	3708      	adds	r7, #8
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}
 8011884:	0801e538 	.word	0x0801e538
 8011888:	0801e568 	.word	0x0801e568
 801188c:	0801e57c 	.word	0x0801e57c

08011890 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	7d1b      	ldrb	r3, [r3, #20]
 801189c:	2b01      	cmp	r3, #1
 801189e:	d105      	bne.n	80118ac <tcp_free_listen+0x1c>
 80118a0:	4b06      	ldr	r3, [pc, #24]	; (80118bc <tcp_free_listen+0x2c>)
 80118a2:	22df      	movs	r2, #223	; 0xdf
 80118a4:	4906      	ldr	r1, [pc, #24]	; (80118c0 <tcp_free_listen+0x30>)
 80118a6:	4807      	ldr	r0, [pc, #28]	; (80118c4 <tcp_free_listen+0x34>)
 80118a8:	f009 fcae 	bl	801b208 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80118ac:	6879      	ldr	r1, [r7, #4]
 80118ae:	2002      	movs	r0, #2
 80118b0:	f7fe fe1a 	bl	80104e8 <memp_free>
}
 80118b4:	bf00      	nop
 80118b6:	3708      	adds	r7, #8
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	0801e538 	.word	0x0801e538
 80118c0:	0801e5a4 	.word	0x0801e5a4
 80118c4:	0801e57c 	.word	0x0801e57c

080118c8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80118cc:	f001 f89a 	bl	8012a04 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80118d0:	4b07      	ldr	r3, [pc, #28]	; (80118f0 <tcp_tmr+0x28>)
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	3301      	adds	r3, #1
 80118d6:	b2da      	uxtb	r2, r3
 80118d8:	4b05      	ldr	r3, [pc, #20]	; (80118f0 <tcp_tmr+0x28>)
 80118da:	701a      	strb	r2, [r3, #0]
 80118dc:	4b04      	ldr	r3, [pc, #16]	; (80118f0 <tcp_tmr+0x28>)
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	f003 0301 	and.w	r3, r3, #1
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d001      	beq.n	80118ec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80118e8:	f000 fd4c 	bl	8012384 <tcp_slowtmr>
  }
}
 80118ec:	bf00      	nop
 80118ee:	bd80      	pop	{r7, pc}
 80118f0:	2001dcf9 	.word	0x2001dcf9

080118f4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d105      	bne.n	8011910 <tcp_remove_listener+0x1c>
 8011904:	4b0d      	ldr	r3, [pc, #52]	; (801193c <tcp_remove_listener+0x48>)
 8011906:	22ff      	movs	r2, #255	; 0xff
 8011908:	490d      	ldr	r1, [pc, #52]	; (8011940 <tcp_remove_listener+0x4c>)
 801190a:	480e      	ldr	r0, [pc, #56]	; (8011944 <tcp_remove_listener+0x50>)
 801190c:	f009 fc7c 	bl	801b208 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	60fb      	str	r3, [r7, #12]
 8011914:	e00a      	b.n	801192c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801191a:	683a      	ldr	r2, [r7, #0]
 801191c:	429a      	cmp	r2, r3
 801191e:	d102      	bne.n	8011926 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	2200      	movs	r2, #0
 8011924:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	68db      	ldr	r3, [r3, #12]
 801192a:	60fb      	str	r3, [r7, #12]
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d1f1      	bne.n	8011916 <tcp_remove_listener+0x22>
    }
  }
}
 8011932:	bf00      	nop
 8011934:	bf00      	nop
 8011936:	3710      	adds	r7, #16
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}
 801193c:	0801e538 	.word	0x0801e538
 8011940:	0801e5c0 	.word	0x0801e5c0
 8011944:	0801e57c 	.word	0x0801e57c

08011948 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b084      	sub	sp, #16
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d106      	bne.n	8011964 <tcp_listen_closed+0x1c>
 8011956:	4b14      	ldr	r3, [pc, #80]	; (80119a8 <tcp_listen_closed+0x60>)
 8011958:	f240 1211 	movw	r2, #273	; 0x111
 801195c:	4913      	ldr	r1, [pc, #76]	; (80119ac <tcp_listen_closed+0x64>)
 801195e:	4814      	ldr	r0, [pc, #80]	; (80119b0 <tcp_listen_closed+0x68>)
 8011960:	f009 fc52 	bl	801b208 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	7d1b      	ldrb	r3, [r3, #20]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d006      	beq.n	801197a <tcp_listen_closed+0x32>
 801196c:	4b0e      	ldr	r3, [pc, #56]	; (80119a8 <tcp_listen_closed+0x60>)
 801196e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011972:	4910      	ldr	r1, [pc, #64]	; (80119b4 <tcp_listen_closed+0x6c>)
 8011974:	480e      	ldr	r0, [pc, #56]	; (80119b0 <tcp_listen_closed+0x68>)
 8011976:	f009 fc47 	bl	801b208 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801197a:	2301      	movs	r3, #1
 801197c:	60fb      	str	r3, [r7, #12]
 801197e:	e00b      	b.n	8011998 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011980:	4a0d      	ldr	r2, [pc, #52]	; (80119b8 <tcp_listen_closed+0x70>)
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	6879      	ldr	r1, [r7, #4]
 801198c:	4618      	mov	r0, r3
 801198e:	f7ff ffb1 	bl	80118f4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	3301      	adds	r3, #1
 8011996:	60fb      	str	r3, [r7, #12]
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	2b03      	cmp	r3, #3
 801199c:	d9f0      	bls.n	8011980 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801199e:	bf00      	nop
 80119a0:	bf00      	nop
 80119a2:	3710      	adds	r7, #16
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}
 80119a8:	0801e538 	.word	0x0801e538
 80119ac:	0801e5e8 	.word	0x0801e5e8
 80119b0:	0801e57c 	.word	0x0801e57c
 80119b4:	0801e5f4 	.word	0x0801e5f4
 80119b8:	08020560 	.word	0x08020560

080119bc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80119bc:	b5b0      	push	{r4, r5, r7, lr}
 80119be:	b088      	sub	sp, #32
 80119c0:	af04      	add	r7, sp, #16
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	460b      	mov	r3, r1
 80119c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d106      	bne.n	80119dc <tcp_close_shutdown+0x20>
 80119ce:	4b63      	ldr	r3, [pc, #396]	; (8011b5c <tcp_close_shutdown+0x1a0>)
 80119d0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80119d4:	4962      	ldr	r1, [pc, #392]	; (8011b60 <tcp_close_shutdown+0x1a4>)
 80119d6:	4863      	ldr	r0, [pc, #396]	; (8011b64 <tcp_close_shutdown+0x1a8>)
 80119d8:	f009 fc16 	bl	801b208 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80119dc:	78fb      	ldrb	r3, [r7, #3]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d067      	beq.n	8011ab2 <tcp_close_shutdown+0xf6>
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	7d1b      	ldrb	r3, [r3, #20]
 80119e6:	2b04      	cmp	r3, #4
 80119e8:	d003      	beq.n	80119f2 <tcp_close_shutdown+0x36>
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	7d1b      	ldrb	r3, [r3, #20]
 80119ee:	2b07      	cmp	r3, #7
 80119f0:	d15f      	bne.n	8011ab2 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d105      	bne.n	8011a06 <tcp_close_shutdown+0x4a>
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119fe:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011a02:	4293      	cmp	r3, r2
 8011a04:	d055      	beq.n	8011ab2 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	8b5b      	ldrh	r3, [r3, #26]
 8011a0a:	f003 0310 	and.w	r3, r3, #16
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d106      	bne.n	8011a20 <tcp_close_shutdown+0x64>
 8011a12:	4b52      	ldr	r3, [pc, #328]	; (8011b5c <tcp_close_shutdown+0x1a0>)
 8011a14:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011a18:	4953      	ldr	r1, [pc, #332]	; (8011b68 <tcp_close_shutdown+0x1ac>)
 8011a1a:	4852      	ldr	r0, [pc, #328]	; (8011b64 <tcp_close_shutdown+0x1a8>)
 8011a1c:	f009 fbf4 	bl	801b208 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011a28:	687d      	ldr	r5, [r7, #4]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	3304      	adds	r3, #4
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	8ad2      	ldrh	r2, [r2, #22]
 8011a32:	6879      	ldr	r1, [r7, #4]
 8011a34:	8b09      	ldrh	r1, [r1, #24]
 8011a36:	9102      	str	r1, [sp, #8]
 8011a38:	9201      	str	r2, [sp, #4]
 8011a3a:	9300      	str	r3, [sp, #0]
 8011a3c:	462b      	mov	r3, r5
 8011a3e:	4622      	mov	r2, r4
 8011a40:	4601      	mov	r1, r0
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f005 fd98 	bl	8017578 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f001 fb75 	bl	8013138 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011a4e:	4b47      	ldr	r3, [pc, #284]	; (8011b6c <tcp_close_shutdown+0x1b0>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d105      	bne.n	8011a64 <tcp_close_shutdown+0xa8>
 8011a58:	4b44      	ldr	r3, [pc, #272]	; (8011b6c <tcp_close_shutdown+0x1b0>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	68db      	ldr	r3, [r3, #12]
 8011a5e:	4a43      	ldr	r2, [pc, #268]	; (8011b6c <tcp_close_shutdown+0x1b0>)
 8011a60:	6013      	str	r3, [r2, #0]
 8011a62:	e013      	b.n	8011a8c <tcp_close_shutdown+0xd0>
 8011a64:	4b41      	ldr	r3, [pc, #260]	; (8011b6c <tcp_close_shutdown+0x1b0>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	60fb      	str	r3, [r7, #12]
 8011a6a:	e00c      	b.n	8011a86 <tcp_close_shutdown+0xca>
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	687a      	ldr	r2, [r7, #4]
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d104      	bne.n	8011a80 <tcp_close_shutdown+0xc4>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	68da      	ldr	r2, [r3, #12]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	60da      	str	r2, [r3, #12]
 8011a7e:	e005      	b.n	8011a8c <tcp_close_shutdown+0xd0>
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	60fb      	str	r3, [r7, #12]
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d1ef      	bne.n	8011a6c <tcp_close_shutdown+0xb0>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	60da      	str	r2, [r3, #12]
 8011a92:	4b37      	ldr	r3, [pc, #220]	; (8011b70 <tcp_close_shutdown+0x1b4>)
 8011a94:	2201      	movs	r2, #1
 8011a96:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011a98:	4b36      	ldr	r3, [pc, #216]	; (8011b74 <tcp_close_shutdown+0x1b8>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	687a      	ldr	r2, [r7, #4]
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d102      	bne.n	8011aa8 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011aa2:	f004 f80d 	bl	8015ac0 <tcp_trigger_input_pcb_close>
 8011aa6:	e002      	b.n	8011aae <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f7ff fed5 	bl	8011858 <tcp_free>
      }
      return ERR_OK;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	e050      	b.n	8011b54 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	7d1b      	ldrb	r3, [r3, #20]
 8011ab6:	2b02      	cmp	r3, #2
 8011ab8:	d03b      	beq.n	8011b32 <tcp_close_shutdown+0x176>
 8011aba:	2b02      	cmp	r3, #2
 8011abc:	dc44      	bgt.n	8011b48 <tcp_close_shutdown+0x18c>
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d002      	beq.n	8011ac8 <tcp_close_shutdown+0x10c>
 8011ac2:	2b01      	cmp	r3, #1
 8011ac4:	d02a      	beq.n	8011b1c <tcp_close_shutdown+0x160>
 8011ac6:	e03f      	b.n	8011b48 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	8adb      	ldrh	r3, [r3, #22]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d021      	beq.n	8011b14 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011ad0:	4b29      	ldr	r3, [pc, #164]	; (8011b78 <tcp_close_shutdown+0x1bc>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d105      	bne.n	8011ae6 <tcp_close_shutdown+0x12a>
 8011ada:	4b27      	ldr	r3, [pc, #156]	; (8011b78 <tcp_close_shutdown+0x1bc>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	4a25      	ldr	r2, [pc, #148]	; (8011b78 <tcp_close_shutdown+0x1bc>)
 8011ae2:	6013      	str	r3, [r2, #0]
 8011ae4:	e013      	b.n	8011b0e <tcp_close_shutdown+0x152>
 8011ae6:	4b24      	ldr	r3, [pc, #144]	; (8011b78 <tcp_close_shutdown+0x1bc>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	60bb      	str	r3, [r7, #8]
 8011aec:	e00c      	b.n	8011b08 <tcp_close_shutdown+0x14c>
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	68db      	ldr	r3, [r3, #12]
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d104      	bne.n	8011b02 <tcp_close_shutdown+0x146>
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	68da      	ldr	r2, [r3, #12]
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	60da      	str	r2, [r3, #12]
 8011b00:	e005      	b.n	8011b0e <tcp_close_shutdown+0x152>
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	68db      	ldr	r3, [r3, #12]
 8011b06:	60bb      	str	r3, [r7, #8]
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d1ef      	bne.n	8011aee <tcp_close_shutdown+0x132>
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2200      	movs	r2, #0
 8011b12:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	f7ff fe9f 	bl	8011858 <tcp_free>
      break;
 8011b1a:	e01a      	b.n	8011b52 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f7ff ff13 	bl	8011948 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011b22:	6879      	ldr	r1, [r7, #4]
 8011b24:	4815      	ldr	r0, [pc, #84]	; (8011b7c <tcp_close_shutdown+0x1c0>)
 8011b26:	f001 fb57 	bl	80131d8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f7ff feb0 	bl	8011890 <tcp_free_listen>
      break;
 8011b30:	e00f      	b.n	8011b52 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011b32:	6879      	ldr	r1, [r7, #4]
 8011b34:	480d      	ldr	r0, [pc, #52]	; (8011b6c <tcp_close_shutdown+0x1b0>)
 8011b36:	f001 fb4f 	bl	80131d8 <tcp_pcb_remove>
 8011b3a:	4b0d      	ldr	r3, [pc, #52]	; (8011b70 <tcp_close_shutdown+0x1b4>)
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f7ff fe89 	bl	8011858 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011b46:	e004      	b.n	8011b52 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f000 f819 	bl	8011b80 <tcp_close_shutdown_fin>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	e000      	b.n	8011b54 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8011b52:	2300      	movs	r3, #0
}
 8011b54:	4618      	mov	r0, r3
 8011b56:	3710      	adds	r7, #16
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8011b5c:	0801e538 	.word	0x0801e538
 8011b60:	0801e60c 	.word	0x0801e60c
 8011b64:	0801e57c 	.word	0x0801e57c
 8011b68:	0801e62c 	.word	0x0801e62c
 8011b6c:	2001dcf0 	.word	0x2001dcf0
 8011b70:	2001dcf8 	.word	0x2001dcf8
 8011b74:	2001dd30 	.word	0x2001dd30
 8011b78:	2001dce8 	.word	0x2001dce8
 8011b7c:	2001dcec 	.word	0x2001dcec

08011b80 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d106      	bne.n	8011b9c <tcp_close_shutdown_fin+0x1c>
 8011b8e:	4b2e      	ldr	r3, [pc, #184]	; (8011c48 <tcp_close_shutdown_fin+0xc8>)
 8011b90:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011b94:	492d      	ldr	r1, [pc, #180]	; (8011c4c <tcp_close_shutdown_fin+0xcc>)
 8011b96:	482e      	ldr	r0, [pc, #184]	; (8011c50 <tcp_close_shutdown_fin+0xd0>)
 8011b98:	f009 fb36 	bl	801b208 <iprintf>

  switch (pcb->state) {
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	7d1b      	ldrb	r3, [r3, #20]
 8011ba0:	2b07      	cmp	r3, #7
 8011ba2:	d020      	beq.n	8011be6 <tcp_close_shutdown_fin+0x66>
 8011ba4:	2b07      	cmp	r3, #7
 8011ba6:	dc2b      	bgt.n	8011c00 <tcp_close_shutdown_fin+0x80>
 8011ba8:	2b03      	cmp	r3, #3
 8011baa:	d002      	beq.n	8011bb2 <tcp_close_shutdown_fin+0x32>
 8011bac:	2b04      	cmp	r3, #4
 8011bae:	d00d      	beq.n	8011bcc <tcp_close_shutdown_fin+0x4c>
 8011bb0:	e026      	b.n	8011c00 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f004 fdee 	bl	8016794 <tcp_send_fin>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d11f      	bne.n	8011c04 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2205      	movs	r2, #5
 8011bc8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011bca:	e01b      	b.n	8011c04 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f004 fde1 	bl	8016794 <tcp_send_fin>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d114      	bne.n	8011c08 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2205      	movs	r2, #5
 8011be2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011be4:	e010      	b.n	8011c08 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f004 fdd4 	bl	8016794 <tcp_send_fin>
 8011bec:	4603      	mov	r3, r0
 8011bee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d109      	bne.n	8011c0c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2209      	movs	r2, #9
 8011bfc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011bfe:	e005      	b.n	8011c0c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011c00:	2300      	movs	r3, #0
 8011c02:	e01c      	b.n	8011c3e <tcp_close_shutdown_fin+0xbe>
      break;
 8011c04:	bf00      	nop
 8011c06:	e002      	b.n	8011c0e <tcp_close_shutdown_fin+0x8e>
      break;
 8011c08:	bf00      	nop
 8011c0a:	e000      	b.n	8011c0e <tcp_close_shutdown_fin+0x8e>
      break;
 8011c0c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d103      	bne.n	8011c1e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	f004 fefa 	bl	8016a10 <tcp_output>
 8011c1c:	e00d      	b.n	8011c3a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c26:	d108      	bne.n	8011c3a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	8b5b      	ldrh	r3, [r3, #26]
 8011c2c:	f043 0308 	orr.w	r3, r3, #8
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011c36:	2300      	movs	r3, #0
 8011c38:	e001      	b.n	8011c3e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3710      	adds	r7, #16
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	0801e538 	.word	0x0801e538
 8011c4c:	0801e5e8 	.word	0x0801e5e8
 8011c50:	0801e57c 	.word	0x0801e57c

08011c54 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d109      	bne.n	8011c76 <tcp_close+0x22>
 8011c62:	4b0f      	ldr	r3, [pc, #60]	; (8011ca0 <tcp_close+0x4c>)
 8011c64:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011c68:	490e      	ldr	r1, [pc, #56]	; (8011ca4 <tcp_close+0x50>)
 8011c6a:	480f      	ldr	r0, [pc, #60]	; (8011ca8 <tcp_close+0x54>)
 8011c6c:	f009 facc 	bl	801b208 <iprintf>
 8011c70:	f06f 030f 	mvn.w	r3, #15
 8011c74:	e00f      	b.n	8011c96 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	7d1b      	ldrb	r3, [r3, #20]
 8011c7a:	2b01      	cmp	r3, #1
 8011c7c:	d006      	beq.n	8011c8c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	8b5b      	ldrh	r3, [r3, #26]
 8011c82:	f043 0310 	orr.w	r3, r3, #16
 8011c86:	b29a      	uxth	r2, r3
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011c8c:	2101      	movs	r1, #1
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f7ff fe94 	bl	80119bc <tcp_close_shutdown>
 8011c94:	4603      	mov	r3, r0
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	3708      	adds	r7, #8
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}
 8011c9e:	bf00      	nop
 8011ca0:	0801e538 	.word	0x0801e538
 8011ca4:	0801e648 	.word	0x0801e648
 8011ca8:	0801e57c 	.word	0x0801e57c

08011cac <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b08e      	sub	sp, #56	; 0x38
 8011cb0:	af04      	add	r7, sp, #16
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d107      	bne.n	8011ccc <tcp_abandon+0x20>
 8011cbc:	4b52      	ldr	r3, [pc, #328]	; (8011e08 <tcp_abandon+0x15c>)
 8011cbe:	f240 223d 	movw	r2, #573	; 0x23d
 8011cc2:	4952      	ldr	r1, [pc, #328]	; (8011e0c <tcp_abandon+0x160>)
 8011cc4:	4852      	ldr	r0, [pc, #328]	; (8011e10 <tcp_abandon+0x164>)
 8011cc6:	f009 fa9f 	bl	801b208 <iprintf>
 8011cca:	e099      	b.n	8011e00 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	7d1b      	ldrb	r3, [r3, #20]
 8011cd0:	2b01      	cmp	r3, #1
 8011cd2:	d106      	bne.n	8011ce2 <tcp_abandon+0x36>
 8011cd4:	4b4c      	ldr	r3, [pc, #304]	; (8011e08 <tcp_abandon+0x15c>)
 8011cd6:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011cda:	494e      	ldr	r1, [pc, #312]	; (8011e14 <tcp_abandon+0x168>)
 8011cdc:	484c      	ldr	r0, [pc, #304]	; (8011e10 <tcp_abandon+0x164>)
 8011cde:	f009 fa93 	bl	801b208 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	7d1b      	ldrb	r3, [r3, #20]
 8011ce6:	2b0a      	cmp	r3, #10
 8011ce8:	d107      	bne.n	8011cfa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011cea:	6879      	ldr	r1, [r7, #4]
 8011cec:	484a      	ldr	r0, [pc, #296]	; (8011e18 <tcp_abandon+0x16c>)
 8011cee:	f001 fa73 	bl	80131d8 <tcp_pcb_remove>
    tcp_free(pcb);
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7ff fdb0 	bl	8011858 <tcp_free>
 8011cf8:	e082      	b.n	8011e00 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d06:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d0c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d14:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	691b      	ldr	r3, [r3, #16]
 8011d1a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	7d1b      	ldrb	r3, [r3, #20]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d126      	bne.n	8011d72 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	8adb      	ldrh	r3, [r3, #22]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d02e      	beq.n	8011d8a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011d2c:	4b3b      	ldr	r3, [pc, #236]	; (8011e1c <tcp_abandon+0x170>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	687a      	ldr	r2, [r7, #4]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d105      	bne.n	8011d42 <tcp_abandon+0x96>
 8011d36:	4b39      	ldr	r3, [pc, #228]	; (8011e1c <tcp_abandon+0x170>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	68db      	ldr	r3, [r3, #12]
 8011d3c:	4a37      	ldr	r2, [pc, #220]	; (8011e1c <tcp_abandon+0x170>)
 8011d3e:	6013      	str	r3, [r2, #0]
 8011d40:	e013      	b.n	8011d6a <tcp_abandon+0xbe>
 8011d42:	4b36      	ldr	r3, [pc, #216]	; (8011e1c <tcp_abandon+0x170>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	61fb      	str	r3, [r7, #28]
 8011d48:	e00c      	b.n	8011d64 <tcp_abandon+0xb8>
 8011d4a:	69fb      	ldr	r3, [r7, #28]
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	687a      	ldr	r2, [r7, #4]
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d104      	bne.n	8011d5e <tcp_abandon+0xb2>
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	68da      	ldr	r2, [r3, #12]
 8011d58:	69fb      	ldr	r3, [r7, #28]
 8011d5a:	60da      	str	r2, [r3, #12]
 8011d5c:	e005      	b.n	8011d6a <tcp_abandon+0xbe>
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	68db      	ldr	r3, [r3, #12]
 8011d62:	61fb      	str	r3, [r7, #28]
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d1ef      	bne.n	8011d4a <tcp_abandon+0x9e>
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	60da      	str	r2, [r3, #12]
 8011d70:	e00b      	b.n	8011d8a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	8adb      	ldrh	r3, [r3, #22]
 8011d7a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011d7c:	6879      	ldr	r1, [r7, #4]
 8011d7e:	4828      	ldr	r0, [pc, #160]	; (8011e20 <tcp_abandon+0x174>)
 8011d80:	f001 fa2a 	bl	80131d8 <tcp_pcb_remove>
 8011d84:	4b27      	ldr	r3, [pc, #156]	; (8011e24 <tcp_abandon+0x178>)
 8011d86:	2201      	movs	r2, #1
 8011d88:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d004      	beq.n	8011d9c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d96:	4618      	mov	r0, r3
 8011d98:	f000 ff16 	bl	8012bc8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d004      	beq.n	8011dae <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011da8:	4618      	mov	r0, r3
 8011daa:	f000 ff0d 	bl	8012bc8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d004      	beq.n	8011dc0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f000 ff04 	bl	8012bc8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d00e      	beq.n	8011de4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011dc6:	6879      	ldr	r1, [r7, #4]
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	3304      	adds	r3, #4
 8011dcc:	687a      	ldr	r2, [r7, #4]
 8011dce:	8b12      	ldrh	r2, [r2, #24]
 8011dd0:	9202      	str	r2, [sp, #8]
 8011dd2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011dd4:	9201      	str	r2, [sp, #4]
 8011dd6:	9300      	str	r3, [sp, #0]
 8011dd8:	460b      	mov	r3, r1
 8011dda:	697a      	ldr	r2, [r7, #20]
 8011ddc:	69b9      	ldr	r1, [r7, #24]
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f005 fbca 	bl	8017578 <tcp_rst>
    }
    last_state = pcb->state;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	7d1b      	ldrb	r3, [r3, #20]
 8011de8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7ff fd34 	bl	8011858 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011df0:	693b      	ldr	r3, [r7, #16]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d004      	beq.n	8011e00 <tcp_abandon+0x154>
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	f06f 010c 	mvn.w	r1, #12
 8011dfc:	68f8      	ldr	r0, [r7, #12]
 8011dfe:	4798      	blx	r3
  }
}
 8011e00:	3728      	adds	r7, #40	; 0x28
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
 8011e06:	bf00      	nop
 8011e08:	0801e538 	.word	0x0801e538
 8011e0c:	0801e67c 	.word	0x0801e67c
 8011e10:	0801e57c 	.word	0x0801e57c
 8011e14:	0801e698 	.word	0x0801e698
 8011e18:	2001dcf4 	.word	0x2001dcf4
 8011e1c:	2001dce8 	.word	0x2001dce8
 8011e20:	2001dcf0 	.word	0x2001dcf0
 8011e24:	2001dcf8 	.word	0x2001dcf8

08011e28 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011e30:	2101      	movs	r1, #1
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f7ff ff3a 	bl	8011cac <tcp_abandon>
}
 8011e38:	bf00      	nop
 8011e3a:	3708      	adds	r7, #8
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}

08011e40 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b088      	sub	sp, #32
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	60f8      	str	r0, [r7, #12]
 8011e48:	60b9      	str	r1, [r7, #8]
 8011e4a:	4613      	mov	r3, r2
 8011e4c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8011e4e:	2304      	movs	r3, #4
 8011e50:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d101      	bne.n	8011e5c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011e58:	4b3e      	ldr	r3, [pc, #248]	; (8011f54 <tcp_bind+0x114>)
 8011e5a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d109      	bne.n	8011e76 <tcp_bind+0x36>
 8011e62:	4b3d      	ldr	r3, [pc, #244]	; (8011f58 <tcp_bind+0x118>)
 8011e64:	f240 22a9 	movw	r2, #681	; 0x2a9
 8011e68:	493c      	ldr	r1, [pc, #240]	; (8011f5c <tcp_bind+0x11c>)
 8011e6a:	483d      	ldr	r0, [pc, #244]	; (8011f60 <tcp_bind+0x120>)
 8011e6c:	f009 f9cc 	bl	801b208 <iprintf>
 8011e70:	f06f 030f 	mvn.w	r3, #15
 8011e74:	e06a      	b.n	8011f4c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	7d1b      	ldrb	r3, [r3, #20]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d009      	beq.n	8011e92 <tcp_bind+0x52>
 8011e7e:	4b36      	ldr	r3, [pc, #216]	; (8011f58 <tcp_bind+0x118>)
 8011e80:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011e84:	4937      	ldr	r1, [pc, #220]	; (8011f64 <tcp_bind+0x124>)
 8011e86:	4836      	ldr	r0, [pc, #216]	; (8011f60 <tcp_bind+0x120>)
 8011e88:	f009 f9be 	bl	801b208 <iprintf>
 8011e8c:	f06f 0305 	mvn.w	r3, #5
 8011e90:	e05c      	b.n	8011f4c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8011e92:	88fb      	ldrh	r3, [r7, #6]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d109      	bne.n	8011eac <tcp_bind+0x6c>
    port = tcp_new_port();
 8011e98:	f000 f916 	bl	80120c8 <tcp_new_port>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011ea0:	88fb      	ldrh	r3, [r7, #6]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d135      	bne.n	8011f12 <tcp_bind+0xd2>
      return ERR_BUF;
 8011ea6:	f06f 0301 	mvn.w	r3, #1
 8011eaa:	e04f      	b.n	8011f4c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011eac:	2300      	movs	r3, #0
 8011eae:	61fb      	str	r3, [r7, #28]
 8011eb0:	e02b      	b.n	8011f0a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011eb2:	4a2d      	ldr	r2, [pc, #180]	; (8011f68 <tcp_bind+0x128>)
 8011eb4:	69fb      	ldr	r3, [r7, #28]
 8011eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	61bb      	str	r3, [r7, #24]
 8011ebe:	e01e      	b.n	8011efe <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8011ec0:	69bb      	ldr	r3, [r7, #24]
 8011ec2:	8adb      	ldrh	r3, [r3, #22]
 8011ec4:	88fa      	ldrh	r2, [r7, #6]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d116      	bne.n	8011ef8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8011eca:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d010      	beq.n	8011ef2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8011ed0:	69bb      	ldr	r3, [r7, #24]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d00c      	beq.n	8011ef2 <tcp_bind+0xb2>
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d009      	beq.n	8011ef2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d005      	beq.n	8011ef2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8011ee6:	69bb      	ldr	r3, [r7, #24]
 8011ee8:	681a      	ldr	r2, [r3, #0]
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011eee:	429a      	cmp	r2, r3
 8011ef0:	d102      	bne.n	8011ef8 <tcp_bind+0xb8>
              return ERR_USE;
 8011ef2:	f06f 0307 	mvn.w	r3, #7
 8011ef6:	e029      	b.n	8011f4c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011ef8:	69bb      	ldr	r3, [r7, #24]
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	61bb      	str	r3, [r7, #24]
 8011efe:	69bb      	ldr	r3, [r7, #24]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d1dd      	bne.n	8011ec0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8011f04:	69fb      	ldr	r3, [r7, #28]
 8011f06:	3301      	adds	r3, #1
 8011f08:	61fb      	str	r3, [r7, #28]
 8011f0a:	69fa      	ldr	r2, [r7, #28]
 8011f0c:	697b      	ldr	r3, [r7, #20]
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	dbcf      	blt.n	8011eb2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d00c      	beq.n	8011f32 <tcp_bind+0xf2>
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d008      	beq.n	8011f32 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d002      	beq.n	8011f2c <tcp_bind+0xec>
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	e000      	b.n	8011f2e <tcp_bind+0xee>
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	68fa      	ldr	r2, [r7, #12]
 8011f30:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	88fa      	ldrh	r2, [r7, #6]
 8011f36:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8011f38:	4b0c      	ldr	r3, [pc, #48]	; (8011f6c <tcp_bind+0x12c>)
 8011f3a:	681a      	ldr	r2, [r3, #0]
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	60da      	str	r2, [r3, #12]
 8011f40:	4a0a      	ldr	r2, [pc, #40]	; (8011f6c <tcp_bind+0x12c>)
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	6013      	str	r3, [r2, #0]
 8011f46:	f005 fcd9 	bl	80178fc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011f4a:	2300      	movs	r3, #0
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3720      	adds	r7, #32
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	08020588 	.word	0x08020588
 8011f58:	0801e538 	.word	0x0801e538
 8011f5c:	0801e6cc 	.word	0x0801e6cc
 8011f60:	0801e57c 	.word	0x0801e57c
 8011f64:	0801e6e4 	.word	0x0801e6e4
 8011f68:	08020560 	.word	0x08020560
 8011f6c:	2001dce8 	.word	0x2001dce8

08011f70 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b084      	sub	sp, #16
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d106      	bne.n	8011f8c <tcp_update_rcv_ann_wnd+0x1c>
 8011f7e:	4b25      	ldr	r3, [pc, #148]	; (8012014 <tcp_update_rcv_ann_wnd+0xa4>)
 8011f80:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011f84:	4924      	ldr	r1, [pc, #144]	; (8012018 <tcp_update_rcv_ann_wnd+0xa8>)
 8011f86:	4825      	ldr	r0, [pc, #148]	; (801201c <tcp_update_rcv_ann_wnd+0xac>)
 8011f88:	f009 f93e 	bl	801b208 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f90:	687a      	ldr	r2, [r7, #4]
 8011f92:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011f94:	4413      	add	r3, r2
 8011f96:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f9c:	687a      	ldr	r2, [r7, #4]
 8011f9e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011fa0:	f640 3168 	movw	r1, #2920	; 0xb68
 8011fa4:	428a      	cmp	r2, r1
 8011fa6:	bf28      	it	cs
 8011fa8:	460a      	movcs	r2, r1
 8011faa:	b292      	uxth	r2, r2
 8011fac:	4413      	add	r3, r2
 8011fae:	68fa      	ldr	r2, [r7, #12]
 8011fb0:	1ad3      	subs	r3, r2, r3
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	db08      	blt.n	8011fc8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fc2:	68fa      	ldr	r2, [r7, #12]
 8011fc4:	1ad3      	subs	r3, r2, r3
 8011fc6:	e020      	b.n	801200a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fd0:	1ad3      	subs	r3, r2, r3
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	dd03      	ble.n	8011fde <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2200      	movs	r2, #0
 8011fda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011fdc:	e014      	b.n	8012008 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fe6:	1ad3      	subs	r3, r2, r3
 8011fe8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ff0:	d306      	bcc.n	8012000 <tcp_update_rcv_ann_wnd+0x90>
 8011ff2:	4b08      	ldr	r3, [pc, #32]	; (8012014 <tcp_update_rcv_ann_wnd+0xa4>)
 8011ff4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011ff8:	4909      	ldr	r1, [pc, #36]	; (8012020 <tcp_update_rcv_ann_wnd+0xb0>)
 8011ffa:	4808      	ldr	r0, [pc, #32]	; (801201c <tcp_update_rcv_ann_wnd+0xac>)
 8011ffc:	f009 f904 	bl	801b208 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	b29a      	uxth	r2, r3
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012008:	2300      	movs	r3, #0
  }
}
 801200a:	4618      	mov	r0, r3
 801200c:	3710      	adds	r7, #16
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	0801e538 	.word	0x0801e538
 8012018:	0801e794 	.word	0x0801e794
 801201c:	0801e57c 	.word	0x0801e57c
 8012020:	0801e7b8 	.word	0x0801e7b8

08012024 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b084      	sub	sp, #16
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	460b      	mov	r3, r1
 801202e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d107      	bne.n	8012046 <tcp_recved+0x22>
 8012036:	4b20      	ldr	r3, [pc, #128]	; (80120b8 <tcp_recved+0x94>)
 8012038:	f240 32cf 	movw	r2, #975	; 0x3cf
 801203c:	491f      	ldr	r1, [pc, #124]	; (80120bc <tcp_recved+0x98>)
 801203e:	4820      	ldr	r0, [pc, #128]	; (80120c0 <tcp_recved+0x9c>)
 8012040:	f009 f8e2 	bl	801b208 <iprintf>
 8012044:	e034      	b.n	80120b0 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	7d1b      	ldrb	r3, [r3, #20]
 801204a:	2b01      	cmp	r3, #1
 801204c:	d106      	bne.n	801205c <tcp_recved+0x38>
 801204e:	4b1a      	ldr	r3, [pc, #104]	; (80120b8 <tcp_recved+0x94>)
 8012050:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012054:	491b      	ldr	r1, [pc, #108]	; (80120c4 <tcp_recved+0xa0>)
 8012056:	481a      	ldr	r0, [pc, #104]	; (80120c0 <tcp_recved+0x9c>)
 8012058:	f009 f8d6 	bl	801b208 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012060:	887b      	ldrh	r3, [r7, #2]
 8012062:	4413      	add	r3, r2
 8012064:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012066:	89fb      	ldrh	r3, [r7, #14]
 8012068:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801206c:	4293      	cmp	r3, r2
 801206e:	d804      	bhi.n	801207a <tcp_recved+0x56>
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012074:	89fa      	ldrh	r2, [r7, #14]
 8012076:	429a      	cmp	r2, r3
 8012078:	d204      	bcs.n	8012084 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012080:	851a      	strh	r2, [r3, #40]	; 0x28
 8012082:	e002      	b.n	801208a <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	89fa      	ldrh	r2, [r7, #14]
 8012088:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f7ff ff70 	bl	8011f70 <tcp_update_rcv_ann_wnd>
 8012090:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012098:	4293      	cmp	r3, r2
 801209a:	d909      	bls.n	80120b0 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	8b5b      	ldrh	r3, [r3, #26]
 80120a0:	f043 0302 	orr.w	r3, r3, #2
 80120a4:	b29a      	uxth	r2, r3
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f004 fcb0 	bl	8016a10 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80120b0:	3710      	adds	r7, #16
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	bf00      	nop
 80120b8:	0801e538 	.word	0x0801e538
 80120bc:	0801e7d4 	.word	0x0801e7d4
 80120c0:	0801e57c 	.word	0x0801e57c
 80120c4:	0801e7ec 	.word	0x0801e7ec

080120c8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80120c8:	b480      	push	{r7}
 80120ca:	b083      	sub	sp, #12
 80120cc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80120ce:	2300      	movs	r3, #0
 80120d0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80120d2:	4b1e      	ldr	r3, [pc, #120]	; (801214c <tcp_new_port+0x84>)
 80120d4:	881b      	ldrh	r3, [r3, #0]
 80120d6:	3301      	adds	r3, #1
 80120d8:	b29a      	uxth	r2, r3
 80120da:	4b1c      	ldr	r3, [pc, #112]	; (801214c <tcp_new_port+0x84>)
 80120dc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80120de:	4b1b      	ldr	r3, [pc, #108]	; (801214c <tcp_new_port+0x84>)
 80120e0:	881b      	ldrh	r3, [r3, #0]
 80120e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120e6:	4293      	cmp	r3, r2
 80120e8:	d103      	bne.n	80120f2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80120ea:	4b18      	ldr	r3, [pc, #96]	; (801214c <tcp_new_port+0x84>)
 80120ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80120f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80120f2:	2300      	movs	r3, #0
 80120f4:	71fb      	strb	r3, [r7, #7]
 80120f6:	e01e      	b.n	8012136 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80120f8:	79fb      	ldrb	r3, [r7, #7]
 80120fa:	4a15      	ldr	r2, [pc, #84]	; (8012150 <tcp_new_port+0x88>)
 80120fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	603b      	str	r3, [r7, #0]
 8012104:	e011      	b.n	801212a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	8ada      	ldrh	r2, [r3, #22]
 801210a:	4b10      	ldr	r3, [pc, #64]	; (801214c <tcp_new_port+0x84>)
 801210c:	881b      	ldrh	r3, [r3, #0]
 801210e:	429a      	cmp	r2, r3
 8012110:	d108      	bne.n	8012124 <tcp_new_port+0x5c>
        n++;
 8012112:	88bb      	ldrh	r3, [r7, #4]
 8012114:	3301      	adds	r3, #1
 8012116:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012118:	88bb      	ldrh	r3, [r7, #4]
 801211a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801211e:	d3d8      	bcc.n	80120d2 <tcp_new_port+0xa>
          return 0;
 8012120:	2300      	movs	r3, #0
 8012122:	e00d      	b.n	8012140 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	68db      	ldr	r3, [r3, #12]
 8012128:	603b      	str	r3, [r7, #0]
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d1ea      	bne.n	8012106 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012130:	79fb      	ldrb	r3, [r7, #7]
 8012132:	3301      	adds	r3, #1
 8012134:	71fb      	strb	r3, [r7, #7]
 8012136:	79fb      	ldrb	r3, [r7, #7]
 8012138:	2b03      	cmp	r3, #3
 801213a:	d9dd      	bls.n	80120f8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801213c:	4b03      	ldr	r3, [pc, #12]	; (801214c <tcp_new_port+0x84>)
 801213e:	881b      	ldrh	r3, [r3, #0]
}
 8012140:	4618      	mov	r0, r3
 8012142:	370c      	adds	r7, #12
 8012144:	46bd      	mov	sp, r7
 8012146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214a:	4770      	bx	lr
 801214c:	2000002c 	.word	0x2000002c
 8012150:	08020560 	.word	0x08020560

08012154 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b08a      	sub	sp, #40	; 0x28
 8012158:	af00      	add	r7, sp, #0
 801215a:	60f8      	str	r0, [r7, #12]
 801215c:	60b9      	str	r1, [r7, #8]
 801215e:	603b      	str	r3, [r7, #0]
 8012160:	4613      	mov	r3, r2
 8012162:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8012164:	2300      	movs	r3, #0
 8012166:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d109      	bne.n	8012182 <tcp_connect+0x2e>
 801216e:	4b7d      	ldr	r3, [pc, #500]	; (8012364 <tcp_connect+0x210>)
 8012170:	f240 4235 	movw	r2, #1077	; 0x435
 8012174:	497c      	ldr	r1, [pc, #496]	; (8012368 <tcp_connect+0x214>)
 8012176:	487d      	ldr	r0, [pc, #500]	; (801236c <tcp_connect+0x218>)
 8012178:	f009 f846 	bl	801b208 <iprintf>
 801217c:	f06f 030f 	mvn.w	r3, #15
 8012180:	e0ec      	b.n	801235c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d109      	bne.n	801219c <tcp_connect+0x48>
 8012188:	4b76      	ldr	r3, [pc, #472]	; (8012364 <tcp_connect+0x210>)
 801218a:	f240 4236 	movw	r2, #1078	; 0x436
 801218e:	4978      	ldr	r1, [pc, #480]	; (8012370 <tcp_connect+0x21c>)
 8012190:	4876      	ldr	r0, [pc, #472]	; (801236c <tcp_connect+0x218>)
 8012192:	f009 f839 	bl	801b208 <iprintf>
 8012196:	f06f 030f 	mvn.w	r3, #15
 801219a:	e0df      	b.n	801235c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	7d1b      	ldrb	r3, [r3, #20]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d009      	beq.n	80121b8 <tcp_connect+0x64>
 80121a4:	4b6f      	ldr	r3, [pc, #444]	; (8012364 <tcp_connect+0x210>)
 80121a6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80121aa:	4972      	ldr	r1, [pc, #456]	; (8012374 <tcp_connect+0x220>)
 80121ac:	486f      	ldr	r0, [pc, #444]	; (801236c <tcp_connect+0x218>)
 80121ae:	f009 f82b 	bl	801b208 <iprintf>
 80121b2:	f06f 0309 	mvn.w	r3, #9
 80121b6:	e0d1      	b.n	801235c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d002      	beq.n	80121c4 <tcp_connect+0x70>
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	e000      	b.n	80121c6 <tcp_connect+0x72>
 80121c4:	2300      	movs	r3, #0
 80121c6:	68fa      	ldr	r2, [r7, #12]
 80121c8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	88fa      	ldrh	r2, [r7, #6]
 80121ce:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	7a1b      	ldrb	r3, [r3, #8]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d006      	beq.n	80121e6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	7a1b      	ldrb	r3, [r3, #8]
 80121dc:	4618      	mov	r0, r3
 80121de:	f7fe fc99 	bl	8010b14 <netif_get_by_index>
 80121e2:	6278      	str	r0, [r7, #36]	; 0x24
 80121e4:	e005      	b.n	80121f2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	3304      	adds	r3, #4
 80121ea:	4618      	mov	r0, r3
 80121ec:	f006 ffce 	bl	801918c <ip4_route>
 80121f0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 80121f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d102      	bne.n	80121fe <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80121f8:	f06f 0303 	mvn.w	r3, #3
 80121fc:	e0ae      	b.n	801235c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d003      	beq.n	801220c <tcp_connect+0xb8>
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d111      	bne.n	8012230 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220e:	2b00      	cmp	r3, #0
 8012210:	d002      	beq.n	8012218 <tcp_connect+0xc4>
 8012212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012214:	3304      	adds	r3, #4
 8012216:	e000      	b.n	801221a <tcp_connect+0xc6>
 8012218:	2300      	movs	r3, #0
 801221a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d102      	bne.n	8012228 <tcp_connect+0xd4>
      return ERR_RTE;
 8012222:	f06f 0303 	mvn.w	r3, #3
 8012226:	e099      	b.n	801235c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012228:	69fb      	ldr	r3, [r7, #28]
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	8adb      	ldrh	r3, [r3, #22]
 8012234:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	8adb      	ldrh	r3, [r3, #22]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d10c      	bne.n	8012258 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801223e:	f7ff ff43 	bl	80120c8 <tcp_new_port>
 8012242:	4603      	mov	r3, r0
 8012244:	461a      	mov	r2, r3
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	8adb      	ldrh	r3, [r3, #22]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d102      	bne.n	8012258 <tcp_connect+0x104>
      return ERR_BUF;
 8012252:	f06f 0301 	mvn.w	r3, #1
 8012256:	e081      	b.n	801235c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8012258:	68f8      	ldr	r0, [r7, #12]
 801225a:	f001 f851 	bl	8013300 <tcp_next_iss>
 801225e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	2200      	movs	r2, #0
 8012264:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	697a      	ldr	r2, [r7, #20]
 801226a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	1e5a      	subs	r2, r3, #1
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	1e5a      	subs	r2, r3, #1
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	1e5a      	subs	r2, r3, #1
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801228a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80122a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80122ac:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	3304      	adds	r3, #4
 80122b6:	461a      	mov	r2, r3
 80122b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80122ba:	f001 f847 	bl	801334c <tcp_eff_send_mss_netif>
 80122be:	4603      	mov	r3, r0
 80122c0:	461a      	mov	r2, r3
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	2201      	movs	r2, #1
 80122ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	683a      	ldr	r2, [r7, #0]
 80122d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80122d6:	2102      	movs	r1, #2
 80122d8:	68f8      	ldr	r0, [r7, #12]
 80122da:	f004 faab 	bl	8016834 <tcp_enqueue_flags>
 80122de:	4603      	mov	r3, r0
 80122e0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80122e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d136      	bne.n	8012358 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	2202      	movs	r2, #2
 80122ee:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80122f0:	8b7b      	ldrh	r3, [r7, #26]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d021      	beq.n	801233a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80122f6:	4b20      	ldr	r3, [pc, #128]	; (8012378 <tcp_connect+0x224>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	68fa      	ldr	r2, [r7, #12]
 80122fc:	429a      	cmp	r2, r3
 80122fe:	d105      	bne.n	801230c <tcp_connect+0x1b8>
 8012300:	4b1d      	ldr	r3, [pc, #116]	; (8012378 <tcp_connect+0x224>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	68db      	ldr	r3, [r3, #12]
 8012306:	4a1c      	ldr	r2, [pc, #112]	; (8012378 <tcp_connect+0x224>)
 8012308:	6013      	str	r3, [r2, #0]
 801230a:	e013      	b.n	8012334 <tcp_connect+0x1e0>
 801230c:	4b1a      	ldr	r3, [pc, #104]	; (8012378 <tcp_connect+0x224>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	623b      	str	r3, [r7, #32]
 8012312:	e00c      	b.n	801232e <tcp_connect+0x1da>
 8012314:	6a3b      	ldr	r3, [r7, #32]
 8012316:	68db      	ldr	r3, [r3, #12]
 8012318:	68fa      	ldr	r2, [r7, #12]
 801231a:	429a      	cmp	r2, r3
 801231c:	d104      	bne.n	8012328 <tcp_connect+0x1d4>
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	68da      	ldr	r2, [r3, #12]
 8012322:	6a3b      	ldr	r3, [r7, #32]
 8012324:	60da      	str	r2, [r3, #12]
 8012326:	e005      	b.n	8012334 <tcp_connect+0x1e0>
 8012328:	6a3b      	ldr	r3, [r7, #32]
 801232a:	68db      	ldr	r3, [r3, #12]
 801232c:	623b      	str	r3, [r7, #32]
 801232e:	6a3b      	ldr	r3, [r7, #32]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d1ef      	bne.n	8012314 <tcp_connect+0x1c0>
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2200      	movs	r2, #0
 8012338:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801233a:	4b10      	ldr	r3, [pc, #64]	; (801237c <tcp_connect+0x228>)
 801233c:	681a      	ldr	r2, [r3, #0]
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	60da      	str	r2, [r3, #12]
 8012342:	4a0e      	ldr	r2, [pc, #56]	; (801237c <tcp_connect+0x228>)
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	6013      	str	r3, [r2, #0]
 8012348:	f005 fad8 	bl	80178fc <tcp_timer_needed>
 801234c:	4b0c      	ldr	r3, [pc, #48]	; (8012380 <tcp_connect+0x22c>)
 801234e:	2201      	movs	r2, #1
 8012350:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8012352:	68f8      	ldr	r0, [r7, #12]
 8012354:	f004 fb5c 	bl	8016a10 <tcp_output>
  }
  return ret;
 8012358:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801235c:	4618      	mov	r0, r3
 801235e:	3728      	adds	r7, #40	; 0x28
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}
 8012364:	0801e538 	.word	0x0801e538
 8012368:	0801e814 	.word	0x0801e814
 801236c:	0801e57c 	.word	0x0801e57c
 8012370:	0801e830 	.word	0x0801e830
 8012374:	0801e84c 	.word	0x0801e84c
 8012378:	2001dce8 	.word	0x2001dce8
 801237c:	2001dcf0 	.word	0x2001dcf0
 8012380:	2001dcf8 	.word	0x2001dcf8

08012384 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012384:	b5b0      	push	{r4, r5, r7, lr}
 8012386:	b090      	sub	sp, #64	; 0x40
 8012388:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801238a:	2300      	movs	r3, #0
 801238c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012390:	4b94      	ldr	r3, [pc, #592]	; (80125e4 <tcp_slowtmr+0x260>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	3301      	adds	r3, #1
 8012396:	4a93      	ldr	r2, [pc, #588]	; (80125e4 <tcp_slowtmr+0x260>)
 8012398:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801239a:	4b93      	ldr	r3, [pc, #588]	; (80125e8 <tcp_slowtmr+0x264>)
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	3301      	adds	r3, #1
 80123a0:	b2da      	uxtb	r2, r3
 80123a2:	4b91      	ldr	r3, [pc, #580]	; (80125e8 <tcp_slowtmr+0x264>)
 80123a4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80123a6:	2300      	movs	r3, #0
 80123a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80123aa:	4b90      	ldr	r3, [pc, #576]	; (80125ec <tcp_slowtmr+0x268>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80123b0:	e29d      	b.n	80128ee <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80123b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123b4:	7d1b      	ldrb	r3, [r3, #20]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d106      	bne.n	80123c8 <tcp_slowtmr+0x44>
 80123ba:	4b8d      	ldr	r3, [pc, #564]	; (80125f0 <tcp_slowtmr+0x26c>)
 80123bc:	f240 42be 	movw	r2, #1214	; 0x4be
 80123c0:	498c      	ldr	r1, [pc, #560]	; (80125f4 <tcp_slowtmr+0x270>)
 80123c2:	488d      	ldr	r0, [pc, #564]	; (80125f8 <tcp_slowtmr+0x274>)
 80123c4:	f008 ff20 	bl	801b208 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80123c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ca:	7d1b      	ldrb	r3, [r3, #20]
 80123cc:	2b01      	cmp	r3, #1
 80123ce:	d106      	bne.n	80123de <tcp_slowtmr+0x5a>
 80123d0:	4b87      	ldr	r3, [pc, #540]	; (80125f0 <tcp_slowtmr+0x26c>)
 80123d2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80123d6:	4989      	ldr	r1, [pc, #548]	; (80125fc <tcp_slowtmr+0x278>)
 80123d8:	4887      	ldr	r0, [pc, #540]	; (80125f8 <tcp_slowtmr+0x274>)
 80123da:	f008 ff15 	bl	801b208 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80123de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123e0:	7d1b      	ldrb	r3, [r3, #20]
 80123e2:	2b0a      	cmp	r3, #10
 80123e4:	d106      	bne.n	80123f4 <tcp_slowtmr+0x70>
 80123e6:	4b82      	ldr	r3, [pc, #520]	; (80125f0 <tcp_slowtmr+0x26c>)
 80123e8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80123ec:	4984      	ldr	r1, [pc, #528]	; (8012600 <tcp_slowtmr+0x27c>)
 80123ee:	4882      	ldr	r0, [pc, #520]	; (80125f8 <tcp_slowtmr+0x274>)
 80123f0:	f008 ff0a 	bl	801b208 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80123f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f6:	7f9a      	ldrb	r2, [r3, #30]
 80123f8:	4b7b      	ldr	r3, [pc, #492]	; (80125e8 <tcp_slowtmr+0x264>)
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d105      	bne.n	801240c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012402:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012406:	68db      	ldr	r3, [r3, #12]
 8012408:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801240a:	e270      	b.n	80128ee <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801240c:	4b76      	ldr	r3, [pc, #472]	; (80125e8 <tcp_slowtmr+0x264>)
 801240e:	781a      	ldrb	r2, [r3, #0]
 8012410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012412:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012414:	2300      	movs	r3, #0
 8012416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801241a:	2300      	movs	r3, #0
 801241c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012422:	7d1b      	ldrb	r3, [r3, #20]
 8012424:	2b02      	cmp	r3, #2
 8012426:	d10a      	bne.n	801243e <tcp_slowtmr+0xba>
 8012428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801242a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801242e:	2b05      	cmp	r3, #5
 8012430:	d905      	bls.n	801243e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012436:	3301      	adds	r3, #1
 8012438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801243c:	e11e      	b.n	801267c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012440:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012444:	2b0b      	cmp	r3, #11
 8012446:	d905      	bls.n	8012454 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801244c:	3301      	adds	r3, #1
 801244e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012452:	e113      	b.n	801267c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012456:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801245a:	2b00      	cmp	r3, #0
 801245c:	d075      	beq.n	801254a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012462:	2b00      	cmp	r3, #0
 8012464:	d006      	beq.n	8012474 <tcp_slowtmr+0xf0>
 8012466:	4b62      	ldr	r3, [pc, #392]	; (80125f0 <tcp_slowtmr+0x26c>)
 8012468:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801246c:	4965      	ldr	r1, [pc, #404]	; (8012604 <tcp_slowtmr+0x280>)
 801246e:	4862      	ldr	r0, [pc, #392]	; (80125f8 <tcp_slowtmr+0x274>)
 8012470:	f008 feca 	bl	801b208 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012478:	2b00      	cmp	r3, #0
 801247a:	d106      	bne.n	801248a <tcp_slowtmr+0x106>
 801247c:	4b5c      	ldr	r3, [pc, #368]	; (80125f0 <tcp_slowtmr+0x26c>)
 801247e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012482:	4961      	ldr	r1, [pc, #388]	; (8012608 <tcp_slowtmr+0x284>)
 8012484:	485c      	ldr	r0, [pc, #368]	; (80125f8 <tcp_slowtmr+0x274>)
 8012486:	f008 febf 	bl	801b208 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012490:	2b0b      	cmp	r3, #11
 8012492:	d905      	bls.n	80124a0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012498:	3301      	adds	r3, #1
 801249a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801249e:	e0ed      	b.n	801267c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80124a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80124a6:	3b01      	subs	r3, #1
 80124a8:	4a58      	ldr	r2, [pc, #352]	; (801260c <tcp_slowtmr+0x288>)
 80124aa:	5cd3      	ldrb	r3, [r2, r3]
 80124ac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80124ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80124b4:	7c7a      	ldrb	r2, [r7, #17]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d907      	bls.n	80124ca <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80124ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80124c0:	3301      	adds	r3, #1
 80124c2:	b2da      	uxtb	r2, r3
 80124c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80124ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80124d0:	7c7a      	ldrb	r2, [r7, #17]
 80124d2:	429a      	cmp	r2, r3
 80124d4:	f200 80d2 	bhi.w	801267c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80124d8:	2301      	movs	r3, #1
 80124da:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80124dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d108      	bne.n	80124f8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80124e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124e8:	f005 f93a 	bl	8017760 <tcp_zero_window_probe>
 80124ec:	4603      	mov	r3, r0
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d014      	beq.n	801251c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80124f2:	2300      	movs	r3, #0
 80124f4:	623b      	str	r3, [r7, #32]
 80124f6:	e011      	b.n	801251c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80124f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124fe:	4619      	mov	r1, r3
 8012500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012502:	f003 ffff 	bl	8016504 <tcp_split_unsent_seg>
 8012506:	4603      	mov	r3, r0
 8012508:	2b00      	cmp	r3, #0
 801250a:	d107      	bne.n	801251c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801250c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801250e:	f004 fa7f 	bl	8016a10 <tcp_output>
 8012512:	4603      	mov	r3, r0
 8012514:	2b00      	cmp	r3, #0
 8012516:	d101      	bne.n	801251c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012518:	2300      	movs	r3, #0
 801251a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801251c:	6a3b      	ldr	r3, [r7, #32]
 801251e:	2b00      	cmp	r3, #0
 8012520:	f000 80ac 	beq.w	801267c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8012524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012526:	2200      	movs	r2, #0
 8012528:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012532:	2b06      	cmp	r3, #6
 8012534:	f200 80a2 	bhi.w	801267c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801253a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801253e:	3301      	adds	r3, #1
 8012540:	b2da      	uxtb	r2, r3
 8012542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012544:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012548:	e098      	b.n	801267c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801254c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012550:	2b00      	cmp	r3, #0
 8012552:	db0f      	blt.n	8012574 <tcp_slowtmr+0x1f0>
 8012554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012556:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801255a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801255e:	4293      	cmp	r3, r2
 8012560:	d008      	beq.n	8012574 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8012562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012564:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012568:	b29b      	uxth	r3, r3
 801256a:	3301      	adds	r3, #1
 801256c:	b29b      	uxth	r3, r3
 801256e:	b21a      	sxth	r2, r3
 8012570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012572:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012576:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801257c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012580:	429a      	cmp	r2, r3
 8012582:	db7b      	blt.n	801267c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012584:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012586:	f004 fd37 	bl	8016ff8 <tcp_rexmit_rto_prepare>
 801258a:	4603      	mov	r3, r0
 801258c:	2b00      	cmp	r3, #0
 801258e:	d007      	beq.n	80125a0 <tcp_slowtmr+0x21c>
 8012590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012594:	2b00      	cmp	r3, #0
 8012596:	d171      	bne.n	801267c <tcp_slowtmr+0x2f8>
 8012598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801259a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801259c:	2b00      	cmp	r3, #0
 801259e:	d06d      	beq.n	801267c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80125a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a2:	7d1b      	ldrb	r3, [r3, #20]
 80125a4:	2b02      	cmp	r3, #2
 80125a6:	d03a      	beq.n	801261e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80125a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125ae:	2b0c      	cmp	r3, #12
 80125b0:	bf28      	it	cs
 80125b2:	230c      	movcs	r3, #12
 80125b4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80125b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80125bc:	10db      	asrs	r3, r3, #3
 80125be:	b21b      	sxth	r3, r3
 80125c0:	461a      	mov	r2, r3
 80125c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80125c8:	4413      	add	r3, r2
 80125ca:	7efa      	ldrb	r2, [r7, #27]
 80125cc:	4910      	ldr	r1, [pc, #64]	; (8012610 <tcp_slowtmr+0x28c>)
 80125ce:	5c8a      	ldrb	r2, [r1, r2]
 80125d0:	4093      	lsls	r3, r2
 80125d2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80125da:	4293      	cmp	r3, r2
 80125dc:	dc1a      	bgt.n	8012614 <tcp_slowtmr+0x290>
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	b21a      	sxth	r2, r3
 80125e2:	e019      	b.n	8012618 <tcp_slowtmr+0x294>
 80125e4:	2001dce4 	.word	0x2001dce4
 80125e8:	2001dcfa 	.word	0x2001dcfa
 80125ec:	2001dcf0 	.word	0x2001dcf0
 80125f0:	0801e538 	.word	0x0801e538
 80125f4:	0801e87c 	.word	0x0801e87c
 80125f8:	0801e57c 	.word	0x0801e57c
 80125fc:	0801e8a8 	.word	0x0801e8a8
 8012600:	0801e8d4 	.word	0x0801e8d4
 8012604:	0801e904 	.word	0x0801e904
 8012608:	0801e938 	.word	0x0801e938
 801260c:	08020558 	.word	0x08020558
 8012610:	08020548 	.word	0x08020548
 8012614:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801261a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012620:	2200      	movs	r2, #0
 8012622:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012626:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801262c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012630:	4293      	cmp	r3, r2
 8012632:	bf28      	it	cs
 8012634:	4613      	movcs	r3, r2
 8012636:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012638:	8a7b      	ldrh	r3, [r7, #18]
 801263a:	085b      	lsrs	r3, r3, #1
 801263c:	b29a      	uxth	r2, r3
 801263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012640:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012646:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801264e:	005b      	lsls	r3, r3, #1
 8012650:	b29b      	uxth	r3, r3
 8012652:	429a      	cmp	r2, r3
 8012654:	d206      	bcs.n	8012664 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801265a:	005b      	lsls	r3, r3, #1
 801265c:	b29a      	uxth	r2, r3
 801265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012660:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012666:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801266a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012670:	2200      	movs	r2, #0
 8012672:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012678:	f004 fd2e 	bl	80170d8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267e:	7d1b      	ldrb	r3, [r3, #20]
 8012680:	2b06      	cmp	r3, #6
 8012682:	d111      	bne.n	80126a8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012686:	8b5b      	ldrh	r3, [r3, #26]
 8012688:	f003 0310 	and.w	r3, r3, #16
 801268c:	2b00      	cmp	r3, #0
 801268e:	d00b      	beq.n	80126a8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012690:	4b9c      	ldr	r3, [pc, #624]	; (8012904 <tcp_slowtmr+0x580>)
 8012692:	681a      	ldr	r2, [r3, #0]
 8012694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012696:	6a1b      	ldr	r3, [r3, #32]
 8012698:	1ad3      	subs	r3, r2, r3
 801269a:	2b28      	cmp	r3, #40	; 0x28
 801269c:	d904      	bls.n	80126a8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801269e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126a2:	3301      	adds	r3, #1
 80126a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80126a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126aa:	7a5b      	ldrb	r3, [r3, #9]
 80126ac:	f003 0308 	and.w	r3, r3, #8
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d04a      	beq.n	801274a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80126b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80126b8:	2b04      	cmp	r3, #4
 80126ba:	d003      	beq.n	80126c4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80126bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126be:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80126c0:	2b07      	cmp	r3, #7
 80126c2:	d142      	bne.n	801274a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80126c4:	4b8f      	ldr	r3, [pc, #572]	; (8012904 <tcp_slowtmr+0x580>)
 80126c6:	681a      	ldr	r2, [r3, #0]
 80126c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ca:	6a1b      	ldr	r3, [r3, #32]
 80126cc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80126ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80126d4:	4b8c      	ldr	r3, [pc, #560]	; (8012908 <tcp_slowtmr+0x584>)
 80126d6:	440b      	add	r3, r1
 80126d8:	498c      	ldr	r1, [pc, #560]	; (801290c <tcp_slowtmr+0x588>)
 80126da:	fba1 1303 	umull	r1, r3, r1, r3
 80126de:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d90a      	bls.n	80126fa <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80126e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126e8:	3301      	adds	r3, #1
 80126ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80126ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80126f2:	3301      	adds	r3, #1
 80126f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80126f8:	e027      	b.n	801274a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80126fa:	4b82      	ldr	r3, [pc, #520]	; (8012904 <tcp_slowtmr+0x580>)
 80126fc:	681a      	ldr	r2, [r3, #0]
 80126fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012700:	6a1b      	ldr	r3, [r3, #32]
 8012702:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012706:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012710:	4618      	mov	r0, r3
 8012712:	4b7f      	ldr	r3, [pc, #508]	; (8012910 <tcp_slowtmr+0x58c>)
 8012714:	fb00 f303 	mul.w	r3, r0, r3
 8012718:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801271a:	497c      	ldr	r1, [pc, #496]	; (801290c <tcp_slowtmr+0x588>)
 801271c:	fba1 1303 	umull	r1, r3, r1, r3
 8012720:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012722:	429a      	cmp	r2, r3
 8012724:	d911      	bls.n	801274a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8012726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012728:	f004 ffda 	bl	80176e0 <tcp_keepalive>
 801272c:	4603      	mov	r3, r0
 801272e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8012732:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012736:	2b00      	cmp	r3, #0
 8012738:	d107      	bne.n	801274a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801273c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012740:	3301      	adds	r3, #1
 8012742:	b2da      	uxtb	r2, r3
 8012744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012746:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801274e:	2b00      	cmp	r3, #0
 8012750:	d011      	beq.n	8012776 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012752:	4b6c      	ldr	r3, [pc, #432]	; (8012904 <tcp_slowtmr+0x580>)
 8012754:	681a      	ldr	r2, [r3, #0]
 8012756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012758:	6a1b      	ldr	r3, [r3, #32]
 801275a:	1ad2      	subs	r2, r2, r3
 801275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801275e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012762:	4619      	mov	r1, r3
 8012764:	460b      	mov	r3, r1
 8012766:	005b      	lsls	r3, r3, #1
 8012768:	440b      	add	r3, r1
 801276a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801276c:	429a      	cmp	r2, r3
 801276e:	d302      	bcc.n	8012776 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012772:	f000 fe95 	bl	80134a0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012778:	7d1b      	ldrb	r3, [r3, #20]
 801277a:	2b03      	cmp	r3, #3
 801277c:	d10b      	bne.n	8012796 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801277e:	4b61      	ldr	r3, [pc, #388]	; (8012904 <tcp_slowtmr+0x580>)
 8012780:	681a      	ldr	r2, [r3, #0]
 8012782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012784:	6a1b      	ldr	r3, [r3, #32]
 8012786:	1ad3      	subs	r3, r2, r3
 8012788:	2b28      	cmp	r3, #40	; 0x28
 801278a:	d904      	bls.n	8012796 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801278c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012790:	3301      	adds	r3, #1
 8012792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012798:	7d1b      	ldrb	r3, [r3, #20]
 801279a:	2b09      	cmp	r3, #9
 801279c:	d10b      	bne.n	80127b6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801279e:	4b59      	ldr	r3, [pc, #356]	; (8012904 <tcp_slowtmr+0x580>)
 80127a0:	681a      	ldr	r2, [r3, #0]
 80127a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a4:	6a1b      	ldr	r3, [r3, #32]
 80127a6:	1ad3      	subs	r3, r2, r3
 80127a8:	2bf0      	cmp	r3, #240	; 0xf0
 80127aa:	d904      	bls.n	80127b6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80127ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127b0:	3301      	adds	r3, #1
 80127b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80127b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d060      	beq.n	8012880 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80127be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127c4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80127c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127c8:	f000 fcb6 	bl	8013138 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80127cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d010      	beq.n	80127f4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80127d2:	4b50      	ldr	r3, [pc, #320]	; (8012914 <tcp_slowtmr+0x590>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127d8:	429a      	cmp	r2, r3
 80127da:	d106      	bne.n	80127ea <tcp_slowtmr+0x466>
 80127dc:	4b4e      	ldr	r3, [pc, #312]	; (8012918 <tcp_slowtmr+0x594>)
 80127de:	f240 526d 	movw	r2, #1389	; 0x56d
 80127e2:	494e      	ldr	r1, [pc, #312]	; (801291c <tcp_slowtmr+0x598>)
 80127e4:	484e      	ldr	r0, [pc, #312]	; (8012920 <tcp_slowtmr+0x59c>)
 80127e6:	f008 fd0f 	bl	801b208 <iprintf>
        prev->next = pcb->next;
 80127ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ec:	68da      	ldr	r2, [r3, #12]
 80127ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127f0:	60da      	str	r2, [r3, #12]
 80127f2:	e00f      	b.n	8012814 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80127f4:	4b47      	ldr	r3, [pc, #284]	; (8012914 <tcp_slowtmr+0x590>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127fa:	429a      	cmp	r2, r3
 80127fc:	d006      	beq.n	801280c <tcp_slowtmr+0x488>
 80127fe:	4b46      	ldr	r3, [pc, #280]	; (8012918 <tcp_slowtmr+0x594>)
 8012800:	f240 5271 	movw	r2, #1393	; 0x571
 8012804:	4947      	ldr	r1, [pc, #284]	; (8012924 <tcp_slowtmr+0x5a0>)
 8012806:	4846      	ldr	r0, [pc, #280]	; (8012920 <tcp_slowtmr+0x59c>)
 8012808:	f008 fcfe 	bl	801b208 <iprintf>
        tcp_active_pcbs = pcb->next;
 801280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801280e:	68db      	ldr	r3, [r3, #12]
 8012810:	4a40      	ldr	r2, [pc, #256]	; (8012914 <tcp_slowtmr+0x590>)
 8012812:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012814:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012818:	2b00      	cmp	r3, #0
 801281a:	d013      	beq.n	8012844 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012822:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012824:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012828:	3304      	adds	r3, #4
 801282a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801282c:	8ad2      	ldrh	r2, [r2, #22]
 801282e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012830:	8b09      	ldrh	r1, [r1, #24]
 8012832:	9102      	str	r1, [sp, #8]
 8012834:	9201      	str	r2, [sp, #4]
 8012836:	9300      	str	r3, [sp, #0]
 8012838:	462b      	mov	r3, r5
 801283a:	4622      	mov	r2, r4
 801283c:	4601      	mov	r1, r0
 801283e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012840:	f004 fe9a 	bl	8017578 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012846:	691b      	ldr	r3, [r3, #16]
 8012848:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801284c:	7d1b      	ldrb	r3, [r3, #20]
 801284e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012852:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012856:	68db      	ldr	r3, [r3, #12]
 8012858:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801285a:	6838      	ldr	r0, [r7, #0]
 801285c:	f7fe fffc 	bl	8011858 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012860:	4b31      	ldr	r3, [pc, #196]	; (8012928 <tcp_slowtmr+0x5a4>)
 8012862:	2200      	movs	r2, #0
 8012864:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d004      	beq.n	8012876 <tcp_slowtmr+0x4f2>
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	f06f 010c 	mvn.w	r1, #12
 8012872:	68b8      	ldr	r0, [r7, #8]
 8012874:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012876:	4b2c      	ldr	r3, [pc, #176]	; (8012928 <tcp_slowtmr+0x5a4>)
 8012878:	781b      	ldrb	r3, [r3, #0]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d037      	beq.n	80128ee <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801287e:	e592      	b.n	80123a6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012882:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012886:	68db      	ldr	r3, [r3, #12]
 8012888:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801288c:	7f1b      	ldrb	r3, [r3, #28]
 801288e:	3301      	adds	r3, #1
 8012890:	b2da      	uxtb	r2, r3
 8012892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012894:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012898:	7f1a      	ldrb	r2, [r3, #28]
 801289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801289c:	7f5b      	ldrb	r3, [r3, #29]
 801289e:	429a      	cmp	r2, r3
 80128a0:	d325      	bcc.n	80128ee <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80128a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a4:	2200      	movs	r2, #0
 80128a6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80128a8:	4b1f      	ldr	r3, [pc, #124]	; (8012928 <tcp_slowtmr+0x5a4>)
 80128aa:	2200      	movs	r2, #0
 80128ac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80128ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d00b      	beq.n	80128d0 <tcp_slowtmr+0x54c>
 80128b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80128be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128c0:	6912      	ldr	r2, [r2, #16]
 80128c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80128c4:	4610      	mov	r0, r2
 80128c6:	4798      	blx	r3
 80128c8:	4603      	mov	r3, r0
 80128ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80128ce:	e002      	b.n	80128d6 <tcp_slowtmr+0x552>
 80128d0:	2300      	movs	r3, #0
 80128d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80128d6:	4b14      	ldr	r3, [pc, #80]	; (8012928 <tcp_slowtmr+0x5a4>)
 80128d8:	781b      	ldrb	r3, [r3, #0]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d000      	beq.n	80128e0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80128de:	e562      	b.n	80123a6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80128e0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d102      	bne.n	80128ee <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80128e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128ea:	f004 f891 	bl	8016a10 <tcp_output>
  while (pcb != NULL) {
 80128ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	f47f ad5e 	bne.w	80123b2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80128f6:	2300      	movs	r3, #0
 80128f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80128fa:	4b0c      	ldr	r3, [pc, #48]	; (801292c <tcp_slowtmr+0x5a8>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012900:	e069      	b.n	80129d6 <tcp_slowtmr+0x652>
 8012902:	bf00      	nop
 8012904:	2001dce4 	.word	0x2001dce4
 8012908:	000a4cb8 	.word	0x000a4cb8
 801290c:	10624dd3 	.word	0x10624dd3
 8012910:	000124f8 	.word	0x000124f8
 8012914:	2001dcf0 	.word	0x2001dcf0
 8012918:	0801e538 	.word	0x0801e538
 801291c:	0801e970 	.word	0x0801e970
 8012920:	0801e57c 	.word	0x0801e57c
 8012924:	0801e99c 	.word	0x0801e99c
 8012928:	2001dcf8 	.word	0x2001dcf8
 801292c:	2001dcf4 	.word	0x2001dcf4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012932:	7d1b      	ldrb	r3, [r3, #20]
 8012934:	2b0a      	cmp	r3, #10
 8012936:	d006      	beq.n	8012946 <tcp_slowtmr+0x5c2>
 8012938:	4b2b      	ldr	r3, [pc, #172]	; (80129e8 <tcp_slowtmr+0x664>)
 801293a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801293e:	492b      	ldr	r1, [pc, #172]	; (80129ec <tcp_slowtmr+0x668>)
 8012940:	482b      	ldr	r0, [pc, #172]	; (80129f0 <tcp_slowtmr+0x66c>)
 8012942:	f008 fc61 	bl	801b208 <iprintf>
    pcb_remove = 0;
 8012946:	2300      	movs	r3, #0
 8012948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801294c:	4b29      	ldr	r3, [pc, #164]	; (80129f4 <tcp_slowtmr+0x670>)
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012952:	6a1b      	ldr	r3, [r3, #32]
 8012954:	1ad3      	subs	r3, r2, r3
 8012956:	2bf0      	cmp	r3, #240	; 0xf0
 8012958:	d904      	bls.n	8012964 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801295a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801295e:	3301      	adds	r3, #1
 8012960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012968:	2b00      	cmp	r3, #0
 801296a:	d02f      	beq.n	80129cc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801296c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801296e:	f000 fbe3 	bl	8013138 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012974:	2b00      	cmp	r3, #0
 8012976:	d010      	beq.n	801299a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012978:	4b1f      	ldr	r3, [pc, #124]	; (80129f8 <tcp_slowtmr+0x674>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801297e:	429a      	cmp	r2, r3
 8012980:	d106      	bne.n	8012990 <tcp_slowtmr+0x60c>
 8012982:	4b19      	ldr	r3, [pc, #100]	; (80129e8 <tcp_slowtmr+0x664>)
 8012984:	f240 52af 	movw	r2, #1455	; 0x5af
 8012988:	491c      	ldr	r1, [pc, #112]	; (80129fc <tcp_slowtmr+0x678>)
 801298a:	4819      	ldr	r0, [pc, #100]	; (80129f0 <tcp_slowtmr+0x66c>)
 801298c:	f008 fc3c 	bl	801b208 <iprintf>
        prev->next = pcb->next;
 8012990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012992:	68da      	ldr	r2, [r3, #12]
 8012994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012996:	60da      	str	r2, [r3, #12]
 8012998:	e00f      	b.n	80129ba <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801299a:	4b17      	ldr	r3, [pc, #92]	; (80129f8 <tcp_slowtmr+0x674>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d006      	beq.n	80129b2 <tcp_slowtmr+0x62e>
 80129a4:	4b10      	ldr	r3, [pc, #64]	; (80129e8 <tcp_slowtmr+0x664>)
 80129a6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80129aa:	4915      	ldr	r1, [pc, #84]	; (8012a00 <tcp_slowtmr+0x67c>)
 80129ac:	4810      	ldr	r0, [pc, #64]	; (80129f0 <tcp_slowtmr+0x66c>)
 80129ae:	f008 fc2b 	bl	801b208 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80129b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b4:	68db      	ldr	r3, [r3, #12]
 80129b6:	4a10      	ldr	r2, [pc, #64]	; (80129f8 <tcp_slowtmr+0x674>)
 80129b8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80129ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129bc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80129be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c0:	68db      	ldr	r3, [r3, #12]
 80129c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80129c4:	69f8      	ldr	r0, [r7, #28]
 80129c6:	f7fe ff47 	bl	8011858 <tcp_free>
 80129ca:	e004      	b.n	80129d6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80129cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80129d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d2:	68db      	ldr	r3, [r3, #12]
 80129d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80129d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d1a9      	bne.n	8012930 <tcp_slowtmr+0x5ac>
    }
  }
}
 80129dc:	bf00      	nop
 80129de:	bf00      	nop
 80129e0:	3730      	adds	r7, #48	; 0x30
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bdb0      	pop	{r4, r5, r7, pc}
 80129e6:	bf00      	nop
 80129e8:	0801e538 	.word	0x0801e538
 80129ec:	0801e9c8 	.word	0x0801e9c8
 80129f0:	0801e57c 	.word	0x0801e57c
 80129f4:	2001dce4 	.word	0x2001dce4
 80129f8:	2001dcf4 	.word	0x2001dcf4
 80129fc:	0801e9f8 	.word	0x0801e9f8
 8012a00:	0801ea20 	.word	0x0801ea20

08012a04 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012a0a:	4b2d      	ldr	r3, [pc, #180]	; (8012ac0 <tcp_fasttmr+0xbc>)
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	3301      	adds	r3, #1
 8012a10:	b2da      	uxtb	r2, r3
 8012a12:	4b2b      	ldr	r3, [pc, #172]	; (8012ac0 <tcp_fasttmr+0xbc>)
 8012a14:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012a16:	4b2b      	ldr	r3, [pc, #172]	; (8012ac4 <tcp_fasttmr+0xc0>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012a1c:	e048      	b.n	8012ab0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	7f9a      	ldrb	r2, [r3, #30]
 8012a22:	4b27      	ldr	r3, [pc, #156]	; (8012ac0 <tcp_fasttmr+0xbc>)
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	429a      	cmp	r2, r3
 8012a28:	d03f      	beq.n	8012aaa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012a2a:	4b25      	ldr	r3, [pc, #148]	; (8012ac0 <tcp_fasttmr+0xbc>)
 8012a2c:	781a      	ldrb	r2, [r3, #0]
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	8b5b      	ldrh	r3, [r3, #26]
 8012a36:	f003 0301 	and.w	r3, r3, #1
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d010      	beq.n	8012a60 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	8b5b      	ldrh	r3, [r3, #26]
 8012a42:	f043 0302 	orr.w	r3, r3, #2
 8012a46:	b29a      	uxth	r2, r3
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f003 ffdf 	bl	8016a10 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	8b5b      	ldrh	r3, [r3, #26]
 8012a56:	f023 0303 	bic.w	r3, r3, #3
 8012a5a:	b29a      	uxth	r2, r3
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	8b5b      	ldrh	r3, [r3, #26]
 8012a64:	f003 0308 	and.w	r3, r3, #8
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d009      	beq.n	8012a80 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	8b5b      	ldrh	r3, [r3, #26]
 8012a70:	f023 0308 	bic.w	r3, r3, #8
 8012a74:	b29a      	uxth	r2, r3
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f7ff f880 	bl	8011b80 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	68db      	ldr	r3, [r3, #12]
 8012a84:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d00a      	beq.n	8012aa4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012a8e:	4b0e      	ldr	r3, [pc, #56]	; (8012ac8 <tcp_fasttmr+0xc4>)
 8012a90:	2200      	movs	r2, #0
 8012a92:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f000 f819 	bl	8012acc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012a9a:	4b0b      	ldr	r3, [pc, #44]	; (8012ac8 <tcp_fasttmr+0xc4>)
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d000      	beq.n	8012aa4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012aa2:	e7b8      	b.n	8012a16 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	607b      	str	r3, [r7, #4]
 8012aa8:	e002      	b.n	8012ab0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	68db      	ldr	r3, [r3, #12]
 8012aae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d1b3      	bne.n	8012a1e <tcp_fasttmr+0x1a>
    }
  }
}
 8012ab6:	bf00      	nop
 8012ab8:	bf00      	nop
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	2001dcfa 	.word	0x2001dcfa
 8012ac4:	2001dcf0 	.word	0x2001dcf0
 8012ac8:	2001dcf8 	.word	0x2001dcf8

08012acc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012acc:	b590      	push	{r4, r7, lr}
 8012ace:	b085      	sub	sp, #20
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d109      	bne.n	8012aee <tcp_process_refused_data+0x22>
 8012ada:	4b38      	ldr	r3, [pc, #224]	; (8012bbc <tcp_process_refused_data+0xf0>)
 8012adc:	f240 6209 	movw	r2, #1545	; 0x609
 8012ae0:	4937      	ldr	r1, [pc, #220]	; (8012bc0 <tcp_process_refused_data+0xf4>)
 8012ae2:	4838      	ldr	r0, [pc, #224]	; (8012bc4 <tcp_process_refused_data+0xf8>)
 8012ae4:	f008 fb90 	bl	801b208 <iprintf>
 8012ae8:	f06f 030f 	mvn.w	r3, #15
 8012aec:	e061      	b.n	8012bb2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012af2:	7b5b      	ldrb	r3, [r3, #13]
 8012af4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012afa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2200      	movs	r2, #0
 8012b00:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d00b      	beq.n	8012b24 <tcp_process_refused_data+0x58>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6918      	ldr	r0, [r3, #16]
 8012b16:	2300      	movs	r3, #0
 8012b18:	68ba      	ldr	r2, [r7, #8]
 8012b1a:	6879      	ldr	r1, [r7, #4]
 8012b1c:	47a0      	blx	r4
 8012b1e:	4603      	mov	r3, r0
 8012b20:	73fb      	strb	r3, [r7, #15]
 8012b22:	e007      	b.n	8012b34 <tcp_process_refused_data+0x68>
 8012b24:	2300      	movs	r3, #0
 8012b26:	68ba      	ldr	r2, [r7, #8]
 8012b28:	6879      	ldr	r1, [r7, #4]
 8012b2a:	2000      	movs	r0, #0
 8012b2c:	f000 f8a6 	bl	8012c7c <tcp_recv_null>
 8012b30:	4603      	mov	r3, r0
 8012b32:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d12b      	bne.n	8012b94 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012b3c:	7bbb      	ldrb	r3, [r7, #14]
 8012b3e:	f003 0320 	and.w	r3, r3, #32
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d034      	beq.n	8012bb0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b4a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012b4e:	4293      	cmp	r3, r2
 8012b50:	d005      	beq.n	8012b5e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b56:	3301      	adds	r3, #1
 8012b58:	b29a      	uxth	r2, r3
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d00b      	beq.n	8012b80 <tcp_process_refused_data+0xb4>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6918      	ldr	r0, [r3, #16]
 8012b72:	2300      	movs	r3, #0
 8012b74:	2200      	movs	r2, #0
 8012b76:	6879      	ldr	r1, [r7, #4]
 8012b78:	47a0      	blx	r4
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	73fb      	strb	r3, [r7, #15]
 8012b7e:	e001      	b.n	8012b84 <tcp_process_refused_data+0xb8>
 8012b80:	2300      	movs	r3, #0
 8012b82:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b88:	f113 0f0d 	cmn.w	r3, #13
 8012b8c:	d110      	bne.n	8012bb0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8012b8e:	f06f 030c 	mvn.w	r3, #12
 8012b92:	e00e      	b.n	8012bb2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8012b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b98:	f113 0f0d 	cmn.w	r3, #13
 8012b9c:	d102      	bne.n	8012ba4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012b9e:	f06f 030c 	mvn.w	r3, #12
 8012ba2:	e006      	b.n	8012bb2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	68ba      	ldr	r2, [r7, #8]
 8012ba8:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012baa:	f06f 0304 	mvn.w	r3, #4
 8012bae:	e000      	b.n	8012bb2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8012bb0:	2300      	movs	r3, #0
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3714      	adds	r7, #20
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd90      	pop	{r4, r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	0801e538 	.word	0x0801e538
 8012bc0:	0801ea48 	.word	0x0801ea48
 8012bc4:	0801e57c 	.word	0x0801e57c

08012bc8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b084      	sub	sp, #16
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012bd0:	e007      	b.n	8012be2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f000 f80a 	bl	8012bf2 <tcp_seg_free>
    seg = next;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d1f4      	bne.n	8012bd2 <tcp_segs_free+0xa>
  }
}
 8012be8:	bf00      	nop
 8012bea:	bf00      	nop
 8012bec:	3710      	adds	r7, #16
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}

08012bf2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012bf2:	b580      	push	{r7, lr}
 8012bf4:	b082      	sub	sp, #8
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d00c      	beq.n	8012c1a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d004      	beq.n	8012c12 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	685b      	ldr	r3, [r3, #4]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7fe fb13 	bl	8011238 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012c12:	6879      	ldr	r1, [r7, #4]
 8012c14:	2003      	movs	r0, #3
 8012c16:	f7fd fc67 	bl	80104e8 <memp_free>
  }
}
 8012c1a:	bf00      	nop
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
	...

08012c24 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b084      	sub	sp, #16
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d106      	bne.n	8012c40 <tcp_seg_copy+0x1c>
 8012c32:	4b0f      	ldr	r3, [pc, #60]	; (8012c70 <tcp_seg_copy+0x4c>)
 8012c34:	f240 6282 	movw	r2, #1666	; 0x682
 8012c38:	490e      	ldr	r1, [pc, #56]	; (8012c74 <tcp_seg_copy+0x50>)
 8012c3a:	480f      	ldr	r0, [pc, #60]	; (8012c78 <tcp_seg_copy+0x54>)
 8012c3c:	f008 fae4 	bl	801b208 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012c40:	2003      	movs	r0, #3
 8012c42:	f7fd fbdb 	bl	80103fc <memp_malloc>
 8012c46:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d101      	bne.n	8012c52 <tcp_seg_copy+0x2e>
    return NULL;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	e00a      	b.n	8012c68 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012c52:	2210      	movs	r2, #16
 8012c54:	6879      	ldr	r1, [r7, #4]
 8012c56:	68f8      	ldr	r0, [r7, #12]
 8012c58:	f008 fc0b 	bl	801b472 <memcpy>
  pbuf_ref(cseg->p);
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	685b      	ldr	r3, [r3, #4]
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7fe fb8f 	bl	8011384 <pbuf_ref>
  return cseg;
 8012c66:	68fb      	ldr	r3, [r7, #12]
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3710      	adds	r7, #16
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}
 8012c70:	0801e538 	.word	0x0801e538
 8012c74:	0801ea8c 	.word	0x0801ea8c
 8012c78:	0801e57c 	.word	0x0801e57c

08012c7c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b084      	sub	sp, #16
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	60f8      	str	r0, [r7, #12]
 8012c84:	60b9      	str	r1, [r7, #8]
 8012c86:	607a      	str	r2, [r7, #4]
 8012c88:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d109      	bne.n	8012ca4 <tcp_recv_null+0x28>
 8012c90:	4b12      	ldr	r3, [pc, #72]	; (8012cdc <tcp_recv_null+0x60>)
 8012c92:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012c96:	4912      	ldr	r1, [pc, #72]	; (8012ce0 <tcp_recv_null+0x64>)
 8012c98:	4812      	ldr	r0, [pc, #72]	; (8012ce4 <tcp_recv_null+0x68>)
 8012c9a:	f008 fab5 	bl	801b208 <iprintf>
 8012c9e:	f06f 030f 	mvn.w	r3, #15
 8012ca2:	e016      	b.n	8012cd2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d009      	beq.n	8012cbe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	891b      	ldrh	r3, [r3, #8]
 8012cae:	4619      	mov	r1, r3
 8012cb0:	68b8      	ldr	r0, [r7, #8]
 8012cb2:	f7ff f9b7 	bl	8012024 <tcp_recved>
    pbuf_free(p);
 8012cb6:	6878      	ldr	r0, [r7, #4]
 8012cb8:	f7fe fabe 	bl	8011238 <pbuf_free>
 8012cbc:	e008      	b.n	8012cd0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d104      	bne.n	8012cd0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012cc6:	68b8      	ldr	r0, [r7, #8]
 8012cc8:	f7fe ffc4 	bl	8011c54 <tcp_close>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	e000      	b.n	8012cd2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012cd0:	2300      	movs	r3, #0
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3710      	adds	r7, #16
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	0801e538 	.word	0x0801e538
 8012ce0:	0801eaa8 	.word	0x0801eaa8
 8012ce4:	0801e57c 	.word	0x0801e57c

08012ce8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b086      	sub	sp, #24
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	4603      	mov	r3, r0
 8012cf0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	db01      	blt.n	8012cfe <tcp_kill_prio+0x16>
 8012cfa:	79fb      	ldrb	r3, [r7, #7]
 8012cfc:	e000      	b.n	8012d00 <tcp_kill_prio+0x18>
 8012cfe:	237f      	movs	r3, #127	; 0x7f
 8012d00:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012d02:	7afb      	ldrb	r3, [r7, #11]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d034      	beq.n	8012d72 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012d08:	7afb      	ldrb	r3, [r7, #11]
 8012d0a:	3b01      	subs	r3, #1
 8012d0c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012d12:	2300      	movs	r3, #0
 8012d14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d16:	4b19      	ldr	r3, [pc, #100]	; (8012d7c <tcp_kill_prio+0x94>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	617b      	str	r3, [r7, #20]
 8012d1c:	e01f      	b.n	8012d5e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	7d5b      	ldrb	r3, [r3, #21]
 8012d22:	7afa      	ldrb	r2, [r7, #11]
 8012d24:	429a      	cmp	r2, r3
 8012d26:	d80c      	bhi.n	8012d42 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012d2c:	7afa      	ldrb	r2, [r7, #11]
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	d112      	bne.n	8012d58 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012d32:	4b13      	ldr	r3, [pc, #76]	; (8012d80 <tcp_kill_prio+0x98>)
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	697b      	ldr	r3, [r7, #20]
 8012d38:	6a1b      	ldr	r3, [r3, #32]
 8012d3a:	1ad3      	subs	r3, r2, r3
 8012d3c:	68fa      	ldr	r2, [r7, #12]
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d80a      	bhi.n	8012d58 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012d42:	4b0f      	ldr	r3, [pc, #60]	; (8012d80 <tcp_kill_prio+0x98>)
 8012d44:	681a      	ldr	r2, [r3, #0]
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	6a1b      	ldr	r3, [r3, #32]
 8012d4a:	1ad3      	subs	r3, r2, r3
 8012d4c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012d4e:	697b      	ldr	r3, [r7, #20]
 8012d50:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	7d5b      	ldrb	r3, [r3, #21]
 8012d56:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	68db      	ldr	r3, [r3, #12]
 8012d5c:	617b      	str	r3, [r7, #20]
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d1dc      	bne.n	8012d1e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d004      	beq.n	8012d74 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012d6a:	6938      	ldr	r0, [r7, #16]
 8012d6c:	f7ff f85c 	bl	8011e28 <tcp_abort>
 8012d70:	e000      	b.n	8012d74 <tcp_kill_prio+0x8c>
    return;
 8012d72:	bf00      	nop
  }
}
 8012d74:	3718      	adds	r7, #24
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	2001dcf0 	.word	0x2001dcf0
 8012d80:	2001dce4 	.word	0x2001dce4

08012d84 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b086      	sub	sp, #24
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012d8e:	79fb      	ldrb	r3, [r7, #7]
 8012d90:	2b08      	cmp	r3, #8
 8012d92:	d009      	beq.n	8012da8 <tcp_kill_state+0x24>
 8012d94:	79fb      	ldrb	r3, [r7, #7]
 8012d96:	2b09      	cmp	r3, #9
 8012d98:	d006      	beq.n	8012da8 <tcp_kill_state+0x24>
 8012d9a:	4b1a      	ldr	r3, [pc, #104]	; (8012e04 <tcp_kill_state+0x80>)
 8012d9c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012da0:	4919      	ldr	r1, [pc, #100]	; (8012e08 <tcp_kill_state+0x84>)
 8012da2:	481a      	ldr	r0, [pc, #104]	; (8012e0c <tcp_kill_state+0x88>)
 8012da4:	f008 fa30 	bl	801b208 <iprintf>

  inactivity = 0;
 8012da8:	2300      	movs	r3, #0
 8012daa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012dac:	2300      	movs	r3, #0
 8012dae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012db0:	4b17      	ldr	r3, [pc, #92]	; (8012e10 <tcp_kill_state+0x8c>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	617b      	str	r3, [r7, #20]
 8012db6:	e017      	b.n	8012de8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	7d1b      	ldrb	r3, [r3, #20]
 8012dbc:	79fa      	ldrb	r2, [r7, #7]
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d10f      	bne.n	8012de2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012dc2:	4b14      	ldr	r3, [pc, #80]	; (8012e14 <tcp_kill_state+0x90>)
 8012dc4:	681a      	ldr	r2, [r3, #0]
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	6a1b      	ldr	r3, [r3, #32]
 8012dca:	1ad3      	subs	r3, r2, r3
 8012dcc:	68fa      	ldr	r2, [r7, #12]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d807      	bhi.n	8012de2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012dd2:	4b10      	ldr	r3, [pc, #64]	; (8012e14 <tcp_kill_state+0x90>)
 8012dd4:	681a      	ldr	r2, [r3, #0]
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	6a1b      	ldr	r3, [r3, #32]
 8012dda:	1ad3      	subs	r3, r2, r3
 8012ddc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012dde:	697b      	ldr	r3, [r7, #20]
 8012de0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012de2:	697b      	ldr	r3, [r7, #20]
 8012de4:	68db      	ldr	r3, [r3, #12]
 8012de6:	617b      	str	r3, [r7, #20]
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d1e4      	bne.n	8012db8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d003      	beq.n	8012dfc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012df4:	2100      	movs	r1, #0
 8012df6:	6938      	ldr	r0, [r7, #16]
 8012df8:	f7fe ff58 	bl	8011cac <tcp_abandon>
  }
}
 8012dfc:	bf00      	nop
 8012dfe:	3718      	adds	r7, #24
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}
 8012e04:	0801e538 	.word	0x0801e538
 8012e08:	0801eac4 	.word	0x0801eac4
 8012e0c:	0801e57c 	.word	0x0801e57c
 8012e10:	2001dcf0 	.word	0x2001dcf0
 8012e14:	2001dce4 	.word	0x2001dce4

08012e18 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b084      	sub	sp, #16
 8012e1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012e22:	2300      	movs	r3, #0
 8012e24:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e26:	4b12      	ldr	r3, [pc, #72]	; (8012e70 <tcp_kill_timewait+0x58>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	60fb      	str	r3, [r7, #12]
 8012e2c:	e012      	b.n	8012e54 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012e2e:	4b11      	ldr	r3, [pc, #68]	; (8012e74 <tcp_kill_timewait+0x5c>)
 8012e30:	681a      	ldr	r2, [r3, #0]
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	6a1b      	ldr	r3, [r3, #32]
 8012e36:	1ad3      	subs	r3, r2, r3
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d807      	bhi.n	8012e4e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012e3e:	4b0d      	ldr	r3, [pc, #52]	; (8012e74 <tcp_kill_timewait+0x5c>)
 8012e40:	681a      	ldr	r2, [r3, #0]
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	6a1b      	ldr	r3, [r3, #32]
 8012e46:	1ad3      	subs	r3, r2, r3
 8012e48:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	68db      	ldr	r3, [r3, #12]
 8012e52:	60fb      	str	r3, [r7, #12]
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d1e9      	bne.n	8012e2e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d002      	beq.n	8012e66 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012e60:	68b8      	ldr	r0, [r7, #8]
 8012e62:	f7fe ffe1 	bl	8011e28 <tcp_abort>
  }
}
 8012e66:	bf00      	nop
 8012e68:	3710      	adds	r7, #16
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}
 8012e6e:	bf00      	nop
 8012e70:	2001dcf4 	.word	0x2001dcf4
 8012e74:	2001dce4 	.word	0x2001dce4

08012e78 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012e7e:	4b10      	ldr	r3, [pc, #64]	; (8012ec0 <tcp_handle_closepend+0x48>)
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012e84:	e014      	b.n	8012eb0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	68db      	ldr	r3, [r3, #12]
 8012e8a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	8b5b      	ldrh	r3, [r3, #26]
 8012e90:	f003 0308 	and.w	r3, r3, #8
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d009      	beq.n	8012eac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	8b5b      	ldrh	r3, [r3, #26]
 8012e9c:	f023 0308 	bic.w	r3, r3, #8
 8012ea0:	b29a      	uxth	r2, r3
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f7fe fe6a 	bl	8011b80 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d1e7      	bne.n	8012e86 <tcp_handle_closepend+0xe>
  }
}
 8012eb6:	bf00      	nop
 8012eb8:	bf00      	nop
 8012eba:	3708      	adds	r7, #8
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}
 8012ec0:	2001dcf0 	.word	0x2001dcf0

08012ec4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b084      	sub	sp, #16
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	4603      	mov	r3, r0
 8012ecc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012ece:	2001      	movs	r0, #1
 8012ed0:	f7fd fa94 	bl	80103fc <memp_malloc>
 8012ed4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d126      	bne.n	8012f2a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012edc:	f7ff ffcc 	bl	8012e78 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012ee0:	f7ff ff9a 	bl	8012e18 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012ee4:	2001      	movs	r0, #1
 8012ee6:	f7fd fa89 	bl	80103fc <memp_malloc>
 8012eea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d11b      	bne.n	8012f2a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012ef2:	2009      	movs	r0, #9
 8012ef4:	f7ff ff46 	bl	8012d84 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012ef8:	2001      	movs	r0, #1
 8012efa:	f7fd fa7f 	bl	80103fc <memp_malloc>
 8012efe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d111      	bne.n	8012f2a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012f06:	2008      	movs	r0, #8
 8012f08:	f7ff ff3c 	bl	8012d84 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012f0c:	2001      	movs	r0, #1
 8012f0e:	f7fd fa75 	bl	80103fc <memp_malloc>
 8012f12:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d107      	bne.n	8012f2a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012f1a:	79fb      	ldrb	r3, [r7, #7]
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7ff fee3 	bl	8012ce8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012f22:	2001      	movs	r0, #1
 8012f24:	f7fd fa6a 	bl	80103fc <memp_malloc>
 8012f28:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d03f      	beq.n	8012fb0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012f30:	229c      	movs	r2, #156	; 0x9c
 8012f32:	2100      	movs	r1, #0
 8012f34:	68f8      	ldr	r0, [r7, #12]
 8012f36:	f008 f9cc 	bl	801b2d2 <memset>
    pcb->prio = prio;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	79fa      	ldrb	r2, [r7, #7]
 8012f3e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	f640 3268 	movw	r2, #2920	; 0xb68
 8012f46:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012f50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	22ff      	movs	r2, #255	; 0xff
 8012f5e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012f66:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	2206      	movs	r2, #6
 8012f6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	2206      	movs	r2, #6
 8012f74:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f7c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	2201      	movs	r2, #1
 8012f82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012f86:	4b0d      	ldr	r3, [pc, #52]	; (8012fbc <tcp_alloc+0xf8>)
 8012f88:	681a      	ldr	r2, [r3, #0]
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012f8e:	4b0c      	ldr	r3, [pc, #48]	; (8012fc0 <tcp_alloc+0xfc>)
 8012f90:	781a      	ldrb	r2, [r3, #0]
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	f640 3268 	movw	r2, #2920	; 0xb68
 8012f9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	4a08      	ldr	r2, [pc, #32]	; (8012fc4 <tcp_alloc+0x100>)
 8012fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	4a07      	ldr	r2, [pc, #28]	; (8012fc8 <tcp_alloc+0x104>)
 8012fac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3710      	adds	r7, #16
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	2001dce4 	.word	0x2001dce4
 8012fc0:	2001dcfa 	.word	0x2001dcfa
 8012fc4:	08012c7d 	.word	0x08012c7d
 8012fc8:	006ddd00 	.word	0x006ddd00

08012fcc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b084      	sub	sp, #16
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012fd6:	2040      	movs	r0, #64	; 0x40
 8012fd8:	f7ff ff74 	bl	8012ec4 <tcp_alloc>
 8012fdc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012fde:	68fb      	ldr	r3, [r7, #12]
}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3710      	adds	r7, #16
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}

08012fe8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b083      	sub	sp, #12
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
 8012ff0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d002      	beq.n	8012ffe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	683a      	ldr	r2, [r7, #0]
 8012ffc:	611a      	str	r2, [r3, #16]
  }
}
 8012ffe:	bf00      	nop
 8013000:	370c      	adds	r7, #12
 8013002:	46bd      	mov	sp, r7
 8013004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013008:	4770      	bx	lr
	...

0801300c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b082      	sub	sp, #8
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
 8013014:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d00e      	beq.n	801303a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	7d1b      	ldrb	r3, [r3, #20]
 8013020:	2b01      	cmp	r3, #1
 8013022:	d106      	bne.n	8013032 <tcp_recv+0x26>
 8013024:	4b07      	ldr	r3, [pc, #28]	; (8013044 <tcp_recv+0x38>)
 8013026:	f240 72df 	movw	r2, #2015	; 0x7df
 801302a:	4907      	ldr	r1, [pc, #28]	; (8013048 <tcp_recv+0x3c>)
 801302c:	4807      	ldr	r0, [pc, #28]	; (801304c <tcp_recv+0x40>)
 801302e:	f008 f8eb 	bl	801b208 <iprintf>
    pcb->recv = recv;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	683a      	ldr	r2, [r7, #0]
 8013036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801303a:	bf00      	nop
 801303c:	3708      	adds	r7, #8
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}
 8013042:	bf00      	nop
 8013044:	0801e538 	.word	0x0801e538
 8013048:	0801ead4 	.word	0x0801ead4
 801304c:	0801e57c 	.word	0x0801e57c

08013050 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
 8013058:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d00e      	beq.n	801307e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	7d1b      	ldrb	r3, [r3, #20]
 8013064:	2b01      	cmp	r3, #1
 8013066:	d106      	bne.n	8013076 <tcp_sent+0x26>
 8013068:	4b07      	ldr	r3, [pc, #28]	; (8013088 <tcp_sent+0x38>)
 801306a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801306e:	4907      	ldr	r1, [pc, #28]	; (801308c <tcp_sent+0x3c>)
 8013070:	4807      	ldr	r0, [pc, #28]	; (8013090 <tcp_sent+0x40>)
 8013072:	f008 f8c9 	bl	801b208 <iprintf>
    pcb->sent = sent;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	683a      	ldr	r2, [r7, #0]
 801307a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801307e:	bf00      	nop
 8013080:	3708      	adds	r7, #8
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	0801e538 	.word	0x0801e538
 801308c:	0801eafc 	.word	0x0801eafc
 8013090:	0801e57c 	.word	0x0801e57c

08013094 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d00e      	beq.n	80130c2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	7d1b      	ldrb	r3, [r3, #20]
 80130a8:	2b01      	cmp	r3, #1
 80130aa:	d106      	bne.n	80130ba <tcp_err+0x26>
 80130ac:	4b07      	ldr	r3, [pc, #28]	; (80130cc <tcp_err+0x38>)
 80130ae:	f640 020d 	movw	r2, #2061	; 0x80d
 80130b2:	4907      	ldr	r1, [pc, #28]	; (80130d0 <tcp_err+0x3c>)
 80130b4:	4807      	ldr	r0, [pc, #28]	; (80130d4 <tcp_err+0x40>)
 80130b6:	f008 f8a7 	bl	801b208 <iprintf>
    pcb->errf = err;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	683a      	ldr	r2, [r7, #0]
 80130be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80130c2:	bf00      	nop
 80130c4:	3708      	adds	r7, #8
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}
 80130ca:	bf00      	nop
 80130cc:	0801e538 	.word	0x0801e538
 80130d0:	0801eb24 	.word	0x0801eb24
 80130d4:	0801e57c 	.word	0x0801e57c

080130d8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b084      	sub	sp, #16
 80130dc:	af00      	add	r7, sp, #0
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	60b9      	str	r1, [r7, #8]
 80130e2:	4613      	mov	r3, r2
 80130e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d107      	bne.n	80130fc <tcp_poll+0x24>
 80130ec:	4b0e      	ldr	r3, [pc, #56]	; (8013128 <tcp_poll+0x50>)
 80130ee:	f640 023d 	movw	r2, #2109	; 0x83d
 80130f2:	490e      	ldr	r1, [pc, #56]	; (801312c <tcp_poll+0x54>)
 80130f4:	480e      	ldr	r0, [pc, #56]	; (8013130 <tcp_poll+0x58>)
 80130f6:	f008 f887 	bl	801b208 <iprintf>
 80130fa:	e011      	b.n	8013120 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	7d1b      	ldrb	r3, [r3, #20]
 8013100:	2b01      	cmp	r3, #1
 8013102:	d106      	bne.n	8013112 <tcp_poll+0x3a>
 8013104:	4b08      	ldr	r3, [pc, #32]	; (8013128 <tcp_poll+0x50>)
 8013106:	f640 023e 	movw	r2, #2110	; 0x83e
 801310a:	490a      	ldr	r1, [pc, #40]	; (8013134 <tcp_poll+0x5c>)
 801310c:	4808      	ldr	r0, [pc, #32]	; (8013130 <tcp_poll+0x58>)
 801310e:	f008 f87b 	bl	801b208 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	68ba      	ldr	r2, [r7, #8]
 8013116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	79fa      	ldrb	r2, [r7, #7]
 801311e:	775a      	strb	r2, [r3, #29]
}
 8013120:	3710      	adds	r7, #16
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
 8013126:	bf00      	nop
 8013128:	0801e538 	.word	0x0801e538
 801312c:	0801eb4c 	.word	0x0801eb4c
 8013130:	0801e57c 	.word	0x0801e57c
 8013134:	0801eb64 	.word	0x0801eb64

08013138 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b082      	sub	sp, #8
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d107      	bne.n	8013156 <tcp_pcb_purge+0x1e>
 8013146:	4b21      	ldr	r3, [pc, #132]	; (80131cc <tcp_pcb_purge+0x94>)
 8013148:	f640 0251 	movw	r2, #2129	; 0x851
 801314c:	4920      	ldr	r1, [pc, #128]	; (80131d0 <tcp_pcb_purge+0x98>)
 801314e:	4821      	ldr	r0, [pc, #132]	; (80131d4 <tcp_pcb_purge+0x9c>)
 8013150:	f008 f85a 	bl	801b208 <iprintf>
 8013154:	e037      	b.n	80131c6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	7d1b      	ldrb	r3, [r3, #20]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d033      	beq.n	80131c6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013162:	2b0a      	cmp	r3, #10
 8013164:	d02f      	beq.n	80131c6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801316a:	2b01      	cmp	r3, #1
 801316c:	d02b      	beq.n	80131c6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013172:	2b00      	cmp	r3, #0
 8013174:	d007      	beq.n	8013186 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801317a:	4618      	mov	r0, r3
 801317c:	f7fe f85c 	bl	8011238 <pbuf_free>
      pcb->refused_data = NULL;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	2200      	movs	r2, #0
 8013184:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801318a:	2b00      	cmp	r3, #0
 801318c:	d002      	beq.n	8013194 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f000 f986 	bl	80134a0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801319a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7ff fd11 	bl	8012bc8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7ff fd0c 	bl	8012bc8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2200      	movs	r2, #0
 80131b4:	66da      	str	r2, [r3, #108]	; 0x6c
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	2200      	movs	r2, #0
 80131c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80131c6:	3708      	adds	r7, #8
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}
 80131cc:	0801e538 	.word	0x0801e538
 80131d0:	0801eb84 	.word	0x0801eb84
 80131d4:	0801e57c 	.word	0x0801e57c

080131d8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b084      	sub	sp, #16
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
 80131e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d106      	bne.n	80131f6 <tcp_pcb_remove+0x1e>
 80131e8:	4b3e      	ldr	r3, [pc, #248]	; (80132e4 <tcp_pcb_remove+0x10c>)
 80131ea:	f640 0283 	movw	r2, #2179	; 0x883
 80131ee:	493e      	ldr	r1, [pc, #248]	; (80132e8 <tcp_pcb_remove+0x110>)
 80131f0:	483e      	ldr	r0, [pc, #248]	; (80132ec <tcp_pcb_remove+0x114>)
 80131f2:	f008 f809 	bl	801b208 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d106      	bne.n	801320a <tcp_pcb_remove+0x32>
 80131fc:	4b39      	ldr	r3, [pc, #228]	; (80132e4 <tcp_pcb_remove+0x10c>)
 80131fe:	f640 0284 	movw	r2, #2180	; 0x884
 8013202:	493b      	ldr	r1, [pc, #236]	; (80132f0 <tcp_pcb_remove+0x118>)
 8013204:	4839      	ldr	r0, [pc, #228]	; (80132ec <tcp_pcb_remove+0x114>)
 8013206:	f007 ffff 	bl	801b208 <iprintf>

  TCP_RMV(pcblist, pcb);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	683a      	ldr	r2, [r7, #0]
 8013210:	429a      	cmp	r2, r3
 8013212:	d105      	bne.n	8013220 <tcp_pcb_remove+0x48>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	68da      	ldr	r2, [r3, #12]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	601a      	str	r2, [r3, #0]
 801321e:	e013      	b.n	8013248 <tcp_pcb_remove+0x70>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	60fb      	str	r3, [r7, #12]
 8013226:	e00c      	b.n	8013242 <tcp_pcb_remove+0x6a>
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	68db      	ldr	r3, [r3, #12]
 801322c:	683a      	ldr	r2, [r7, #0]
 801322e:	429a      	cmp	r2, r3
 8013230:	d104      	bne.n	801323c <tcp_pcb_remove+0x64>
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	68da      	ldr	r2, [r3, #12]
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	60da      	str	r2, [r3, #12]
 801323a:	e005      	b.n	8013248 <tcp_pcb_remove+0x70>
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	68db      	ldr	r3, [r3, #12]
 8013240:	60fb      	str	r3, [r7, #12]
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d1ef      	bne.n	8013228 <tcp_pcb_remove+0x50>
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	2200      	movs	r2, #0
 801324c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801324e:	6838      	ldr	r0, [r7, #0]
 8013250:	f7ff ff72 	bl	8013138 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	7d1b      	ldrb	r3, [r3, #20]
 8013258:	2b0a      	cmp	r3, #10
 801325a:	d013      	beq.n	8013284 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013260:	2b01      	cmp	r3, #1
 8013262:	d00f      	beq.n	8013284 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	8b5b      	ldrh	r3, [r3, #26]
 8013268:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801326c:	2b00      	cmp	r3, #0
 801326e:	d009      	beq.n	8013284 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	8b5b      	ldrh	r3, [r3, #26]
 8013274:	f043 0302 	orr.w	r3, r3, #2
 8013278:	b29a      	uxth	r2, r3
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801327e:	6838      	ldr	r0, [r7, #0]
 8013280:	f003 fbc6 	bl	8016a10 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	7d1b      	ldrb	r3, [r3, #20]
 8013288:	2b01      	cmp	r3, #1
 801328a:	d020      	beq.n	80132ce <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013290:	2b00      	cmp	r3, #0
 8013292:	d006      	beq.n	80132a2 <tcp_pcb_remove+0xca>
 8013294:	4b13      	ldr	r3, [pc, #76]	; (80132e4 <tcp_pcb_remove+0x10c>)
 8013296:	f640 0293 	movw	r2, #2195	; 0x893
 801329a:	4916      	ldr	r1, [pc, #88]	; (80132f4 <tcp_pcb_remove+0x11c>)
 801329c:	4813      	ldr	r0, [pc, #76]	; (80132ec <tcp_pcb_remove+0x114>)
 801329e:	f007 ffb3 	bl	801b208 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d006      	beq.n	80132b8 <tcp_pcb_remove+0xe0>
 80132aa:	4b0e      	ldr	r3, [pc, #56]	; (80132e4 <tcp_pcb_remove+0x10c>)
 80132ac:	f640 0294 	movw	r2, #2196	; 0x894
 80132b0:	4911      	ldr	r1, [pc, #68]	; (80132f8 <tcp_pcb_remove+0x120>)
 80132b2:	480e      	ldr	r0, [pc, #56]	; (80132ec <tcp_pcb_remove+0x114>)
 80132b4:	f007 ffa8 	bl	801b208 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d006      	beq.n	80132ce <tcp_pcb_remove+0xf6>
 80132c0:	4b08      	ldr	r3, [pc, #32]	; (80132e4 <tcp_pcb_remove+0x10c>)
 80132c2:	f640 0296 	movw	r2, #2198	; 0x896
 80132c6:	490d      	ldr	r1, [pc, #52]	; (80132fc <tcp_pcb_remove+0x124>)
 80132c8:	4808      	ldr	r0, [pc, #32]	; (80132ec <tcp_pcb_remove+0x114>)
 80132ca:	f007 ff9d 	bl	801b208 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	2200      	movs	r2, #0
 80132d2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	2200      	movs	r2, #0
 80132d8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80132da:	bf00      	nop
 80132dc:	3710      	adds	r7, #16
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	0801e538 	.word	0x0801e538
 80132e8:	0801eba0 	.word	0x0801eba0
 80132ec:	0801e57c 	.word	0x0801e57c
 80132f0:	0801ebbc 	.word	0x0801ebbc
 80132f4:	0801ebdc 	.word	0x0801ebdc
 80132f8:	0801ebf4 	.word	0x0801ebf4
 80132fc:	0801ec10 	.word	0x0801ec10

08013300 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d106      	bne.n	801331c <tcp_next_iss+0x1c>
 801330e:	4b0a      	ldr	r3, [pc, #40]	; (8013338 <tcp_next_iss+0x38>)
 8013310:	f640 02af 	movw	r2, #2223	; 0x8af
 8013314:	4909      	ldr	r1, [pc, #36]	; (801333c <tcp_next_iss+0x3c>)
 8013316:	480a      	ldr	r0, [pc, #40]	; (8013340 <tcp_next_iss+0x40>)
 8013318:	f007 ff76 	bl	801b208 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801331c:	4b09      	ldr	r3, [pc, #36]	; (8013344 <tcp_next_iss+0x44>)
 801331e:	681a      	ldr	r2, [r3, #0]
 8013320:	4b09      	ldr	r3, [pc, #36]	; (8013348 <tcp_next_iss+0x48>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	4413      	add	r3, r2
 8013326:	4a07      	ldr	r2, [pc, #28]	; (8013344 <tcp_next_iss+0x44>)
 8013328:	6013      	str	r3, [r2, #0]
  return iss;
 801332a:	4b06      	ldr	r3, [pc, #24]	; (8013344 <tcp_next_iss+0x44>)
 801332c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801332e:	4618      	mov	r0, r3
 8013330:	3708      	adds	r7, #8
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}
 8013336:	bf00      	nop
 8013338:	0801e538 	.word	0x0801e538
 801333c:	0801ec28 	.word	0x0801ec28
 8013340:	0801e57c 	.word	0x0801e57c
 8013344:	20000030 	.word	0x20000030
 8013348:	2001dce4 	.word	0x2001dce4

0801334c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b086      	sub	sp, #24
 8013350:	af00      	add	r7, sp, #0
 8013352:	4603      	mov	r3, r0
 8013354:	60b9      	str	r1, [r7, #8]
 8013356:	607a      	str	r2, [r7, #4]
 8013358:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d106      	bne.n	801336e <tcp_eff_send_mss_netif+0x22>
 8013360:	4b14      	ldr	r3, [pc, #80]	; (80133b4 <tcp_eff_send_mss_netif+0x68>)
 8013362:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013366:	4914      	ldr	r1, [pc, #80]	; (80133b8 <tcp_eff_send_mss_netif+0x6c>)
 8013368:	4814      	ldr	r0, [pc, #80]	; (80133bc <tcp_eff_send_mss_netif+0x70>)
 801336a:	f007 ff4d 	bl	801b208 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801336e:	68bb      	ldr	r3, [r7, #8]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d101      	bne.n	8013378 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013374:	89fb      	ldrh	r3, [r7, #14]
 8013376:	e019      	b.n	80133ac <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801337c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801337e:	8afb      	ldrh	r3, [r7, #22]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d012      	beq.n	80133aa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013384:	2328      	movs	r3, #40	; 0x28
 8013386:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013388:	8afa      	ldrh	r2, [r7, #22]
 801338a:	8abb      	ldrh	r3, [r7, #20]
 801338c:	429a      	cmp	r2, r3
 801338e:	d904      	bls.n	801339a <tcp_eff_send_mss_netif+0x4e>
 8013390:	8afa      	ldrh	r2, [r7, #22]
 8013392:	8abb      	ldrh	r3, [r7, #20]
 8013394:	1ad3      	subs	r3, r2, r3
 8013396:	b29b      	uxth	r3, r3
 8013398:	e000      	b.n	801339c <tcp_eff_send_mss_netif+0x50>
 801339a:	2300      	movs	r3, #0
 801339c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801339e:	8a7a      	ldrh	r2, [r7, #18]
 80133a0:	89fb      	ldrh	r3, [r7, #14]
 80133a2:	4293      	cmp	r3, r2
 80133a4:	bf28      	it	cs
 80133a6:	4613      	movcs	r3, r2
 80133a8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80133aa:	89fb      	ldrh	r3, [r7, #14]
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3718      	adds	r7, #24
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}
 80133b4:	0801e538 	.word	0x0801e538
 80133b8:	0801ec44 	.word	0x0801ec44
 80133bc:	0801e57c 	.word	0x0801e57c

080133c0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d119      	bne.n	8013408 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80133d4:	4b10      	ldr	r3, [pc, #64]	; (8013418 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80133d6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80133da:	4910      	ldr	r1, [pc, #64]	; (801341c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80133dc:	4810      	ldr	r0, [pc, #64]	; (8013420 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80133de:	f007 ff13 	bl	801b208 <iprintf>

  while (pcb != NULL) {
 80133e2:	e011      	b.n	8013408 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	681a      	ldr	r2, [r3, #0]
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d108      	bne.n	8013402 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80133f6:	68f8      	ldr	r0, [r7, #12]
 80133f8:	f7fe fd16 	bl	8011e28 <tcp_abort>
      pcb = next;
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	60fb      	str	r3, [r7, #12]
 8013400:	e002      	b.n	8013408 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	68db      	ldr	r3, [r3, #12]
 8013406:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d1ea      	bne.n	80133e4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801340e:	bf00      	nop
 8013410:	bf00      	nop
 8013412:	3710      	adds	r7, #16
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	0801e538 	.word	0x0801e538
 801341c:	0801ec6c 	.word	0x0801ec6c
 8013420:	0801e57c 	.word	0x0801e57c

08013424 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b084      	sub	sp, #16
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d02a      	beq.n	801348a <tcp_netif_ip_addr_changed+0x66>
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d026      	beq.n	801348a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801343c:	4b15      	ldr	r3, [pc, #84]	; (8013494 <tcp_netif_ip_addr_changed+0x70>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	4619      	mov	r1, r3
 8013442:	6878      	ldr	r0, [r7, #4]
 8013444:	f7ff ffbc 	bl	80133c0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013448:	4b13      	ldr	r3, [pc, #76]	; (8013498 <tcp_netif_ip_addr_changed+0x74>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	4619      	mov	r1, r3
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f7ff ffb6 	bl	80133c0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d017      	beq.n	801348a <tcp_netif_ip_addr_changed+0x66>
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d013      	beq.n	801348a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013462:	4b0e      	ldr	r3, [pc, #56]	; (801349c <tcp_netif_ip_addr_changed+0x78>)
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	60fb      	str	r3, [r7, #12]
 8013468:	e00c      	b.n	8013484 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	681a      	ldr	r2, [r3, #0]
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	429a      	cmp	r2, r3
 8013474:	d103      	bne.n	801347e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	681a      	ldr	r2, [r3, #0]
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	68db      	ldr	r3, [r3, #12]
 8013482:	60fb      	str	r3, [r7, #12]
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d1ef      	bne.n	801346a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801348a:	bf00      	nop
 801348c:	3710      	adds	r7, #16
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}
 8013492:	bf00      	nop
 8013494:	2001dcf0 	.word	0x2001dcf0
 8013498:	2001dce8 	.word	0x2001dce8
 801349c:	2001dcec 	.word	0x2001dcec

080134a0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d007      	beq.n	80134c0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7ff fb87 	bl	8012bc8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	2200      	movs	r2, #0
 80134be:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80134c0:	bf00      	nop
 80134c2:	3708      	adds	r7, #8
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}

080134c8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80134c8:	b590      	push	{r4, r7, lr}
 80134ca:	b08d      	sub	sp, #52	; 0x34
 80134cc:	af04      	add	r7, sp, #16
 80134ce:	6078      	str	r0, [r7, #4]
 80134d0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d105      	bne.n	80134e4 <tcp_input+0x1c>
 80134d8:	4b9b      	ldr	r3, [pc, #620]	; (8013748 <tcp_input+0x280>)
 80134da:	2283      	movs	r2, #131	; 0x83
 80134dc:	499b      	ldr	r1, [pc, #620]	; (801374c <tcp_input+0x284>)
 80134de:	489c      	ldr	r0, [pc, #624]	; (8013750 <tcp_input+0x288>)
 80134e0:	f007 fe92 	bl	801b208 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	685b      	ldr	r3, [r3, #4]
 80134e8:	4a9a      	ldr	r2, [pc, #616]	; (8013754 <tcp_input+0x28c>)
 80134ea:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	895b      	ldrh	r3, [r3, #10]
 80134f0:	2b13      	cmp	r3, #19
 80134f2:	f240 83d1 	bls.w	8013c98 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80134f6:	4b98      	ldr	r3, [pc, #608]	; (8013758 <tcp_input+0x290>)
 80134f8:	695b      	ldr	r3, [r3, #20]
 80134fa:	4a97      	ldr	r2, [pc, #604]	; (8013758 <tcp_input+0x290>)
 80134fc:	6812      	ldr	r2, [r2, #0]
 80134fe:	4611      	mov	r1, r2
 8013500:	4618      	mov	r0, r3
 8013502:	f006 f8d9 	bl	80196b8 <ip4_addr_isbroadcast_u32>
 8013506:	4603      	mov	r3, r0
 8013508:	2b00      	cmp	r3, #0
 801350a:	f040 83c7 	bne.w	8013c9c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801350e:	4b92      	ldr	r3, [pc, #584]	; (8013758 <tcp_input+0x290>)
 8013510:	695b      	ldr	r3, [r3, #20]
 8013512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013516:	2be0      	cmp	r3, #224	; 0xe0
 8013518:	f000 83c0 	beq.w	8013c9c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801351c:	4b8d      	ldr	r3, [pc, #564]	; (8013754 <tcp_input+0x28c>)
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	899b      	ldrh	r3, [r3, #12]
 8013522:	b29b      	uxth	r3, r3
 8013524:	4618      	mov	r0, r3
 8013526:	f7fc fa69 	bl	800f9fc <lwip_htons>
 801352a:	4603      	mov	r3, r0
 801352c:	0b1b      	lsrs	r3, r3, #12
 801352e:	b29b      	uxth	r3, r3
 8013530:	b2db      	uxtb	r3, r3
 8013532:	009b      	lsls	r3, r3, #2
 8013534:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013536:	7cbb      	ldrb	r3, [r7, #18]
 8013538:	2b13      	cmp	r3, #19
 801353a:	f240 83b1 	bls.w	8013ca0 <tcp_input+0x7d8>
 801353e:	7cbb      	ldrb	r3, [r7, #18]
 8013540:	b29a      	uxth	r2, r3
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	891b      	ldrh	r3, [r3, #8]
 8013546:	429a      	cmp	r2, r3
 8013548:	f200 83aa 	bhi.w	8013ca0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801354c:	7cbb      	ldrb	r3, [r7, #18]
 801354e:	b29b      	uxth	r3, r3
 8013550:	3b14      	subs	r3, #20
 8013552:	b29a      	uxth	r2, r3
 8013554:	4b81      	ldr	r3, [pc, #516]	; (801375c <tcp_input+0x294>)
 8013556:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013558:	4b81      	ldr	r3, [pc, #516]	; (8013760 <tcp_input+0x298>)
 801355a:	2200      	movs	r2, #0
 801355c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	895a      	ldrh	r2, [r3, #10]
 8013562:	7cbb      	ldrb	r3, [r7, #18]
 8013564:	b29b      	uxth	r3, r3
 8013566:	429a      	cmp	r2, r3
 8013568:	d309      	bcc.n	801357e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801356a:	4b7c      	ldr	r3, [pc, #496]	; (801375c <tcp_input+0x294>)
 801356c:	881a      	ldrh	r2, [r3, #0]
 801356e:	4b7d      	ldr	r3, [pc, #500]	; (8013764 <tcp_input+0x29c>)
 8013570:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013572:	7cbb      	ldrb	r3, [r7, #18]
 8013574:	4619      	mov	r1, r3
 8013576:	6878      	ldr	r0, [r7, #4]
 8013578:	f7fd fdd8 	bl	801112c <pbuf_remove_header>
 801357c:	e04e      	b.n	801361c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d105      	bne.n	8013592 <tcp_input+0xca>
 8013586:	4b70      	ldr	r3, [pc, #448]	; (8013748 <tcp_input+0x280>)
 8013588:	22c2      	movs	r2, #194	; 0xc2
 801358a:	4977      	ldr	r1, [pc, #476]	; (8013768 <tcp_input+0x2a0>)
 801358c:	4870      	ldr	r0, [pc, #448]	; (8013750 <tcp_input+0x288>)
 801358e:	f007 fe3b 	bl	801b208 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013592:	2114      	movs	r1, #20
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f7fd fdc9 	bl	801112c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	895a      	ldrh	r2, [r3, #10]
 801359e:	4b71      	ldr	r3, [pc, #452]	; (8013764 <tcp_input+0x29c>)
 80135a0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80135a2:	4b6e      	ldr	r3, [pc, #440]	; (801375c <tcp_input+0x294>)
 80135a4:	881a      	ldrh	r2, [r3, #0]
 80135a6:	4b6f      	ldr	r3, [pc, #444]	; (8013764 <tcp_input+0x29c>)
 80135a8:	881b      	ldrh	r3, [r3, #0]
 80135aa:	1ad3      	subs	r3, r2, r3
 80135ac:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80135ae:	4b6d      	ldr	r3, [pc, #436]	; (8013764 <tcp_input+0x29c>)
 80135b0:	881b      	ldrh	r3, [r3, #0]
 80135b2:	4619      	mov	r1, r3
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f7fd fdb9 	bl	801112c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	895b      	ldrh	r3, [r3, #10]
 80135c0:	8a3a      	ldrh	r2, [r7, #16]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	f200 836e 	bhi.w	8013ca4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	685b      	ldr	r3, [r3, #4]
 80135ce:	4a64      	ldr	r2, [pc, #400]	; (8013760 <tcp_input+0x298>)
 80135d0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	8a3a      	ldrh	r2, [r7, #16]
 80135d8:	4611      	mov	r1, r2
 80135da:	4618      	mov	r0, r3
 80135dc:	f7fd fda6 	bl	801112c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	891a      	ldrh	r2, [r3, #8]
 80135e4:	8a3b      	ldrh	r3, [r7, #16]
 80135e6:	1ad3      	subs	r3, r2, r3
 80135e8:	b29a      	uxth	r2, r3
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	895b      	ldrh	r3, [r3, #10]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d005      	beq.n	8013602 <tcp_input+0x13a>
 80135f6:	4b54      	ldr	r3, [pc, #336]	; (8013748 <tcp_input+0x280>)
 80135f8:	22df      	movs	r2, #223	; 0xdf
 80135fa:	495c      	ldr	r1, [pc, #368]	; (801376c <tcp_input+0x2a4>)
 80135fc:	4854      	ldr	r0, [pc, #336]	; (8013750 <tcp_input+0x288>)
 80135fe:	f007 fe03 	bl	801b208 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	891a      	ldrh	r2, [r3, #8]
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	891b      	ldrh	r3, [r3, #8]
 801360c:	429a      	cmp	r2, r3
 801360e:	d005      	beq.n	801361c <tcp_input+0x154>
 8013610:	4b4d      	ldr	r3, [pc, #308]	; (8013748 <tcp_input+0x280>)
 8013612:	22e0      	movs	r2, #224	; 0xe0
 8013614:	4956      	ldr	r1, [pc, #344]	; (8013770 <tcp_input+0x2a8>)
 8013616:	484e      	ldr	r0, [pc, #312]	; (8013750 <tcp_input+0x288>)
 8013618:	f007 fdf6 	bl	801b208 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801361c:	4b4d      	ldr	r3, [pc, #308]	; (8013754 <tcp_input+0x28c>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	881b      	ldrh	r3, [r3, #0]
 8013622:	b29b      	uxth	r3, r3
 8013624:	4a4b      	ldr	r2, [pc, #300]	; (8013754 <tcp_input+0x28c>)
 8013626:	6814      	ldr	r4, [r2, #0]
 8013628:	4618      	mov	r0, r3
 801362a:	f7fc f9e7 	bl	800f9fc <lwip_htons>
 801362e:	4603      	mov	r3, r0
 8013630:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013632:	4b48      	ldr	r3, [pc, #288]	; (8013754 <tcp_input+0x28c>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	885b      	ldrh	r3, [r3, #2]
 8013638:	b29b      	uxth	r3, r3
 801363a:	4a46      	ldr	r2, [pc, #280]	; (8013754 <tcp_input+0x28c>)
 801363c:	6814      	ldr	r4, [r2, #0]
 801363e:	4618      	mov	r0, r3
 8013640:	f7fc f9dc 	bl	800f9fc <lwip_htons>
 8013644:	4603      	mov	r3, r0
 8013646:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013648:	4b42      	ldr	r3, [pc, #264]	; (8013754 <tcp_input+0x28c>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	685b      	ldr	r3, [r3, #4]
 801364e:	4a41      	ldr	r2, [pc, #260]	; (8013754 <tcp_input+0x28c>)
 8013650:	6814      	ldr	r4, [r2, #0]
 8013652:	4618      	mov	r0, r3
 8013654:	f7fc f9e7 	bl	800fa26 <lwip_htonl>
 8013658:	4603      	mov	r3, r0
 801365a:	6063      	str	r3, [r4, #4]
 801365c:	6863      	ldr	r3, [r4, #4]
 801365e:	4a45      	ldr	r2, [pc, #276]	; (8013774 <tcp_input+0x2ac>)
 8013660:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013662:	4b3c      	ldr	r3, [pc, #240]	; (8013754 <tcp_input+0x28c>)
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	689b      	ldr	r3, [r3, #8]
 8013668:	4a3a      	ldr	r2, [pc, #232]	; (8013754 <tcp_input+0x28c>)
 801366a:	6814      	ldr	r4, [r2, #0]
 801366c:	4618      	mov	r0, r3
 801366e:	f7fc f9da 	bl	800fa26 <lwip_htonl>
 8013672:	4603      	mov	r3, r0
 8013674:	60a3      	str	r3, [r4, #8]
 8013676:	68a3      	ldr	r3, [r4, #8]
 8013678:	4a3f      	ldr	r2, [pc, #252]	; (8013778 <tcp_input+0x2b0>)
 801367a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801367c:	4b35      	ldr	r3, [pc, #212]	; (8013754 <tcp_input+0x28c>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	89db      	ldrh	r3, [r3, #14]
 8013682:	b29b      	uxth	r3, r3
 8013684:	4a33      	ldr	r2, [pc, #204]	; (8013754 <tcp_input+0x28c>)
 8013686:	6814      	ldr	r4, [r2, #0]
 8013688:	4618      	mov	r0, r3
 801368a:	f7fc f9b7 	bl	800f9fc <lwip_htons>
 801368e:	4603      	mov	r3, r0
 8013690:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013692:	4b30      	ldr	r3, [pc, #192]	; (8013754 <tcp_input+0x28c>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	899b      	ldrh	r3, [r3, #12]
 8013698:	b29b      	uxth	r3, r3
 801369a:	4618      	mov	r0, r3
 801369c:	f7fc f9ae 	bl	800f9fc <lwip_htons>
 80136a0:	4603      	mov	r3, r0
 80136a2:	b2db      	uxtb	r3, r3
 80136a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80136a8:	b2da      	uxtb	r2, r3
 80136aa:	4b34      	ldr	r3, [pc, #208]	; (801377c <tcp_input+0x2b4>)
 80136ac:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	891a      	ldrh	r2, [r3, #8]
 80136b2:	4b33      	ldr	r3, [pc, #204]	; (8013780 <tcp_input+0x2b8>)
 80136b4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80136b6:	4b31      	ldr	r3, [pc, #196]	; (801377c <tcp_input+0x2b4>)
 80136b8:	781b      	ldrb	r3, [r3, #0]
 80136ba:	f003 0303 	and.w	r3, r3, #3
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d00c      	beq.n	80136dc <tcp_input+0x214>
    tcplen++;
 80136c2:	4b2f      	ldr	r3, [pc, #188]	; (8013780 <tcp_input+0x2b8>)
 80136c4:	881b      	ldrh	r3, [r3, #0]
 80136c6:	3301      	adds	r3, #1
 80136c8:	b29a      	uxth	r2, r3
 80136ca:	4b2d      	ldr	r3, [pc, #180]	; (8013780 <tcp_input+0x2b8>)
 80136cc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	891a      	ldrh	r2, [r3, #8]
 80136d2:	4b2b      	ldr	r3, [pc, #172]	; (8013780 <tcp_input+0x2b8>)
 80136d4:	881b      	ldrh	r3, [r3, #0]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	f200 82e6 	bhi.w	8013ca8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80136dc:	2300      	movs	r3, #0
 80136de:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80136e0:	4b28      	ldr	r3, [pc, #160]	; (8013784 <tcp_input+0x2bc>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	61fb      	str	r3, [r7, #28]
 80136e6:	e09d      	b.n	8013824 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80136e8:	69fb      	ldr	r3, [r7, #28]
 80136ea:	7d1b      	ldrb	r3, [r3, #20]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d105      	bne.n	80136fc <tcp_input+0x234>
 80136f0:	4b15      	ldr	r3, [pc, #84]	; (8013748 <tcp_input+0x280>)
 80136f2:	22fb      	movs	r2, #251	; 0xfb
 80136f4:	4924      	ldr	r1, [pc, #144]	; (8013788 <tcp_input+0x2c0>)
 80136f6:	4816      	ldr	r0, [pc, #88]	; (8013750 <tcp_input+0x288>)
 80136f8:	f007 fd86 	bl	801b208 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	7d1b      	ldrb	r3, [r3, #20]
 8013700:	2b0a      	cmp	r3, #10
 8013702:	d105      	bne.n	8013710 <tcp_input+0x248>
 8013704:	4b10      	ldr	r3, [pc, #64]	; (8013748 <tcp_input+0x280>)
 8013706:	22fc      	movs	r2, #252	; 0xfc
 8013708:	4920      	ldr	r1, [pc, #128]	; (801378c <tcp_input+0x2c4>)
 801370a:	4811      	ldr	r0, [pc, #68]	; (8013750 <tcp_input+0x288>)
 801370c:	f007 fd7c 	bl	801b208 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	7d1b      	ldrb	r3, [r3, #20]
 8013714:	2b01      	cmp	r3, #1
 8013716:	d105      	bne.n	8013724 <tcp_input+0x25c>
 8013718:	4b0b      	ldr	r3, [pc, #44]	; (8013748 <tcp_input+0x280>)
 801371a:	22fd      	movs	r2, #253	; 0xfd
 801371c:	491c      	ldr	r1, [pc, #112]	; (8013790 <tcp_input+0x2c8>)
 801371e:	480c      	ldr	r0, [pc, #48]	; (8013750 <tcp_input+0x288>)
 8013720:	f007 fd72 	bl	801b208 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013724:	69fb      	ldr	r3, [r7, #28]
 8013726:	7a1b      	ldrb	r3, [r3, #8]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d033      	beq.n	8013794 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801372c:	69fb      	ldr	r3, [r7, #28]
 801372e:	7a1a      	ldrb	r2, [r3, #8]
 8013730:	4b09      	ldr	r3, [pc, #36]	; (8013758 <tcp_input+0x290>)
 8013732:	685b      	ldr	r3, [r3, #4]
 8013734:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013738:	3301      	adds	r3, #1
 801373a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801373c:	429a      	cmp	r2, r3
 801373e:	d029      	beq.n	8013794 <tcp_input+0x2cc>
      prev = pcb;
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	61bb      	str	r3, [r7, #24]
      continue;
 8013744:	e06b      	b.n	801381e <tcp_input+0x356>
 8013746:	bf00      	nop
 8013748:	0801eca0 	.word	0x0801eca0
 801374c:	0801ecd4 	.word	0x0801ecd4
 8013750:	0801ecec 	.word	0x0801ecec
 8013754:	2001dd0c 	.word	0x2001dd0c
 8013758:	2000e29c 	.word	0x2000e29c
 801375c:	2001dd10 	.word	0x2001dd10
 8013760:	2001dd14 	.word	0x2001dd14
 8013764:	2001dd12 	.word	0x2001dd12
 8013768:	0801ed14 	.word	0x0801ed14
 801376c:	0801ed24 	.word	0x0801ed24
 8013770:	0801ed30 	.word	0x0801ed30
 8013774:	2001dd1c 	.word	0x2001dd1c
 8013778:	2001dd20 	.word	0x2001dd20
 801377c:	2001dd28 	.word	0x2001dd28
 8013780:	2001dd26 	.word	0x2001dd26
 8013784:	2001dcf0 	.word	0x2001dcf0
 8013788:	0801ed50 	.word	0x0801ed50
 801378c:	0801ed78 	.word	0x0801ed78
 8013790:	0801eda4 	.word	0x0801eda4
    }

    if (pcb->remote_port == tcphdr->src &&
 8013794:	69fb      	ldr	r3, [r7, #28]
 8013796:	8b1a      	ldrh	r2, [r3, #24]
 8013798:	4b72      	ldr	r3, [pc, #456]	; (8013964 <tcp_input+0x49c>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	881b      	ldrh	r3, [r3, #0]
 801379e:	b29b      	uxth	r3, r3
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d13a      	bne.n	801381a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80137a4:	69fb      	ldr	r3, [r7, #28]
 80137a6:	8ada      	ldrh	r2, [r3, #22]
 80137a8:	4b6e      	ldr	r3, [pc, #440]	; (8013964 <tcp_input+0x49c>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	885b      	ldrh	r3, [r3, #2]
 80137ae:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d132      	bne.n	801381a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80137b4:	69fb      	ldr	r3, [r7, #28]
 80137b6:	685a      	ldr	r2, [r3, #4]
 80137b8:	4b6b      	ldr	r3, [pc, #428]	; (8013968 <tcp_input+0x4a0>)
 80137ba:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80137bc:	429a      	cmp	r2, r3
 80137be:	d12c      	bne.n	801381a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80137c0:	69fb      	ldr	r3, [r7, #28]
 80137c2:	681a      	ldr	r2, [r3, #0]
 80137c4:	4b68      	ldr	r3, [pc, #416]	; (8013968 <tcp_input+0x4a0>)
 80137c6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80137c8:	429a      	cmp	r2, r3
 80137ca:	d126      	bne.n	801381a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80137cc:	69fb      	ldr	r3, [r7, #28]
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	69fa      	ldr	r2, [r7, #28]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d106      	bne.n	80137e4 <tcp_input+0x31c>
 80137d6:	4b65      	ldr	r3, [pc, #404]	; (801396c <tcp_input+0x4a4>)
 80137d8:	f240 120d 	movw	r2, #269	; 0x10d
 80137dc:	4964      	ldr	r1, [pc, #400]	; (8013970 <tcp_input+0x4a8>)
 80137de:	4865      	ldr	r0, [pc, #404]	; (8013974 <tcp_input+0x4ac>)
 80137e0:	f007 fd12 	bl	801b208 <iprintf>
      if (prev != NULL) {
 80137e4:	69bb      	ldr	r3, [r7, #24]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d00a      	beq.n	8013800 <tcp_input+0x338>
        prev->next = pcb->next;
 80137ea:	69fb      	ldr	r3, [r7, #28]
 80137ec:	68da      	ldr	r2, [r3, #12]
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80137f2:	4b61      	ldr	r3, [pc, #388]	; (8013978 <tcp_input+0x4b0>)
 80137f4:	681a      	ldr	r2, [r3, #0]
 80137f6:	69fb      	ldr	r3, [r7, #28]
 80137f8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80137fa:	4a5f      	ldr	r2, [pc, #380]	; (8013978 <tcp_input+0x4b0>)
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013800:	69fb      	ldr	r3, [r7, #28]
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	69fa      	ldr	r2, [r7, #28]
 8013806:	429a      	cmp	r2, r3
 8013808:	d111      	bne.n	801382e <tcp_input+0x366>
 801380a:	4b58      	ldr	r3, [pc, #352]	; (801396c <tcp_input+0x4a4>)
 801380c:	f240 1215 	movw	r2, #277	; 0x115
 8013810:	495a      	ldr	r1, [pc, #360]	; (801397c <tcp_input+0x4b4>)
 8013812:	4858      	ldr	r0, [pc, #352]	; (8013974 <tcp_input+0x4ac>)
 8013814:	f007 fcf8 	bl	801b208 <iprintf>
      break;
 8013818:	e009      	b.n	801382e <tcp_input+0x366>
    }
    prev = pcb;
 801381a:	69fb      	ldr	r3, [r7, #28]
 801381c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801381e:	69fb      	ldr	r3, [r7, #28]
 8013820:	68db      	ldr	r3, [r3, #12]
 8013822:	61fb      	str	r3, [r7, #28]
 8013824:	69fb      	ldr	r3, [r7, #28]
 8013826:	2b00      	cmp	r3, #0
 8013828:	f47f af5e 	bne.w	80136e8 <tcp_input+0x220>
 801382c:	e000      	b.n	8013830 <tcp_input+0x368>
      break;
 801382e:	bf00      	nop
  }

  if (pcb == NULL) {
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	2b00      	cmp	r3, #0
 8013834:	f040 80aa 	bne.w	801398c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013838:	4b51      	ldr	r3, [pc, #324]	; (8013980 <tcp_input+0x4b8>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	61fb      	str	r3, [r7, #28]
 801383e:	e03f      	b.n	80138c0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013840:	69fb      	ldr	r3, [r7, #28]
 8013842:	7d1b      	ldrb	r3, [r3, #20]
 8013844:	2b0a      	cmp	r3, #10
 8013846:	d006      	beq.n	8013856 <tcp_input+0x38e>
 8013848:	4b48      	ldr	r3, [pc, #288]	; (801396c <tcp_input+0x4a4>)
 801384a:	f240 121f 	movw	r2, #287	; 0x11f
 801384e:	494d      	ldr	r1, [pc, #308]	; (8013984 <tcp_input+0x4bc>)
 8013850:	4848      	ldr	r0, [pc, #288]	; (8013974 <tcp_input+0x4ac>)
 8013852:	f007 fcd9 	bl	801b208 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	7a1b      	ldrb	r3, [r3, #8]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d009      	beq.n	8013872 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801385e:	69fb      	ldr	r3, [r7, #28]
 8013860:	7a1a      	ldrb	r2, [r3, #8]
 8013862:	4b41      	ldr	r3, [pc, #260]	; (8013968 <tcp_input+0x4a0>)
 8013864:	685b      	ldr	r3, [r3, #4]
 8013866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801386a:	3301      	adds	r3, #1
 801386c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801386e:	429a      	cmp	r2, r3
 8013870:	d122      	bne.n	80138b8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013872:	69fb      	ldr	r3, [r7, #28]
 8013874:	8b1a      	ldrh	r2, [r3, #24]
 8013876:	4b3b      	ldr	r3, [pc, #236]	; (8013964 <tcp_input+0x49c>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	881b      	ldrh	r3, [r3, #0]
 801387c:	b29b      	uxth	r3, r3
 801387e:	429a      	cmp	r2, r3
 8013880:	d11b      	bne.n	80138ba <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013882:	69fb      	ldr	r3, [r7, #28]
 8013884:	8ada      	ldrh	r2, [r3, #22]
 8013886:	4b37      	ldr	r3, [pc, #220]	; (8013964 <tcp_input+0x49c>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	885b      	ldrh	r3, [r3, #2]
 801388c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801388e:	429a      	cmp	r2, r3
 8013890:	d113      	bne.n	80138ba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013892:	69fb      	ldr	r3, [r7, #28]
 8013894:	685a      	ldr	r2, [r3, #4]
 8013896:	4b34      	ldr	r3, [pc, #208]	; (8013968 <tcp_input+0x4a0>)
 8013898:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801389a:	429a      	cmp	r2, r3
 801389c:	d10d      	bne.n	80138ba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801389e:	69fb      	ldr	r3, [r7, #28]
 80138a0:	681a      	ldr	r2, [r3, #0]
 80138a2:	4b31      	ldr	r3, [pc, #196]	; (8013968 <tcp_input+0x4a0>)
 80138a4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d107      	bne.n	80138ba <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80138aa:	69f8      	ldr	r0, [r7, #28]
 80138ac:	f000 fb56 	bl	8013f5c <tcp_timewait_input>
        }
        pbuf_free(p);
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f7fd fcc1 	bl	8011238 <pbuf_free>
        return;
 80138b6:	e1fd      	b.n	8013cb4 <tcp_input+0x7ec>
        continue;
 80138b8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80138ba:	69fb      	ldr	r3, [r7, #28]
 80138bc:	68db      	ldr	r3, [r3, #12]
 80138be:	61fb      	str	r3, [r7, #28]
 80138c0:	69fb      	ldr	r3, [r7, #28]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d1bc      	bne.n	8013840 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80138c6:	2300      	movs	r3, #0
 80138c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80138ca:	4b2f      	ldr	r3, [pc, #188]	; (8013988 <tcp_input+0x4c0>)
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	617b      	str	r3, [r7, #20]
 80138d0:	e02a      	b.n	8013928 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	7a1b      	ldrb	r3, [r3, #8]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d00c      	beq.n	80138f4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80138da:	697b      	ldr	r3, [r7, #20]
 80138dc:	7a1a      	ldrb	r2, [r3, #8]
 80138de:	4b22      	ldr	r3, [pc, #136]	; (8013968 <tcp_input+0x4a0>)
 80138e0:	685b      	ldr	r3, [r3, #4]
 80138e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80138e6:	3301      	adds	r3, #1
 80138e8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80138ea:	429a      	cmp	r2, r3
 80138ec:	d002      	beq.n	80138f4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	61bb      	str	r3, [r7, #24]
        continue;
 80138f2:	e016      	b.n	8013922 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	8ada      	ldrh	r2, [r3, #22]
 80138f8:	4b1a      	ldr	r3, [pc, #104]	; (8013964 <tcp_input+0x49c>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	885b      	ldrh	r3, [r3, #2]
 80138fe:	b29b      	uxth	r3, r3
 8013900:	429a      	cmp	r2, r3
 8013902:	d10c      	bne.n	801391e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	681a      	ldr	r2, [r3, #0]
 8013908:	4b17      	ldr	r3, [pc, #92]	; (8013968 <tcp_input+0x4a0>)
 801390a:	695b      	ldr	r3, [r3, #20]
 801390c:	429a      	cmp	r2, r3
 801390e:	d00f      	beq.n	8013930 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013910:	697b      	ldr	r3, [r7, #20]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d00d      	beq.n	8013932 <tcp_input+0x46a>
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d009      	beq.n	8013932 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	68db      	ldr	r3, [r3, #12]
 8013926:	617b      	str	r3, [r7, #20]
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d1d1      	bne.n	80138d2 <tcp_input+0x40a>
 801392e:	e000      	b.n	8013932 <tcp_input+0x46a>
            break;
 8013930:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d029      	beq.n	801398c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013938:	69bb      	ldr	r3, [r7, #24]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d00a      	beq.n	8013954 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	68da      	ldr	r2, [r3, #12]
 8013942:	69bb      	ldr	r3, [r7, #24]
 8013944:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013946:	4b10      	ldr	r3, [pc, #64]	; (8013988 <tcp_input+0x4c0>)
 8013948:	681a      	ldr	r2, [r3, #0]
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801394e:	4a0e      	ldr	r2, [pc, #56]	; (8013988 <tcp_input+0x4c0>)
 8013950:	697b      	ldr	r3, [r7, #20]
 8013952:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013954:	6978      	ldr	r0, [r7, #20]
 8013956:	f000 fa03 	bl	8013d60 <tcp_listen_input>
      }
      pbuf_free(p);
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f7fd fc6c 	bl	8011238 <pbuf_free>
      return;
 8013960:	e1a8      	b.n	8013cb4 <tcp_input+0x7ec>
 8013962:	bf00      	nop
 8013964:	2001dd0c 	.word	0x2001dd0c
 8013968:	2000e29c 	.word	0x2000e29c
 801396c:	0801eca0 	.word	0x0801eca0
 8013970:	0801edcc 	.word	0x0801edcc
 8013974:	0801ecec 	.word	0x0801ecec
 8013978:	2001dcf0 	.word	0x2001dcf0
 801397c:	0801edf8 	.word	0x0801edf8
 8013980:	2001dcf4 	.word	0x2001dcf4
 8013984:	0801ee24 	.word	0x0801ee24
 8013988:	2001dcec 	.word	0x2001dcec
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	2b00      	cmp	r3, #0
 8013990:	f000 8158 	beq.w	8013c44 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013994:	4b95      	ldr	r3, [pc, #596]	; (8013bec <tcp_input+0x724>)
 8013996:	2200      	movs	r2, #0
 8013998:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	891a      	ldrh	r2, [r3, #8]
 801399e:	4b93      	ldr	r3, [pc, #588]	; (8013bec <tcp_input+0x724>)
 80139a0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80139a2:	4a92      	ldr	r2, [pc, #584]	; (8013bec <tcp_input+0x724>)
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80139a8:	4b91      	ldr	r3, [pc, #580]	; (8013bf0 <tcp_input+0x728>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	4a8f      	ldr	r2, [pc, #572]	; (8013bec <tcp_input+0x724>)
 80139ae:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80139b0:	4b90      	ldr	r3, [pc, #576]	; (8013bf4 <tcp_input+0x72c>)
 80139b2:	2200      	movs	r2, #0
 80139b4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80139b6:	4b90      	ldr	r3, [pc, #576]	; (8013bf8 <tcp_input+0x730>)
 80139b8:	2200      	movs	r2, #0
 80139ba:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80139bc:	4b8f      	ldr	r3, [pc, #572]	; (8013bfc <tcp_input+0x734>)
 80139be:	2200      	movs	r2, #0
 80139c0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80139c2:	4b8f      	ldr	r3, [pc, #572]	; (8013c00 <tcp_input+0x738>)
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	f003 0308 	and.w	r3, r3, #8
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d006      	beq.n	80139dc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	7b5b      	ldrb	r3, [r3, #13]
 80139d2:	f043 0301 	orr.w	r3, r3, #1
 80139d6:	b2da      	uxtb	r2, r3
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80139dc:	69fb      	ldr	r3, [r7, #28]
 80139de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d017      	beq.n	8013a14 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80139e4:	69f8      	ldr	r0, [r7, #28]
 80139e6:	f7ff f871 	bl	8012acc <tcp_process_refused_data>
 80139ea:	4603      	mov	r3, r0
 80139ec:	f113 0f0d 	cmn.w	r3, #13
 80139f0:	d007      	beq.n	8013a02 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80139f2:	69fb      	ldr	r3, [r7, #28]
 80139f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d00c      	beq.n	8013a14 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80139fa:	4b82      	ldr	r3, [pc, #520]	; (8013c04 <tcp_input+0x73c>)
 80139fc:	881b      	ldrh	r3, [r3, #0]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d008      	beq.n	8013a14 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013a02:	69fb      	ldr	r3, [r7, #28]
 8013a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	f040 80e4 	bne.w	8013bd4 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013a0c:	69f8      	ldr	r0, [r7, #28]
 8013a0e:	f003 fe05 	bl	801761c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013a12:	e0df      	b.n	8013bd4 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8013a14:	4a7c      	ldr	r2, [pc, #496]	; (8013c08 <tcp_input+0x740>)
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013a1a:	69f8      	ldr	r0, [r7, #28]
 8013a1c:	f000 fb18 	bl	8014050 <tcp_process>
 8013a20:	4603      	mov	r3, r0
 8013a22:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013a24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013a28:	f113 0f0d 	cmn.w	r3, #13
 8013a2c:	f000 80d4 	beq.w	8013bd8 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8013a30:	4b71      	ldr	r3, [pc, #452]	; (8013bf8 <tcp_input+0x730>)
 8013a32:	781b      	ldrb	r3, [r3, #0]
 8013a34:	f003 0308 	and.w	r3, r3, #8
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d015      	beq.n	8013a68 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d008      	beq.n	8013a58 <tcp_input+0x590>
 8013a46:	69fb      	ldr	r3, [r7, #28]
 8013a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a4c:	69fa      	ldr	r2, [r7, #28]
 8013a4e:	6912      	ldr	r2, [r2, #16]
 8013a50:	f06f 010d 	mvn.w	r1, #13
 8013a54:	4610      	mov	r0, r2
 8013a56:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013a58:	69f9      	ldr	r1, [r7, #28]
 8013a5a:	486c      	ldr	r0, [pc, #432]	; (8013c0c <tcp_input+0x744>)
 8013a5c:	f7ff fbbc 	bl	80131d8 <tcp_pcb_remove>
        tcp_free(pcb);
 8013a60:	69f8      	ldr	r0, [r7, #28]
 8013a62:	f7fd fef9 	bl	8011858 <tcp_free>
 8013a66:	e0da      	b.n	8013c1e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013a68:	2300      	movs	r3, #0
 8013a6a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013a6c:	4b63      	ldr	r3, [pc, #396]	; (8013bfc <tcp_input+0x734>)
 8013a6e:	881b      	ldrh	r3, [r3, #0]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d01d      	beq.n	8013ab0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013a74:	4b61      	ldr	r3, [pc, #388]	; (8013bfc <tcp_input+0x734>)
 8013a76:	881b      	ldrh	r3, [r3, #0]
 8013a78:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013a7a:	69fb      	ldr	r3, [r7, #28]
 8013a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d00a      	beq.n	8013a9a <tcp_input+0x5d2>
 8013a84:	69fb      	ldr	r3, [r7, #28]
 8013a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a8a:	69fa      	ldr	r2, [r7, #28]
 8013a8c:	6910      	ldr	r0, [r2, #16]
 8013a8e:	89fa      	ldrh	r2, [r7, #14]
 8013a90:	69f9      	ldr	r1, [r7, #28]
 8013a92:	4798      	blx	r3
 8013a94:	4603      	mov	r3, r0
 8013a96:	74fb      	strb	r3, [r7, #19]
 8013a98:	e001      	b.n	8013a9e <tcp_input+0x5d6>
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013a9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013aa2:	f113 0f0d 	cmn.w	r3, #13
 8013aa6:	f000 8099 	beq.w	8013bdc <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013aaa:	4b54      	ldr	r3, [pc, #336]	; (8013bfc <tcp_input+0x734>)
 8013aac:	2200      	movs	r2, #0
 8013aae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013ab0:	69f8      	ldr	r0, [r7, #28]
 8013ab2:	f000 f915 	bl	8013ce0 <tcp_input_delayed_close>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	f040 8091 	bne.w	8013be0 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013abe:	4b4d      	ldr	r3, [pc, #308]	; (8013bf4 <tcp_input+0x72c>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d041      	beq.n	8013b4a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013ac6:	69fb      	ldr	r3, [r7, #28]
 8013ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d006      	beq.n	8013adc <tcp_input+0x614>
 8013ace:	4b50      	ldr	r3, [pc, #320]	; (8013c10 <tcp_input+0x748>)
 8013ad0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013ad4:	494f      	ldr	r1, [pc, #316]	; (8013c14 <tcp_input+0x74c>)
 8013ad6:	4850      	ldr	r0, [pc, #320]	; (8013c18 <tcp_input+0x750>)
 8013ad8:	f007 fb96 	bl	801b208 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013adc:	69fb      	ldr	r3, [r7, #28]
 8013ade:	8b5b      	ldrh	r3, [r3, #26]
 8013ae0:	f003 0310 	and.w	r3, r3, #16
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d008      	beq.n	8013afa <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013ae8:	4b42      	ldr	r3, [pc, #264]	; (8013bf4 <tcp_input+0x72c>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	4618      	mov	r0, r3
 8013aee:	f7fd fba3 	bl	8011238 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013af2:	69f8      	ldr	r0, [r7, #28]
 8013af4:	f7fe f998 	bl	8011e28 <tcp_abort>
            goto aborted;
 8013af8:	e091      	b.n	8013c1e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013afa:	69fb      	ldr	r3, [r7, #28]
 8013afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d00c      	beq.n	8013b1e <tcp_input+0x656>
 8013b04:	69fb      	ldr	r3, [r7, #28]
 8013b06:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013b0a:	69fb      	ldr	r3, [r7, #28]
 8013b0c:	6918      	ldr	r0, [r3, #16]
 8013b0e:	4b39      	ldr	r3, [pc, #228]	; (8013bf4 <tcp_input+0x72c>)
 8013b10:	681a      	ldr	r2, [r3, #0]
 8013b12:	2300      	movs	r3, #0
 8013b14:	69f9      	ldr	r1, [r7, #28]
 8013b16:	47a0      	blx	r4
 8013b18:	4603      	mov	r3, r0
 8013b1a:	74fb      	strb	r3, [r7, #19]
 8013b1c:	e008      	b.n	8013b30 <tcp_input+0x668>
 8013b1e:	4b35      	ldr	r3, [pc, #212]	; (8013bf4 <tcp_input+0x72c>)
 8013b20:	681a      	ldr	r2, [r3, #0]
 8013b22:	2300      	movs	r3, #0
 8013b24:	69f9      	ldr	r1, [r7, #28]
 8013b26:	2000      	movs	r0, #0
 8013b28:	f7ff f8a8 	bl	8012c7c <tcp_recv_null>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013b30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b34:	f113 0f0d 	cmn.w	r3, #13
 8013b38:	d054      	beq.n	8013be4 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013b3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d003      	beq.n	8013b4a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013b42:	4b2c      	ldr	r3, [pc, #176]	; (8013bf4 <tcp_input+0x72c>)
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013b4a:	4b2b      	ldr	r3, [pc, #172]	; (8013bf8 <tcp_input+0x730>)
 8013b4c:	781b      	ldrb	r3, [r3, #0]
 8013b4e:	f003 0320 	and.w	r3, r3, #32
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d031      	beq.n	8013bba <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8013b56:	69fb      	ldr	r3, [r7, #28]
 8013b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d009      	beq.n	8013b72 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013b5e:	69fb      	ldr	r3, [r7, #28]
 8013b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b62:	7b5a      	ldrb	r2, [r3, #13]
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b68:	f042 0220 	orr.w	r2, r2, #32
 8013b6c:	b2d2      	uxtb	r2, r2
 8013b6e:	735a      	strb	r2, [r3, #13]
 8013b70:	e023      	b.n	8013bba <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013b72:	69fb      	ldr	r3, [r7, #28]
 8013b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b76:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013b7a:	4293      	cmp	r3, r2
 8013b7c:	d005      	beq.n	8013b8a <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8013b7e:	69fb      	ldr	r3, [r7, #28]
 8013b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b82:	3301      	adds	r3, #1
 8013b84:	b29a      	uxth	r2, r3
 8013b86:	69fb      	ldr	r3, [r7, #28]
 8013b88:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013b8a:	69fb      	ldr	r3, [r7, #28]
 8013b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d00b      	beq.n	8013bac <tcp_input+0x6e4>
 8013b94:	69fb      	ldr	r3, [r7, #28]
 8013b96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013b9a:	69fb      	ldr	r3, [r7, #28]
 8013b9c:	6918      	ldr	r0, [r3, #16]
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	69f9      	ldr	r1, [r7, #28]
 8013ba4:	47a0      	blx	r4
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	74fb      	strb	r3, [r7, #19]
 8013baa:	e001      	b.n	8013bb0 <tcp_input+0x6e8>
 8013bac:	2300      	movs	r3, #0
 8013bae:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013bb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013bb4:	f113 0f0d 	cmn.w	r3, #13
 8013bb8:	d016      	beq.n	8013be8 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013bba:	4b13      	ldr	r3, [pc, #76]	; (8013c08 <tcp_input+0x740>)
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013bc0:	69f8      	ldr	r0, [r7, #28]
 8013bc2:	f000 f88d 	bl	8013ce0 <tcp_input_delayed_close>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d127      	bne.n	8013c1c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013bcc:	69f8      	ldr	r0, [r7, #28]
 8013bce:	f002 ff1f 	bl	8016a10 <tcp_output>
 8013bd2:	e024      	b.n	8013c1e <tcp_input+0x756>
        goto aborted;
 8013bd4:	bf00      	nop
 8013bd6:	e022      	b.n	8013c1e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013bd8:	bf00      	nop
 8013bda:	e020      	b.n	8013c1e <tcp_input+0x756>
              goto aborted;
 8013bdc:	bf00      	nop
 8013bde:	e01e      	b.n	8013c1e <tcp_input+0x756>
          goto aborted;
 8013be0:	bf00      	nop
 8013be2:	e01c      	b.n	8013c1e <tcp_input+0x756>
            goto aborted;
 8013be4:	bf00      	nop
 8013be6:	e01a      	b.n	8013c1e <tcp_input+0x756>
              goto aborted;
 8013be8:	bf00      	nop
 8013bea:	e018      	b.n	8013c1e <tcp_input+0x756>
 8013bec:	2001dcfc 	.word	0x2001dcfc
 8013bf0:	2001dd0c 	.word	0x2001dd0c
 8013bf4:	2001dd2c 	.word	0x2001dd2c
 8013bf8:	2001dd29 	.word	0x2001dd29
 8013bfc:	2001dd24 	.word	0x2001dd24
 8013c00:	2001dd28 	.word	0x2001dd28
 8013c04:	2001dd26 	.word	0x2001dd26
 8013c08:	2001dd30 	.word	0x2001dd30
 8013c0c:	2001dcf0 	.word	0x2001dcf0
 8013c10:	0801eca0 	.word	0x0801eca0
 8013c14:	0801ee54 	.word	0x0801ee54
 8013c18:	0801ecec 	.word	0x0801ecec
          goto aborted;
 8013c1c:	bf00      	nop
    tcp_input_pcb = NULL;
 8013c1e:	4b27      	ldr	r3, [pc, #156]	; (8013cbc <tcp_input+0x7f4>)
 8013c20:	2200      	movs	r2, #0
 8013c22:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013c24:	4b26      	ldr	r3, [pc, #152]	; (8013cc0 <tcp_input+0x7f8>)
 8013c26:	2200      	movs	r2, #0
 8013c28:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013c2a:	4b26      	ldr	r3, [pc, #152]	; (8013cc4 <tcp_input+0x7fc>)
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d03f      	beq.n	8013cb2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013c32:	4b24      	ldr	r3, [pc, #144]	; (8013cc4 <tcp_input+0x7fc>)
 8013c34:	685b      	ldr	r3, [r3, #4]
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7fd fafe 	bl	8011238 <pbuf_free>
      inseg.p = NULL;
 8013c3c:	4b21      	ldr	r3, [pc, #132]	; (8013cc4 <tcp_input+0x7fc>)
 8013c3e:	2200      	movs	r2, #0
 8013c40:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013c42:	e036      	b.n	8013cb2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013c44:	4b20      	ldr	r3, [pc, #128]	; (8013cc8 <tcp_input+0x800>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	899b      	ldrh	r3, [r3, #12]
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7fb fed5 	bl	800f9fc <lwip_htons>
 8013c52:	4603      	mov	r3, r0
 8013c54:	b2db      	uxtb	r3, r3
 8013c56:	f003 0304 	and.w	r3, r3, #4
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d118      	bne.n	8013c90 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c5e:	4b1b      	ldr	r3, [pc, #108]	; (8013ccc <tcp_input+0x804>)
 8013c60:	6819      	ldr	r1, [r3, #0]
 8013c62:	4b1b      	ldr	r3, [pc, #108]	; (8013cd0 <tcp_input+0x808>)
 8013c64:	881b      	ldrh	r3, [r3, #0]
 8013c66:	461a      	mov	r2, r3
 8013c68:	4b1a      	ldr	r3, [pc, #104]	; (8013cd4 <tcp_input+0x80c>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c6e:	4b16      	ldr	r3, [pc, #88]	; (8013cc8 <tcp_input+0x800>)
 8013c70:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c72:	885b      	ldrh	r3, [r3, #2]
 8013c74:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c76:	4a14      	ldr	r2, [pc, #80]	; (8013cc8 <tcp_input+0x800>)
 8013c78:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c7a:	8812      	ldrh	r2, [r2, #0]
 8013c7c:	b292      	uxth	r2, r2
 8013c7e:	9202      	str	r2, [sp, #8]
 8013c80:	9301      	str	r3, [sp, #4]
 8013c82:	4b15      	ldr	r3, [pc, #84]	; (8013cd8 <tcp_input+0x810>)
 8013c84:	9300      	str	r3, [sp, #0]
 8013c86:	4b15      	ldr	r3, [pc, #84]	; (8013cdc <tcp_input+0x814>)
 8013c88:	4602      	mov	r2, r0
 8013c8a:	2000      	movs	r0, #0
 8013c8c:	f003 fc74 	bl	8017578 <tcp_rst>
    pbuf_free(p);
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f7fd fad1 	bl	8011238 <pbuf_free>
  return;
 8013c96:	e00c      	b.n	8013cb2 <tcp_input+0x7ea>
    goto dropped;
 8013c98:	bf00      	nop
 8013c9a:	e006      	b.n	8013caa <tcp_input+0x7e2>
    goto dropped;
 8013c9c:	bf00      	nop
 8013c9e:	e004      	b.n	8013caa <tcp_input+0x7e2>
    goto dropped;
 8013ca0:	bf00      	nop
 8013ca2:	e002      	b.n	8013caa <tcp_input+0x7e2>
      goto dropped;
 8013ca4:	bf00      	nop
 8013ca6:	e000      	b.n	8013caa <tcp_input+0x7e2>
      goto dropped;
 8013ca8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f7fd fac4 	bl	8011238 <pbuf_free>
 8013cb0:	e000      	b.n	8013cb4 <tcp_input+0x7ec>
  return;
 8013cb2:	bf00      	nop
}
 8013cb4:	3724      	adds	r7, #36	; 0x24
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd90      	pop	{r4, r7, pc}
 8013cba:	bf00      	nop
 8013cbc:	2001dd30 	.word	0x2001dd30
 8013cc0:	2001dd2c 	.word	0x2001dd2c
 8013cc4:	2001dcfc 	.word	0x2001dcfc
 8013cc8:	2001dd0c 	.word	0x2001dd0c
 8013ccc:	2001dd20 	.word	0x2001dd20
 8013cd0:	2001dd26 	.word	0x2001dd26
 8013cd4:	2001dd1c 	.word	0x2001dd1c
 8013cd8:	2000e2ac 	.word	0x2000e2ac
 8013cdc:	2000e2b0 	.word	0x2000e2b0

08013ce0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d106      	bne.n	8013cfc <tcp_input_delayed_close+0x1c>
 8013cee:	4b17      	ldr	r3, [pc, #92]	; (8013d4c <tcp_input_delayed_close+0x6c>)
 8013cf0:	f240 225a 	movw	r2, #602	; 0x25a
 8013cf4:	4916      	ldr	r1, [pc, #88]	; (8013d50 <tcp_input_delayed_close+0x70>)
 8013cf6:	4817      	ldr	r0, [pc, #92]	; (8013d54 <tcp_input_delayed_close+0x74>)
 8013cf8:	f007 fa86 	bl	801b208 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013cfc:	4b16      	ldr	r3, [pc, #88]	; (8013d58 <tcp_input_delayed_close+0x78>)
 8013cfe:	781b      	ldrb	r3, [r3, #0]
 8013d00:	f003 0310 	and.w	r3, r3, #16
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d01c      	beq.n	8013d42 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	8b5b      	ldrh	r3, [r3, #26]
 8013d0c:	f003 0310 	and.w	r3, r3, #16
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d10d      	bne.n	8013d30 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d008      	beq.n	8013d30 <tcp_input_delayed_close+0x50>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d24:	687a      	ldr	r2, [r7, #4]
 8013d26:	6912      	ldr	r2, [r2, #16]
 8013d28:	f06f 010e 	mvn.w	r1, #14
 8013d2c:	4610      	mov	r0, r2
 8013d2e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013d30:	6879      	ldr	r1, [r7, #4]
 8013d32:	480a      	ldr	r0, [pc, #40]	; (8013d5c <tcp_input_delayed_close+0x7c>)
 8013d34:	f7ff fa50 	bl	80131d8 <tcp_pcb_remove>
    tcp_free(pcb);
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f7fd fd8d 	bl	8011858 <tcp_free>
    return 1;
 8013d3e:	2301      	movs	r3, #1
 8013d40:	e000      	b.n	8013d44 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013d42:	2300      	movs	r3, #0
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	3708      	adds	r7, #8
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	0801eca0 	.word	0x0801eca0
 8013d50:	0801ee70 	.word	0x0801ee70
 8013d54:	0801ecec 	.word	0x0801ecec
 8013d58:	2001dd29 	.word	0x2001dd29
 8013d5c:	2001dcf0 	.word	0x2001dcf0

08013d60 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013d60:	b590      	push	{r4, r7, lr}
 8013d62:	b08b      	sub	sp, #44	; 0x2c
 8013d64:	af04      	add	r7, sp, #16
 8013d66:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013d68:	4b6f      	ldr	r3, [pc, #444]	; (8013f28 <tcp_listen_input+0x1c8>)
 8013d6a:	781b      	ldrb	r3, [r3, #0]
 8013d6c:	f003 0304 	and.w	r3, r3, #4
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	f040 80d2 	bne.w	8013f1a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d106      	bne.n	8013d8a <tcp_listen_input+0x2a>
 8013d7c:	4b6b      	ldr	r3, [pc, #428]	; (8013f2c <tcp_listen_input+0x1cc>)
 8013d7e:	f240 2281 	movw	r2, #641	; 0x281
 8013d82:	496b      	ldr	r1, [pc, #428]	; (8013f30 <tcp_listen_input+0x1d0>)
 8013d84:	486b      	ldr	r0, [pc, #428]	; (8013f34 <tcp_listen_input+0x1d4>)
 8013d86:	f007 fa3f 	bl	801b208 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013d8a:	4b67      	ldr	r3, [pc, #412]	; (8013f28 <tcp_listen_input+0x1c8>)
 8013d8c:	781b      	ldrb	r3, [r3, #0]
 8013d8e:	f003 0310 	and.w	r3, r3, #16
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d019      	beq.n	8013dca <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d96:	4b68      	ldr	r3, [pc, #416]	; (8013f38 <tcp_listen_input+0x1d8>)
 8013d98:	6819      	ldr	r1, [r3, #0]
 8013d9a:	4b68      	ldr	r3, [pc, #416]	; (8013f3c <tcp_listen_input+0x1dc>)
 8013d9c:	881b      	ldrh	r3, [r3, #0]
 8013d9e:	461a      	mov	r2, r3
 8013da0:	4b67      	ldr	r3, [pc, #412]	; (8013f40 <tcp_listen_input+0x1e0>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013da6:	4b67      	ldr	r3, [pc, #412]	; (8013f44 <tcp_listen_input+0x1e4>)
 8013da8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013daa:	885b      	ldrh	r3, [r3, #2]
 8013dac:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013dae:	4a65      	ldr	r2, [pc, #404]	; (8013f44 <tcp_listen_input+0x1e4>)
 8013db0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013db2:	8812      	ldrh	r2, [r2, #0]
 8013db4:	b292      	uxth	r2, r2
 8013db6:	9202      	str	r2, [sp, #8]
 8013db8:	9301      	str	r3, [sp, #4]
 8013dba:	4b63      	ldr	r3, [pc, #396]	; (8013f48 <tcp_listen_input+0x1e8>)
 8013dbc:	9300      	str	r3, [sp, #0]
 8013dbe:	4b63      	ldr	r3, [pc, #396]	; (8013f4c <tcp_listen_input+0x1ec>)
 8013dc0:	4602      	mov	r2, r0
 8013dc2:	6878      	ldr	r0, [r7, #4]
 8013dc4:	f003 fbd8 	bl	8017578 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013dc8:	e0a9      	b.n	8013f1e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013dca:	4b57      	ldr	r3, [pc, #348]	; (8013f28 <tcp_listen_input+0x1c8>)
 8013dcc:	781b      	ldrb	r3, [r3, #0]
 8013dce:	f003 0302 	and.w	r3, r3, #2
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	f000 80a3 	beq.w	8013f1e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	7d5b      	ldrb	r3, [r3, #21]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7ff f871 	bl	8012ec4 <tcp_alloc>
 8013de2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013de4:	697b      	ldr	r3, [r7, #20]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d111      	bne.n	8013e0e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	699b      	ldr	r3, [r3, #24]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d00a      	beq.n	8013e08 <tcp_listen_input+0xa8>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	699b      	ldr	r3, [r3, #24]
 8013df6:	687a      	ldr	r2, [r7, #4]
 8013df8:	6910      	ldr	r0, [r2, #16]
 8013dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8013dfe:	2100      	movs	r1, #0
 8013e00:	4798      	blx	r3
 8013e02:	4603      	mov	r3, r0
 8013e04:	73bb      	strb	r3, [r7, #14]
      return;
 8013e06:	e08b      	b.n	8013f20 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013e08:	23f0      	movs	r3, #240	; 0xf0
 8013e0a:	73bb      	strb	r3, [r7, #14]
      return;
 8013e0c:	e088      	b.n	8013f20 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013e0e:	4b50      	ldr	r3, [pc, #320]	; (8013f50 <tcp_listen_input+0x1f0>)
 8013e10:	695a      	ldr	r2, [r3, #20]
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013e16:	4b4e      	ldr	r3, [pc, #312]	; (8013f50 <tcp_listen_input+0x1f0>)
 8013e18:	691a      	ldr	r2, [r3, #16]
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	8ada      	ldrh	r2, [r3, #22]
 8013e22:	697b      	ldr	r3, [r7, #20]
 8013e24:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013e26:	4b47      	ldr	r3, [pc, #284]	; (8013f44 <tcp_listen_input+0x1e4>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	881b      	ldrh	r3, [r3, #0]
 8013e2c:	b29a      	uxth	r2, r3
 8013e2e:	697b      	ldr	r3, [r7, #20]
 8013e30:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	2203      	movs	r2, #3
 8013e36:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013e38:	4b41      	ldr	r3, [pc, #260]	; (8013f40 <tcp_listen_input+0x1e0>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	1c5a      	adds	r2, r3, #1
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013e42:	697b      	ldr	r3, [r7, #20]
 8013e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013e4a:	6978      	ldr	r0, [r7, #20]
 8013e4c:	f7ff fa58 	bl	8013300 <tcp_next_iss>
 8013e50:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	693a      	ldr	r2, [r7, #16]
 8013e56:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013e58:	697b      	ldr	r3, [r7, #20]
 8013e5a:	693a      	ldr	r2, [r7, #16]
 8013e5c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013e5e:	697b      	ldr	r3, [r7, #20]
 8013e60:	693a      	ldr	r2, [r7, #16]
 8013e62:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013e64:	697b      	ldr	r3, [r7, #20]
 8013e66:	693a      	ldr	r2, [r7, #16]
 8013e68:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013e6a:	4b35      	ldr	r3, [pc, #212]	; (8013f40 <tcp_listen_input+0x1e0>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	1e5a      	subs	r2, r3, #1
 8013e70:	697b      	ldr	r3, [r7, #20]
 8013e72:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	691a      	ldr	r2, [r3, #16]
 8013e78:	697b      	ldr	r3, [r7, #20]
 8013e7a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	687a      	ldr	r2, [r7, #4]
 8013e80:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	7a5b      	ldrb	r3, [r3, #9]
 8013e86:	f003 030c 	and.w	r3, r3, #12
 8013e8a:	b2da      	uxtb	r2, r3
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	7a1a      	ldrb	r2, [r3, #8]
 8013e94:	697b      	ldr	r3, [r7, #20]
 8013e96:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013e98:	4b2e      	ldr	r3, [pc, #184]	; (8013f54 <tcp_listen_input+0x1f4>)
 8013e9a:	681a      	ldr	r2, [r3, #0]
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	60da      	str	r2, [r3, #12]
 8013ea0:	4a2c      	ldr	r2, [pc, #176]	; (8013f54 <tcp_listen_input+0x1f4>)
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	6013      	str	r3, [r2, #0]
 8013ea6:	f003 fd29 	bl	80178fc <tcp_timer_needed>
 8013eaa:	4b2b      	ldr	r3, [pc, #172]	; (8013f58 <tcp_listen_input+0x1f8>)
 8013eac:	2201      	movs	r2, #1
 8013eae:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013eb0:	6978      	ldr	r0, [r7, #20]
 8013eb2:	f001 fd8f 	bl	80159d4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013eb6:	4b23      	ldr	r3, [pc, #140]	; (8013f44 <tcp_listen_input+0x1e4>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	89db      	ldrh	r3, [r3, #14]
 8013ebc:	b29a      	uxth	r2, r3
 8013ebe:	697b      	ldr	r3, [r7, #20]
 8013ec0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013ed0:	697b      	ldr	r3, [r7, #20]
 8013ed2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	3304      	adds	r3, #4
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f005 f957 	bl	801918c <ip4_route>
 8013ede:	4601      	mov	r1, r0
 8013ee0:	697b      	ldr	r3, [r7, #20]
 8013ee2:	3304      	adds	r3, #4
 8013ee4:	461a      	mov	r2, r3
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	f7ff fa30 	bl	801334c <tcp_eff_send_mss_netif>
 8013eec:	4603      	mov	r3, r0
 8013eee:	461a      	mov	r2, r3
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013ef4:	2112      	movs	r1, #18
 8013ef6:	6978      	ldr	r0, [r7, #20]
 8013ef8:	f002 fc9c 	bl	8016834 <tcp_enqueue_flags>
 8013efc:	4603      	mov	r3, r0
 8013efe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d004      	beq.n	8013f12 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013f08:	2100      	movs	r1, #0
 8013f0a:	6978      	ldr	r0, [r7, #20]
 8013f0c:	f7fd fece 	bl	8011cac <tcp_abandon>
      return;
 8013f10:	e006      	b.n	8013f20 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013f12:	6978      	ldr	r0, [r7, #20]
 8013f14:	f002 fd7c 	bl	8016a10 <tcp_output>
  return;
 8013f18:	e001      	b.n	8013f1e <tcp_listen_input+0x1be>
    return;
 8013f1a:	bf00      	nop
 8013f1c:	e000      	b.n	8013f20 <tcp_listen_input+0x1c0>
  return;
 8013f1e:	bf00      	nop
}
 8013f20:	371c      	adds	r7, #28
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd90      	pop	{r4, r7, pc}
 8013f26:	bf00      	nop
 8013f28:	2001dd28 	.word	0x2001dd28
 8013f2c:	0801eca0 	.word	0x0801eca0
 8013f30:	0801ee98 	.word	0x0801ee98
 8013f34:	0801ecec 	.word	0x0801ecec
 8013f38:	2001dd20 	.word	0x2001dd20
 8013f3c:	2001dd26 	.word	0x2001dd26
 8013f40:	2001dd1c 	.word	0x2001dd1c
 8013f44:	2001dd0c 	.word	0x2001dd0c
 8013f48:	2000e2ac 	.word	0x2000e2ac
 8013f4c:	2000e2b0 	.word	0x2000e2b0
 8013f50:	2000e29c 	.word	0x2000e29c
 8013f54:	2001dcf0 	.word	0x2001dcf0
 8013f58:	2001dcf8 	.word	0x2001dcf8

08013f5c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b086      	sub	sp, #24
 8013f60:	af04      	add	r7, sp, #16
 8013f62:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013f64:	4b2f      	ldr	r3, [pc, #188]	; (8014024 <tcp_timewait_input+0xc8>)
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	f003 0304 	and.w	r3, r3, #4
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d153      	bne.n	8014018 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d106      	bne.n	8013f84 <tcp_timewait_input+0x28>
 8013f76:	4b2c      	ldr	r3, [pc, #176]	; (8014028 <tcp_timewait_input+0xcc>)
 8013f78:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013f7c:	492b      	ldr	r1, [pc, #172]	; (801402c <tcp_timewait_input+0xd0>)
 8013f7e:	482c      	ldr	r0, [pc, #176]	; (8014030 <tcp_timewait_input+0xd4>)
 8013f80:	f007 f942 	bl	801b208 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013f84:	4b27      	ldr	r3, [pc, #156]	; (8014024 <tcp_timewait_input+0xc8>)
 8013f86:	781b      	ldrb	r3, [r3, #0]
 8013f88:	f003 0302 	and.w	r3, r3, #2
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d02a      	beq.n	8013fe6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013f90:	4b28      	ldr	r3, [pc, #160]	; (8014034 <tcp_timewait_input+0xd8>)
 8013f92:	681a      	ldr	r2, [r3, #0]
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f98:	1ad3      	subs	r3, r2, r3
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	db2d      	blt.n	8013ffa <tcp_timewait_input+0x9e>
 8013f9e:	4b25      	ldr	r3, [pc, #148]	; (8014034 <tcp_timewait_input+0xd8>)
 8013fa0:	681a      	ldr	r2, [r3, #0]
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa6:	6879      	ldr	r1, [r7, #4]
 8013fa8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013faa:	440b      	add	r3, r1
 8013fac:	1ad3      	subs	r3, r2, r3
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	dc23      	bgt.n	8013ffa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fb2:	4b21      	ldr	r3, [pc, #132]	; (8014038 <tcp_timewait_input+0xdc>)
 8013fb4:	6819      	ldr	r1, [r3, #0]
 8013fb6:	4b21      	ldr	r3, [pc, #132]	; (801403c <tcp_timewait_input+0xe0>)
 8013fb8:	881b      	ldrh	r3, [r3, #0]
 8013fba:	461a      	mov	r2, r3
 8013fbc:	4b1d      	ldr	r3, [pc, #116]	; (8014034 <tcp_timewait_input+0xd8>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fc2:	4b1f      	ldr	r3, [pc, #124]	; (8014040 <tcp_timewait_input+0xe4>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fc6:	885b      	ldrh	r3, [r3, #2]
 8013fc8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fca:	4a1d      	ldr	r2, [pc, #116]	; (8014040 <tcp_timewait_input+0xe4>)
 8013fcc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fce:	8812      	ldrh	r2, [r2, #0]
 8013fd0:	b292      	uxth	r2, r2
 8013fd2:	9202      	str	r2, [sp, #8]
 8013fd4:	9301      	str	r3, [sp, #4]
 8013fd6:	4b1b      	ldr	r3, [pc, #108]	; (8014044 <tcp_timewait_input+0xe8>)
 8013fd8:	9300      	str	r3, [sp, #0]
 8013fda:	4b1b      	ldr	r3, [pc, #108]	; (8014048 <tcp_timewait_input+0xec>)
 8013fdc:	4602      	mov	r2, r0
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f003 faca 	bl	8017578 <tcp_rst>
      return;
 8013fe4:	e01b      	b.n	801401e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013fe6:	4b0f      	ldr	r3, [pc, #60]	; (8014024 <tcp_timewait_input+0xc8>)
 8013fe8:	781b      	ldrb	r3, [r3, #0]
 8013fea:	f003 0301 	and.w	r3, r3, #1
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d003      	beq.n	8013ffa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013ff2:	4b16      	ldr	r3, [pc, #88]	; (801404c <tcp_timewait_input+0xf0>)
 8013ff4:	681a      	ldr	r2, [r3, #0]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013ffa:	4b10      	ldr	r3, [pc, #64]	; (801403c <tcp_timewait_input+0xe0>)
 8013ffc:	881b      	ldrh	r3, [r3, #0]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d00c      	beq.n	801401c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	8b5b      	ldrh	r3, [r3, #26]
 8014006:	f043 0302 	orr.w	r3, r3, #2
 801400a:	b29a      	uxth	r2, r3
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f002 fcfd 	bl	8016a10 <tcp_output>
  }
  return;
 8014016:	e001      	b.n	801401c <tcp_timewait_input+0xc0>
    return;
 8014018:	bf00      	nop
 801401a:	e000      	b.n	801401e <tcp_timewait_input+0xc2>
  return;
 801401c:	bf00      	nop
}
 801401e:	3708      	adds	r7, #8
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}
 8014024:	2001dd28 	.word	0x2001dd28
 8014028:	0801eca0 	.word	0x0801eca0
 801402c:	0801eeb8 	.word	0x0801eeb8
 8014030:	0801ecec 	.word	0x0801ecec
 8014034:	2001dd1c 	.word	0x2001dd1c
 8014038:	2001dd20 	.word	0x2001dd20
 801403c:	2001dd26 	.word	0x2001dd26
 8014040:	2001dd0c 	.word	0x2001dd0c
 8014044:	2000e2ac 	.word	0x2000e2ac
 8014048:	2000e2b0 	.word	0x2000e2b0
 801404c:	2001dce4 	.word	0x2001dce4

08014050 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014050:	b590      	push	{r4, r7, lr}
 8014052:	b08d      	sub	sp, #52	; 0x34
 8014054:	af04      	add	r7, sp, #16
 8014056:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014058:	2300      	movs	r3, #0
 801405a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801405c:	2300      	movs	r3, #0
 801405e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d106      	bne.n	8014074 <tcp_process+0x24>
 8014066:	4b9d      	ldr	r3, [pc, #628]	; (80142dc <tcp_process+0x28c>)
 8014068:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801406c:	499c      	ldr	r1, [pc, #624]	; (80142e0 <tcp_process+0x290>)
 801406e:	489d      	ldr	r0, [pc, #628]	; (80142e4 <tcp_process+0x294>)
 8014070:	f007 f8ca 	bl	801b208 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014074:	4b9c      	ldr	r3, [pc, #624]	; (80142e8 <tcp_process+0x298>)
 8014076:	781b      	ldrb	r3, [r3, #0]
 8014078:	f003 0304 	and.w	r3, r3, #4
 801407c:	2b00      	cmp	r3, #0
 801407e:	d04e      	beq.n	801411e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	7d1b      	ldrb	r3, [r3, #20]
 8014084:	2b02      	cmp	r3, #2
 8014086:	d108      	bne.n	801409a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801408c:	4b97      	ldr	r3, [pc, #604]	; (80142ec <tcp_process+0x29c>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	429a      	cmp	r2, r3
 8014092:	d123      	bne.n	80140dc <tcp_process+0x8c>
        acceptable = 1;
 8014094:	2301      	movs	r3, #1
 8014096:	76fb      	strb	r3, [r7, #27]
 8014098:	e020      	b.n	80140dc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801409e:	4b94      	ldr	r3, [pc, #592]	; (80142f0 <tcp_process+0x2a0>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	429a      	cmp	r2, r3
 80140a4:	d102      	bne.n	80140ac <tcp_process+0x5c>
        acceptable = 1;
 80140a6:	2301      	movs	r3, #1
 80140a8:	76fb      	strb	r3, [r7, #27]
 80140aa:	e017      	b.n	80140dc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80140ac:	4b90      	ldr	r3, [pc, #576]	; (80142f0 <tcp_process+0x2a0>)
 80140ae:	681a      	ldr	r2, [r3, #0]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140b4:	1ad3      	subs	r3, r2, r3
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	db10      	blt.n	80140dc <tcp_process+0x8c>
 80140ba:	4b8d      	ldr	r3, [pc, #564]	; (80142f0 <tcp_process+0x2a0>)
 80140bc:	681a      	ldr	r2, [r3, #0]
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140c2:	6879      	ldr	r1, [r7, #4]
 80140c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80140c6:	440b      	add	r3, r1
 80140c8:	1ad3      	subs	r3, r2, r3
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	dc06      	bgt.n	80140dc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	8b5b      	ldrh	r3, [r3, #26]
 80140d2:	f043 0302 	orr.w	r3, r3, #2
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80140dc:	7efb      	ldrb	r3, [r7, #27]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d01b      	beq.n	801411a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	7d1b      	ldrb	r3, [r3, #20]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d106      	bne.n	80140f8 <tcp_process+0xa8>
 80140ea:	4b7c      	ldr	r3, [pc, #496]	; (80142dc <tcp_process+0x28c>)
 80140ec:	f44f 724e 	mov.w	r2, #824	; 0x338
 80140f0:	4980      	ldr	r1, [pc, #512]	; (80142f4 <tcp_process+0x2a4>)
 80140f2:	487c      	ldr	r0, [pc, #496]	; (80142e4 <tcp_process+0x294>)
 80140f4:	f007 f888 	bl	801b208 <iprintf>
      recv_flags |= TF_RESET;
 80140f8:	4b7f      	ldr	r3, [pc, #508]	; (80142f8 <tcp_process+0x2a8>)
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	f043 0308 	orr.w	r3, r3, #8
 8014100:	b2da      	uxtb	r2, r3
 8014102:	4b7d      	ldr	r3, [pc, #500]	; (80142f8 <tcp_process+0x2a8>)
 8014104:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	8b5b      	ldrh	r3, [r3, #26]
 801410a:	f023 0301 	bic.w	r3, r3, #1
 801410e:	b29a      	uxth	r2, r3
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014114:	f06f 030d 	mvn.w	r3, #13
 8014118:	e37a      	b.n	8014810 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801411a:	2300      	movs	r3, #0
 801411c:	e378      	b.n	8014810 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801411e:	4b72      	ldr	r3, [pc, #456]	; (80142e8 <tcp_process+0x298>)
 8014120:	781b      	ldrb	r3, [r3, #0]
 8014122:	f003 0302 	and.w	r3, r3, #2
 8014126:	2b00      	cmp	r3, #0
 8014128:	d010      	beq.n	801414c <tcp_process+0xfc>
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	7d1b      	ldrb	r3, [r3, #20]
 801412e:	2b02      	cmp	r3, #2
 8014130:	d00c      	beq.n	801414c <tcp_process+0xfc>
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	7d1b      	ldrb	r3, [r3, #20]
 8014136:	2b03      	cmp	r3, #3
 8014138:	d008      	beq.n	801414c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	8b5b      	ldrh	r3, [r3, #26]
 801413e:	f043 0302 	orr.w	r3, r3, #2
 8014142:	b29a      	uxth	r2, r3
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014148:	2300      	movs	r3, #0
 801414a:	e361      	b.n	8014810 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	8b5b      	ldrh	r3, [r3, #26]
 8014150:	f003 0310 	and.w	r3, r3, #16
 8014154:	2b00      	cmp	r3, #0
 8014156:	d103      	bne.n	8014160 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014158:	4b68      	ldr	r3, [pc, #416]	; (80142fc <tcp_process+0x2ac>)
 801415a:	681a      	ldr	r2, [r3, #0]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	2200      	movs	r2, #0
 8014164:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2200      	movs	r2, #0
 801416c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f001 fc2f 	bl	80159d4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	7d1b      	ldrb	r3, [r3, #20]
 801417a:	3b02      	subs	r3, #2
 801417c:	2b07      	cmp	r3, #7
 801417e:	f200 8337 	bhi.w	80147f0 <tcp_process+0x7a0>
 8014182:	a201      	add	r2, pc, #4	; (adr r2, 8014188 <tcp_process+0x138>)
 8014184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014188:	080141a9 	.word	0x080141a9
 801418c:	080143d9 	.word	0x080143d9
 8014190:	08014551 	.word	0x08014551
 8014194:	0801457b 	.word	0x0801457b
 8014198:	0801469f 	.word	0x0801469f
 801419c:	08014551 	.word	0x08014551
 80141a0:	0801472b 	.word	0x0801472b
 80141a4:	080147bb 	.word	0x080147bb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80141a8:	4b4f      	ldr	r3, [pc, #316]	; (80142e8 <tcp_process+0x298>)
 80141aa:	781b      	ldrb	r3, [r3, #0]
 80141ac:	f003 0310 	and.w	r3, r3, #16
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	f000 80e4 	beq.w	801437e <tcp_process+0x32e>
 80141b6:	4b4c      	ldr	r3, [pc, #304]	; (80142e8 <tcp_process+0x298>)
 80141b8:	781b      	ldrb	r3, [r3, #0]
 80141ba:	f003 0302 	and.w	r3, r3, #2
 80141be:	2b00      	cmp	r3, #0
 80141c0:	f000 80dd 	beq.w	801437e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141c8:	1c5a      	adds	r2, r3, #1
 80141ca:	4b48      	ldr	r3, [pc, #288]	; (80142ec <tcp_process+0x29c>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	429a      	cmp	r2, r3
 80141d0:	f040 80d5 	bne.w	801437e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80141d4:	4b46      	ldr	r3, [pc, #280]	; (80142f0 <tcp_process+0x2a0>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	1c5a      	adds	r2, r3, #1
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80141e6:	4b41      	ldr	r3, [pc, #260]	; (80142ec <tcp_process+0x29c>)
 80141e8:	681a      	ldr	r2, [r3, #0]
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80141ee:	4b44      	ldr	r3, [pc, #272]	; (8014300 <tcp_process+0x2b0>)
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	89db      	ldrh	r3, [r3, #14]
 80141f4:	b29a      	uxth	r2, r3
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014208:	4b39      	ldr	r3, [pc, #228]	; (80142f0 <tcp_process+0x2a0>)
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	1e5a      	subs	r2, r3, #1
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2204      	movs	r2, #4
 8014216:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	3304      	adds	r3, #4
 8014220:	4618      	mov	r0, r3
 8014222:	f004 ffb3 	bl	801918c <ip4_route>
 8014226:	4601      	mov	r1, r0
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	3304      	adds	r3, #4
 801422c:	461a      	mov	r2, r3
 801422e:	4620      	mov	r0, r4
 8014230:	f7ff f88c 	bl	801334c <tcp_eff_send_mss_netif>
 8014234:	4603      	mov	r3, r0
 8014236:	461a      	mov	r2, r3
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014240:	009a      	lsls	r2, r3, #2
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014246:	005b      	lsls	r3, r3, #1
 8014248:	f241 111c 	movw	r1, #4380	; 0x111c
 801424c:	428b      	cmp	r3, r1
 801424e:	bf38      	it	cc
 8014250:	460b      	movcc	r3, r1
 8014252:	429a      	cmp	r2, r3
 8014254:	d204      	bcs.n	8014260 <tcp_process+0x210>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801425a:	009b      	lsls	r3, r3, #2
 801425c:	b29b      	uxth	r3, r3
 801425e:	e00d      	b.n	801427c <tcp_process+0x22c>
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014264:	005b      	lsls	r3, r3, #1
 8014266:	f241 121c 	movw	r2, #4380	; 0x111c
 801426a:	4293      	cmp	r3, r2
 801426c:	d904      	bls.n	8014278 <tcp_process+0x228>
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014272:	005b      	lsls	r3, r3, #1
 8014274:	b29b      	uxth	r3, r3
 8014276:	e001      	b.n	801427c <tcp_process+0x22c>
 8014278:	f241 131c 	movw	r3, #4380	; 0x111c
 801427c:	687a      	ldr	r2, [r7, #4]
 801427e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014288:	2b00      	cmp	r3, #0
 801428a:	d106      	bne.n	801429a <tcp_process+0x24a>
 801428c:	4b13      	ldr	r3, [pc, #76]	; (80142dc <tcp_process+0x28c>)
 801428e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014292:	491c      	ldr	r1, [pc, #112]	; (8014304 <tcp_process+0x2b4>)
 8014294:	4813      	ldr	r0, [pc, #76]	; (80142e4 <tcp_process+0x294>)
 8014296:	f006 ffb7 	bl	801b208 <iprintf>
        --pcb->snd_queuelen;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80142a0:	3b01      	subs	r3, #1
 80142a2:	b29a      	uxth	r2, r3
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142ae:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80142b0:	69fb      	ldr	r3, [r7, #28]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d12a      	bne.n	801430c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142ba:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80142bc:	69fb      	ldr	r3, [r7, #28]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d106      	bne.n	80142d0 <tcp_process+0x280>
 80142c2:	4b06      	ldr	r3, [pc, #24]	; (80142dc <tcp_process+0x28c>)
 80142c4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80142c8:	490f      	ldr	r1, [pc, #60]	; (8014308 <tcp_process+0x2b8>)
 80142ca:	4806      	ldr	r0, [pc, #24]	; (80142e4 <tcp_process+0x294>)
 80142cc:	f006 ff9c 	bl	801b208 <iprintf>
          pcb->unsent = rseg->next;
 80142d0:	69fb      	ldr	r3, [r7, #28]
 80142d2:	681a      	ldr	r2, [r3, #0]
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	66da      	str	r2, [r3, #108]	; 0x6c
 80142d8:	e01c      	b.n	8014314 <tcp_process+0x2c4>
 80142da:	bf00      	nop
 80142dc:	0801eca0 	.word	0x0801eca0
 80142e0:	0801eed8 	.word	0x0801eed8
 80142e4:	0801ecec 	.word	0x0801ecec
 80142e8:	2001dd28 	.word	0x2001dd28
 80142ec:	2001dd20 	.word	0x2001dd20
 80142f0:	2001dd1c 	.word	0x2001dd1c
 80142f4:	0801eef4 	.word	0x0801eef4
 80142f8:	2001dd29 	.word	0x2001dd29
 80142fc:	2001dce4 	.word	0x2001dce4
 8014300:	2001dd0c 	.word	0x2001dd0c
 8014304:	0801ef14 	.word	0x0801ef14
 8014308:	0801ef2c 	.word	0x0801ef2c
        } else {
          pcb->unacked = rseg->next;
 801430c:	69fb      	ldr	r3, [r7, #28]
 801430e:	681a      	ldr	r2, [r3, #0]
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014314:	69f8      	ldr	r0, [r7, #28]
 8014316:	f7fe fc6c 	bl	8012bf2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801431e:	2b00      	cmp	r3, #0
 8014320:	d104      	bne.n	801432c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014328:	861a      	strh	r2, [r3, #48]	; 0x30
 801432a:	e006      	b.n	801433a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2200      	movs	r2, #0
 8014330:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	2200      	movs	r2, #0
 8014336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014340:	2b00      	cmp	r3, #0
 8014342:	d00a      	beq.n	801435a <tcp_process+0x30a>
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801434a:	687a      	ldr	r2, [r7, #4]
 801434c:	6910      	ldr	r0, [r2, #16]
 801434e:	2200      	movs	r2, #0
 8014350:	6879      	ldr	r1, [r7, #4]
 8014352:	4798      	blx	r3
 8014354:	4603      	mov	r3, r0
 8014356:	76bb      	strb	r3, [r7, #26]
 8014358:	e001      	b.n	801435e <tcp_process+0x30e>
 801435a:	2300      	movs	r3, #0
 801435c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801435e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014362:	f113 0f0d 	cmn.w	r3, #13
 8014366:	d102      	bne.n	801436e <tcp_process+0x31e>
          return ERR_ABRT;
 8014368:	f06f 030c 	mvn.w	r3, #12
 801436c:	e250      	b.n	8014810 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	8b5b      	ldrh	r3, [r3, #26]
 8014372:	f043 0302 	orr.w	r3, r3, #2
 8014376:	b29a      	uxth	r2, r3
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801437c:	e23a      	b.n	80147f4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801437e:	4b98      	ldr	r3, [pc, #608]	; (80145e0 <tcp_process+0x590>)
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	f003 0310 	and.w	r3, r3, #16
 8014386:	2b00      	cmp	r3, #0
 8014388:	f000 8234 	beq.w	80147f4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801438c:	4b95      	ldr	r3, [pc, #596]	; (80145e4 <tcp_process+0x594>)
 801438e:	6819      	ldr	r1, [r3, #0]
 8014390:	4b95      	ldr	r3, [pc, #596]	; (80145e8 <tcp_process+0x598>)
 8014392:	881b      	ldrh	r3, [r3, #0]
 8014394:	461a      	mov	r2, r3
 8014396:	4b95      	ldr	r3, [pc, #596]	; (80145ec <tcp_process+0x59c>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801439c:	4b94      	ldr	r3, [pc, #592]	; (80145f0 <tcp_process+0x5a0>)
 801439e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80143a0:	885b      	ldrh	r3, [r3, #2]
 80143a2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80143a4:	4a92      	ldr	r2, [pc, #584]	; (80145f0 <tcp_process+0x5a0>)
 80143a6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80143a8:	8812      	ldrh	r2, [r2, #0]
 80143aa:	b292      	uxth	r2, r2
 80143ac:	9202      	str	r2, [sp, #8]
 80143ae:	9301      	str	r3, [sp, #4]
 80143b0:	4b90      	ldr	r3, [pc, #576]	; (80145f4 <tcp_process+0x5a4>)
 80143b2:	9300      	str	r3, [sp, #0]
 80143b4:	4b90      	ldr	r3, [pc, #576]	; (80145f8 <tcp_process+0x5a8>)
 80143b6:	4602      	mov	r2, r0
 80143b8:	6878      	ldr	r0, [r7, #4]
 80143ba:	f003 f8dd 	bl	8017578 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80143c4:	2b05      	cmp	r3, #5
 80143c6:	f200 8215 	bhi.w	80147f4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	2200      	movs	r2, #0
 80143ce:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f002 fea9 	bl	8017128 <tcp_rexmit_rto>
      break;
 80143d6:	e20d      	b.n	80147f4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80143d8:	4b81      	ldr	r3, [pc, #516]	; (80145e0 <tcp_process+0x590>)
 80143da:	781b      	ldrb	r3, [r3, #0]
 80143dc:	f003 0310 	and.w	r3, r3, #16
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	f000 80a1 	beq.w	8014528 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80143e6:	4b7f      	ldr	r3, [pc, #508]	; (80145e4 <tcp_process+0x594>)
 80143e8:	681a      	ldr	r2, [r3, #0]
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143ee:	1ad3      	subs	r3, r2, r3
 80143f0:	3b01      	subs	r3, #1
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	db7e      	blt.n	80144f4 <tcp_process+0x4a4>
 80143f6:	4b7b      	ldr	r3, [pc, #492]	; (80145e4 <tcp_process+0x594>)
 80143f8:	681a      	ldr	r2, [r3, #0]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80143fe:	1ad3      	subs	r3, r2, r3
 8014400:	2b00      	cmp	r3, #0
 8014402:	dc77      	bgt.n	80144f4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	2204      	movs	r2, #4
 8014408:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801440e:	2b00      	cmp	r3, #0
 8014410:	d102      	bne.n	8014418 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014412:	23fa      	movs	r3, #250	; 0xfa
 8014414:	76bb      	strb	r3, [r7, #26]
 8014416:	e01d      	b.n	8014454 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801441c:	699b      	ldr	r3, [r3, #24]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d106      	bne.n	8014430 <tcp_process+0x3e0>
 8014422:	4b76      	ldr	r3, [pc, #472]	; (80145fc <tcp_process+0x5ac>)
 8014424:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014428:	4975      	ldr	r1, [pc, #468]	; (8014600 <tcp_process+0x5b0>)
 801442a:	4876      	ldr	r0, [pc, #472]	; (8014604 <tcp_process+0x5b4>)
 801442c:	f006 feec 	bl	801b208 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014434:	699b      	ldr	r3, [r3, #24]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d00a      	beq.n	8014450 <tcp_process+0x400>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801443e:	699b      	ldr	r3, [r3, #24]
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	6910      	ldr	r0, [r2, #16]
 8014444:	2200      	movs	r2, #0
 8014446:	6879      	ldr	r1, [r7, #4]
 8014448:	4798      	blx	r3
 801444a:	4603      	mov	r3, r0
 801444c:	76bb      	strb	r3, [r7, #26]
 801444e:	e001      	b.n	8014454 <tcp_process+0x404>
 8014450:	23f0      	movs	r3, #240	; 0xf0
 8014452:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014454:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d00a      	beq.n	8014472 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801445c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014460:	f113 0f0d 	cmn.w	r3, #13
 8014464:	d002      	beq.n	801446c <tcp_process+0x41c>
              tcp_abort(pcb);
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f7fd fcde 	bl	8011e28 <tcp_abort>
            }
            return ERR_ABRT;
 801446c:	f06f 030c 	mvn.w	r3, #12
 8014470:	e1ce      	b.n	8014810 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014472:	6878      	ldr	r0, [r7, #4]
 8014474:	f000 fae0 	bl	8014a38 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014478:	4b63      	ldr	r3, [pc, #396]	; (8014608 <tcp_process+0x5b8>)
 801447a:	881b      	ldrh	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d005      	beq.n	801448c <tcp_process+0x43c>
            recv_acked--;
 8014480:	4b61      	ldr	r3, [pc, #388]	; (8014608 <tcp_process+0x5b8>)
 8014482:	881b      	ldrh	r3, [r3, #0]
 8014484:	3b01      	subs	r3, #1
 8014486:	b29a      	uxth	r2, r3
 8014488:	4b5f      	ldr	r3, [pc, #380]	; (8014608 <tcp_process+0x5b8>)
 801448a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014490:	009a      	lsls	r2, r3, #2
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014496:	005b      	lsls	r3, r3, #1
 8014498:	f241 111c 	movw	r1, #4380	; 0x111c
 801449c:	428b      	cmp	r3, r1
 801449e:	bf38      	it	cc
 80144a0:	460b      	movcc	r3, r1
 80144a2:	429a      	cmp	r2, r3
 80144a4:	d204      	bcs.n	80144b0 <tcp_process+0x460>
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144aa:	009b      	lsls	r3, r3, #2
 80144ac:	b29b      	uxth	r3, r3
 80144ae:	e00d      	b.n	80144cc <tcp_process+0x47c>
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144b4:	005b      	lsls	r3, r3, #1
 80144b6:	f241 121c 	movw	r2, #4380	; 0x111c
 80144ba:	4293      	cmp	r3, r2
 80144bc:	d904      	bls.n	80144c8 <tcp_process+0x478>
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144c2:	005b      	lsls	r3, r3, #1
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	e001      	b.n	80144cc <tcp_process+0x47c>
 80144c8:	f241 131c 	movw	r3, #4380	; 0x111c
 80144cc:	687a      	ldr	r2, [r7, #4]
 80144ce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80144d2:	4b4e      	ldr	r3, [pc, #312]	; (801460c <tcp_process+0x5bc>)
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	f003 0320 	and.w	r3, r3, #32
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d037      	beq.n	801454e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	8b5b      	ldrh	r3, [r3, #26]
 80144e2:	f043 0302 	orr.w	r3, r3, #2
 80144e6:	b29a      	uxth	r2, r3
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2207      	movs	r2, #7
 80144f0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80144f2:	e02c      	b.n	801454e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144f4:	4b3b      	ldr	r3, [pc, #236]	; (80145e4 <tcp_process+0x594>)
 80144f6:	6819      	ldr	r1, [r3, #0]
 80144f8:	4b3b      	ldr	r3, [pc, #236]	; (80145e8 <tcp_process+0x598>)
 80144fa:	881b      	ldrh	r3, [r3, #0]
 80144fc:	461a      	mov	r2, r3
 80144fe:	4b3b      	ldr	r3, [pc, #236]	; (80145ec <tcp_process+0x59c>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014504:	4b3a      	ldr	r3, [pc, #232]	; (80145f0 <tcp_process+0x5a0>)
 8014506:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014508:	885b      	ldrh	r3, [r3, #2]
 801450a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801450c:	4a38      	ldr	r2, [pc, #224]	; (80145f0 <tcp_process+0x5a0>)
 801450e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014510:	8812      	ldrh	r2, [r2, #0]
 8014512:	b292      	uxth	r2, r2
 8014514:	9202      	str	r2, [sp, #8]
 8014516:	9301      	str	r3, [sp, #4]
 8014518:	4b36      	ldr	r3, [pc, #216]	; (80145f4 <tcp_process+0x5a4>)
 801451a:	9300      	str	r3, [sp, #0]
 801451c:	4b36      	ldr	r3, [pc, #216]	; (80145f8 <tcp_process+0x5a8>)
 801451e:	4602      	mov	r2, r0
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	f003 f829 	bl	8017578 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014526:	e167      	b.n	80147f8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014528:	4b2d      	ldr	r3, [pc, #180]	; (80145e0 <tcp_process+0x590>)
 801452a:	781b      	ldrb	r3, [r3, #0]
 801452c:	f003 0302 	and.w	r3, r3, #2
 8014530:	2b00      	cmp	r3, #0
 8014532:	f000 8161 	beq.w	80147f8 <tcp_process+0x7a8>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801453a:	1e5a      	subs	r2, r3, #1
 801453c:	4b2b      	ldr	r3, [pc, #172]	; (80145ec <tcp_process+0x59c>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	429a      	cmp	r2, r3
 8014542:	f040 8159 	bne.w	80147f8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	f002 fe10 	bl	801716c <tcp_rexmit>
      break;
 801454c:	e154      	b.n	80147f8 <tcp_process+0x7a8>
 801454e:	e153      	b.n	80147f8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f000 fa71 	bl	8014a38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014556:	4b2d      	ldr	r3, [pc, #180]	; (801460c <tcp_process+0x5bc>)
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	f003 0320 	and.w	r3, r3, #32
 801455e:	2b00      	cmp	r3, #0
 8014560:	f000 814c 	beq.w	80147fc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	8b5b      	ldrh	r3, [r3, #26]
 8014568:	f043 0302 	orr.w	r3, r3, #2
 801456c:	b29a      	uxth	r2, r3
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	2207      	movs	r2, #7
 8014576:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014578:	e140      	b.n	80147fc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f000 fa5c 	bl	8014a38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014580:	4b22      	ldr	r3, [pc, #136]	; (801460c <tcp_process+0x5bc>)
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	f003 0320 	and.w	r3, r3, #32
 8014588:	2b00      	cmp	r3, #0
 801458a:	d071      	beq.n	8014670 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801458c:	4b14      	ldr	r3, [pc, #80]	; (80145e0 <tcp_process+0x590>)
 801458e:	781b      	ldrb	r3, [r3, #0]
 8014590:	f003 0310 	and.w	r3, r3, #16
 8014594:	2b00      	cmp	r3, #0
 8014596:	d060      	beq.n	801465a <tcp_process+0x60a>
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801459c:	4b11      	ldr	r3, [pc, #68]	; (80145e4 <tcp_process+0x594>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	429a      	cmp	r2, r3
 80145a2:	d15a      	bne.n	801465a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d156      	bne.n	801465a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	8b5b      	ldrh	r3, [r3, #26]
 80145b0:	f043 0302 	orr.w	r3, r3, #2
 80145b4:	b29a      	uxth	r2, r3
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80145ba:	6878      	ldr	r0, [r7, #4]
 80145bc:	f7fe fdbc 	bl	8013138 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80145c0:	4b13      	ldr	r3, [pc, #76]	; (8014610 <tcp_process+0x5c0>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d105      	bne.n	80145d6 <tcp_process+0x586>
 80145ca:	4b11      	ldr	r3, [pc, #68]	; (8014610 <tcp_process+0x5c0>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	68db      	ldr	r3, [r3, #12]
 80145d0:	4a0f      	ldr	r2, [pc, #60]	; (8014610 <tcp_process+0x5c0>)
 80145d2:	6013      	str	r3, [r2, #0]
 80145d4:	e02e      	b.n	8014634 <tcp_process+0x5e4>
 80145d6:	4b0e      	ldr	r3, [pc, #56]	; (8014610 <tcp_process+0x5c0>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	617b      	str	r3, [r7, #20]
 80145dc:	e027      	b.n	801462e <tcp_process+0x5de>
 80145de:	bf00      	nop
 80145e0:	2001dd28 	.word	0x2001dd28
 80145e4:	2001dd20 	.word	0x2001dd20
 80145e8:	2001dd26 	.word	0x2001dd26
 80145ec:	2001dd1c 	.word	0x2001dd1c
 80145f0:	2001dd0c 	.word	0x2001dd0c
 80145f4:	2000e2ac 	.word	0x2000e2ac
 80145f8:	2000e2b0 	.word	0x2000e2b0
 80145fc:	0801eca0 	.word	0x0801eca0
 8014600:	0801ef40 	.word	0x0801ef40
 8014604:	0801ecec 	.word	0x0801ecec
 8014608:	2001dd24 	.word	0x2001dd24
 801460c:	2001dd29 	.word	0x2001dd29
 8014610:	2001dcf0 	.word	0x2001dcf0
 8014614:	697b      	ldr	r3, [r7, #20]
 8014616:	68db      	ldr	r3, [r3, #12]
 8014618:	687a      	ldr	r2, [r7, #4]
 801461a:	429a      	cmp	r2, r3
 801461c:	d104      	bne.n	8014628 <tcp_process+0x5d8>
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	68da      	ldr	r2, [r3, #12]
 8014622:	697b      	ldr	r3, [r7, #20]
 8014624:	60da      	str	r2, [r3, #12]
 8014626:	e005      	b.n	8014634 <tcp_process+0x5e4>
 8014628:	697b      	ldr	r3, [r7, #20]
 801462a:	68db      	ldr	r3, [r3, #12]
 801462c:	617b      	str	r3, [r7, #20]
 801462e:	697b      	ldr	r3, [r7, #20]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d1ef      	bne.n	8014614 <tcp_process+0x5c4>
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2200      	movs	r2, #0
 8014638:	60da      	str	r2, [r3, #12]
 801463a:	4b77      	ldr	r3, [pc, #476]	; (8014818 <tcp_process+0x7c8>)
 801463c:	2201      	movs	r2, #1
 801463e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	220a      	movs	r2, #10
 8014644:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014646:	4b75      	ldr	r3, [pc, #468]	; (801481c <tcp_process+0x7cc>)
 8014648:	681a      	ldr	r2, [r3, #0]
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	60da      	str	r2, [r3, #12]
 801464e:	4a73      	ldr	r2, [pc, #460]	; (801481c <tcp_process+0x7cc>)
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	6013      	str	r3, [r2, #0]
 8014654:	f003 f952 	bl	80178fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014658:	e0d2      	b.n	8014800 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	8b5b      	ldrh	r3, [r3, #26]
 801465e:	f043 0302 	orr.w	r3, r3, #2
 8014662:	b29a      	uxth	r2, r3
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2208      	movs	r2, #8
 801466c:	751a      	strb	r2, [r3, #20]
      break;
 801466e:	e0c7      	b.n	8014800 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014670:	4b6b      	ldr	r3, [pc, #428]	; (8014820 <tcp_process+0x7d0>)
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	f003 0310 	and.w	r3, r3, #16
 8014678:	2b00      	cmp	r3, #0
 801467a:	f000 80c1 	beq.w	8014800 <tcp_process+0x7b0>
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014682:	4b68      	ldr	r3, [pc, #416]	; (8014824 <tcp_process+0x7d4>)
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	429a      	cmp	r2, r3
 8014688:	f040 80ba 	bne.w	8014800 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014690:	2b00      	cmp	r3, #0
 8014692:	f040 80b5 	bne.w	8014800 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2206      	movs	r2, #6
 801469a:	751a      	strb	r2, [r3, #20]
      break;
 801469c:	e0b0      	b.n	8014800 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801469e:	6878      	ldr	r0, [r7, #4]
 80146a0:	f000 f9ca 	bl	8014a38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80146a4:	4b60      	ldr	r3, [pc, #384]	; (8014828 <tcp_process+0x7d8>)
 80146a6:	781b      	ldrb	r3, [r3, #0]
 80146a8:	f003 0320 	and.w	r3, r3, #32
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	f000 80a9 	beq.w	8014804 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	8b5b      	ldrh	r3, [r3, #26]
 80146b6:	f043 0302 	orr.w	r3, r3, #2
 80146ba:	b29a      	uxth	r2, r3
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80146c0:	6878      	ldr	r0, [r7, #4]
 80146c2:	f7fe fd39 	bl	8013138 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80146c6:	4b59      	ldr	r3, [pc, #356]	; (801482c <tcp_process+0x7dc>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	687a      	ldr	r2, [r7, #4]
 80146cc:	429a      	cmp	r2, r3
 80146ce:	d105      	bne.n	80146dc <tcp_process+0x68c>
 80146d0:	4b56      	ldr	r3, [pc, #344]	; (801482c <tcp_process+0x7dc>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	68db      	ldr	r3, [r3, #12]
 80146d6:	4a55      	ldr	r2, [pc, #340]	; (801482c <tcp_process+0x7dc>)
 80146d8:	6013      	str	r3, [r2, #0]
 80146da:	e013      	b.n	8014704 <tcp_process+0x6b4>
 80146dc:	4b53      	ldr	r3, [pc, #332]	; (801482c <tcp_process+0x7dc>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	613b      	str	r3, [r7, #16]
 80146e2:	e00c      	b.n	80146fe <tcp_process+0x6ae>
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	68db      	ldr	r3, [r3, #12]
 80146e8:	687a      	ldr	r2, [r7, #4]
 80146ea:	429a      	cmp	r2, r3
 80146ec:	d104      	bne.n	80146f8 <tcp_process+0x6a8>
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	68da      	ldr	r2, [r3, #12]
 80146f2:	693b      	ldr	r3, [r7, #16]
 80146f4:	60da      	str	r2, [r3, #12]
 80146f6:	e005      	b.n	8014704 <tcp_process+0x6b4>
 80146f8:	693b      	ldr	r3, [r7, #16]
 80146fa:	68db      	ldr	r3, [r3, #12]
 80146fc:	613b      	str	r3, [r7, #16]
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d1ef      	bne.n	80146e4 <tcp_process+0x694>
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	2200      	movs	r2, #0
 8014708:	60da      	str	r2, [r3, #12]
 801470a:	4b43      	ldr	r3, [pc, #268]	; (8014818 <tcp_process+0x7c8>)
 801470c:	2201      	movs	r2, #1
 801470e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	220a      	movs	r2, #10
 8014714:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014716:	4b41      	ldr	r3, [pc, #260]	; (801481c <tcp_process+0x7cc>)
 8014718:	681a      	ldr	r2, [r3, #0]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	60da      	str	r2, [r3, #12]
 801471e:	4a3f      	ldr	r2, [pc, #252]	; (801481c <tcp_process+0x7cc>)
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6013      	str	r3, [r2, #0]
 8014724:	f003 f8ea 	bl	80178fc <tcp_timer_needed>
      }
      break;
 8014728:	e06c      	b.n	8014804 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	f000 f984 	bl	8014a38 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014730:	4b3b      	ldr	r3, [pc, #236]	; (8014820 <tcp_process+0x7d0>)
 8014732:	781b      	ldrb	r3, [r3, #0]
 8014734:	f003 0310 	and.w	r3, r3, #16
 8014738:	2b00      	cmp	r3, #0
 801473a:	d065      	beq.n	8014808 <tcp_process+0x7b8>
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014740:	4b38      	ldr	r3, [pc, #224]	; (8014824 <tcp_process+0x7d4>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	429a      	cmp	r2, r3
 8014746:	d15f      	bne.n	8014808 <tcp_process+0x7b8>
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801474c:	2b00      	cmp	r3, #0
 801474e:	d15b      	bne.n	8014808 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014750:	6878      	ldr	r0, [r7, #4]
 8014752:	f7fe fcf1 	bl	8013138 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014756:	4b35      	ldr	r3, [pc, #212]	; (801482c <tcp_process+0x7dc>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	429a      	cmp	r2, r3
 801475e:	d105      	bne.n	801476c <tcp_process+0x71c>
 8014760:	4b32      	ldr	r3, [pc, #200]	; (801482c <tcp_process+0x7dc>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	68db      	ldr	r3, [r3, #12]
 8014766:	4a31      	ldr	r2, [pc, #196]	; (801482c <tcp_process+0x7dc>)
 8014768:	6013      	str	r3, [r2, #0]
 801476a:	e013      	b.n	8014794 <tcp_process+0x744>
 801476c:	4b2f      	ldr	r3, [pc, #188]	; (801482c <tcp_process+0x7dc>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	60fb      	str	r3, [r7, #12]
 8014772:	e00c      	b.n	801478e <tcp_process+0x73e>
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	68db      	ldr	r3, [r3, #12]
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	429a      	cmp	r2, r3
 801477c:	d104      	bne.n	8014788 <tcp_process+0x738>
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	68da      	ldr	r2, [r3, #12]
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	60da      	str	r2, [r3, #12]
 8014786:	e005      	b.n	8014794 <tcp_process+0x744>
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	68db      	ldr	r3, [r3, #12]
 801478c:	60fb      	str	r3, [r7, #12]
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d1ef      	bne.n	8014774 <tcp_process+0x724>
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2200      	movs	r2, #0
 8014798:	60da      	str	r2, [r3, #12]
 801479a:	4b1f      	ldr	r3, [pc, #124]	; (8014818 <tcp_process+0x7c8>)
 801479c:	2201      	movs	r2, #1
 801479e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	220a      	movs	r2, #10
 80147a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80147a6:	4b1d      	ldr	r3, [pc, #116]	; (801481c <tcp_process+0x7cc>)
 80147a8:	681a      	ldr	r2, [r3, #0]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	60da      	str	r2, [r3, #12]
 80147ae:	4a1b      	ldr	r2, [pc, #108]	; (801481c <tcp_process+0x7cc>)
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	6013      	str	r3, [r2, #0]
 80147b4:	f003 f8a2 	bl	80178fc <tcp_timer_needed>
      }
      break;
 80147b8:	e026      	b.n	8014808 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f000 f93c 	bl	8014a38 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80147c0:	4b17      	ldr	r3, [pc, #92]	; (8014820 <tcp_process+0x7d0>)
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	f003 0310 	and.w	r3, r3, #16
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d01f      	beq.n	801480c <tcp_process+0x7bc>
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80147d0:	4b14      	ldr	r3, [pc, #80]	; (8014824 <tcp_process+0x7d4>)
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d119      	bne.n	801480c <tcp_process+0x7bc>
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d115      	bne.n	801480c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80147e0:	4b11      	ldr	r3, [pc, #68]	; (8014828 <tcp_process+0x7d8>)
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	f043 0310 	orr.w	r3, r3, #16
 80147e8:	b2da      	uxtb	r2, r3
 80147ea:	4b0f      	ldr	r3, [pc, #60]	; (8014828 <tcp_process+0x7d8>)
 80147ec:	701a      	strb	r2, [r3, #0]
      }
      break;
 80147ee:	e00d      	b.n	801480c <tcp_process+0x7bc>
    default:
      break;
 80147f0:	bf00      	nop
 80147f2:	e00c      	b.n	801480e <tcp_process+0x7be>
      break;
 80147f4:	bf00      	nop
 80147f6:	e00a      	b.n	801480e <tcp_process+0x7be>
      break;
 80147f8:	bf00      	nop
 80147fa:	e008      	b.n	801480e <tcp_process+0x7be>
      break;
 80147fc:	bf00      	nop
 80147fe:	e006      	b.n	801480e <tcp_process+0x7be>
      break;
 8014800:	bf00      	nop
 8014802:	e004      	b.n	801480e <tcp_process+0x7be>
      break;
 8014804:	bf00      	nop
 8014806:	e002      	b.n	801480e <tcp_process+0x7be>
      break;
 8014808:	bf00      	nop
 801480a:	e000      	b.n	801480e <tcp_process+0x7be>
      break;
 801480c:	bf00      	nop
  }
  return ERR_OK;
 801480e:	2300      	movs	r3, #0
}
 8014810:	4618      	mov	r0, r3
 8014812:	3724      	adds	r7, #36	; 0x24
 8014814:	46bd      	mov	sp, r7
 8014816:	bd90      	pop	{r4, r7, pc}
 8014818:	2001dcf8 	.word	0x2001dcf8
 801481c:	2001dcf4 	.word	0x2001dcf4
 8014820:	2001dd28 	.word	0x2001dd28
 8014824:	2001dd20 	.word	0x2001dd20
 8014828:	2001dd29 	.word	0x2001dd29
 801482c:	2001dcf0 	.word	0x2001dcf0

08014830 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014830:	b590      	push	{r4, r7, lr}
 8014832:	b085      	sub	sp, #20
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
 8014838:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d106      	bne.n	801484e <tcp_oos_insert_segment+0x1e>
 8014840:	4b3b      	ldr	r3, [pc, #236]	; (8014930 <tcp_oos_insert_segment+0x100>)
 8014842:	f240 421f 	movw	r2, #1055	; 0x41f
 8014846:	493b      	ldr	r1, [pc, #236]	; (8014934 <tcp_oos_insert_segment+0x104>)
 8014848:	483b      	ldr	r0, [pc, #236]	; (8014938 <tcp_oos_insert_segment+0x108>)
 801484a:	f006 fcdd 	bl	801b208 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	68db      	ldr	r3, [r3, #12]
 8014852:	899b      	ldrh	r3, [r3, #12]
 8014854:	b29b      	uxth	r3, r3
 8014856:	4618      	mov	r0, r3
 8014858:	f7fb f8d0 	bl	800f9fc <lwip_htons>
 801485c:	4603      	mov	r3, r0
 801485e:	b2db      	uxtb	r3, r3
 8014860:	f003 0301 	and.w	r3, r3, #1
 8014864:	2b00      	cmp	r3, #0
 8014866:	d028      	beq.n	80148ba <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014868:	6838      	ldr	r0, [r7, #0]
 801486a:	f7fe f9ad 	bl	8012bc8 <tcp_segs_free>
    next = NULL;
 801486e:	2300      	movs	r3, #0
 8014870:	603b      	str	r3, [r7, #0]
 8014872:	e056      	b.n	8014922 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	68db      	ldr	r3, [r3, #12]
 8014878:	899b      	ldrh	r3, [r3, #12]
 801487a:	b29b      	uxth	r3, r3
 801487c:	4618      	mov	r0, r3
 801487e:	f7fb f8bd 	bl	800f9fc <lwip_htons>
 8014882:	4603      	mov	r3, r0
 8014884:	b2db      	uxtb	r3, r3
 8014886:	f003 0301 	and.w	r3, r3, #1
 801488a:	2b00      	cmp	r3, #0
 801488c:	d00d      	beq.n	80148aa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	68db      	ldr	r3, [r3, #12]
 8014892:	899b      	ldrh	r3, [r3, #12]
 8014894:	b29c      	uxth	r4, r3
 8014896:	2001      	movs	r0, #1
 8014898:	f7fb f8b0 	bl	800f9fc <lwip_htons>
 801489c:	4603      	mov	r3, r0
 801489e:	461a      	mov	r2, r3
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	68db      	ldr	r3, [r3, #12]
 80148a4:	4322      	orrs	r2, r4
 80148a6:	b292      	uxth	r2, r2
 80148a8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80148aa:	683b      	ldr	r3, [r7, #0]
 80148ac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80148b4:	68f8      	ldr	r0, [r7, #12]
 80148b6:	f7fe f99c 	bl	8012bf2 <tcp_seg_free>
    while (next &&
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d00e      	beq.n	80148de <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	891b      	ldrh	r3, [r3, #8]
 80148c4:	461a      	mov	r2, r3
 80148c6:	4b1d      	ldr	r3, [pc, #116]	; (801493c <tcp_oos_insert_segment+0x10c>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	441a      	add	r2, r3
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	68db      	ldr	r3, [r3, #12]
 80148d0:	685b      	ldr	r3, [r3, #4]
 80148d2:	6839      	ldr	r1, [r7, #0]
 80148d4:	8909      	ldrh	r1, [r1, #8]
 80148d6:	440b      	add	r3, r1
 80148d8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80148da:	2b00      	cmp	r3, #0
 80148dc:	daca      	bge.n	8014874 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d01e      	beq.n	8014922 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	891b      	ldrh	r3, [r3, #8]
 80148e8:	461a      	mov	r2, r3
 80148ea:	4b14      	ldr	r3, [pc, #80]	; (801493c <tcp_oos_insert_segment+0x10c>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	441a      	add	r2, r3
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	68db      	ldr	r3, [r3, #12]
 80148f4:	685b      	ldr	r3, [r3, #4]
 80148f6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	dd12      	ble.n	8014922 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	68db      	ldr	r3, [r3, #12]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	b29a      	uxth	r2, r3
 8014904:	4b0d      	ldr	r3, [pc, #52]	; (801493c <tcp_oos_insert_segment+0x10c>)
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	b29b      	uxth	r3, r3
 801490a:	1ad3      	subs	r3, r2, r3
 801490c:	b29a      	uxth	r2, r3
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	685a      	ldr	r2, [r3, #4]
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	891b      	ldrh	r3, [r3, #8]
 801491a:	4619      	mov	r1, r3
 801491c:	4610      	mov	r0, r2
 801491e:	f7fc fb05 	bl	8010f2c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	683a      	ldr	r2, [r7, #0]
 8014926:	601a      	str	r2, [r3, #0]
}
 8014928:	bf00      	nop
 801492a:	3714      	adds	r7, #20
 801492c:	46bd      	mov	sp, r7
 801492e:	bd90      	pop	{r4, r7, pc}
 8014930:	0801eca0 	.word	0x0801eca0
 8014934:	0801ef60 	.word	0x0801ef60
 8014938:	0801ecec 	.word	0x0801ecec
 801493c:	2001dd1c 	.word	0x2001dd1c

08014940 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014940:	b5b0      	push	{r4, r5, r7, lr}
 8014942:	b086      	sub	sp, #24
 8014944:	af00      	add	r7, sp, #0
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	60b9      	str	r1, [r7, #8]
 801494a:	607a      	str	r2, [r7, #4]
 801494c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801494e:	e03e      	b.n	80149ce <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801495a:	697b      	ldr	r3, [r7, #20]
 801495c:	685b      	ldr	r3, [r3, #4]
 801495e:	4618      	mov	r0, r3
 8014960:	f7fc fcf8 	bl	8011354 <pbuf_clen>
 8014964:	4603      	mov	r3, r0
 8014966:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801496e:	8a7a      	ldrh	r2, [r7, #18]
 8014970:	429a      	cmp	r2, r3
 8014972:	d906      	bls.n	8014982 <tcp_free_acked_segments+0x42>
 8014974:	4b2a      	ldr	r3, [pc, #168]	; (8014a20 <tcp_free_acked_segments+0xe0>)
 8014976:	f240 4257 	movw	r2, #1111	; 0x457
 801497a:	492a      	ldr	r1, [pc, #168]	; (8014a24 <tcp_free_acked_segments+0xe4>)
 801497c:	482a      	ldr	r0, [pc, #168]	; (8014a28 <tcp_free_acked_segments+0xe8>)
 801497e:	f006 fc43 	bl	801b208 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014988:	8a7b      	ldrh	r3, [r7, #18]
 801498a:	1ad3      	subs	r3, r2, r3
 801498c:	b29a      	uxth	r2, r3
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014994:	697b      	ldr	r3, [r7, #20]
 8014996:	891a      	ldrh	r2, [r3, #8]
 8014998:	4b24      	ldr	r3, [pc, #144]	; (8014a2c <tcp_free_acked_segments+0xec>)
 801499a:	881b      	ldrh	r3, [r3, #0]
 801499c:	4413      	add	r3, r2
 801499e:	b29a      	uxth	r2, r3
 80149a0:	4b22      	ldr	r3, [pc, #136]	; (8014a2c <tcp_free_acked_segments+0xec>)
 80149a2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80149a4:	6978      	ldr	r0, [r7, #20]
 80149a6:	f7fe f924 	bl	8012bf2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d00c      	beq.n	80149ce <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d109      	bne.n	80149ce <tcp_free_acked_segments+0x8e>
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d106      	bne.n	80149ce <tcp_free_acked_segments+0x8e>
 80149c0:	4b17      	ldr	r3, [pc, #92]	; (8014a20 <tcp_free_acked_segments+0xe0>)
 80149c2:	f240 4261 	movw	r2, #1121	; 0x461
 80149c6:	491a      	ldr	r1, [pc, #104]	; (8014a30 <tcp_free_acked_segments+0xf0>)
 80149c8:	4817      	ldr	r0, [pc, #92]	; (8014a28 <tcp_free_acked_segments+0xe8>)
 80149ca:	f006 fc1d 	bl	801b208 <iprintf>
  while (seg_list != NULL &&
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d020      	beq.n	8014a16 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	68db      	ldr	r3, [r3, #12]
 80149d8:	685b      	ldr	r3, [r3, #4]
 80149da:	4618      	mov	r0, r3
 80149dc:	f7fb f823 	bl	800fa26 <lwip_htonl>
 80149e0:	4604      	mov	r4, r0
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	891b      	ldrh	r3, [r3, #8]
 80149e6:	461d      	mov	r5, r3
 80149e8:	68bb      	ldr	r3, [r7, #8]
 80149ea:	68db      	ldr	r3, [r3, #12]
 80149ec:	899b      	ldrh	r3, [r3, #12]
 80149ee:	b29b      	uxth	r3, r3
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7fb f803 	bl	800f9fc <lwip_htons>
 80149f6:	4603      	mov	r3, r0
 80149f8:	b2db      	uxtb	r3, r3
 80149fa:	f003 0303 	and.w	r3, r3, #3
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d001      	beq.n	8014a06 <tcp_free_acked_segments+0xc6>
 8014a02:	2301      	movs	r3, #1
 8014a04:	e000      	b.n	8014a08 <tcp_free_acked_segments+0xc8>
 8014a06:	2300      	movs	r3, #0
 8014a08:	442b      	add	r3, r5
 8014a0a:	18e2      	adds	r2, r4, r3
 8014a0c:	4b09      	ldr	r3, [pc, #36]	; (8014a34 <tcp_free_acked_segments+0xf4>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	dd9c      	ble.n	8014950 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014a16:	68bb      	ldr	r3, [r7, #8]
}
 8014a18:	4618      	mov	r0, r3
 8014a1a:	3718      	adds	r7, #24
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8014a20:	0801eca0 	.word	0x0801eca0
 8014a24:	0801ef88 	.word	0x0801ef88
 8014a28:	0801ecec 	.word	0x0801ecec
 8014a2c:	2001dd24 	.word	0x2001dd24
 8014a30:	0801efb0 	.word	0x0801efb0
 8014a34:	2001dd20 	.word	0x2001dd20

08014a38 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014a38:	b5b0      	push	{r4, r5, r7, lr}
 8014a3a:	b094      	sub	sp, #80	; 0x50
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014a40:	2300      	movs	r3, #0
 8014a42:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d106      	bne.n	8014a58 <tcp_receive+0x20>
 8014a4a:	4b91      	ldr	r3, [pc, #580]	; (8014c90 <tcp_receive+0x258>)
 8014a4c:	f240 427b 	movw	r2, #1147	; 0x47b
 8014a50:	4990      	ldr	r1, [pc, #576]	; (8014c94 <tcp_receive+0x25c>)
 8014a52:	4891      	ldr	r0, [pc, #580]	; (8014c98 <tcp_receive+0x260>)
 8014a54:	f006 fbd8 	bl	801b208 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	7d1b      	ldrb	r3, [r3, #20]
 8014a5c:	2b03      	cmp	r3, #3
 8014a5e:	d806      	bhi.n	8014a6e <tcp_receive+0x36>
 8014a60:	4b8b      	ldr	r3, [pc, #556]	; (8014c90 <tcp_receive+0x258>)
 8014a62:	f240 427c 	movw	r2, #1148	; 0x47c
 8014a66:	498d      	ldr	r1, [pc, #564]	; (8014c9c <tcp_receive+0x264>)
 8014a68:	488b      	ldr	r0, [pc, #556]	; (8014c98 <tcp_receive+0x260>)
 8014a6a:	f006 fbcd 	bl	801b208 <iprintf>

  if (flags & TCP_ACK) {
 8014a6e:	4b8c      	ldr	r3, [pc, #560]	; (8014ca0 <tcp_receive+0x268>)
 8014a70:	781b      	ldrb	r3, [r3, #0]
 8014a72:	f003 0310 	and.w	r3, r3, #16
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	f000 8264 	beq.w	8014f44 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014a82:	461a      	mov	r2, r3
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a88:	4413      	add	r3, r2
 8014a8a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014a90:	4b84      	ldr	r3, [pc, #528]	; (8014ca4 <tcp_receive+0x26c>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	1ad3      	subs	r3, r2, r3
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	db1b      	blt.n	8014ad2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014a9e:	4b81      	ldr	r3, [pc, #516]	; (8014ca4 <tcp_receive+0x26c>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d106      	bne.n	8014ab4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014aaa:	4b7f      	ldr	r3, [pc, #508]	; (8014ca8 <tcp_receive+0x270>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	1ad3      	subs	r3, r2, r3
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	db0e      	blt.n	8014ad2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014ab8:	4b7b      	ldr	r3, [pc, #492]	; (8014ca8 <tcp_receive+0x270>)
 8014aba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d125      	bne.n	8014b0c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014ac0:	4b7a      	ldr	r3, [pc, #488]	; (8014cac <tcp_receive+0x274>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	89db      	ldrh	r3, [r3, #14]
 8014ac6:	b29a      	uxth	r2, r3
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	d91c      	bls.n	8014b0c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014ad2:	4b76      	ldr	r3, [pc, #472]	; (8014cac <tcp_receive+0x274>)
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	89db      	ldrh	r3, [r3, #14]
 8014ad8:	b29a      	uxth	r2, r3
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014aec:	429a      	cmp	r2, r3
 8014aee:	d205      	bcs.n	8014afc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014afc:	4b69      	ldr	r3, [pc, #420]	; (8014ca4 <tcp_receive+0x26c>)
 8014afe:	681a      	ldr	r2, [r3, #0]
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014b04:	4b68      	ldr	r3, [pc, #416]	; (8014ca8 <tcp_receive+0x270>)
 8014b06:	681a      	ldr	r2, [r3, #0]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014b0c:	4b66      	ldr	r3, [pc, #408]	; (8014ca8 <tcp_receive+0x270>)
 8014b0e:	681a      	ldr	r2, [r3, #0]
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b14:	1ad3      	subs	r3, r2, r3
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	dc58      	bgt.n	8014bcc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014b1a:	4b65      	ldr	r3, [pc, #404]	; (8014cb0 <tcp_receive+0x278>)
 8014b1c:	881b      	ldrh	r3, [r3, #0]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d14b      	bne.n	8014bba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b26:	687a      	ldr	r2, [r7, #4]
 8014b28:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014b2c:	4413      	add	r3, r2
 8014b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b30:	429a      	cmp	r2, r3
 8014b32:	d142      	bne.n	8014bba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	db3d      	blt.n	8014bba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014b42:	4b59      	ldr	r3, [pc, #356]	; (8014ca8 <tcp_receive+0x270>)
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	429a      	cmp	r2, r3
 8014b48:	d137      	bne.n	8014bba <tcp_receive+0x182>
              found_dupack = 1;
 8014b4a:	2301      	movs	r3, #1
 8014b4c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014b54:	2bff      	cmp	r3, #255	; 0xff
 8014b56:	d007      	beq.n	8014b68 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014b5e:	3301      	adds	r3, #1
 8014b60:	b2da      	uxtb	r2, r3
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014b6e:	2b03      	cmp	r3, #3
 8014b70:	d91b      	bls.n	8014baa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b7c:	4413      	add	r3, r2
 8014b7e:	b29a      	uxth	r2, r3
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014b86:	429a      	cmp	r2, r3
 8014b88:	d30a      	bcc.n	8014ba0 <tcp_receive+0x168>
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b94:	4413      	add	r3, r2
 8014b96:	b29a      	uxth	r2, r3
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014b9e:	e004      	b.n	8014baa <tcp_receive+0x172>
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ba6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014bb0:	2b02      	cmp	r3, #2
 8014bb2:	d902      	bls.n	8014bba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f002 fb45 	bl	8017244 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	f040 8161 	bne.w	8014e84 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014bca:	e15b      	b.n	8014e84 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014bcc:	4b36      	ldr	r3, [pc, #216]	; (8014ca8 <tcp_receive+0x270>)
 8014bce:	681a      	ldr	r2, [r3, #0]
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bd4:	1ad3      	subs	r3, r2, r3
 8014bd6:	3b01      	subs	r3, #1
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	f2c0 814e 	blt.w	8014e7a <tcp_receive+0x442>
 8014bde:	4b32      	ldr	r3, [pc, #200]	; (8014ca8 <tcp_receive+0x270>)
 8014be0:	681a      	ldr	r2, [r3, #0]
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014be6:	1ad3      	subs	r3, r2, r3
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	f300 8146 	bgt.w	8014e7a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	8b5b      	ldrh	r3, [r3, #26]
 8014bf2:	f003 0304 	and.w	r3, r3, #4
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d010      	beq.n	8014c1c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	8b5b      	ldrh	r3, [r3, #26]
 8014bfe:	f023 0304 	bic.w	r3, r3, #4
 8014c02:	b29a      	uxth	r2, r3
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2200      	movs	r2, #0
 8014c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2200      	movs	r2, #0
 8014c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014c2a:	10db      	asrs	r3, r3, #3
 8014c2c:	b21b      	sxth	r3, r3
 8014c2e:	b29a      	uxth	r2, r3
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014c36:	b29b      	uxth	r3, r3
 8014c38:	4413      	add	r3, r2
 8014c3a:	b29b      	uxth	r3, r3
 8014c3c:	b21a      	sxth	r2, r3
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014c44:	4b18      	ldr	r3, [pc, #96]	; (8014ca8 <tcp_receive+0x270>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	b29a      	uxth	r2, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c4e:	b29b      	uxth	r3, r3
 8014c50:	1ad3      	subs	r3, r2, r3
 8014c52:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2200      	movs	r2, #0
 8014c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014c5c:	4b12      	ldr	r3, [pc, #72]	; (8014ca8 <tcp_receive+0x270>)
 8014c5e:	681a      	ldr	r2, [r3, #0]
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	7d1b      	ldrb	r3, [r3, #20]
 8014c68:	2b03      	cmp	r3, #3
 8014c6a:	f240 8097 	bls.w	8014d9c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d245      	bcs.n	8014d0a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	8b5b      	ldrh	r3, [r3, #26]
 8014c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d014      	beq.n	8014cb4 <tcp_receive+0x27c>
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	e013      	b.n	8014cb6 <tcp_receive+0x27e>
 8014c8e:	bf00      	nop
 8014c90:	0801eca0 	.word	0x0801eca0
 8014c94:	0801efd0 	.word	0x0801efd0
 8014c98:	0801ecec 	.word	0x0801ecec
 8014c9c:	0801efec 	.word	0x0801efec
 8014ca0:	2001dd28 	.word	0x2001dd28
 8014ca4:	2001dd1c 	.word	0x2001dd1c
 8014ca8:	2001dd20 	.word	0x2001dd20
 8014cac:	2001dd0c 	.word	0x2001dd0c
 8014cb0:	2001dd26 	.word	0x2001dd26
 8014cb4:	2302      	movs	r3, #2
 8014cb6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014cba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014cbe:	b29a      	uxth	r2, r3
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014cc4:	fb12 f303 	smulbb	r3, r2, r3
 8014cc8:	b29b      	uxth	r3, r3
 8014cca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014ccc:	4293      	cmp	r3, r2
 8014cce:	bf28      	it	cs
 8014cd0:	4613      	movcs	r3, r2
 8014cd2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014cda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014cdc:	4413      	add	r3, r2
 8014cde:	b29a      	uxth	r2, r3
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d309      	bcc.n	8014cfe <tcp_receive+0x2c6>
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014cf0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014cf2:	4413      	add	r3, r2
 8014cf4:	b29a      	uxth	r2, r3
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014cfc:	e04e      	b.n	8014d9c <tcp_receive+0x364>
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014d08:	e048      	b.n	8014d9c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014d10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014d12:	4413      	add	r3, r2
 8014d14:	b29a      	uxth	r2, r3
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d309      	bcc.n	8014d34 <tcp_receive+0x2fc>
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014d26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014d28:	4413      	add	r3, r2
 8014d2a:	b29a      	uxth	r2, r3
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014d32:	e004      	b.n	8014d3e <tcp_receive+0x306>
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d326      	bcc.n	8014d9c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d5a:	1ad3      	subs	r3, r2, r3
 8014d5c:	b29a      	uxth	r2, r3
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d6e:	4413      	add	r3, r2
 8014d70:	b29a      	uxth	r2, r3
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d78:	429a      	cmp	r2, r3
 8014d7a:	d30a      	bcc.n	8014d92 <tcp_receive+0x35a>
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d86:	4413      	add	r3, r2
 8014d88:	b29a      	uxth	r2, r3
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014d90:	e004      	b.n	8014d9c <tcp_receive+0x364>
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014da4:	4a98      	ldr	r2, [pc, #608]	; (8015008 <tcp_receive+0x5d0>)
 8014da6:	6878      	ldr	r0, [r7, #4]
 8014da8:	f7ff fdca 	bl	8014940 <tcp_free_acked_segments>
 8014dac:	4602      	mov	r2, r0
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dba:	4a94      	ldr	r2, [pc, #592]	; (801500c <tcp_receive+0x5d4>)
 8014dbc:	6878      	ldr	r0, [r7, #4]
 8014dbe:	f7ff fdbf 	bl	8014940 <tcp_free_acked_segments>
 8014dc2:	4602      	mov	r2, r0
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d104      	bne.n	8014dda <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014dd6:	861a      	strh	r2, [r3, #48]	; 0x30
 8014dd8:	e002      	b.n	8014de0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	2200      	movs	r2, #0
 8014dde:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	2200      	movs	r2, #0
 8014de4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d103      	bne.n	8014df6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	2200      	movs	r2, #0
 8014df2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014dfc:	4b84      	ldr	r3, [pc, #528]	; (8015010 <tcp_receive+0x5d8>)
 8014dfe:	881b      	ldrh	r3, [r3, #0]
 8014e00:	4413      	add	r3, r2
 8014e02:	b29a      	uxth	r2, r3
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	8b5b      	ldrh	r3, [r3, #26]
 8014e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d035      	beq.n	8014e82 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d118      	bne.n	8014e50 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d00c      	beq.n	8014e40 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e2e:	68db      	ldr	r3, [r3, #12]
 8014e30:	685b      	ldr	r3, [r3, #4]
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7fa fdf7 	bl	800fa26 <lwip_htonl>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	dc20      	bgt.n	8014e82 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	8b5b      	ldrh	r3, [r3, #26]
 8014e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014e48:	b29a      	uxth	r2, r3
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014e4e:	e018      	b.n	8014e82 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e58:	68db      	ldr	r3, [r3, #12]
 8014e5a:	685b      	ldr	r3, [r3, #4]
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7fa fde2 	bl	800fa26 <lwip_htonl>
 8014e62:	4603      	mov	r3, r0
 8014e64:	1ae3      	subs	r3, r4, r3
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	dc0b      	bgt.n	8014e82 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	8b5b      	ldrh	r3, [r3, #26]
 8014e6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014e72:	b29a      	uxth	r2, r3
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014e78:	e003      	b.n	8014e82 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	f002 fbce 	bl	801761c <tcp_send_empty_ack>
 8014e80:	e000      	b.n	8014e84 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014e82:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d05b      	beq.n	8014f44 <tcp_receive+0x50c>
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014e90:	4b60      	ldr	r3, [pc, #384]	; (8015014 <tcp_receive+0x5dc>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	1ad3      	subs	r3, r2, r3
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	da54      	bge.n	8014f44 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014e9a:	4b5f      	ldr	r3, [pc, #380]	; (8015018 <tcp_receive+0x5e0>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	b29a      	uxth	r2, r3
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ea4:	b29b      	uxth	r3, r3
 8014ea6:	1ad3      	subs	r3, r2, r3
 8014ea8:	b29b      	uxth	r3, r3
 8014eaa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014eae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014eb8:	10db      	asrs	r3, r3, #3
 8014eba:	b21b      	sxth	r3, r3
 8014ebc:	b29b      	uxth	r3, r3
 8014ebe:	1ad3      	subs	r3, r2, r3
 8014ec0:	b29b      	uxth	r3, r3
 8014ec2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014ecc:	b29a      	uxth	r2, r3
 8014ece:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014ed2:	4413      	add	r3, r2
 8014ed4:	b29b      	uxth	r3, r3
 8014ed6:	b21a      	sxth	r2, r3
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014edc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	da05      	bge.n	8014ef0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014ee4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014ee8:	425b      	negs	r3, r3
 8014eea:	b29b      	uxth	r3, r3
 8014eec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014ef0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014efa:	109b      	asrs	r3, r3, #2
 8014efc:	b21b      	sxth	r3, r3
 8014efe:	b29b      	uxth	r3, r3
 8014f00:	1ad3      	subs	r3, r2, r3
 8014f02:	b29b      	uxth	r3, r3
 8014f04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014f0e:	b29a      	uxth	r2, r3
 8014f10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014f14:	4413      	add	r3, r2
 8014f16:	b29b      	uxth	r3, r3
 8014f18:	b21a      	sxth	r2, r3
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014f24:	10db      	asrs	r3, r3, #3
 8014f26:	b21b      	sxth	r3, r3
 8014f28:	b29a      	uxth	r2, r3
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014f30:	b29b      	uxth	r3, r3
 8014f32:	4413      	add	r3, r2
 8014f34:	b29b      	uxth	r3, r3
 8014f36:	b21a      	sxth	r2, r3
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	2200      	movs	r2, #0
 8014f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014f44:	4b35      	ldr	r3, [pc, #212]	; (801501c <tcp_receive+0x5e4>)
 8014f46:	881b      	ldrh	r3, [r3, #0]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	f000 84e2 	beq.w	8015912 <tcp_receive+0xeda>
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	7d1b      	ldrb	r3, [r3, #20]
 8014f52:	2b06      	cmp	r3, #6
 8014f54:	f200 84dd 	bhi.w	8015912 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f5c:	4b30      	ldr	r3, [pc, #192]	; (8015020 <tcp_receive+0x5e8>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	1ad3      	subs	r3, r2, r3
 8014f62:	3b01      	subs	r3, #1
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	f2c0 808f 	blt.w	8015088 <tcp_receive+0x650>
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f6e:	4b2b      	ldr	r3, [pc, #172]	; (801501c <tcp_receive+0x5e4>)
 8014f70:	881b      	ldrh	r3, [r3, #0]
 8014f72:	4619      	mov	r1, r3
 8014f74:	4b2a      	ldr	r3, [pc, #168]	; (8015020 <tcp_receive+0x5e8>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	440b      	add	r3, r1
 8014f7a:	1ad3      	subs	r3, r2, r3
 8014f7c:	3301      	adds	r3, #1
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	f300 8082 	bgt.w	8015088 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014f84:	4b27      	ldr	r3, [pc, #156]	; (8015024 <tcp_receive+0x5ec>)
 8014f86:	685b      	ldr	r3, [r3, #4]
 8014f88:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f8e:	4b24      	ldr	r3, [pc, #144]	; (8015020 <tcp_receive+0x5e8>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	1ad3      	subs	r3, r2, r3
 8014f94:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014f96:	4b23      	ldr	r3, [pc, #140]	; (8015024 <tcp_receive+0x5ec>)
 8014f98:	685b      	ldr	r3, [r3, #4]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d106      	bne.n	8014fac <tcp_receive+0x574>
 8014f9e:	4b22      	ldr	r3, [pc, #136]	; (8015028 <tcp_receive+0x5f0>)
 8014fa0:	f240 5294 	movw	r2, #1428	; 0x594
 8014fa4:	4921      	ldr	r1, [pc, #132]	; (801502c <tcp_receive+0x5f4>)
 8014fa6:	4822      	ldr	r0, [pc, #136]	; (8015030 <tcp_receive+0x5f8>)
 8014fa8:	f006 f92e 	bl	801b208 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014fb2:	4293      	cmp	r3, r2
 8014fb4:	d906      	bls.n	8014fc4 <tcp_receive+0x58c>
 8014fb6:	4b1c      	ldr	r3, [pc, #112]	; (8015028 <tcp_receive+0x5f0>)
 8014fb8:	f240 5295 	movw	r2, #1429	; 0x595
 8014fbc:	491d      	ldr	r1, [pc, #116]	; (8015034 <tcp_receive+0x5fc>)
 8014fbe:	481c      	ldr	r0, [pc, #112]	; (8015030 <tcp_receive+0x5f8>)
 8014fc0:	f006 f922 	bl	801b208 <iprintf>
      off = (u16_t)off32;
 8014fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014fca:	4b16      	ldr	r3, [pc, #88]	; (8015024 <tcp_receive+0x5ec>)
 8014fcc:	685b      	ldr	r3, [r3, #4]
 8014fce:	891b      	ldrh	r3, [r3, #8]
 8014fd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d906      	bls.n	8014fe6 <tcp_receive+0x5ae>
 8014fd8:	4b13      	ldr	r3, [pc, #76]	; (8015028 <tcp_receive+0x5f0>)
 8014fda:	f240 5297 	movw	r2, #1431	; 0x597
 8014fde:	4916      	ldr	r1, [pc, #88]	; (8015038 <tcp_receive+0x600>)
 8014fe0:	4813      	ldr	r0, [pc, #76]	; (8015030 <tcp_receive+0x5f8>)
 8014fe2:	f006 f911 	bl	801b208 <iprintf>
      inseg.len -= off;
 8014fe6:	4b0f      	ldr	r3, [pc, #60]	; (8015024 <tcp_receive+0x5ec>)
 8014fe8:	891a      	ldrh	r2, [r3, #8]
 8014fea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014fee:	1ad3      	subs	r3, r2, r3
 8014ff0:	b29a      	uxth	r2, r3
 8014ff2:	4b0c      	ldr	r3, [pc, #48]	; (8015024 <tcp_receive+0x5ec>)
 8014ff4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014ff6:	4b0b      	ldr	r3, [pc, #44]	; (8015024 <tcp_receive+0x5ec>)
 8014ff8:	685b      	ldr	r3, [r3, #4]
 8014ffa:	891a      	ldrh	r2, [r3, #8]
 8014ffc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015000:	1ad3      	subs	r3, r2, r3
 8015002:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015004:	e02a      	b.n	801505c <tcp_receive+0x624>
 8015006:	bf00      	nop
 8015008:	0801f008 	.word	0x0801f008
 801500c:	0801f010 	.word	0x0801f010
 8015010:	2001dd24 	.word	0x2001dd24
 8015014:	2001dd20 	.word	0x2001dd20
 8015018:	2001dce4 	.word	0x2001dce4
 801501c:	2001dd26 	.word	0x2001dd26
 8015020:	2001dd1c 	.word	0x2001dd1c
 8015024:	2001dcfc 	.word	0x2001dcfc
 8015028:	0801eca0 	.word	0x0801eca0
 801502c:	0801f018 	.word	0x0801f018
 8015030:	0801ecec 	.word	0x0801ecec
 8015034:	0801f028 	.word	0x0801f028
 8015038:	0801f038 	.word	0x0801f038
        off -= p->len;
 801503c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801503e:	895b      	ldrh	r3, [r3, #10]
 8015040:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015044:	1ad3      	subs	r3, r2, r3
 8015046:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801504a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801504c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801504e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015052:	2200      	movs	r2, #0
 8015054:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801505c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801505e:	895b      	ldrh	r3, [r3, #10]
 8015060:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015064:	429a      	cmp	r2, r3
 8015066:	d8e9      	bhi.n	801503c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015068:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801506c:	4619      	mov	r1, r3
 801506e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015070:	f7fc f85c 	bl	801112c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015078:	4a91      	ldr	r2, [pc, #580]	; (80152c0 <tcp_receive+0x888>)
 801507a:	6013      	str	r3, [r2, #0]
 801507c:	4b91      	ldr	r3, [pc, #580]	; (80152c4 <tcp_receive+0x88c>)
 801507e:	68db      	ldr	r3, [r3, #12]
 8015080:	4a8f      	ldr	r2, [pc, #572]	; (80152c0 <tcp_receive+0x888>)
 8015082:	6812      	ldr	r2, [r2, #0]
 8015084:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015086:	e00d      	b.n	80150a4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015088:	4b8d      	ldr	r3, [pc, #564]	; (80152c0 <tcp_receive+0x888>)
 801508a:	681a      	ldr	r2, [r3, #0]
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015090:	1ad3      	subs	r3, r2, r3
 8015092:	2b00      	cmp	r3, #0
 8015094:	da06      	bge.n	80150a4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	8b5b      	ldrh	r3, [r3, #26]
 801509a:	f043 0302 	orr.w	r3, r3, #2
 801509e:	b29a      	uxth	r2, r3
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80150a4:	4b86      	ldr	r3, [pc, #536]	; (80152c0 <tcp_receive+0x888>)
 80150a6:	681a      	ldr	r2, [r3, #0]
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150ac:	1ad3      	subs	r3, r2, r3
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	f2c0 842a 	blt.w	8015908 <tcp_receive+0xed0>
 80150b4:	4b82      	ldr	r3, [pc, #520]	; (80152c0 <tcp_receive+0x888>)
 80150b6:	681a      	ldr	r2, [r3, #0]
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150bc:	6879      	ldr	r1, [r7, #4]
 80150be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80150c0:	440b      	add	r3, r1
 80150c2:	1ad3      	subs	r3, r2, r3
 80150c4:	3301      	adds	r3, #1
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	f300 841e 	bgt.w	8015908 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80150d0:	4b7b      	ldr	r3, [pc, #492]	; (80152c0 <tcp_receive+0x888>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	429a      	cmp	r2, r3
 80150d6:	f040 829a 	bne.w	801560e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80150da:	4b7a      	ldr	r3, [pc, #488]	; (80152c4 <tcp_receive+0x88c>)
 80150dc:	891c      	ldrh	r4, [r3, #8]
 80150de:	4b79      	ldr	r3, [pc, #484]	; (80152c4 <tcp_receive+0x88c>)
 80150e0:	68db      	ldr	r3, [r3, #12]
 80150e2:	899b      	ldrh	r3, [r3, #12]
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	4618      	mov	r0, r3
 80150e8:	f7fa fc88 	bl	800f9fc <lwip_htons>
 80150ec:	4603      	mov	r3, r0
 80150ee:	b2db      	uxtb	r3, r3
 80150f0:	f003 0303 	and.w	r3, r3, #3
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d001      	beq.n	80150fc <tcp_receive+0x6c4>
 80150f8:	2301      	movs	r3, #1
 80150fa:	e000      	b.n	80150fe <tcp_receive+0x6c6>
 80150fc:	2300      	movs	r3, #0
 80150fe:	4423      	add	r3, r4
 8015100:	b29a      	uxth	r2, r3
 8015102:	4b71      	ldr	r3, [pc, #452]	; (80152c8 <tcp_receive+0x890>)
 8015104:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801510a:	4b6f      	ldr	r3, [pc, #444]	; (80152c8 <tcp_receive+0x890>)
 801510c:	881b      	ldrh	r3, [r3, #0]
 801510e:	429a      	cmp	r2, r3
 8015110:	d275      	bcs.n	80151fe <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015112:	4b6c      	ldr	r3, [pc, #432]	; (80152c4 <tcp_receive+0x88c>)
 8015114:	68db      	ldr	r3, [r3, #12]
 8015116:	899b      	ldrh	r3, [r3, #12]
 8015118:	b29b      	uxth	r3, r3
 801511a:	4618      	mov	r0, r3
 801511c:	f7fa fc6e 	bl	800f9fc <lwip_htons>
 8015120:	4603      	mov	r3, r0
 8015122:	b2db      	uxtb	r3, r3
 8015124:	f003 0301 	and.w	r3, r3, #1
 8015128:	2b00      	cmp	r3, #0
 801512a:	d01f      	beq.n	801516c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801512c:	4b65      	ldr	r3, [pc, #404]	; (80152c4 <tcp_receive+0x88c>)
 801512e:	68db      	ldr	r3, [r3, #12]
 8015130:	899b      	ldrh	r3, [r3, #12]
 8015132:	b29b      	uxth	r3, r3
 8015134:	b21b      	sxth	r3, r3
 8015136:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801513a:	b21c      	sxth	r4, r3
 801513c:	4b61      	ldr	r3, [pc, #388]	; (80152c4 <tcp_receive+0x88c>)
 801513e:	68db      	ldr	r3, [r3, #12]
 8015140:	899b      	ldrh	r3, [r3, #12]
 8015142:	b29b      	uxth	r3, r3
 8015144:	4618      	mov	r0, r3
 8015146:	f7fa fc59 	bl	800f9fc <lwip_htons>
 801514a:	4603      	mov	r3, r0
 801514c:	b2db      	uxtb	r3, r3
 801514e:	b29b      	uxth	r3, r3
 8015150:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015154:	b29b      	uxth	r3, r3
 8015156:	4618      	mov	r0, r3
 8015158:	f7fa fc50 	bl	800f9fc <lwip_htons>
 801515c:	4603      	mov	r3, r0
 801515e:	b21b      	sxth	r3, r3
 8015160:	4323      	orrs	r3, r4
 8015162:	b21a      	sxth	r2, r3
 8015164:	4b57      	ldr	r3, [pc, #348]	; (80152c4 <tcp_receive+0x88c>)
 8015166:	68db      	ldr	r3, [r3, #12]
 8015168:	b292      	uxth	r2, r2
 801516a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015170:	4b54      	ldr	r3, [pc, #336]	; (80152c4 <tcp_receive+0x88c>)
 8015172:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015174:	4b53      	ldr	r3, [pc, #332]	; (80152c4 <tcp_receive+0x88c>)
 8015176:	68db      	ldr	r3, [r3, #12]
 8015178:	899b      	ldrh	r3, [r3, #12]
 801517a:	b29b      	uxth	r3, r3
 801517c:	4618      	mov	r0, r3
 801517e:	f7fa fc3d 	bl	800f9fc <lwip_htons>
 8015182:	4603      	mov	r3, r0
 8015184:	b2db      	uxtb	r3, r3
 8015186:	f003 0302 	and.w	r3, r3, #2
 801518a:	2b00      	cmp	r3, #0
 801518c:	d005      	beq.n	801519a <tcp_receive+0x762>
            inseg.len -= 1;
 801518e:	4b4d      	ldr	r3, [pc, #308]	; (80152c4 <tcp_receive+0x88c>)
 8015190:	891b      	ldrh	r3, [r3, #8]
 8015192:	3b01      	subs	r3, #1
 8015194:	b29a      	uxth	r2, r3
 8015196:	4b4b      	ldr	r3, [pc, #300]	; (80152c4 <tcp_receive+0x88c>)
 8015198:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801519a:	4b4a      	ldr	r3, [pc, #296]	; (80152c4 <tcp_receive+0x88c>)
 801519c:	685b      	ldr	r3, [r3, #4]
 801519e:	4a49      	ldr	r2, [pc, #292]	; (80152c4 <tcp_receive+0x88c>)
 80151a0:	8912      	ldrh	r2, [r2, #8]
 80151a2:	4611      	mov	r1, r2
 80151a4:	4618      	mov	r0, r3
 80151a6:	f7fb fec1 	bl	8010f2c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80151aa:	4b46      	ldr	r3, [pc, #280]	; (80152c4 <tcp_receive+0x88c>)
 80151ac:	891c      	ldrh	r4, [r3, #8]
 80151ae:	4b45      	ldr	r3, [pc, #276]	; (80152c4 <tcp_receive+0x88c>)
 80151b0:	68db      	ldr	r3, [r3, #12]
 80151b2:	899b      	ldrh	r3, [r3, #12]
 80151b4:	b29b      	uxth	r3, r3
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7fa fc20 	bl	800f9fc <lwip_htons>
 80151bc:	4603      	mov	r3, r0
 80151be:	b2db      	uxtb	r3, r3
 80151c0:	f003 0303 	and.w	r3, r3, #3
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d001      	beq.n	80151cc <tcp_receive+0x794>
 80151c8:	2301      	movs	r3, #1
 80151ca:	e000      	b.n	80151ce <tcp_receive+0x796>
 80151cc:	2300      	movs	r3, #0
 80151ce:	4423      	add	r3, r4
 80151d0:	b29a      	uxth	r2, r3
 80151d2:	4b3d      	ldr	r3, [pc, #244]	; (80152c8 <tcp_receive+0x890>)
 80151d4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80151d6:	4b3c      	ldr	r3, [pc, #240]	; (80152c8 <tcp_receive+0x890>)
 80151d8:	881b      	ldrh	r3, [r3, #0]
 80151da:	461a      	mov	r2, r3
 80151dc:	4b38      	ldr	r3, [pc, #224]	; (80152c0 <tcp_receive+0x888>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	441a      	add	r2, r3
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151e6:	6879      	ldr	r1, [r7, #4]
 80151e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80151ea:	440b      	add	r3, r1
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d006      	beq.n	80151fe <tcp_receive+0x7c6>
 80151f0:	4b36      	ldr	r3, [pc, #216]	; (80152cc <tcp_receive+0x894>)
 80151f2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80151f6:	4936      	ldr	r1, [pc, #216]	; (80152d0 <tcp_receive+0x898>)
 80151f8:	4836      	ldr	r0, [pc, #216]	; (80152d4 <tcp_receive+0x89c>)
 80151fa:	f006 f805 	bl	801b208 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015202:	2b00      	cmp	r3, #0
 8015204:	f000 80e7 	beq.w	80153d6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015208:	4b2e      	ldr	r3, [pc, #184]	; (80152c4 <tcp_receive+0x88c>)
 801520a:	68db      	ldr	r3, [r3, #12]
 801520c:	899b      	ldrh	r3, [r3, #12]
 801520e:	b29b      	uxth	r3, r3
 8015210:	4618      	mov	r0, r3
 8015212:	f7fa fbf3 	bl	800f9fc <lwip_htons>
 8015216:	4603      	mov	r3, r0
 8015218:	b2db      	uxtb	r3, r3
 801521a:	f003 0301 	and.w	r3, r3, #1
 801521e:	2b00      	cmp	r3, #0
 8015220:	d010      	beq.n	8015244 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015222:	e00a      	b.n	801523a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015228:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015234:	68f8      	ldr	r0, [r7, #12]
 8015236:	f7fd fcdc 	bl	8012bf2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801523e:	2b00      	cmp	r3, #0
 8015240:	d1f0      	bne.n	8015224 <tcp_receive+0x7ec>
 8015242:	e0c8      	b.n	80153d6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015248:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801524a:	e052      	b.n	80152f2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801524c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801524e:	68db      	ldr	r3, [r3, #12]
 8015250:	899b      	ldrh	r3, [r3, #12]
 8015252:	b29b      	uxth	r3, r3
 8015254:	4618      	mov	r0, r3
 8015256:	f7fa fbd1 	bl	800f9fc <lwip_htons>
 801525a:	4603      	mov	r3, r0
 801525c:	b2db      	uxtb	r3, r3
 801525e:	f003 0301 	and.w	r3, r3, #1
 8015262:	2b00      	cmp	r3, #0
 8015264:	d03d      	beq.n	80152e2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015266:	4b17      	ldr	r3, [pc, #92]	; (80152c4 <tcp_receive+0x88c>)
 8015268:	68db      	ldr	r3, [r3, #12]
 801526a:	899b      	ldrh	r3, [r3, #12]
 801526c:	b29b      	uxth	r3, r3
 801526e:	4618      	mov	r0, r3
 8015270:	f7fa fbc4 	bl	800f9fc <lwip_htons>
 8015274:	4603      	mov	r3, r0
 8015276:	b2db      	uxtb	r3, r3
 8015278:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801527c:	2b00      	cmp	r3, #0
 801527e:	d130      	bne.n	80152e2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015280:	4b10      	ldr	r3, [pc, #64]	; (80152c4 <tcp_receive+0x88c>)
 8015282:	68db      	ldr	r3, [r3, #12]
 8015284:	899b      	ldrh	r3, [r3, #12]
 8015286:	b29c      	uxth	r4, r3
 8015288:	2001      	movs	r0, #1
 801528a:	f7fa fbb7 	bl	800f9fc <lwip_htons>
 801528e:	4603      	mov	r3, r0
 8015290:	461a      	mov	r2, r3
 8015292:	4b0c      	ldr	r3, [pc, #48]	; (80152c4 <tcp_receive+0x88c>)
 8015294:	68db      	ldr	r3, [r3, #12]
 8015296:	4322      	orrs	r2, r4
 8015298:	b292      	uxth	r2, r2
 801529a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801529c:	4b09      	ldr	r3, [pc, #36]	; (80152c4 <tcp_receive+0x88c>)
 801529e:	891c      	ldrh	r4, [r3, #8]
 80152a0:	4b08      	ldr	r3, [pc, #32]	; (80152c4 <tcp_receive+0x88c>)
 80152a2:	68db      	ldr	r3, [r3, #12]
 80152a4:	899b      	ldrh	r3, [r3, #12]
 80152a6:	b29b      	uxth	r3, r3
 80152a8:	4618      	mov	r0, r3
 80152aa:	f7fa fba7 	bl	800f9fc <lwip_htons>
 80152ae:	4603      	mov	r3, r0
 80152b0:	b2db      	uxtb	r3, r3
 80152b2:	f003 0303 	and.w	r3, r3, #3
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d00e      	beq.n	80152d8 <tcp_receive+0x8a0>
 80152ba:	2301      	movs	r3, #1
 80152bc:	e00d      	b.n	80152da <tcp_receive+0x8a2>
 80152be:	bf00      	nop
 80152c0:	2001dd1c 	.word	0x2001dd1c
 80152c4:	2001dcfc 	.word	0x2001dcfc
 80152c8:	2001dd26 	.word	0x2001dd26
 80152cc:	0801eca0 	.word	0x0801eca0
 80152d0:	0801f048 	.word	0x0801f048
 80152d4:	0801ecec 	.word	0x0801ecec
 80152d8:	2300      	movs	r3, #0
 80152da:	4423      	add	r3, r4
 80152dc:	b29a      	uxth	r2, r3
 80152de:	4b98      	ldr	r3, [pc, #608]	; (8015540 <tcp_receive+0xb08>)
 80152e0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80152e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152e4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80152e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80152ec:	6938      	ldr	r0, [r7, #16]
 80152ee:	f7fd fc80 	bl	8012bf2 <tcp_seg_free>
            while (next &&
 80152f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d00e      	beq.n	8015316 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80152f8:	4b91      	ldr	r3, [pc, #580]	; (8015540 <tcp_receive+0xb08>)
 80152fa:	881b      	ldrh	r3, [r3, #0]
 80152fc:	461a      	mov	r2, r3
 80152fe:	4b91      	ldr	r3, [pc, #580]	; (8015544 <tcp_receive+0xb0c>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	441a      	add	r2, r3
 8015304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015306:	68db      	ldr	r3, [r3, #12]
 8015308:	685b      	ldr	r3, [r3, #4]
 801530a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801530c:	8909      	ldrh	r1, [r1, #8]
 801530e:	440b      	add	r3, r1
 8015310:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015312:	2b00      	cmp	r3, #0
 8015314:	da9a      	bge.n	801524c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015318:	2b00      	cmp	r3, #0
 801531a:	d059      	beq.n	80153d0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801531c:	4b88      	ldr	r3, [pc, #544]	; (8015540 <tcp_receive+0xb08>)
 801531e:	881b      	ldrh	r3, [r3, #0]
 8015320:	461a      	mov	r2, r3
 8015322:	4b88      	ldr	r3, [pc, #544]	; (8015544 <tcp_receive+0xb0c>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	441a      	add	r2, r3
 8015328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801532a:	68db      	ldr	r3, [r3, #12]
 801532c:	685b      	ldr	r3, [r3, #4]
 801532e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015330:	2b00      	cmp	r3, #0
 8015332:	dd4d      	ble.n	80153d0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015336:	68db      	ldr	r3, [r3, #12]
 8015338:	685b      	ldr	r3, [r3, #4]
 801533a:	b29a      	uxth	r2, r3
 801533c:	4b81      	ldr	r3, [pc, #516]	; (8015544 <tcp_receive+0xb0c>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	b29b      	uxth	r3, r3
 8015342:	1ad3      	subs	r3, r2, r3
 8015344:	b29a      	uxth	r2, r3
 8015346:	4b80      	ldr	r3, [pc, #512]	; (8015548 <tcp_receive+0xb10>)
 8015348:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801534a:	4b7f      	ldr	r3, [pc, #508]	; (8015548 <tcp_receive+0xb10>)
 801534c:	68db      	ldr	r3, [r3, #12]
 801534e:	899b      	ldrh	r3, [r3, #12]
 8015350:	b29b      	uxth	r3, r3
 8015352:	4618      	mov	r0, r3
 8015354:	f7fa fb52 	bl	800f9fc <lwip_htons>
 8015358:	4603      	mov	r3, r0
 801535a:	b2db      	uxtb	r3, r3
 801535c:	f003 0302 	and.w	r3, r3, #2
 8015360:	2b00      	cmp	r3, #0
 8015362:	d005      	beq.n	8015370 <tcp_receive+0x938>
                inseg.len -= 1;
 8015364:	4b78      	ldr	r3, [pc, #480]	; (8015548 <tcp_receive+0xb10>)
 8015366:	891b      	ldrh	r3, [r3, #8]
 8015368:	3b01      	subs	r3, #1
 801536a:	b29a      	uxth	r2, r3
 801536c:	4b76      	ldr	r3, [pc, #472]	; (8015548 <tcp_receive+0xb10>)
 801536e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015370:	4b75      	ldr	r3, [pc, #468]	; (8015548 <tcp_receive+0xb10>)
 8015372:	685b      	ldr	r3, [r3, #4]
 8015374:	4a74      	ldr	r2, [pc, #464]	; (8015548 <tcp_receive+0xb10>)
 8015376:	8912      	ldrh	r2, [r2, #8]
 8015378:	4611      	mov	r1, r2
 801537a:	4618      	mov	r0, r3
 801537c:	f7fb fdd6 	bl	8010f2c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015380:	4b71      	ldr	r3, [pc, #452]	; (8015548 <tcp_receive+0xb10>)
 8015382:	891c      	ldrh	r4, [r3, #8]
 8015384:	4b70      	ldr	r3, [pc, #448]	; (8015548 <tcp_receive+0xb10>)
 8015386:	68db      	ldr	r3, [r3, #12]
 8015388:	899b      	ldrh	r3, [r3, #12]
 801538a:	b29b      	uxth	r3, r3
 801538c:	4618      	mov	r0, r3
 801538e:	f7fa fb35 	bl	800f9fc <lwip_htons>
 8015392:	4603      	mov	r3, r0
 8015394:	b2db      	uxtb	r3, r3
 8015396:	f003 0303 	and.w	r3, r3, #3
 801539a:	2b00      	cmp	r3, #0
 801539c:	d001      	beq.n	80153a2 <tcp_receive+0x96a>
 801539e:	2301      	movs	r3, #1
 80153a0:	e000      	b.n	80153a4 <tcp_receive+0x96c>
 80153a2:	2300      	movs	r3, #0
 80153a4:	4423      	add	r3, r4
 80153a6:	b29a      	uxth	r2, r3
 80153a8:	4b65      	ldr	r3, [pc, #404]	; (8015540 <tcp_receive+0xb08>)
 80153aa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80153ac:	4b64      	ldr	r3, [pc, #400]	; (8015540 <tcp_receive+0xb08>)
 80153ae:	881b      	ldrh	r3, [r3, #0]
 80153b0:	461a      	mov	r2, r3
 80153b2:	4b64      	ldr	r3, [pc, #400]	; (8015544 <tcp_receive+0xb0c>)
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	441a      	add	r2, r3
 80153b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153ba:	68db      	ldr	r3, [r3, #12]
 80153bc:	685b      	ldr	r3, [r3, #4]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d006      	beq.n	80153d0 <tcp_receive+0x998>
 80153c2:	4b62      	ldr	r3, [pc, #392]	; (801554c <tcp_receive+0xb14>)
 80153c4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80153c8:	4961      	ldr	r1, [pc, #388]	; (8015550 <tcp_receive+0xb18>)
 80153ca:	4862      	ldr	r0, [pc, #392]	; (8015554 <tcp_receive+0xb1c>)
 80153cc:	f005 ff1c 	bl	801b208 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80153d4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80153d6:	4b5a      	ldr	r3, [pc, #360]	; (8015540 <tcp_receive+0xb08>)
 80153d8:	881b      	ldrh	r3, [r3, #0]
 80153da:	461a      	mov	r2, r3
 80153dc:	4b59      	ldr	r3, [pc, #356]	; (8015544 <tcp_receive+0xb0c>)
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	441a      	add	r2, r3
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80153ea:	4b55      	ldr	r3, [pc, #340]	; (8015540 <tcp_receive+0xb08>)
 80153ec:	881b      	ldrh	r3, [r3, #0]
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d206      	bcs.n	8015400 <tcp_receive+0x9c8>
 80153f2:	4b56      	ldr	r3, [pc, #344]	; (801554c <tcp_receive+0xb14>)
 80153f4:	f240 6207 	movw	r2, #1543	; 0x607
 80153f8:	4957      	ldr	r1, [pc, #348]	; (8015558 <tcp_receive+0xb20>)
 80153fa:	4856      	ldr	r0, [pc, #344]	; (8015554 <tcp_receive+0xb1c>)
 80153fc:	f005 ff04 	bl	801b208 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015404:	4b4e      	ldr	r3, [pc, #312]	; (8015540 <tcp_receive+0xb08>)
 8015406:	881b      	ldrh	r3, [r3, #0]
 8015408:	1ad3      	subs	r3, r2, r3
 801540a:	b29a      	uxth	r2, r3
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f7fc fdad 	bl	8011f70 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015416:	4b4c      	ldr	r3, [pc, #304]	; (8015548 <tcp_receive+0xb10>)
 8015418:	685b      	ldr	r3, [r3, #4]
 801541a:	891b      	ldrh	r3, [r3, #8]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d006      	beq.n	801542e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8015420:	4b49      	ldr	r3, [pc, #292]	; (8015548 <tcp_receive+0xb10>)
 8015422:	685b      	ldr	r3, [r3, #4]
 8015424:	4a4d      	ldr	r2, [pc, #308]	; (801555c <tcp_receive+0xb24>)
 8015426:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015428:	4b47      	ldr	r3, [pc, #284]	; (8015548 <tcp_receive+0xb10>)
 801542a:	2200      	movs	r2, #0
 801542c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801542e:	4b46      	ldr	r3, [pc, #280]	; (8015548 <tcp_receive+0xb10>)
 8015430:	68db      	ldr	r3, [r3, #12]
 8015432:	899b      	ldrh	r3, [r3, #12]
 8015434:	b29b      	uxth	r3, r3
 8015436:	4618      	mov	r0, r3
 8015438:	f7fa fae0 	bl	800f9fc <lwip_htons>
 801543c:	4603      	mov	r3, r0
 801543e:	b2db      	uxtb	r3, r3
 8015440:	f003 0301 	and.w	r3, r3, #1
 8015444:	2b00      	cmp	r3, #0
 8015446:	f000 80b8 	beq.w	80155ba <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801544a:	4b45      	ldr	r3, [pc, #276]	; (8015560 <tcp_receive+0xb28>)
 801544c:	781b      	ldrb	r3, [r3, #0]
 801544e:	f043 0320 	orr.w	r3, r3, #32
 8015452:	b2da      	uxtb	r2, r3
 8015454:	4b42      	ldr	r3, [pc, #264]	; (8015560 <tcp_receive+0xb28>)
 8015456:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015458:	e0af      	b.n	80155ba <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801545e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015464:	68db      	ldr	r3, [r3, #12]
 8015466:	685b      	ldr	r3, [r3, #4]
 8015468:	4a36      	ldr	r2, [pc, #216]	; (8015544 <tcp_receive+0xb0c>)
 801546a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801546c:	68bb      	ldr	r3, [r7, #8]
 801546e:	891b      	ldrh	r3, [r3, #8]
 8015470:	461c      	mov	r4, r3
 8015472:	68bb      	ldr	r3, [r7, #8]
 8015474:	68db      	ldr	r3, [r3, #12]
 8015476:	899b      	ldrh	r3, [r3, #12]
 8015478:	b29b      	uxth	r3, r3
 801547a:	4618      	mov	r0, r3
 801547c:	f7fa fabe 	bl	800f9fc <lwip_htons>
 8015480:	4603      	mov	r3, r0
 8015482:	b2db      	uxtb	r3, r3
 8015484:	f003 0303 	and.w	r3, r3, #3
 8015488:	2b00      	cmp	r3, #0
 801548a:	d001      	beq.n	8015490 <tcp_receive+0xa58>
 801548c:	2301      	movs	r3, #1
 801548e:	e000      	b.n	8015492 <tcp_receive+0xa5a>
 8015490:	2300      	movs	r3, #0
 8015492:	191a      	adds	r2, r3, r4
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015498:	441a      	add	r2, r3
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80154a2:	461c      	mov	r4, r3
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	891b      	ldrh	r3, [r3, #8]
 80154a8:	461d      	mov	r5, r3
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	68db      	ldr	r3, [r3, #12]
 80154ae:	899b      	ldrh	r3, [r3, #12]
 80154b0:	b29b      	uxth	r3, r3
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7fa faa2 	bl	800f9fc <lwip_htons>
 80154b8:	4603      	mov	r3, r0
 80154ba:	b2db      	uxtb	r3, r3
 80154bc:	f003 0303 	and.w	r3, r3, #3
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d001      	beq.n	80154c8 <tcp_receive+0xa90>
 80154c4:	2301      	movs	r3, #1
 80154c6:	e000      	b.n	80154ca <tcp_receive+0xa92>
 80154c8:	2300      	movs	r3, #0
 80154ca:	442b      	add	r3, r5
 80154cc:	429c      	cmp	r4, r3
 80154ce:	d206      	bcs.n	80154de <tcp_receive+0xaa6>
 80154d0:	4b1e      	ldr	r3, [pc, #120]	; (801554c <tcp_receive+0xb14>)
 80154d2:	f240 622b 	movw	r2, #1579	; 0x62b
 80154d6:	4923      	ldr	r1, [pc, #140]	; (8015564 <tcp_receive+0xb2c>)
 80154d8:	481e      	ldr	r0, [pc, #120]	; (8015554 <tcp_receive+0xb1c>)
 80154da:	f005 fe95 	bl	801b208 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80154de:	68bb      	ldr	r3, [r7, #8]
 80154e0:	891b      	ldrh	r3, [r3, #8]
 80154e2:	461c      	mov	r4, r3
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	68db      	ldr	r3, [r3, #12]
 80154e8:	899b      	ldrh	r3, [r3, #12]
 80154ea:	b29b      	uxth	r3, r3
 80154ec:	4618      	mov	r0, r3
 80154ee:	f7fa fa85 	bl	800f9fc <lwip_htons>
 80154f2:	4603      	mov	r3, r0
 80154f4:	b2db      	uxtb	r3, r3
 80154f6:	f003 0303 	and.w	r3, r3, #3
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d001      	beq.n	8015502 <tcp_receive+0xaca>
 80154fe:	2301      	movs	r3, #1
 8015500:	e000      	b.n	8015504 <tcp_receive+0xacc>
 8015502:	2300      	movs	r3, #0
 8015504:	1919      	adds	r1, r3, r4
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801550a:	b28b      	uxth	r3, r1
 801550c:	1ad3      	subs	r3, r2, r3
 801550e:	b29a      	uxth	r2, r3
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015514:	6878      	ldr	r0, [r7, #4]
 8015516:	f7fc fd2b 	bl	8011f70 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	685b      	ldr	r3, [r3, #4]
 801551e:	891b      	ldrh	r3, [r3, #8]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d028      	beq.n	8015576 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015524:	4b0d      	ldr	r3, [pc, #52]	; (801555c <tcp_receive+0xb24>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d01d      	beq.n	8015568 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801552c:	4b0b      	ldr	r3, [pc, #44]	; (801555c <tcp_receive+0xb24>)
 801552e:	681a      	ldr	r2, [r3, #0]
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	685b      	ldr	r3, [r3, #4]
 8015534:	4619      	mov	r1, r3
 8015536:	4610      	mov	r0, r2
 8015538:	f7fb ff4c 	bl	80113d4 <pbuf_cat>
 801553c:	e018      	b.n	8015570 <tcp_receive+0xb38>
 801553e:	bf00      	nop
 8015540:	2001dd26 	.word	0x2001dd26
 8015544:	2001dd1c 	.word	0x2001dd1c
 8015548:	2001dcfc 	.word	0x2001dcfc
 801554c:	0801eca0 	.word	0x0801eca0
 8015550:	0801f080 	.word	0x0801f080
 8015554:	0801ecec 	.word	0x0801ecec
 8015558:	0801f0bc 	.word	0x0801f0bc
 801555c:	2001dd2c 	.word	0x2001dd2c
 8015560:	2001dd29 	.word	0x2001dd29
 8015564:	0801f0dc 	.word	0x0801f0dc
            } else {
              recv_data = cseg->p;
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	685b      	ldr	r3, [r3, #4]
 801556c:	4a70      	ldr	r2, [pc, #448]	; (8015730 <tcp_receive+0xcf8>)
 801556e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015570:	68bb      	ldr	r3, [r7, #8]
 8015572:	2200      	movs	r2, #0
 8015574:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	68db      	ldr	r3, [r3, #12]
 801557a:	899b      	ldrh	r3, [r3, #12]
 801557c:	b29b      	uxth	r3, r3
 801557e:	4618      	mov	r0, r3
 8015580:	f7fa fa3c 	bl	800f9fc <lwip_htons>
 8015584:	4603      	mov	r3, r0
 8015586:	b2db      	uxtb	r3, r3
 8015588:	f003 0301 	and.w	r3, r3, #1
 801558c:	2b00      	cmp	r3, #0
 801558e:	d00d      	beq.n	80155ac <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015590:	4b68      	ldr	r3, [pc, #416]	; (8015734 <tcp_receive+0xcfc>)
 8015592:	781b      	ldrb	r3, [r3, #0]
 8015594:	f043 0320 	orr.w	r3, r3, #32
 8015598:	b2da      	uxtb	r2, r3
 801559a:	4b66      	ldr	r3, [pc, #408]	; (8015734 <tcp_receive+0xcfc>)
 801559c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	7d1b      	ldrb	r3, [r3, #20]
 80155a2:	2b04      	cmp	r3, #4
 80155a4:	d102      	bne.n	80155ac <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	2207      	movs	r2, #7
 80155aa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	681a      	ldr	r2, [r3, #0]
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80155b4:	68b8      	ldr	r0, [r7, #8]
 80155b6:	f7fd fb1c 	bl	8012bf2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d008      	beq.n	80155d4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80155c6:	68db      	ldr	r3, [r3, #12]
 80155c8:	685a      	ldr	r2, [r3, #4]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80155ce:	429a      	cmp	r2, r3
 80155d0:	f43f af43 	beq.w	801545a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	8b5b      	ldrh	r3, [r3, #26]
 80155d8:	f003 0301 	and.w	r3, r3, #1
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d00e      	beq.n	80155fe <tcp_receive+0xbc6>
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	8b5b      	ldrh	r3, [r3, #26]
 80155e4:	f023 0301 	bic.w	r3, r3, #1
 80155e8:	b29a      	uxth	r2, r3
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	835a      	strh	r2, [r3, #26]
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	8b5b      	ldrh	r3, [r3, #26]
 80155f2:	f043 0302 	orr.w	r3, r3, #2
 80155f6:	b29a      	uxth	r2, r3
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80155fc:	e188      	b.n	8015910 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	8b5b      	ldrh	r3, [r3, #26]
 8015602:	f043 0301 	orr.w	r3, r3, #1
 8015606:	b29a      	uxth	r2, r3
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801560c:	e180      	b.n	8015910 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015612:	2b00      	cmp	r3, #0
 8015614:	d106      	bne.n	8015624 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015616:	4848      	ldr	r0, [pc, #288]	; (8015738 <tcp_receive+0xd00>)
 8015618:	f7fd fb04 	bl	8012c24 <tcp_seg_copy>
 801561c:	4602      	mov	r2, r0
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	675a      	str	r2, [r3, #116]	; 0x74
 8015622:	e16d      	b.n	8015900 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015624:	2300      	movs	r3, #0
 8015626:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801562c:	63bb      	str	r3, [r7, #56]	; 0x38
 801562e:	e157      	b.n	80158e0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8015630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015632:	68db      	ldr	r3, [r3, #12]
 8015634:	685a      	ldr	r2, [r3, #4]
 8015636:	4b41      	ldr	r3, [pc, #260]	; (801573c <tcp_receive+0xd04>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	429a      	cmp	r2, r3
 801563c:	d11d      	bne.n	801567a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801563e:	4b3e      	ldr	r3, [pc, #248]	; (8015738 <tcp_receive+0xd00>)
 8015640:	891a      	ldrh	r2, [r3, #8]
 8015642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015644:	891b      	ldrh	r3, [r3, #8]
 8015646:	429a      	cmp	r2, r3
 8015648:	f240 814f 	bls.w	80158ea <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801564c:	483a      	ldr	r0, [pc, #232]	; (8015738 <tcp_receive+0xd00>)
 801564e:	f7fd fae9 	bl	8012c24 <tcp_seg_copy>
 8015652:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	2b00      	cmp	r3, #0
 8015658:	f000 8149 	beq.w	80158ee <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801565e:	2b00      	cmp	r3, #0
 8015660:	d003      	beq.n	801566a <tcp_receive+0xc32>
                    prev->next = cseg;
 8015662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015664:	697a      	ldr	r2, [r7, #20]
 8015666:	601a      	str	r2, [r3, #0]
 8015668:	e002      	b.n	8015670 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	697a      	ldr	r2, [r7, #20]
 801566e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015670:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015672:	6978      	ldr	r0, [r7, #20]
 8015674:	f7ff f8dc 	bl	8014830 <tcp_oos_insert_segment>
                }
                break;
 8015678:	e139      	b.n	80158ee <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801567a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801567c:	2b00      	cmp	r3, #0
 801567e:	d117      	bne.n	80156b0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015680:	4b2e      	ldr	r3, [pc, #184]	; (801573c <tcp_receive+0xd04>)
 8015682:	681a      	ldr	r2, [r3, #0]
 8015684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	1ad3      	subs	r3, r2, r3
 801568c:	2b00      	cmp	r3, #0
 801568e:	da57      	bge.n	8015740 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015690:	4829      	ldr	r0, [pc, #164]	; (8015738 <tcp_receive+0xd00>)
 8015692:	f7fd fac7 	bl	8012c24 <tcp_seg_copy>
 8015696:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015698:	69bb      	ldr	r3, [r7, #24]
 801569a:	2b00      	cmp	r3, #0
 801569c:	f000 8129 	beq.w	80158f2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	69ba      	ldr	r2, [r7, #24]
 80156a4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80156a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80156a8:	69b8      	ldr	r0, [r7, #24]
 80156aa:	f7ff f8c1 	bl	8014830 <tcp_oos_insert_segment>
                  }
                  break;
 80156ae:	e120      	b.n	80158f2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80156b0:	4b22      	ldr	r3, [pc, #136]	; (801573c <tcp_receive+0xd04>)
 80156b2:	681a      	ldr	r2, [r3, #0]
 80156b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156b6:	68db      	ldr	r3, [r3, #12]
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	1ad3      	subs	r3, r2, r3
 80156bc:	3b01      	subs	r3, #1
 80156be:	2b00      	cmp	r3, #0
 80156c0:	db3e      	blt.n	8015740 <tcp_receive+0xd08>
 80156c2:	4b1e      	ldr	r3, [pc, #120]	; (801573c <tcp_receive+0xd04>)
 80156c4:	681a      	ldr	r2, [r3, #0]
 80156c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156c8:	68db      	ldr	r3, [r3, #12]
 80156ca:	685b      	ldr	r3, [r3, #4]
 80156cc:	1ad3      	subs	r3, r2, r3
 80156ce:	3301      	adds	r3, #1
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	dc35      	bgt.n	8015740 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80156d4:	4818      	ldr	r0, [pc, #96]	; (8015738 <tcp_receive+0xd00>)
 80156d6:	f7fd faa5 	bl	8012c24 <tcp_seg_copy>
 80156da:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80156dc:	69fb      	ldr	r3, [r7, #28]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	f000 8109 	beq.w	80158f6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80156e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156e6:	68db      	ldr	r3, [r3, #12]
 80156e8:	685b      	ldr	r3, [r3, #4]
 80156ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80156ec:	8912      	ldrh	r2, [r2, #8]
 80156ee:	441a      	add	r2, r3
 80156f0:	4b12      	ldr	r3, [pc, #72]	; (801573c <tcp_receive+0xd04>)
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	1ad3      	subs	r3, r2, r3
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	dd12      	ble.n	8015720 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80156fa:	4b10      	ldr	r3, [pc, #64]	; (801573c <tcp_receive+0xd04>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	b29a      	uxth	r2, r3
 8015700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015702:	68db      	ldr	r3, [r3, #12]
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	b29b      	uxth	r3, r3
 8015708:	1ad3      	subs	r3, r2, r3
 801570a:	b29a      	uxth	r2, r3
 801570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801570e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015712:	685a      	ldr	r2, [r3, #4]
 8015714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015716:	891b      	ldrh	r3, [r3, #8]
 8015718:	4619      	mov	r1, r3
 801571a:	4610      	mov	r0, r2
 801571c:	f7fb fc06 	bl	8010f2c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015722:	69fa      	ldr	r2, [r7, #28]
 8015724:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015726:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015728:	69f8      	ldr	r0, [r7, #28]
 801572a:	f7ff f881 	bl	8014830 <tcp_oos_insert_segment>
                  }
                  break;
 801572e:	e0e2      	b.n	80158f6 <tcp_receive+0xebe>
 8015730:	2001dd2c 	.word	0x2001dd2c
 8015734:	2001dd29 	.word	0x2001dd29
 8015738:	2001dcfc 	.word	0x2001dcfc
 801573c:	2001dd1c 	.word	0x2001dd1c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015742:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	2b00      	cmp	r3, #0
 801574a:	f040 80c6 	bne.w	80158da <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801574e:	4b80      	ldr	r3, [pc, #512]	; (8015950 <tcp_receive+0xf18>)
 8015750:	681a      	ldr	r2, [r3, #0]
 8015752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015754:	68db      	ldr	r3, [r3, #12]
 8015756:	685b      	ldr	r3, [r3, #4]
 8015758:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801575a:	2b00      	cmp	r3, #0
 801575c:	f340 80bd 	ble.w	80158da <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015762:	68db      	ldr	r3, [r3, #12]
 8015764:	899b      	ldrh	r3, [r3, #12]
 8015766:	b29b      	uxth	r3, r3
 8015768:	4618      	mov	r0, r3
 801576a:	f7fa f947 	bl	800f9fc <lwip_htons>
 801576e:	4603      	mov	r3, r0
 8015770:	b2db      	uxtb	r3, r3
 8015772:	f003 0301 	and.w	r3, r3, #1
 8015776:	2b00      	cmp	r3, #0
 8015778:	f040 80bf 	bne.w	80158fa <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801577c:	4875      	ldr	r0, [pc, #468]	; (8015954 <tcp_receive+0xf1c>)
 801577e:	f7fd fa51 	bl	8012c24 <tcp_seg_copy>
 8015782:	4602      	mov	r2, r0
 8015784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015786:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	2b00      	cmp	r3, #0
 801578e:	f000 80b6 	beq.w	80158fe <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015794:	68db      	ldr	r3, [r3, #12]
 8015796:	685b      	ldr	r3, [r3, #4]
 8015798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801579a:	8912      	ldrh	r2, [r2, #8]
 801579c:	441a      	add	r2, r3
 801579e:	4b6c      	ldr	r3, [pc, #432]	; (8015950 <tcp_receive+0xf18>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	1ad3      	subs	r3, r2, r3
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	dd12      	ble.n	80157ce <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80157a8:	4b69      	ldr	r3, [pc, #420]	; (8015950 <tcp_receive+0xf18>)
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	b29a      	uxth	r2, r3
 80157ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157b0:	68db      	ldr	r3, [r3, #12]
 80157b2:	685b      	ldr	r3, [r3, #4]
 80157b4:	b29b      	uxth	r3, r3
 80157b6:	1ad3      	subs	r3, r2, r3
 80157b8:	b29a      	uxth	r2, r3
 80157ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157bc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80157be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157c0:	685a      	ldr	r2, [r3, #4]
 80157c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157c4:	891b      	ldrh	r3, [r3, #8]
 80157c6:	4619      	mov	r1, r3
 80157c8:	4610      	mov	r0, r2
 80157ca:	f7fb fbaf 	bl	8010f2c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80157ce:	4b62      	ldr	r3, [pc, #392]	; (8015958 <tcp_receive+0xf20>)
 80157d0:	881b      	ldrh	r3, [r3, #0]
 80157d2:	461a      	mov	r2, r3
 80157d4:	4b5e      	ldr	r3, [pc, #376]	; (8015950 <tcp_receive+0xf18>)
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	441a      	add	r2, r3
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157de:	6879      	ldr	r1, [r7, #4]
 80157e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80157e2:	440b      	add	r3, r1
 80157e4:	1ad3      	subs	r3, r2, r3
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	f340 8089 	ble.w	80158fe <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80157ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	68db      	ldr	r3, [r3, #12]
 80157f2:	899b      	ldrh	r3, [r3, #12]
 80157f4:	b29b      	uxth	r3, r3
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7fa f900 	bl	800f9fc <lwip_htons>
 80157fc:	4603      	mov	r3, r0
 80157fe:	b2db      	uxtb	r3, r3
 8015800:	f003 0301 	and.w	r3, r3, #1
 8015804:	2b00      	cmp	r3, #0
 8015806:	d022      	beq.n	801584e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	68db      	ldr	r3, [r3, #12]
 801580e:	899b      	ldrh	r3, [r3, #12]
 8015810:	b29b      	uxth	r3, r3
 8015812:	b21b      	sxth	r3, r3
 8015814:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015818:	b21c      	sxth	r4, r3
 801581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	68db      	ldr	r3, [r3, #12]
 8015820:	899b      	ldrh	r3, [r3, #12]
 8015822:	b29b      	uxth	r3, r3
 8015824:	4618      	mov	r0, r3
 8015826:	f7fa f8e9 	bl	800f9fc <lwip_htons>
 801582a:	4603      	mov	r3, r0
 801582c:	b2db      	uxtb	r3, r3
 801582e:	b29b      	uxth	r3, r3
 8015830:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015834:	b29b      	uxth	r3, r3
 8015836:	4618      	mov	r0, r3
 8015838:	f7fa f8e0 	bl	800f9fc <lwip_htons>
 801583c:	4603      	mov	r3, r0
 801583e:	b21b      	sxth	r3, r3
 8015840:	4323      	orrs	r3, r4
 8015842:	b21a      	sxth	r2, r3
 8015844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	68db      	ldr	r3, [r3, #12]
 801584a:	b292      	uxth	r2, r2
 801584c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015852:	b29a      	uxth	r2, r3
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015858:	4413      	add	r3, r2
 801585a:	b299      	uxth	r1, r3
 801585c:	4b3c      	ldr	r3, [pc, #240]	; (8015950 <tcp_receive+0xf18>)
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	b29a      	uxth	r2, r3
 8015862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	1a8a      	subs	r2, r1, r2
 8015868:	b292      	uxth	r2, r2
 801586a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	685a      	ldr	r2, [r3, #4]
 8015872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	891b      	ldrh	r3, [r3, #8]
 8015878:	4619      	mov	r1, r3
 801587a:	4610      	mov	r0, r2
 801587c:	f7fb fb56 	bl	8010f2c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	891c      	ldrh	r4, [r3, #8]
 8015886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	68db      	ldr	r3, [r3, #12]
 801588c:	899b      	ldrh	r3, [r3, #12]
 801588e:	b29b      	uxth	r3, r3
 8015890:	4618      	mov	r0, r3
 8015892:	f7fa f8b3 	bl	800f9fc <lwip_htons>
 8015896:	4603      	mov	r3, r0
 8015898:	b2db      	uxtb	r3, r3
 801589a:	f003 0303 	and.w	r3, r3, #3
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d001      	beq.n	80158a6 <tcp_receive+0xe6e>
 80158a2:	2301      	movs	r3, #1
 80158a4:	e000      	b.n	80158a8 <tcp_receive+0xe70>
 80158a6:	2300      	movs	r3, #0
 80158a8:	4423      	add	r3, r4
 80158aa:	b29a      	uxth	r2, r3
 80158ac:	4b2a      	ldr	r3, [pc, #168]	; (8015958 <tcp_receive+0xf20>)
 80158ae:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80158b0:	4b29      	ldr	r3, [pc, #164]	; (8015958 <tcp_receive+0xf20>)
 80158b2:	881b      	ldrh	r3, [r3, #0]
 80158b4:	461a      	mov	r2, r3
 80158b6:	4b26      	ldr	r3, [pc, #152]	; (8015950 <tcp_receive+0xf18>)
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	441a      	add	r2, r3
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158c0:	6879      	ldr	r1, [r7, #4]
 80158c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80158c4:	440b      	add	r3, r1
 80158c6:	429a      	cmp	r2, r3
 80158c8:	d019      	beq.n	80158fe <tcp_receive+0xec6>
 80158ca:	4b24      	ldr	r3, [pc, #144]	; (801595c <tcp_receive+0xf24>)
 80158cc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80158d0:	4923      	ldr	r1, [pc, #140]	; (8015960 <tcp_receive+0xf28>)
 80158d2:	4824      	ldr	r0, [pc, #144]	; (8015964 <tcp_receive+0xf2c>)
 80158d4:	f005 fc98 	bl	801b208 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80158d8:	e011      	b.n	80158fe <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80158da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	63bb      	str	r3, [r7, #56]	; 0x38
 80158e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	f47f aea4 	bne.w	8015630 <tcp_receive+0xbf8>
 80158e8:	e00a      	b.n	8015900 <tcp_receive+0xec8>
                break;
 80158ea:	bf00      	nop
 80158ec:	e008      	b.n	8015900 <tcp_receive+0xec8>
                break;
 80158ee:	bf00      	nop
 80158f0:	e006      	b.n	8015900 <tcp_receive+0xec8>
                  break;
 80158f2:	bf00      	nop
 80158f4:	e004      	b.n	8015900 <tcp_receive+0xec8>
                  break;
 80158f6:	bf00      	nop
 80158f8:	e002      	b.n	8015900 <tcp_receive+0xec8>
                  break;
 80158fa:	bf00      	nop
 80158fc:	e000      	b.n	8015900 <tcp_receive+0xec8>
                break;
 80158fe:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015900:	6878      	ldr	r0, [r7, #4]
 8015902:	f001 fe8b 	bl	801761c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015906:	e003      	b.n	8015910 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015908:	6878      	ldr	r0, [r7, #4]
 801590a:	f001 fe87 	bl	801761c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801590e:	e01a      	b.n	8015946 <tcp_receive+0xf0e>
 8015910:	e019      	b.n	8015946 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015912:	4b0f      	ldr	r3, [pc, #60]	; (8015950 <tcp_receive+0xf18>)
 8015914:	681a      	ldr	r2, [r3, #0]
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801591a:	1ad3      	subs	r3, r2, r3
 801591c:	2b00      	cmp	r3, #0
 801591e:	db0a      	blt.n	8015936 <tcp_receive+0xefe>
 8015920:	4b0b      	ldr	r3, [pc, #44]	; (8015950 <tcp_receive+0xf18>)
 8015922:	681a      	ldr	r2, [r3, #0]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015928:	6879      	ldr	r1, [r7, #4]
 801592a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801592c:	440b      	add	r3, r1
 801592e:	1ad3      	subs	r3, r2, r3
 8015930:	3301      	adds	r3, #1
 8015932:	2b00      	cmp	r3, #0
 8015934:	dd07      	ble.n	8015946 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	8b5b      	ldrh	r3, [r3, #26]
 801593a:	f043 0302 	orr.w	r3, r3, #2
 801593e:	b29a      	uxth	r2, r3
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015944:	e7ff      	b.n	8015946 <tcp_receive+0xf0e>
 8015946:	bf00      	nop
 8015948:	3750      	adds	r7, #80	; 0x50
 801594a:	46bd      	mov	sp, r7
 801594c:	bdb0      	pop	{r4, r5, r7, pc}
 801594e:	bf00      	nop
 8015950:	2001dd1c 	.word	0x2001dd1c
 8015954:	2001dcfc 	.word	0x2001dcfc
 8015958:	2001dd26 	.word	0x2001dd26
 801595c:	0801eca0 	.word	0x0801eca0
 8015960:	0801f048 	.word	0x0801f048
 8015964:	0801ecec 	.word	0x0801ecec

08015968 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015968:	b480      	push	{r7}
 801596a:	b083      	sub	sp, #12
 801596c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801596e:	4b15      	ldr	r3, [pc, #84]	; (80159c4 <tcp_get_next_optbyte+0x5c>)
 8015970:	881b      	ldrh	r3, [r3, #0]
 8015972:	1c5a      	adds	r2, r3, #1
 8015974:	b291      	uxth	r1, r2
 8015976:	4a13      	ldr	r2, [pc, #76]	; (80159c4 <tcp_get_next_optbyte+0x5c>)
 8015978:	8011      	strh	r1, [r2, #0]
 801597a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801597c:	4b12      	ldr	r3, [pc, #72]	; (80159c8 <tcp_get_next_optbyte+0x60>)
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d004      	beq.n	801598e <tcp_get_next_optbyte+0x26>
 8015984:	4b11      	ldr	r3, [pc, #68]	; (80159cc <tcp_get_next_optbyte+0x64>)
 8015986:	881b      	ldrh	r3, [r3, #0]
 8015988:	88fa      	ldrh	r2, [r7, #6]
 801598a:	429a      	cmp	r2, r3
 801598c:	d208      	bcs.n	80159a0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801598e:	4b10      	ldr	r3, [pc, #64]	; (80159d0 <tcp_get_next_optbyte+0x68>)
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	3314      	adds	r3, #20
 8015994:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015996:	88fb      	ldrh	r3, [r7, #6]
 8015998:	683a      	ldr	r2, [r7, #0]
 801599a:	4413      	add	r3, r2
 801599c:	781b      	ldrb	r3, [r3, #0]
 801599e:	e00b      	b.n	80159b8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80159a0:	88fb      	ldrh	r3, [r7, #6]
 80159a2:	b2da      	uxtb	r2, r3
 80159a4:	4b09      	ldr	r3, [pc, #36]	; (80159cc <tcp_get_next_optbyte+0x64>)
 80159a6:	881b      	ldrh	r3, [r3, #0]
 80159a8:	b2db      	uxtb	r3, r3
 80159aa:	1ad3      	subs	r3, r2, r3
 80159ac:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80159ae:	4b06      	ldr	r3, [pc, #24]	; (80159c8 <tcp_get_next_optbyte+0x60>)
 80159b0:	681a      	ldr	r2, [r3, #0]
 80159b2:	797b      	ldrb	r3, [r7, #5]
 80159b4:	4413      	add	r3, r2
 80159b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	370c      	adds	r7, #12
 80159bc:	46bd      	mov	sp, r7
 80159be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c2:	4770      	bx	lr
 80159c4:	2001dd18 	.word	0x2001dd18
 80159c8:	2001dd14 	.word	0x2001dd14
 80159cc:	2001dd12 	.word	0x2001dd12
 80159d0:	2001dd0c 	.word	0x2001dd0c

080159d4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b084      	sub	sp, #16
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d106      	bne.n	80159f0 <tcp_parseopt+0x1c>
 80159e2:	4b32      	ldr	r3, [pc, #200]	; (8015aac <tcp_parseopt+0xd8>)
 80159e4:	f240 727d 	movw	r2, #1917	; 0x77d
 80159e8:	4931      	ldr	r1, [pc, #196]	; (8015ab0 <tcp_parseopt+0xdc>)
 80159ea:	4832      	ldr	r0, [pc, #200]	; (8015ab4 <tcp_parseopt+0xe0>)
 80159ec:	f005 fc0c 	bl	801b208 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80159f0:	4b31      	ldr	r3, [pc, #196]	; (8015ab8 <tcp_parseopt+0xe4>)
 80159f2:	881b      	ldrh	r3, [r3, #0]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d056      	beq.n	8015aa6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80159f8:	4b30      	ldr	r3, [pc, #192]	; (8015abc <tcp_parseopt+0xe8>)
 80159fa:	2200      	movs	r2, #0
 80159fc:	801a      	strh	r2, [r3, #0]
 80159fe:	e046      	b.n	8015a8e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015a00:	f7ff ffb2 	bl	8015968 <tcp_get_next_optbyte>
 8015a04:	4603      	mov	r3, r0
 8015a06:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015a08:	7bfb      	ldrb	r3, [r7, #15]
 8015a0a:	2b02      	cmp	r3, #2
 8015a0c:	d006      	beq.n	8015a1c <tcp_parseopt+0x48>
 8015a0e:	2b02      	cmp	r3, #2
 8015a10:	dc2c      	bgt.n	8015a6c <tcp_parseopt+0x98>
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d042      	beq.n	8015a9c <tcp_parseopt+0xc8>
 8015a16:	2b01      	cmp	r3, #1
 8015a18:	d128      	bne.n	8015a6c <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015a1a:	e038      	b.n	8015a8e <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015a1c:	f7ff ffa4 	bl	8015968 <tcp_get_next_optbyte>
 8015a20:	4603      	mov	r3, r0
 8015a22:	2b04      	cmp	r3, #4
 8015a24:	d13c      	bne.n	8015aa0 <tcp_parseopt+0xcc>
 8015a26:	4b25      	ldr	r3, [pc, #148]	; (8015abc <tcp_parseopt+0xe8>)
 8015a28:	881b      	ldrh	r3, [r3, #0]
 8015a2a:	3301      	adds	r3, #1
 8015a2c:	4a22      	ldr	r2, [pc, #136]	; (8015ab8 <tcp_parseopt+0xe4>)
 8015a2e:	8812      	ldrh	r2, [r2, #0]
 8015a30:	4293      	cmp	r3, r2
 8015a32:	da35      	bge.n	8015aa0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015a34:	f7ff ff98 	bl	8015968 <tcp_get_next_optbyte>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	b29b      	uxth	r3, r3
 8015a3c:	021b      	lsls	r3, r3, #8
 8015a3e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015a40:	f7ff ff92 	bl	8015968 <tcp_get_next_optbyte>
 8015a44:	4603      	mov	r3, r0
 8015a46:	b29a      	uxth	r2, r3
 8015a48:	89bb      	ldrh	r3, [r7, #12]
 8015a4a:	4313      	orrs	r3, r2
 8015a4c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015a4e:	89bb      	ldrh	r3, [r7, #12]
 8015a50:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015a54:	4293      	cmp	r3, r2
 8015a56:	d804      	bhi.n	8015a62 <tcp_parseopt+0x8e>
 8015a58:	89bb      	ldrh	r3, [r7, #12]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d001      	beq.n	8015a62 <tcp_parseopt+0x8e>
 8015a5e:	89ba      	ldrh	r2, [r7, #12]
 8015a60:	e001      	b.n	8015a66 <tcp_parseopt+0x92>
 8015a62:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015a6a:	e010      	b.n	8015a8e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015a6c:	f7ff ff7c 	bl	8015968 <tcp_get_next_optbyte>
 8015a70:	4603      	mov	r3, r0
 8015a72:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015a74:	7afb      	ldrb	r3, [r7, #11]
 8015a76:	2b01      	cmp	r3, #1
 8015a78:	d914      	bls.n	8015aa4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015a7a:	7afb      	ldrb	r3, [r7, #11]
 8015a7c:	b29a      	uxth	r2, r3
 8015a7e:	4b0f      	ldr	r3, [pc, #60]	; (8015abc <tcp_parseopt+0xe8>)
 8015a80:	881b      	ldrh	r3, [r3, #0]
 8015a82:	4413      	add	r3, r2
 8015a84:	b29b      	uxth	r3, r3
 8015a86:	3b02      	subs	r3, #2
 8015a88:	b29a      	uxth	r2, r3
 8015a8a:	4b0c      	ldr	r3, [pc, #48]	; (8015abc <tcp_parseopt+0xe8>)
 8015a8c:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015a8e:	4b0b      	ldr	r3, [pc, #44]	; (8015abc <tcp_parseopt+0xe8>)
 8015a90:	881a      	ldrh	r2, [r3, #0]
 8015a92:	4b09      	ldr	r3, [pc, #36]	; (8015ab8 <tcp_parseopt+0xe4>)
 8015a94:	881b      	ldrh	r3, [r3, #0]
 8015a96:	429a      	cmp	r2, r3
 8015a98:	d3b2      	bcc.n	8015a00 <tcp_parseopt+0x2c>
 8015a9a:	e004      	b.n	8015aa6 <tcp_parseopt+0xd2>
          return;
 8015a9c:	bf00      	nop
 8015a9e:	e002      	b.n	8015aa6 <tcp_parseopt+0xd2>
            return;
 8015aa0:	bf00      	nop
 8015aa2:	e000      	b.n	8015aa6 <tcp_parseopt+0xd2>
            return;
 8015aa4:	bf00      	nop
      }
    }
  }
}
 8015aa6:	3710      	adds	r7, #16
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	bd80      	pop	{r7, pc}
 8015aac:	0801eca0 	.word	0x0801eca0
 8015ab0:	0801f104 	.word	0x0801f104
 8015ab4:	0801ecec 	.word	0x0801ecec
 8015ab8:	2001dd10 	.word	0x2001dd10
 8015abc:	2001dd18 	.word	0x2001dd18

08015ac0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015ac0:	b480      	push	{r7}
 8015ac2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015ac4:	4b05      	ldr	r3, [pc, #20]	; (8015adc <tcp_trigger_input_pcb_close+0x1c>)
 8015ac6:	781b      	ldrb	r3, [r3, #0]
 8015ac8:	f043 0310 	orr.w	r3, r3, #16
 8015acc:	b2da      	uxtb	r2, r3
 8015ace:	4b03      	ldr	r3, [pc, #12]	; (8015adc <tcp_trigger_input_pcb_close+0x1c>)
 8015ad0:	701a      	strb	r2, [r3, #0]
}
 8015ad2:	bf00      	nop
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ada:	4770      	bx	lr
 8015adc:	2001dd29 	.word	0x2001dd29

08015ae0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b084      	sub	sp, #16
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	60f8      	str	r0, [r7, #12]
 8015ae8:	60b9      	str	r1, [r7, #8]
 8015aea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d00a      	beq.n	8015b08 <tcp_route+0x28>
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	7a1b      	ldrb	r3, [r3, #8]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d006      	beq.n	8015b08 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	7a1b      	ldrb	r3, [r3, #8]
 8015afe:	4618      	mov	r0, r3
 8015b00:	f7fb f808 	bl	8010b14 <netif_get_by_index>
 8015b04:	4603      	mov	r3, r0
 8015b06:	e003      	b.n	8015b10 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f003 fb3f 	bl	801918c <ip4_route>
 8015b0e:	4603      	mov	r3, r0
  }
}
 8015b10:	4618      	mov	r0, r3
 8015b12:	3710      	adds	r7, #16
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}

08015b18 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015b18:	b590      	push	{r4, r7, lr}
 8015b1a:	b087      	sub	sp, #28
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	60f8      	str	r0, [r7, #12]
 8015b20:	60b9      	str	r1, [r7, #8]
 8015b22:	603b      	str	r3, [r7, #0]
 8015b24:	4613      	mov	r3, r2
 8015b26:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d105      	bne.n	8015b3a <tcp_create_segment+0x22>
 8015b2e:	4b44      	ldr	r3, [pc, #272]	; (8015c40 <tcp_create_segment+0x128>)
 8015b30:	22a3      	movs	r2, #163	; 0xa3
 8015b32:	4944      	ldr	r1, [pc, #272]	; (8015c44 <tcp_create_segment+0x12c>)
 8015b34:	4844      	ldr	r0, [pc, #272]	; (8015c48 <tcp_create_segment+0x130>)
 8015b36:	f005 fb67 	bl	801b208 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015b3a:	68bb      	ldr	r3, [r7, #8]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d105      	bne.n	8015b4c <tcp_create_segment+0x34>
 8015b40:	4b3f      	ldr	r3, [pc, #252]	; (8015c40 <tcp_create_segment+0x128>)
 8015b42:	22a4      	movs	r2, #164	; 0xa4
 8015b44:	4941      	ldr	r1, [pc, #260]	; (8015c4c <tcp_create_segment+0x134>)
 8015b46:	4840      	ldr	r0, [pc, #256]	; (8015c48 <tcp_create_segment+0x130>)
 8015b48:	f005 fb5e 	bl	801b208 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015b4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015b50:	009b      	lsls	r3, r3, #2
 8015b52:	b2db      	uxtb	r3, r3
 8015b54:	f003 0304 	and.w	r3, r3, #4
 8015b58:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015b5a:	2003      	movs	r0, #3
 8015b5c:	f7fa fc4e 	bl	80103fc <memp_malloc>
 8015b60:	6138      	str	r0, [r7, #16]
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d104      	bne.n	8015b72 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015b68:	68b8      	ldr	r0, [r7, #8]
 8015b6a:	f7fb fb65 	bl	8011238 <pbuf_free>
    return NULL;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	e061      	b.n	8015c36 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015b72:	693b      	ldr	r3, [r7, #16]
 8015b74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015b78:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015b7a:	693b      	ldr	r3, [r7, #16]
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015b80:	693b      	ldr	r3, [r7, #16]
 8015b82:	68ba      	ldr	r2, [r7, #8]
 8015b84:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015b86:	68bb      	ldr	r3, [r7, #8]
 8015b88:	891a      	ldrh	r2, [r3, #8]
 8015b8a:	7dfb      	ldrb	r3, [r7, #23]
 8015b8c:	b29b      	uxth	r3, r3
 8015b8e:	429a      	cmp	r2, r3
 8015b90:	d205      	bcs.n	8015b9e <tcp_create_segment+0x86>
 8015b92:	4b2b      	ldr	r3, [pc, #172]	; (8015c40 <tcp_create_segment+0x128>)
 8015b94:	22b0      	movs	r2, #176	; 0xb0
 8015b96:	492e      	ldr	r1, [pc, #184]	; (8015c50 <tcp_create_segment+0x138>)
 8015b98:	482b      	ldr	r0, [pc, #172]	; (8015c48 <tcp_create_segment+0x130>)
 8015b9a:	f005 fb35 	bl	801b208 <iprintf>
  seg->len = p->tot_len - optlen;
 8015b9e:	68bb      	ldr	r3, [r7, #8]
 8015ba0:	891a      	ldrh	r2, [r3, #8]
 8015ba2:	7dfb      	ldrb	r3, [r7, #23]
 8015ba4:	b29b      	uxth	r3, r3
 8015ba6:	1ad3      	subs	r3, r2, r3
 8015ba8:	b29a      	uxth	r2, r3
 8015baa:	693b      	ldr	r3, [r7, #16]
 8015bac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015bae:	2114      	movs	r1, #20
 8015bb0:	68b8      	ldr	r0, [r7, #8]
 8015bb2:	f7fb faab 	bl	801110c <pbuf_add_header>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d004      	beq.n	8015bc6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015bbc:	6938      	ldr	r0, [r7, #16]
 8015bbe:	f7fd f818 	bl	8012bf2 <tcp_seg_free>
    return NULL;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	e037      	b.n	8015c36 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015bc6:	693b      	ldr	r3, [r7, #16]
 8015bc8:	685b      	ldr	r3, [r3, #4]
 8015bca:	685a      	ldr	r2, [r3, #4]
 8015bcc:	693b      	ldr	r3, [r7, #16]
 8015bce:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	8ada      	ldrh	r2, [r3, #22]
 8015bd4:	693b      	ldr	r3, [r7, #16]
 8015bd6:	68dc      	ldr	r4, [r3, #12]
 8015bd8:	4610      	mov	r0, r2
 8015bda:	f7f9 ff0f 	bl	800f9fc <lwip_htons>
 8015bde:	4603      	mov	r3, r0
 8015be0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	8b1a      	ldrh	r2, [r3, #24]
 8015be6:	693b      	ldr	r3, [r7, #16]
 8015be8:	68dc      	ldr	r4, [r3, #12]
 8015bea:	4610      	mov	r0, r2
 8015bec:	f7f9 ff06 	bl	800f9fc <lwip_htons>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015bf4:	693b      	ldr	r3, [r7, #16]
 8015bf6:	68dc      	ldr	r4, [r3, #12]
 8015bf8:	6838      	ldr	r0, [r7, #0]
 8015bfa:	f7f9 ff14 	bl	800fa26 <lwip_htonl>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015c02:	7dfb      	ldrb	r3, [r7, #23]
 8015c04:	089b      	lsrs	r3, r3, #2
 8015c06:	b2db      	uxtb	r3, r3
 8015c08:	b29b      	uxth	r3, r3
 8015c0a:	3305      	adds	r3, #5
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	031b      	lsls	r3, r3, #12
 8015c10:	b29a      	uxth	r2, r3
 8015c12:	79fb      	ldrb	r3, [r7, #7]
 8015c14:	b29b      	uxth	r3, r3
 8015c16:	4313      	orrs	r3, r2
 8015c18:	b29a      	uxth	r2, r3
 8015c1a:	693b      	ldr	r3, [r7, #16]
 8015c1c:	68dc      	ldr	r4, [r3, #12]
 8015c1e:	4610      	mov	r0, r2
 8015c20:	f7f9 feec 	bl	800f9fc <lwip_htons>
 8015c24:	4603      	mov	r3, r0
 8015c26:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015c28:	693b      	ldr	r3, [r7, #16]
 8015c2a:	68db      	ldr	r3, [r3, #12]
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	749a      	strb	r2, [r3, #18]
 8015c30:	2200      	movs	r2, #0
 8015c32:	74da      	strb	r2, [r3, #19]
  return seg;
 8015c34:	693b      	ldr	r3, [r7, #16]
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	371c      	adds	r7, #28
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd90      	pop	{r4, r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	0801f120 	.word	0x0801f120
 8015c44:	0801f154 	.word	0x0801f154
 8015c48:	0801f174 	.word	0x0801f174
 8015c4c:	0801f19c 	.word	0x0801f19c
 8015c50:	0801f1c0 	.word	0x0801f1c0

08015c54 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b086      	sub	sp, #24
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	607b      	str	r3, [r7, #4]
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	73fb      	strb	r3, [r7, #15]
 8015c60:	460b      	mov	r3, r1
 8015c62:	81bb      	strh	r3, [r7, #12]
 8015c64:	4613      	mov	r3, r2
 8015c66:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015c68:	89bb      	ldrh	r3, [r7, #12]
 8015c6a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d105      	bne.n	8015c7e <tcp_pbuf_prealloc+0x2a>
 8015c72:	4b30      	ldr	r3, [pc, #192]	; (8015d34 <tcp_pbuf_prealloc+0xe0>)
 8015c74:	22e8      	movs	r2, #232	; 0xe8
 8015c76:	4930      	ldr	r1, [pc, #192]	; (8015d38 <tcp_pbuf_prealloc+0xe4>)
 8015c78:	4830      	ldr	r0, [pc, #192]	; (8015d3c <tcp_pbuf_prealloc+0xe8>)
 8015c7a:	f005 fac5 	bl	801b208 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015c7e:	6a3b      	ldr	r3, [r7, #32]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d105      	bne.n	8015c90 <tcp_pbuf_prealloc+0x3c>
 8015c84:	4b2b      	ldr	r3, [pc, #172]	; (8015d34 <tcp_pbuf_prealloc+0xe0>)
 8015c86:	22e9      	movs	r2, #233	; 0xe9
 8015c88:	492d      	ldr	r1, [pc, #180]	; (8015d40 <tcp_pbuf_prealloc+0xec>)
 8015c8a:	482c      	ldr	r0, [pc, #176]	; (8015d3c <tcp_pbuf_prealloc+0xe8>)
 8015c8c:	f005 fabc 	bl	801b208 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015c90:	89ba      	ldrh	r2, [r7, #12]
 8015c92:	897b      	ldrh	r3, [r7, #10]
 8015c94:	429a      	cmp	r2, r3
 8015c96:	d221      	bcs.n	8015cdc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015c98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015c9c:	f003 0302 	and.w	r3, r3, #2
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d111      	bne.n	8015cc8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015ca4:	6a3b      	ldr	r3, [r7, #32]
 8015ca6:	8b5b      	ldrh	r3, [r3, #26]
 8015ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d115      	bne.n	8015cdc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015cb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d007      	beq.n	8015cc8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015cb8:	6a3b      	ldr	r3, [r7, #32]
 8015cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d103      	bne.n	8015cc8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015cc0:	6a3b      	ldr	r3, [r7, #32]
 8015cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d009      	beq.n	8015cdc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015cc8:	89bb      	ldrh	r3, [r7, #12]
 8015cca:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8015cce:	f023 0203 	bic.w	r2, r3, #3
 8015cd2:	897b      	ldrh	r3, [r7, #10]
 8015cd4:	4293      	cmp	r3, r2
 8015cd6:	bf28      	it	cs
 8015cd8:	4613      	movcs	r3, r2
 8015cda:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015cdc:	8af9      	ldrh	r1, [r7, #22]
 8015cde:	7bfb      	ldrb	r3, [r7, #15]
 8015ce0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f7fa ffbf 	bl	8010c68 <pbuf_alloc>
 8015cea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015cec:	693b      	ldr	r3, [r7, #16]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d101      	bne.n	8015cf6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	e019      	b.n	8015d2a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d006      	beq.n	8015d0c <tcp_pbuf_prealloc+0xb8>
 8015cfe:	4b0d      	ldr	r3, [pc, #52]	; (8015d34 <tcp_pbuf_prealloc+0xe0>)
 8015d00:	f240 120b 	movw	r2, #267	; 0x10b
 8015d04:	490f      	ldr	r1, [pc, #60]	; (8015d44 <tcp_pbuf_prealloc+0xf0>)
 8015d06:	480d      	ldr	r0, [pc, #52]	; (8015d3c <tcp_pbuf_prealloc+0xe8>)
 8015d08:	f005 fa7e 	bl	801b208 <iprintf>
  *oversize = p->len - length;
 8015d0c:	693b      	ldr	r3, [r7, #16]
 8015d0e:	895a      	ldrh	r2, [r3, #10]
 8015d10:	89bb      	ldrh	r3, [r7, #12]
 8015d12:	1ad3      	subs	r3, r2, r3
 8015d14:	b29a      	uxth	r2, r3
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015d1a:	693b      	ldr	r3, [r7, #16]
 8015d1c:	89ba      	ldrh	r2, [r7, #12]
 8015d1e:	811a      	strh	r2, [r3, #8]
 8015d20:	693b      	ldr	r3, [r7, #16]
 8015d22:	891a      	ldrh	r2, [r3, #8]
 8015d24:	693b      	ldr	r3, [r7, #16]
 8015d26:	815a      	strh	r2, [r3, #10]
  return p;
 8015d28:	693b      	ldr	r3, [r7, #16]
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3718      	adds	r7, #24
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}
 8015d32:	bf00      	nop
 8015d34:	0801f120 	.word	0x0801f120
 8015d38:	0801f1d8 	.word	0x0801f1d8
 8015d3c:	0801f174 	.word	0x0801f174
 8015d40:	0801f1fc 	.word	0x0801f1fc
 8015d44:	0801f21c 	.word	0x0801f21c

08015d48 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b082      	sub	sp, #8
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
 8015d50:	460b      	mov	r3, r1
 8015d52:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d106      	bne.n	8015d68 <tcp_write_checks+0x20>
 8015d5a:	4b33      	ldr	r3, [pc, #204]	; (8015e28 <tcp_write_checks+0xe0>)
 8015d5c:	f240 1233 	movw	r2, #307	; 0x133
 8015d60:	4932      	ldr	r1, [pc, #200]	; (8015e2c <tcp_write_checks+0xe4>)
 8015d62:	4833      	ldr	r0, [pc, #204]	; (8015e30 <tcp_write_checks+0xe8>)
 8015d64:	f005 fa50 	bl	801b208 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	7d1b      	ldrb	r3, [r3, #20]
 8015d6c:	2b04      	cmp	r3, #4
 8015d6e:	d00e      	beq.n	8015d8e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015d74:	2b07      	cmp	r3, #7
 8015d76:	d00a      	beq.n	8015d8e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015d7c:	2b02      	cmp	r3, #2
 8015d7e:	d006      	beq.n	8015d8e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015d84:	2b03      	cmp	r3, #3
 8015d86:	d002      	beq.n	8015d8e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015d88:	f06f 030a 	mvn.w	r3, #10
 8015d8c:	e048      	b.n	8015e20 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015d8e:	887b      	ldrh	r3, [r7, #2]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d101      	bne.n	8015d98 <tcp_write_checks+0x50>
    return ERR_OK;
 8015d94:	2300      	movs	r3, #0
 8015d96:	e043      	b.n	8015e20 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015d9e:	887a      	ldrh	r2, [r7, #2]
 8015da0:	429a      	cmp	r2, r3
 8015da2:	d909      	bls.n	8015db8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	8b5b      	ldrh	r3, [r3, #26]
 8015da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015dac:	b29a      	uxth	r2, r3
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015db2:	f04f 33ff 	mov.w	r3, #4294967295
 8015db6:	e033      	b.n	8015e20 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015dbe:	2b0e      	cmp	r3, #14
 8015dc0:	d909      	bls.n	8015dd6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	8b5b      	ldrh	r3, [r3, #26]
 8015dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015dca:	b29a      	uxth	r2, r3
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8015dd4:	e024      	b.n	8015e20 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d00f      	beq.n	8015e00 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d11a      	bne.n	8015e1e <tcp_write_checks+0xd6>
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d116      	bne.n	8015e1e <tcp_write_checks+0xd6>
 8015df0:	4b0d      	ldr	r3, [pc, #52]	; (8015e28 <tcp_write_checks+0xe0>)
 8015df2:	f240 1255 	movw	r2, #341	; 0x155
 8015df6:	490f      	ldr	r1, [pc, #60]	; (8015e34 <tcp_write_checks+0xec>)
 8015df8:	480d      	ldr	r0, [pc, #52]	; (8015e30 <tcp_write_checks+0xe8>)
 8015dfa:	f005 fa05 	bl	801b208 <iprintf>
 8015dfe:	e00e      	b.n	8015e1e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d103      	bne.n	8015e10 <tcp_write_checks+0xc8>
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d006      	beq.n	8015e1e <tcp_write_checks+0xd6>
 8015e10:	4b05      	ldr	r3, [pc, #20]	; (8015e28 <tcp_write_checks+0xe0>)
 8015e12:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015e16:	4908      	ldr	r1, [pc, #32]	; (8015e38 <tcp_write_checks+0xf0>)
 8015e18:	4805      	ldr	r0, [pc, #20]	; (8015e30 <tcp_write_checks+0xe8>)
 8015e1a:	f005 f9f5 	bl	801b208 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015e1e:	2300      	movs	r3, #0
}
 8015e20:	4618      	mov	r0, r3
 8015e22:	3708      	adds	r7, #8
 8015e24:	46bd      	mov	sp, r7
 8015e26:	bd80      	pop	{r7, pc}
 8015e28:	0801f120 	.word	0x0801f120
 8015e2c:	0801f230 	.word	0x0801f230
 8015e30:	0801f174 	.word	0x0801f174
 8015e34:	0801f250 	.word	0x0801f250
 8015e38:	0801f28c 	.word	0x0801f28c

08015e3c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015e3c:	b590      	push	{r4, r7, lr}
 8015e3e:	b09b      	sub	sp, #108	; 0x6c
 8015e40:	af04      	add	r7, sp, #16
 8015e42:	60f8      	str	r0, [r7, #12]
 8015e44:	60b9      	str	r1, [r7, #8]
 8015e46:	4611      	mov	r1, r2
 8015e48:	461a      	mov	r2, r3
 8015e4a:	460b      	mov	r3, r1
 8015e4c:	80fb      	strh	r3, [r7, #6]
 8015e4e:	4613      	mov	r3, r2
 8015e50:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015e52:	2300      	movs	r3, #0
 8015e54:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015e56:	2300      	movs	r3, #0
 8015e58:	653b      	str	r3, [r7, #80]	; 0x50
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015e5e:	2300      	movs	r3, #0
 8015e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8015e62:	2300      	movs	r3, #0
 8015e64:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015e66:	2300      	movs	r3, #0
 8015e68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015e72:	2300      	movs	r3, #0
 8015e74:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015e76:	2300      	movs	r3, #0
 8015e78:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d109      	bne.n	8015e98 <tcp_write+0x5c>
 8015e84:	4ba4      	ldr	r3, [pc, #656]	; (8016118 <tcp_write+0x2dc>)
 8015e86:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8015e8a:	49a4      	ldr	r1, [pc, #656]	; (801611c <tcp_write+0x2e0>)
 8015e8c:	48a4      	ldr	r0, [pc, #656]	; (8016120 <tcp_write+0x2e4>)
 8015e8e:	f005 f9bb 	bl	801b208 <iprintf>
 8015e92:	f06f 030f 	mvn.w	r3, #15
 8015e96:	e32a      	b.n	80164ee <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015e9e:	085b      	lsrs	r3, r3, #1
 8015ea0:	b29a      	uxth	r2, r3
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ea6:	4293      	cmp	r3, r2
 8015ea8:	bf28      	it	cs
 8015eaa:	4613      	movcs	r3, r2
 8015eac:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015eae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d102      	bne.n	8015eba <tcp_write+0x7e>
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015eb8:	e000      	b.n	8015ebc <tcp_write+0x80>
 8015eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ebc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015ebe:	68bb      	ldr	r3, [r7, #8]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d109      	bne.n	8015ed8 <tcp_write+0x9c>
 8015ec4:	4b94      	ldr	r3, [pc, #592]	; (8016118 <tcp_write+0x2dc>)
 8015ec6:	f240 12ad 	movw	r2, #429	; 0x1ad
 8015eca:	4996      	ldr	r1, [pc, #600]	; (8016124 <tcp_write+0x2e8>)
 8015ecc:	4894      	ldr	r0, [pc, #592]	; (8016120 <tcp_write+0x2e4>)
 8015ece:	f005 f99b 	bl	801b208 <iprintf>
 8015ed2:	f06f 030f 	mvn.w	r3, #15
 8015ed6:	e30a      	b.n	80164ee <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015ed8:	88fb      	ldrh	r3, [r7, #6]
 8015eda:	4619      	mov	r1, r3
 8015edc:	68f8      	ldr	r0, [r7, #12]
 8015ede:	f7ff ff33 	bl	8015d48 <tcp_write_checks>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015ee8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d002      	beq.n	8015ef6 <tcp_write+0xba>
    return err;
 8015ef0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015ef4:	e2fb      	b.n	80164ee <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015efc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015f00:	2300      	movs	r3, #0
 8015f02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	f000 80f6 	beq.w	80160fc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f14:	653b      	str	r3, [r7, #80]	; 0x50
 8015f16:	e002      	b.n	8015f1e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8015f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d1f8      	bne.n	8015f18 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8015f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f28:	7a9b      	ldrb	r3, [r3, #10]
 8015f2a:	009b      	lsls	r3, r3, #2
 8015f2c:	b29b      	uxth	r3, r3
 8015f2e:	f003 0304 	and.w	r3, r3, #4
 8015f32:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015f34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f38:	891b      	ldrh	r3, [r3, #8]
 8015f3a:	4619      	mov	r1, r3
 8015f3c:	8c3b      	ldrh	r3, [r7, #32]
 8015f3e:	440b      	add	r3, r1
 8015f40:	429a      	cmp	r2, r3
 8015f42:	da06      	bge.n	8015f52 <tcp_write+0x116>
 8015f44:	4b74      	ldr	r3, [pc, #464]	; (8016118 <tcp_write+0x2dc>)
 8015f46:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015f4a:	4977      	ldr	r1, [pc, #476]	; (8016128 <tcp_write+0x2ec>)
 8015f4c:	4874      	ldr	r0, [pc, #464]	; (8016120 <tcp_write+0x2e4>)
 8015f4e:	f005 f95b 	bl	801b208 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f54:	891a      	ldrh	r2, [r3, #8]
 8015f56:	8c3b      	ldrh	r3, [r7, #32]
 8015f58:	4413      	add	r3, r2
 8015f5a:	b29b      	uxth	r3, r3
 8015f5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015f5e:	1ad3      	subs	r3, r2, r3
 8015f60:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015f68:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015f6a:	8a7b      	ldrh	r3, [r7, #18]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d026      	beq.n	8015fbe <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8015f70:	8a7b      	ldrh	r3, [r7, #18]
 8015f72:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015f74:	429a      	cmp	r2, r3
 8015f76:	d206      	bcs.n	8015f86 <tcp_write+0x14a>
 8015f78:	4b67      	ldr	r3, [pc, #412]	; (8016118 <tcp_write+0x2dc>)
 8015f7a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8015f7e:	496b      	ldr	r1, [pc, #428]	; (801612c <tcp_write+0x2f0>)
 8015f80:	4867      	ldr	r0, [pc, #412]	; (8016120 <tcp_write+0x2e4>)
 8015f82:	f005 f941 	bl	801b208 <iprintf>
      seg = last_unsent;
 8015f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f88:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015f8a:	8a7b      	ldrh	r3, [r7, #18]
 8015f8c:	88fa      	ldrh	r2, [r7, #6]
 8015f8e:	4293      	cmp	r3, r2
 8015f90:	bf28      	it	cs
 8015f92:	4613      	movcs	r3, r2
 8015f94:	b29b      	uxth	r3, r3
 8015f96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015f98:	4293      	cmp	r3, r2
 8015f9a:	bf28      	it	cs
 8015f9c:	4613      	movcs	r3, r2
 8015f9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015fa0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015fa4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015fa6:	4413      	add	r3, r2
 8015fa8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8015fac:	8a7a      	ldrh	r2, [r7, #18]
 8015fae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015fb0:	1ad3      	subs	r3, r2, r3
 8015fb2:	b29b      	uxth	r3, r3
 8015fb4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015fb6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015fb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015fba:	1ad3      	subs	r3, r2, r3
 8015fbc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8015fbe:	8a7b      	ldrh	r3, [r7, #18]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d00b      	beq.n	8015fdc <tcp_write+0x1a0>
 8015fc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015fc8:	88fb      	ldrh	r3, [r7, #6]
 8015fca:	429a      	cmp	r2, r3
 8015fcc:	d006      	beq.n	8015fdc <tcp_write+0x1a0>
 8015fce:	4b52      	ldr	r3, [pc, #328]	; (8016118 <tcp_write+0x2dc>)
 8015fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015fd4:	4956      	ldr	r1, [pc, #344]	; (8016130 <tcp_write+0x2f4>)
 8015fd6:	4852      	ldr	r0, [pc, #328]	; (8016120 <tcp_write+0x2e4>)
 8015fd8:	f005 f916 	bl	801b208 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015fdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015fe0:	88fb      	ldrh	r3, [r7, #6]
 8015fe2:	429a      	cmp	r2, r3
 8015fe4:	f080 8167 	bcs.w	80162b6 <tcp_write+0x47a>
 8015fe8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	f000 8163 	beq.w	80162b6 <tcp_write+0x47a>
 8015ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ff2:	891b      	ldrh	r3, [r3, #8]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	f000 815e 	beq.w	80162b6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8015ffa:	88fa      	ldrh	r2, [r7, #6]
 8015ffc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016000:	1ad2      	subs	r2, r2, r3
 8016002:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016004:	4293      	cmp	r3, r2
 8016006:	bfa8      	it	ge
 8016008:	4613      	movge	r3, r2
 801600a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801600c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801600e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016010:	797b      	ldrb	r3, [r7, #5]
 8016012:	f003 0301 	and.w	r3, r3, #1
 8016016:	2b00      	cmp	r3, #0
 8016018:	d027      	beq.n	801606a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801601a:	f107 0012 	add.w	r0, r7, #18
 801601e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016020:	8bf9      	ldrh	r1, [r7, #30]
 8016022:	2301      	movs	r3, #1
 8016024:	9302      	str	r3, [sp, #8]
 8016026:	797b      	ldrb	r3, [r7, #5]
 8016028:	9301      	str	r3, [sp, #4]
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	9300      	str	r3, [sp, #0]
 801602e:	4603      	mov	r3, r0
 8016030:	2000      	movs	r0, #0
 8016032:	f7ff fe0f 	bl	8015c54 <tcp_pbuf_prealloc>
 8016036:	6578      	str	r0, [r7, #84]	; 0x54
 8016038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801603a:	2b00      	cmp	r3, #0
 801603c:	f000 8225 	beq.w	801648a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016042:	6858      	ldr	r0, [r3, #4]
 8016044:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016048:	68ba      	ldr	r2, [r7, #8]
 801604a:	4413      	add	r3, r2
 801604c:	8bfa      	ldrh	r2, [r7, #30]
 801604e:	4619      	mov	r1, r3
 8016050:	f005 fa0f 	bl	801b472 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016054:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016056:	f7fb f97d 	bl	8011354 <pbuf_clen>
 801605a:	4603      	mov	r3, r0
 801605c:	461a      	mov	r2, r3
 801605e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016062:	4413      	add	r3, r2
 8016064:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8016068:	e041      	b.n	80160ee <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801606a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801606c:	685b      	ldr	r3, [r3, #4]
 801606e:	637b      	str	r3, [r7, #52]	; 0x34
 8016070:	e002      	b.n	8016078 <tcp_write+0x23c>
 8016072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	637b      	str	r3, [r7, #52]	; 0x34
 8016078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d1f8      	bne.n	8016072 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016082:	7b1b      	ldrb	r3, [r3, #12]
 8016084:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016088:	2b00      	cmp	r3, #0
 801608a:	d115      	bne.n	80160b8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801608c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801608e:	685b      	ldr	r3, [r3, #4]
 8016090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016092:	8952      	ldrh	r2, [r2, #10]
 8016094:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016096:	68ba      	ldr	r2, [r7, #8]
 8016098:	429a      	cmp	r2, r3
 801609a:	d10d      	bne.n	80160b8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801609c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d006      	beq.n	80160b2 <tcp_write+0x276>
 80160a4:	4b1c      	ldr	r3, [pc, #112]	; (8016118 <tcp_write+0x2dc>)
 80160a6:	f240 2231 	movw	r2, #561	; 0x231
 80160aa:	4922      	ldr	r1, [pc, #136]	; (8016134 <tcp_write+0x2f8>)
 80160ac:	481c      	ldr	r0, [pc, #112]	; (8016120 <tcp_write+0x2e4>)
 80160ae:	f005 f8ab 	bl	801b208 <iprintf>
          extendlen = seglen;
 80160b2:	8bfb      	ldrh	r3, [r7, #30]
 80160b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80160b6:	e01a      	b.n	80160ee <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80160b8:	8bfb      	ldrh	r3, [r7, #30]
 80160ba:	2201      	movs	r2, #1
 80160bc:	4619      	mov	r1, r3
 80160be:	2000      	movs	r0, #0
 80160c0:	f7fa fdd2 	bl	8010c68 <pbuf_alloc>
 80160c4:	6578      	str	r0, [r7, #84]	; 0x54
 80160c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	f000 81e0 	beq.w	801648e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80160ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80160d2:	68ba      	ldr	r2, [r7, #8]
 80160d4:	441a      	add	r2, r3
 80160d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160d8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80160da:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80160dc:	f7fb f93a 	bl	8011354 <pbuf_clen>
 80160e0:	4603      	mov	r3, r0
 80160e2:	461a      	mov	r2, r3
 80160e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80160e8:	4413      	add	r3, r2
 80160ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80160ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80160f2:	8bfb      	ldrh	r3, [r7, #30]
 80160f4:	4413      	add	r3, r2
 80160f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80160fa:	e0dc      	b.n	80162b6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016102:	2b00      	cmp	r3, #0
 8016104:	f000 80d7 	beq.w	80162b6 <tcp_write+0x47a>
 8016108:	4b03      	ldr	r3, [pc, #12]	; (8016118 <tcp_write+0x2dc>)
 801610a:	f240 224a 	movw	r2, #586	; 0x24a
 801610e:	490a      	ldr	r1, [pc, #40]	; (8016138 <tcp_write+0x2fc>)
 8016110:	4803      	ldr	r0, [pc, #12]	; (8016120 <tcp_write+0x2e4>)
 8016112:	f005 f879 	bl	801b208 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016116:	e0ce      	b.n	80162b6 <tcp_write+0x47a>
 8016118:	0801f120 	.word	0x0801f120
 801611c:	0801f2c0 	.word	0x0801f2c0
 8016120:	0801f174 	.word	0x0801f174
 8016124:	0801f2d8 	.word	0x0801f2d8
 8016128:	0801f30c 	.word	0x0801f30c
 801612c:	0801f324 	.word	0x0801f324
 8016130:	0801f344 	.word	0x0801f344
 8016134:	0801f364 	.word	0x0801f364
 8016138:	0801f390 	.word	0x0801f390
    struct pbuf *p;
    u16_t left = len - pos;
 801613c:	88fa      	ldrh	r2, [r7, #6]
 801613e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016142:	1ad3      	subs	r3, r2, r3
 8016144:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8016146:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801614a:	b29b      	uxth	r3, r3
 801614c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801614e:	1ad3      	subs	r3, r2, r3
 8016150:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016152:	8b7a      	ldrh	r2, [r7, #26]
 8016154:	8bbb      	ldrh	r3, [r7, #28]
 8016156:	4293      	cmp	r3, r2
 8016158:	bf28      	it	cs
 801615a:	4613      	movcs	r3, r2
 801615c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801615e:	797b      	ldrb	r3, [r7, #5]
 8016160:	f003 0301 	and.w	r3, r3, #1
 8016164:	2b00      	cmp	r3, #0
 8016166:	d036      	beq.n	80161d6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016168:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801616c:	b29a      	uxth	r2, r3
 801616e:	8b3b      	ldrh	r3, [r7, #24]
 8016170:	4413      	add	r3, r2
 8016172:	b299      	uxth	r1, r3
 8016174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016176:	2b00      	cmp	r3, #0
 8016178:	bf0c      	ite	eq
 801617a:	2301      	moveq	r3, #1
 801617c:	2300      	movne	r3, #0
 801617e:	b2db      	uxtb	r3, r3
 8016180:	f107 0012 	add.w	r0, r7, #18
 8016184:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016186:	9302      	str	r3, [sp, #8]
 8016188:	797b      	ldrb	r3, [r7, #5]
 801618a:	9301      	str	r3, [sp, #4]
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	9300      	str	r3, [sp, #0]
 8016190:	4603      	mov	r3, r0
 8016192:	2036      	movs	r0, #54	; 0x36
 8016194:	f7ff fd5e 	bl	8015c54 <tcp_pbuf_prealloc>
 8016198:	6338      	str	r0, [r7, #48]	; 0x30
 801619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801619c:	2b00      	cmp	r3, #0
 801619e:	f000 8178 	beq.w	8016492 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80161a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a4:	895b      	ldrh	r3, [r3, #10]
 80161a6:	8b3a      	ldrh	r2, [r7, #24]
 80161a8:	429a      	cmp	r2, r3
 80161aa:	d906      	bls.n	80161ba <tcp_write+0x37e>
 80161ac:	4b8c      	ldr	r3, [pc, #560]	; (80163e0 <tcp_write+0x5a4>)
 80161ae:	f240 2266 	movw	r2, #614	; 0x266
 80161b2:	498c      	ldr	r1, [pc, #560]	; (80163e4 <tcp_write+0x5a8>)
 80161b4:	488c      	ldr	r0, [pc, #560]	; (80163e8 <tcp_write+0x5ac>)
 80161b6:	f005 f827 	bl	801b208 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80161ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161bc:	685a      	ldr	r2, [r3, #4]
 80161be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80161c2:	18d0      	adds	r0, r2, r3
 80161c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161c8:	68ba      	ldr	r2, [r7, #8]
 80161ca:	4413      	add	r3, r2
 80161cc:	8b3a      	ldrh	r2, [r7, #24]
 80161ce:	4619      	mov	r1, r3
 80161d0:	f005 f94f 	bl	801b472 <memcpy>
 80161d4:	e02f      	b.n	8016236 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80161d6:	8a7b      	ldrh	r3, [r7, #18]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d006      	beq.n	80161ea <tcp_write+0x3ae>
 80161dc:	4b80      	ldr	r3, [pc, #512]	; (80163e0 <tcp_write+0x5a4>)
 80161de:	f240 2271 	movw	r2, #625	; 0x271
 80161e2:	4982      	ldr	r1, [pc, #520]	; (80163ec <tcp_write+0x5b0>)
 80161e4:	4880      	ldr	r0, [pc, #512]	; (80163e8 <tcp_write+0x5ac>)
 80161e6:	f005 f80f 	bl	801b208 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80161ea:	8b3b      	ldrh	r3, [r7, #24]
 80161ec:	2201      	movs	r2, #1
 80161ee:	4619      	mov	r1, r3
 80161f0:	2036      	movs	r0, #54	; 0x36
 80161f2:	f7fa fd39 	bl	8010c68 <pbuf_alloc>
 80161f6:	6178      	str	r0, [r7, #20]
 80161f8:	697b      	ldr	r3, [r7, #20]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	f000 814b 	beq.w	8016496 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016200:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016204:	68ba      	ldr	r2, [r7, #8]
 8016206:	441a      	add	r2, r3
 8016208:	697b      	ldr	r3, [r7, #20]
 801620a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801620c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016210:	b29b      	uxth	r3, r3
 8016212:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016216:	4619      	mov	r1, r3
 8016218:	2036      	movs	r0, #54	; 0x36
 801621a:	f7fa fd25 	bl	8010c68 <pbuf_alloc>
 801621e:	6338      	str	r0, [r7, #48]	; 0x30
 8016220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016222:	2b00      	cmp	r3, #0
 8016224:	d103      	bne.n	801622e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016226:	6978      	ldr	r0, [r7, #20]
 8016228:	f7fb f806 	bl	8011238 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801622c:	e136      	b.n	801649c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801622e:	6979      	ldr	r1, [r7, #20]
 8016230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016232:	f7fb f8cf 	bl	80113d4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016238:	f7fb f88c 	bl	8011354 <pbuf_clen>
 801623c:	4603      	mov	r3, r0
 801623e:	461a      	mov	r2, r3
 8016240:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016244:	4413      	add	r3, r2
 8016246:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801624a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801624e:	2b0f      	cmp	r3, #15
 8016250:	d903      	bls.n	801625a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016252:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016254:	f7fa fff0 	bl	8011238 <pbuf_free>
      goto memerr;
 8016258:	e120      	b.n	801649c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801625e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016262:	441a      	add	r2, r3
 8016264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016268:	9300      	str	r3, [sp, #0]
 801626a:	4613      	mov	r3, r2
 801626c:	2200      	movs	r2, #0
 801626e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016270:	68f8      	ldr	r0, [r7, #12]
 8016272:	f7ff fc51 	bl	8015b18 <tcp_create_segment>
 8016276:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801627a:	2b00      	cmp	r3, #0
 801627c:	f000 810d 	beq.w	801649a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016282:	2b00      	cmp	r3, #0
 8016284:	d102      	bne.n	801628c <tcp_write+0x450>
      queue = seg;
 8016286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016288:	647b      	str	r3, [r7, #68]	; 0x44
 801628a:	e00c      	b.n	80162a6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801628c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801628e:	2b00      	cmp	r3, #0
 8016290:	d106      	bne.n	80162a0 <tcp_write+0x464>
 8016292:	4b53      	ldr	r3, [pc, #332]	; (80163e0 <tcp_write+0x5a4>)
 8016294:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016298:	4955      	ldr	r1, [pc, #340]	; (80163f0 <tcp_write+0x5b4>)
 801629a:	4853      	ldr	r0, [pc, #332]	; (80163e8 <tcp_write+0x5ac>)
 801629c:	f004 ffb4 	bl	801b208 <iprintf>
      prev_seg->next = seg;
 80162a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80162a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80162a4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80162a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162a8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80162aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162ae:	8b3b      	ldrh	r3, [r7, #24]
 80162b0:	4413      	add	r3, r2
 80162b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80162b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162ba:	88fb      	ldrh	r3, [r7, #6]
 80162bc:	429a      	cmp	r2, r3
 80162be:	f4ff af3d 	bcc.w	801613c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80162c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d02c      	beq.n	8016322 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80162c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162ca:	685b      	ldr	r3, [r3, #4]
 80162cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162ce:	e01e      	b.n	801630e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80162d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162d2:	891a      	ldrh	r2, [r3, #8]
 80162d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162d6:	4413      	add	r3, r2
 80162d8:	b29a      	uxth	r2, r3
 80162da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162dc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80162de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d110      	bne.n	8016308 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80162e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e8:	685b      	ldr	r3, [r3, #4]
 80162ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162ec:	8952      	ldrh	r2, [r2, #10]
 80162ee:	4413      	add	r3, r2
 80162f0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80162f2:	68b9      	ldr	r1, [r7, #8]
 80162f4:	4618      	mov	r0, r3
 80162f6:	f005 f8bc 	bl	801b472 <memcpy>
        p->len += oversize_used;
 80162fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162fc:	895a      	ldrh	r2, [r3, #10]
 80162fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016300:	4413      	add	r3, r2
 8016302:	b29a      	uxth	r2, r3
 8016304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016306:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016310:	2b00      	cmp	r3, #0
 8016312:	d1dd      	bne.n	80162d0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016316:	891a      	ldrh	r2, [r3, #8]
 8016318:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801631a:	4413      	add	r3, r2
 801631c:	b29a      	uxth	r2, r3
 801631e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016320:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016322:	8a7a      	ldrh	r2, [r7, #18]
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801632a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801632c:	2b00      	cmp	r3, #0
 801632e:	d018      	beq.n	8016362 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016332:	2b00      	cmp	r3, #0
 8016334:	d106      	bne.n	8016344 <tcp_write+0x508>
 8016336:	4b2a      	ldr	r3, [pc, #168]	; (80163e0 <tcp_write+0x5a4>)
 8016338:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801633c:	492d      	ldr	r1, [pc, #180]	; (80163f4 <tcp_write+0x5b8>)
 801633e:	482a      	ldr	r0, [pc, #168]	; (80163e8 <tcp_write+0x5ac>)
 8016340:	f004 ff62 	bl	801b208 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016346:	685b      	ldr	r3, [r3, #4]
 8016348:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801634a:	4618      	mov	r0, r3
 801634c:	f7fb f842 	bl	80113d4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016352:	891a      	ldrh	r2, [r3, #8]
 8016354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016356:	891b      	ldrh	r3, [r3, #8]
 8016358:	4413      	add	r3, r2
 801635a:	b29a      	uxth	r2, r3
 801635c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801635e:	811a      	strh	r2, [r3, #8]
 8016360:	e037      	b.n	80163d2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8016362:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016364:	2b00      	cmp	r3, #0
 8016366:	d034      	beq.n	80163d2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8016368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801636a:	2b00      	cmp	r3, #0
 801636c:	d003      	beq.n	8016376 <tcp_write+0x53a>
 801636e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016370:	685b      	ldr	r3, [r3, #4]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d106      	bne.n	8016384 <tcp_write+0x548>
 8016376:	4b1a      	ldr	r3, [pc, #104]	; (80163e0 <tcp_write+0x5a4>)
 8016378:	f240 22e6 	movw	r2, #742	; 0x2e6
 801637c:	491e      	ldr	r1, [pc, #120]	; (80163f8 <tcp_write+0x5bc>)
 801637e:	481a      	ldr	r0, [pc, #104]	; (80163e8 <tcp_write+0x5ac>)
 8016380:	f004 ff42 	bl	801b208 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016386:	685b      	ldr	r3, [r3, #4]
 8016388:	62bb      	str	r3, [r7, #40]	; 0x28
 801638a:	e009      	b.n	80163a0 <tcp_write+0x564>
      p->tot_len += extendlen;
 801638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801638e:	891a      	ldrh	r2, [r3, #8]
 8016390:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016392:	4413      	add	r3, r2
 8016394:	b29a      	uxth	r2, r3
 8016396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016398:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	62bb      	str	r3, [r7, #40]	; 0x28
 80163a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d1f1      	bne.n	801638c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80163a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163aa:	891a      	ldrh	r2, [r3, #8]
 80163ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163ae:	4413      	add	r3, r2
 80163b0:	b29a      	uxth	r2, r3
 80163b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163b4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80163b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163b8:	895a      	ldrh	r2, [r3, #10]
 80163ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163bc:	4413      	add	r3, r2
 80163be:	b29a      	uxth	r2, r3
 80163c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163c2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80163c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163c6:	891a      	ldrh	r2, [r3, #8]
 80163c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163ca:	4413      	add	r3, r2
 80163cc:	b29a      	uxth	r2, r3
 80163ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163d0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80163d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d111      	bne.n	80163fc <tcp_write+0x5c0>
    pcb->unsent = queue;
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80163dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80163de:	e010      	b.n	8016402 <tcp_write+0x5c6>
 80163e0:	0801f120 	.word	0x0801f120
 80163e4:	0801f3c0 	.word	0x0801f3c0
 80163e8:	0801f174 	.word	0x0801f174
 80163ec:	0801f400 	.word	0x0801f400
 80163f0:	0801f410 	.word	0x0801f410
 80163f4:	0801f424 	.word	0x0801f424
 80163f8:	0801f45c 	.word	0x0801f45c
  } else {
    last_unsent->next = queue;
 80163fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016400:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016406:	88fb      	ldrh	r3, [r7, #6]
 8016408:	441a      	add	r2, r3
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016414:	88fb      	ldrh	r3, [r7, #6]
 8016416:	1ad3      	subs	r3, r2, r3
 8016418:	b29a      	uxth	r2, r3
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016426:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016430:	2b00      	cmp	r3, #0
 8016432:	d00e      	beq.n	8016452 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016438:	2b00      	cmp	r3, #0
 801643a:	d10a      	bne.n	8016452 <tcp_write+0x616>
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016440:	2b00      	cmp	r3, #0
 8016442:	d106      	bne.n	8016452 <tcp_write+0x616>
 8016444:	4b2c      	ldr	r3, [pc, #176]	; (80164f8 <tcp_write+0x6bc>)
 8016446:	f240 3212 	movw	r2, #786	; 0x312
 801644a:	492c      	ldr	r1, [pc, #176]	; (80164fc <tcp_write+0x6c0>)
 801644c:	482c      	ldr	r0, [pc, #176]	; (8016500 <tcp_write+0x6c4>)
 801644e:	f004 fedb 	bl	801b208 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8016452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016454:	2b00      	cmp	r3, #0
 8016456:	d016      	beq.n	8016486 <tcp_write+0x64a>
 8016458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801645a:	68db      	ldr	r3, [r3, #12]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d012      	beq.n	8016486 <tcp_write+0x64a>
 8016460:	797b      	ldrb	r3, [r7, #5]
 8016462:	f003 0302 	and.w	r3, r3, #2
 8016466:	2b00      	cmp	r3, #0
 8016468:	d10d      	bne.n	8016486 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801646a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801646c:	68db      	ldr	r3, [r3, #12]
 801646e:	899b      	ldrh	r3, [r3, #12]
 8016470:	b29c      	uxth	r4, r3
 8016472:	2008      	movs	r0, #8
 8016474:	f7f9 fac2 	bl	800f9fc <lwip_htons>
 8016478:	4603      	mov	r3, r0
 801647a:	461a      	mov	r2, r3
 801647c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801647e:	68db      	ldr	r3, [r3, #12]
 8016480:	4322      	orrs	r2, r4
 8016482:	b292      	uxth	r2, r2
 8016484:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8016486:	2300      	movs	r3, #0
 8016488:	e031      	b.n	80164ee <tcp_write+0x6b2>
          goto memerr;
 801648a:	bf00      	nop
 801648c:	e006      	b.n	801649c <tcp_write+0x660>
            goto memerr;
 801648e:	bf00      	nop
 8016490:	e004      	b.n	801649c <tcp_write+0x660>
        goto memerr;
 8016492:	bf00      	nop
 8016494:	e002      	b.n	801649c <tcp_write+0x660>
        goto memerr;
 8016496:	bf00      	nop
 8016498:	e000      	b.n	801649c <tcp_write+0x660>
      goto memerr;
 801649a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	8b5b      	ldrh	r3, [r3, #26]
 80164a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164a4:	b29a      	uxth	r2, r3
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80164aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d002      	beq.n	80164b6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80164b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80164b2:	f7fa fec1 	bl	8011238 <pbuf_free>
  }
  if (queue != NULL) {
 80164b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d002      	beq.n	80164c2 <tcp_write+0x686>
    tcp_segs_free(queue);
 80164bc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80164be:	f7fc fb83 	bl	8012bc8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d00e      	beq.n	80164ea <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d10a      	bne.n	80164ea <tcp_write+0x6ae>
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d106      	bne.n	80164ea <tcp_write+0x6ae>
 80164dc:	4b06      	ldr	r3, [pc, #24]	; (80164f8 <tcp_write+0x6bc>)
 80164de:	f240 3227 	movw	r2, #807	; 0x327
 80164e2:	4906      	ldr	r1, [pc, #24]	; (80164fc <tcp_write+0x6c0>)
 80164e4:	4806      	ldr	r0, [pc, #24]	; (8016500 <tcp_write+0x6c4>)
 80164e6:	f004 fe8f 	bl	801b208 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80164ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164ee:	4618      	mov	r0, r3
 80164f0:	375c      	adds	r7, #92	; 0x5c
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd90      	pop	{r4, r7, pc}
 80164f6:	bf00      	nop
 80164f8:	0801f120 	.word	0x0801f120
 80164fc:	0801f494 	.word	0x0801f494
 8016500:	0801f174 	.word	0x0801f174

08016504 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016504:	b590      	push	{r4, r7, lr}
 8016506:	b08b      	sub	sp, #44	; 0x2c
 8016508:	af02      	add	r7, sp, #8
 801650a:	6078      	str	r0, [r7, #4]
 801650c:	460b      	mov	r3, r1
 801650e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016510:	2300      	movs	r3, #0
 8016512:	61fb      	str	r3, [r7, #28]
 8016514:	2300      	movs	r3, #0
 8016516:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016518:	2300      	movs	r3, #0
 801651a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d106      	bne.n	8016530 <tcp_split_unsent_seg+0x2c>
 8016522:	4b95      	ldr	r3, [pc, #596]	; (8016778 <tcp_split_unsent_seg+0x274>)
 8016524:	f240 324b 	movw	r2, #843	; 0x34b
 8016528:	4994      	ldr	r1, [pc, #592]	; (801677c <tcp_split_unsent_seg+0x278>)
 801652a:	4895      	ldr	r0, [pc, #596]	; (8016780 <tcp_split_unsent_seg+0x27c>)
 801652c:	f004 fe6c 	bl	801b208 <iprintf>

  useg = pcb->unsent;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016534:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016536:	697b      	ldr	r3, [r7, #20]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d102      	bne.n	8016542 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801653c:	f04f 33ff 	mov.w	r3, #4294967295
 8016540:	e116      	b.n	8016770 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016542:	887b      	ldrh	r3, [r7, #2]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d109      	bne.n	801655c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016548:	4b8b      	ldr	r3, [pc, #556]	; (8016778 <tcp_split_unsent_seg+0x274>)
 801654a:	f240 3253 	movw	r2, #851	; 0x353
 801654e:	498d      	ldr	r1, [pc, #564]	; (8016784 <tcp_split_unsent_seg+0x280>)
 8016550:	488b      	ldr	r0, [pc, #556]	; (8016780 <tcp_split_unsent_seg+0x27c>)
 8016552:	f004 fe59 	bl	801b208 <iprintf>
    return ERR_VAL;
 8016556:	f06f 0305 	mvn.w	r3, #5
 801655a:	e109      	b.n	8016770 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801655c:	697b      	ldr	r3, [r7, #20]
 801655e:	891b      	ldrh	r3, [r3, #8]
 8016560:	887a      	ldrh	r2, [r7, #2]
 8016562:	429a      	cmp	r2, r3
 8016564:	d301      	bcc.n	801656a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016566:	2300      	movs	r3, #0
 8016568:	e102      	b.n	8016770 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801656e:	887a      	ldrh	r2, [r7, #2]
 8016570:	429a      	cmp	r2, r3
 8016572:	d906      	bls.n	8016582 <tcp_split_unsent_seg+0x7e>
 8016574:	4b80      	ldr	r3, [pc, #512]	; (8016778 <tcp_split_unsent_seg+0x274>)
 8016576:	f240 325b 	movw	r2, #859	; 0x35b
 801657a:	4983      	ldr	r1, [pc, #524]	; (8016788 <tcp_split_unsent_seg+0x284>)
 801657c:	4880      	ldr	r0, [pc, #512]	; (8016780 <tcp_split_unsent_seg+0x27c>)
 801657e:	f004 fe43 	bl	801b208 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016582:	697b      	ldr	r3, [r7, #20]
 8016584:	891b      	ldrh	r3, [r3, #8]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d106      	bne.n	8016598 <tcp_split_unsent_seg+0x94>
 801658a:	4b7b      	ldr	r3, [pc, #492]	; (8016778 <tcp_split_unsent_seg+0x274>)
 801658c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8016590:	497e      	ldr	r1, [pc, #504]	; (801678c <tcp_split_unsent_seg+0x288>)
 8016592:	487b      	ldr	r0, [pc, #492]	; (8016780 <tcp_split_unsent_seg+0x27c>)
 8016594:	f004 fe38 	bl	801b208 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016598:	697b      	ldr	r3, [r7, #20]
 801659a:	7a9b      	ldrb	r3, [r3, #10]
 801659c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801659e:	7bfb      	ldrb	r3, [r7, #15]
 80165a0:	009b      	lsls	r3, r3, #2
 80165a2:	b2db      	uxtb	r3, r3
 80165a4:	f003 0304 	and.w	r3, r3, #4
 80165a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80165aa:	697b      	ldr	r3, [r7, #20]
 80165ac:	891a      	ldrh	r2, [r3, #8]
 80165ae:	887b      	ldrh	r3, [r7, #2]
 80165b0:	1ad3      	subs	r3, r2, r3
 80165b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80165b4:	7bbb      	ldrb	r3, [r7, #14]
 80165b6:	b29a      	uxth	r2, r3
 80165b8:	89bb      	ldrh	r3, [r7, #12]
 80165ba:	4413      	add	r3, r2
 80165bc:	b29b      	uxth	r3, r3
 80165be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80165c2:	4619      	mov	r1, r3
 80165c4:	2036      	movs	r0, #54	; 0x36
 80165c6:	f7fa fb4f 	bl	8010c68 <pbuf_alloc>
 80165ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80165cc:	693b      	ldr	r3, [r7, #16]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	f000 80b7 	beq.w	8016742 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80165d4:	697b      	ldr	r3, [r7, #20]
 80165d6:	685b      	ldr	r3, [r3, #4]
 80165d8:	891a      	ldrh	r2, [r3, #8]
 80165da:	697b      	ldr	r3, [r7, #20]
 80165dc:	891b      	ldrh	r3, [r3, #8]
 80165de:	1ad3      	subs	r3, r2, r3
 80165e0:	b29a      	uxth	r2, r3
 80165e2:	887b      	ldrh	r3, [r7, #2]
 80165e4:	4413      	add	r3, r2
 80165e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80165e8:	697b      	ldr	r3, [r7, #20]
 80165ea:	6858      	ldr	r0, [r3, #4]
 80165ec:	693b      	ldr	r3, [r7, #16]
 80165ee:	685a      	ldr	r2, [r3, #4]
 80165f0:	7bbb      	ldrb	r3, [r7, #14]
 80165f2:	18d1      	adds	r1, r2, r3
 80165f4:	897b      	ldrh	r3, [r7, #10]
 80165f6:	89ba      	ldrh	r2, [r7, #12]
 80165f8:	f7fb f814 	bl	8011624 <pbuf_copy_partial>
 80165fc:	4603      	mov	r3, r0
 80165fe:	461a      	mov	r2, r3
 8016600:	89bb      	ldrh	r3, [r7, #12]
 8016602:	4293      	cmp	r3, r2
 8016604:	f040 809f 	bne.w	8016746 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	68db      	ldr	r3, [r3, #12]
 801660c:	899b      	ldrh	r3, [r3, #12]
 801660e:	b29b      	uxth	r3, r3
 8016610:	4618      	mov	r0, r3
 8016612:	f7f9 f9f3 	bl	800f9fc <lwip_htons>
 8016616:	4603      	mov	r3, r0
 8016618:	b2db      	uxtb	r3, r3
 801661a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801661e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016620:	2300      	movs	r3, #0
 8016622:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016624:	7efb      	ldrb	r3, [r7, #27]
 8016626:	f003 0308 	and.w	r3, r3, #8
 801662a:	2b00      	cmp	r3, #0
 801662c:	d007      	beq.n	801663e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801662e:	7efb      	ldrb	r3, [r7, #27]
 8016630:	f023 0308 	bic.w	r3, r3, #8
 8016634:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016636:	7ebb      	ldrb	r3, [r7, #26]
 8016638:	f043 0308 	orr.w	r3, r3, #8
 801663c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801663e:	7efb      	ldrb	r3, [r7, #27]
 8016640:	f003 0301 	and.w	r3, r3, #1
 8016644:	2b00      	cmp	r3, #0
 8016646:	d007      	beq.n	8016658 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016648:	7efb      	ldrb	r3, [r7, #27]
 801664a:	f023 0301 	bic.w	r3, r3, #1
 801664e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016650:	7ebb      	ldrb	r3, [r7, #26]
 8016652:	f043 0301 	orr.w	r3, r3, #1
 8016656:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016658:	697b      	ldr	r3, [r7, #20]
 801665a:	68db      	ldr	r3, [r3, #12]
 801665c:	685b      	ldr	r3, [r3, #4]
 801665e:	4618      	mov	r0, r3
 8016660:	f7f9 f9e1 	bl	800fa26 <lwip_htonl>
 8016664:	4602      	mov	r2, r0
 8016666:	887b      	ldrh	r3, [r7, #2]
 8016668:	18d1      	adds	r1, r2, r3
 801666a:	7eba      	ldrb	r2, [r7, #26]
 801666c:	7bfb      	ldrb	r3, [r7, #15]
 801666e:	9300      	str	r3, [sp, #0]
 8016670:	460b      	mov	r3, r1
 8016672:	6939      	ldr	r1, [r7, #16]
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	f7ff fa4f 	bl	8015b18 <tcp_create_segment>
 801667a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801667c:	69fb      	ldr	r3, [r7, #28]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d063      	beq.n	801674a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016682:	697b      	ldr	r3, [r7, #20]
 8016684:	685b      	ldr	r3, [r3, #4]
 8016686:	4618      	mov	r0, r3
 8016688:	f7fa fe64 	bl	8011354 <pbuf_clen>
 801668c:	4603      	mov	r3, r0
 801668e:	461a      	mov	r2, r3
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016696:	1a9b      	subs	r3, r3, r2
 8016698:	b29a      	uxth	r2, r3
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80166a0:	697b      	ldr	r3, [r7, #20]
 80166a2:	6858      	ldr	r0, [r3, #4]
 80166a4:	697b      	ldr	r3, [r7, #20]
 80166a6:	685b      	ldr	r3, [r3, #4]
 80166a8:	891a      	ldrh	r2, [r3, #8]
 80166aa:	89bb      	ldrh	r3, [r7, #12]
 80166ac:	1ad3      	subs	r3, r2, r3
 80166ae:	b29b      	uxth	r3, r3
 80166b0:	4619      	mov	r1, r3
 80166b2:	f7fa fc3b 	bl	8010f2c <pbuf_realloc>
  useg->len -= remainder;
 80166b6:	697b      	ldr	r3, [r7, #20]
 80166b8:	891a      	ldrh	r2, [r3, #8]
 80166ba:	89bb      	ldrh	r3, [r7, #12]
 80166bc:	1ad3      	subs	r3, r2, r3
 80166be:	b29a      	uxth	r2, r3
 80166c0:	697b      	ldr	r3, [r7, #20]
 80166c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	68db      	ldr	r3, [r3, #12]
 80166c8:	899b      	ldrh	r3, [r3, #12]
 80166ca:	b29c      	uxth	r4, r3
 80166cc:	7efb      	ldrb	r3, [r7, #27]
 80166ce:	b29b      	uxth	r3, r3
 80166d0:	4618      	mov	r0, r3
 80166d2:	f7f9 f993 	bl	800f9fc <lwip_htons>
 80166d6:	4603      	mov	r3, r0
 80166d8:	461a      	mov	r2, r3
 80166da:	697b      	ldr	r3, [r7, #20]
 80166dc:	68db      	ldr	r3, [r3, #12]
 80166de:	4322      	orrs	r2, r4
 80166e0:	b292      	uxth	r2, r2
 80166e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80166e4:	697b      	ldr	r3, [r7, #20]
 80166e6:	685b      	ldr	r3, [r3, #4]
 80166e8:	4618      	mov	r0, r3
 80166ea:	f7fa fe33 	bl	8011354 <pbuf_clen>
 80166ee:	4603      	mov	r3, r0
 80166f0:	461a      	mov	r2, r3
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80166f8:	4413      	add	r3, r2
 80166fa:	b29a      	uxth	r2, r3
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016702:	69fb      	ldr	r3, [r7, #28]
 8016704:	685b      	ldr	r3, [r3, #4]
 8016706:	4618      	mov	r0, r3
 8016708:	f7fa fe24 	bl	8011354 <pbuf_clen>
 801670c:	4603      	mov	r3, r0
 801670e:	461a      	mov	r2, r3
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016716:	4413      	add	r3, r2
 8016718:	b29a      	uxth	r2, r3
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016720:	697b      	ldr	r3, [r7, #20]
 8016722:	681a      	ldr	r2, [r3, #0]
 8016724:	69fb      	ldr	r3, [r7, #28]
 8016726:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016728:	697b      	ldr	r3, [r7, #20]
 801672a:	69fa      	ldr	r2, [r7, #28]
 801672c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801672e:	69fb      	ldr	r3, [r7, #28]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d103      	bne.n	801673e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	2200      	movs	r2, #0
 801673a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801673e:	2300      	movs	r3, #0
 8016740:	e016      	b.n	8016770 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016742:	bf00      	nop
 8016744:	e002      	b.n	801674c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016746:	bf00      	nop
 8016748:	e000      	b.n	801674c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801674a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801674c:	69fb      	ldr	r3, [r7, #28]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d006      	beq.n	8016760 <tcp_split_unsent_seg+0x25c>
 8016752:	4b09      	ldr	r3, [pc, #36]	; (8016778 <tcp_split_unsent_seg+0x274>)
 8016754:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016758:	490d      	ldr	r1, [pc, #52]	; (8016790 <tcp_split_unsent_seg+0x28c>)
 801675a:	4809      	ldr	r0, [pc, #36]	; (8016780 <tcp_split_unsent_seg+0x27c>)
 801675c:	f004 fd54 	bl	801b208 <iprintf>
  if (p != NULL) {
 8016760:	693b      	ldr	r3, [r7, #16]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d002      	beq.n	801676c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016766:	6938      	ldr	r0, [r7, #16]
 8016768:	f7fa fd66 	bl	8011238 <pbuf_free>
  }

  return ERR_MEM;
 801676c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016770:	4618      	mov	r0, r3
 8016772:	3724      	adds	r7, #36	; 0x24
 8016774:	46bd      	mov	sp, r7
 8016776:	bd90      	pop	{r4, r7, pc}
 8016778:	0801f120 	.word	0x0801f120
 801677c:	0801f4b4 	.word	0x0801f4b4
 8016780:	0801f174 	.word	0x0801f174
 8016784:	0801f4d8 	.word	0x0801f4d8
 8016788:	0801f4fc 	.word	0x0801f4fc
 801678c:	0801f50c 	.word	0x0801f50c
 8016790:	0801f51c 	.word	0x0801f51c

08016794 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016794:	b590      	push	{r4, r7, lr}
 8016796:	b085      	sub	sp, #20
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d106      	bne.n	80167b0 <tcp_send_fin+0x1c>
 80167a2:	4b21      	ldr	r3, [pc, #132]	; (8016828 <tcp_send_fin+0x94>)
 80167a4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80167a8:	4920      	ldr	r1, [pc, #128]	; (801682c <tcp_send_fin+0x98>)
 80167aa:	4821      	ldr	r0, [pc, #132]	; (8016830 <tcp_send_fin+0x9c>)
 80167ac:	f004 fd2c 	bl	801b208 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d02e      	beq.n	8016816 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167bc:	60fb      	str	r3, [r7, #12]
 80167be:	e002      	b.n	80167c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d1f8      	bne.n	80167c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	68db      	ldr	r3, [r3, #12]
 80167d2:	899b      	ldrh	r3, [r3, #12]
 80167d4:	b29b      	uxth	r3, r3
 80167d6:	4618      	mov	r0, r3
 80167d8:	f7f9 f910 	bl	800f9fc <lwip_htons>
 80167dc:	4603      	mov	r3, r0
 80167de:	b2db      	uxtb	r3, r3
 80167e0:	f003 0307 	and.w	r3, r3, #7
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d116      	bne.n	8016816 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	68db      	ldr	r3, [r3, #12]
 80167ec:	899b      	ldrh	r3, [r3, #12]
 80167ee:	b29c      	uxth	r4, r3
 80167f0:	2001      	movs	r0, #1
 80167f2:	f7f9 f903 	bl	800f9fc <lwip_htons>
 80167f6:	4603      	mov	r3, r0
 80167f8:	461a      	mov	r2, r3
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	68db      	ldr	r3, [r3, #12]
 80167fe:	4322      	orrs	r2, r4
 8016800:	b292      	uxth	r2, r2
 8016802:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	8b5b      	ldrh	r3, [r3, #26]
 8016808:	f043 0320 	orr.w	r3, r3, #32
 801680c:	b29a      	uxth	r2, r3
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016812:	2300      	movs	r3, #0
 8016814:	e004      	b.n	8016820 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016816:	2101      	movs	r1, #1
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	f000 f80b 	bl	8016834 <tcp_enqueue_flags>
 801681e:	4603      	mov	r3, r0
}
 8016820:	4618      	mov	r0, r3
 8016822:	3714      	adds	r7, #20
 8016824:	46bd      	mov	sp, r7
 8016826:	bd90      	pop	{r4, r7, pc}
 8016828:	0801f120 	.word	0x0801f120
 801682c:	0801f528 	.word	0x0801f528
 8016830:	0801f174 	.word	0x0801f174

08016834 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b08a      	sub	sp, #40	; 0x28
 8016838:	af02      	add	r7, sp, #8
 801683a:	6078      	str	r0, [r7, #4]
 801683c:	460b      	mov	r3, r1
 801683e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016840:	2300      	movs	r3, #0
 8016842:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016844:	2300      	movs	r3, #0
 8016846:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016848:	78fb      	ldrb	r3, [r7, #3]
 801684a:	f003 0303 	and.w	r3, r3, #3
 801684e:	2b00      	cmp	r3, #0
 8016850:	d106      	bne.n	8016860 <tcp_enqueue_flags+0x2c>
 8016852:	4b67      	ldr	r3, [pc, #412]	; (80169f0 <tcp_enqueue_flags+0x1bc>)
 8016854:	f240 4211 	movw	r2, #1041	; 0x411
 8016858:	4966      	ldr	r1, [pc, #408]	; (80169f4 <tcp_enqueue_flags+0x1c0>)
 801685a:	4867      	ldr	r0, [pc, #412]	; (80169f8 <tcp_enqueue_flags+0x1c4>)
 801685c:	f004 fcd4 	bl	801b208 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d106      	bne.n	8016874 <tcp_enqueue_flags+0x40>
 8016866:	4b62      	ldr	r3, [pc, #392]	; (80169f0 <tcp_enqueue_flags+0x1bc>)
 8016868:	f240 4213 	movw	r2, #1043	; 0x413
 801686c:	4963      	ldr	r1, [pc, #396]	; (80169fc <tcp_enqueue_flags+0x1c8>)
 801686e:	4862      	ldr	r0, [pc, #392]	; (80169f8 <tcp_enqueue_flags+0x1c4>)
 8016870:	f004 fcca 	bl	801b208 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016874:	78fb      	ldrb	r3, [r7, #3]
 8016876:	f003 0302 	and.w	r3, r3, #2
 801687a:	2b00      	cmp	r3, #0
 801687c:	d001      	beq.n	8016882 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801687e:	2301      	movs	r3, #1
 8016880:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016882:	7ffb      	ldrb	r3, [r7, #31]
 8016884:	009b      	lsls	r3, r3, #2
 8016886:	b2db      	uxtb	r3, r3
 8016888:	f003 0304 	and.w	r3, r3, #4
 801688c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801688e:	7dfb      	ldrb	r3, [r7, #23]
 8016890:	b29b      	uxth	r3, r3
 8016892:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016896:	4619      	mov	r1, r3
 8016898:	2036      	movs	r0, #54	; 0x36
 801689a:	f7fa f9e5 	bl	8010c68 <pbuf_alloc>
 801689e:	6138      	str	r0, [r7, #16]
 80168a0:	693b      	ldr	r3, [r7, #16]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d109      	bne.n	80168ba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	8b5b      	ldrh	r3, [r3, #26]
 80168aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168ae:	b29a      	uxth	r2, r3
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80168b4:	f04f 33ff 	mov.w	r3, #4294967295
 80168b8:	e095      	b.n	80169e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80168ba:	693b      	ldr	r3, [r7, #16]
 80168bc:	895a      	ldrh	r2, [r3, #10]
 80168be:	7dfb      	ldrb	r3, [r7, #23]
 80168c0:	b29b      	uxth	r3, r3
 80168c2:	429a      	cmp	r2, r3
 80168c4:	d206      	bcs.n	80168d4 <tcp_enqueue_flags+0xa0>
 80168c6:	4b4a      	ldr	r3, [pc, #296]	; (80169f0 <tcp_enqueue_flags+0x1bc>)
 80168c8:	f240 4239 	movw	r2, #1081	; 0x439
 80168cc:	494c      	ldr	r1, [pc, #304]	; (8016a00 <tcp_enqueue_flags+0x1cc>)
 80168ce:	484a      	ldr	r0, [pc, #296]	; (80169f8 <tcp_enqueue_flags+0x1c4>)
 80168d0:	f004 fc9a 	bl	801b208 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80168d8:	78fa      	ldrb	r2, [r7, #3]
 80168da:	7ffb      	ldrb	r3, [r7, #31]
 80168dc:	9300      	str	r3, [sp, #0]
 80168de:	460b      	mov	r3, r1
 80168e0:	6939      	ldr	r1, [r7, #16]
 80168e2:	6878      	ldr	r0, [r7, #4]
 80168e4:	f7ff f918 	bl	8015b18 <tcp_create_segment>
 80168e8:	60f8      	str	r0, [r7, #12]
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d109      	bne.n	8016904 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	8b5b      	ldrh	r3, [r3, #26]
 80168f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168f8:	b29a      	uxth	r2, r3
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80168fe:	f04f 33ff 	mov.w	r3, #4294967295
 8016902:	e070      	b.n	80169e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	68db      	ldr	r3, [r3, #12]
 8016908:	f003 0303 	and.w	r3, r3, #3
 801690c:	2b00      	cmp	r3, #0
 801690e:	d006      	beq.n	801691e <tcp_enqueue_flags+0xea>
 8016910:	4b37      	ldr	r3, [pc, #220]	; (80169f0 <tcp_enqueue_flags+0x1bc>)
 8016912:	f240 4242 	movw	r2, #1090	; 0x442
 8016916:	493b      	ldr	r1, [pc, #236]	; (8016a04 <tcp_enqueue_flags+0x1d0>)
 8016918:	4837      	ldr	r0, [pc, #220]	; (80169f8 <tcp_enqueue_flags+0x1c4>)
 801691a:	f004 fc75 	bl	801b208 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	891b      	ldrh	r3, [r3, #8]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d006      	beq.n	8016934 <tcp_enqueue_flags+0x100>
 8016926:	4b32      	ldr	r3, [pc, #200]	; (80169f0 <tcp_enqueue_flags+0x1bc>)
 8016928:	f240 4243 	movw	r2, #1091	; 0x443
 801692c:	4936      	ldr	r1, [pc, #216]	; (8016a08 <tcp_enqueue_flags+0x1d4>)
 801692e:	4832      	ldr	r0, [pc, #200]	; (80169f8 <tcp_enqueue_flags+0x1c4>)
 8016930:	f004 fc6a 	bl	801b208 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016938:	2b00      	cmp	r3, #0
 801693a:	d103      	bne.n	8016944 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	68fa      	ldr	r2, [r7, #12]
 8016940:	66da      	str	r2, [r3, #108]	; 0x6c
 8016942:	e00d      	b.n	8016960 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016948:	61bb      	str	r3, [r7, #24]
 801694a:	e002      	b.n	8016952 <tcp_enqueue_flags+0x11e>
 801694c:	69bb      	ldr	r3, [r7, #24]
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	61bb      	str	r3, [r7, #24]
 8016952:	69bb      	ldr	r3, [r7, #24]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d1f8      	bne.n	801694c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801695a:	69bb      	ldr	r3, [r7, #24]
 801695c:	68fa      	ldr	r2, [r7, #12]
 801695e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	2200      	movs	r2, #0
 8016964:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016968:	78fb      	ldrb	r3, [r7, #3]
 801696a:	f003 0302 	and.w	r3, r3, #2
 801696e:	2b00      	cmp	r3, #0
 8016970:	d104      	bne.n	801697c <tcp_enqueue_flags+0x148>
 8016972:	78fb      	ldrb	r3, [r7, #3]
 8016974:	f003 0301 	and.w	r3, r3, #1
 8016978:	2b00      	cmp	r3, #0
 801697a:	d004      	beq.n	8016986 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016980:	1c5a      	adds	r2, r3, #1
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016986:	78fb      	ldrb	r3, [r7, #3]
 8016988:	f003 0301 	and.w	r3, r3, #1
 801698c:	2b00      	cmp	r3, #0
 801698e:	d006      	beq.n	801699e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	8b5b      	ldrh	r3, [r3, #26]
 8016994:	f043 0320 	orr.w	r3, r3, #32
 8016998:	b29a      	uxth	r2, r3
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	685b      	ldr	r3, [r3, #4]
 80169a2:	4618      	mov	r0, r3
 80169a4:	f7fa fcd6 	bl	8011354 <pbuf_clen>
 80169a8:	4603      	mov	r3, r0
 80169aa:	461a      	mov	r2, r3
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80169b2:	4413      	add	r3, r2
 80169b4:	b29a      	uxth	r2, r3
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d00e      	beq.n	80169e4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d10a      	bne.n	80169e4 <tcp_enqueue_flags+0x1b0>
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d106      	bne.n	80169e4 <tcp_enqueue_flags+0x1b0>
 80169d6:	4b06      	ldr	r3, [pc, #24]	; (80169f0 <tcp_enqueue_flags+0x1bc>)
 80169d8:	f240 4265 	movw	r2, #1125	; 0x465
 80169dc:	490b      	ldr	r1, [pc, #44]	; (8016a0c <tcp_enqueue_flags+0x1d8>)
 80169de:	4806      	ldr	r0, [pc, #24]	; (80169f8 <tcp_enqueue_flags+0x1c4>)
 80169e0:	f004 fc12 	bl	801b208 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80169e4:	2300      	movs	r3, #0
}
 80169e6:	4618      	mov	r0, r3
 80169e8:	3720      	adds	r7, #32
 80169ea:	46bd      	mov	sp, r7
 80169ec:	bd80      	pop	{r7, pc}
 80169ee:	bf00      	nop
 80169f0:	0801f120 	.word	0x0801f120
 80169f4:	0801f544 	.word	0x0801f544
 80169f8:	0801f174 	.word	0x0801f174
 80169fc:	0801f59c 	.word	0x0801f59c
 8016a00:	0801f5bc 	.word	0x0801f5bc
 8016a04:	0801f5f8 	.word	0x0801f5f8
 8016a08:	0801f610 	.word	0x0801f610
 8016a0c:	0801f63c 	.word	0x0801f63c

08016a10 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016a10:	b5b0      	push	{r4, r5, r7, lr}
 8016a12:	b08a      	sub	sp, #40	; 0x28
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d106      	bne.n	8016a2c <tcp_output+0x1c>
 8016a1e:	4b8a      	ldr	r3, [pc, #552]	; (8016c48 <tcp_output+0x238>)
 8016a20:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016a24:	4989      	ldr	r1, [pc, #548]	; (8016c4c <tcp_output+0x23c>)
 8016a26:	488a      	ldr	r0, [pc, #552]	; (8016c50 <tcp_output+0x240>)
 8016a28:	f004 fbee 	bl	801b208 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	7d1b      	ldrb	r3, [r3, #20]
 8016a30:	2b01      	cmp	r3, #1
 8016a32:	d106      	bne.n	8016a42 <tcp_output+0x32>
 8016a34:	4b84      	ldr	r3, [pc, #528]	; (8016c48 <tcp_output+0x238>)
 8016a36:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016a3a:	4986      	ldr	r1, [pc, #536]	; (8016c54 <tcp_output+0x244>)
 8016a3c:	4884      	ldr	r0, [pc, #528]	; (8016c50 <tcp_output+0x240>)
 8016a3e:	f004 fbe3 	bl	801b208 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016a42:	4b85      	ldr	r3, [pc, #532]	; (8016c58 <tcp_output+0x248>)
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	687a      	ldr	r2, [r7, #4]
 8016a48:	429a      	cmp	r2, r3
 8016a4a:	d101      	bne.n	8016a50 <tcp_output+0x40>
    return ERR_OK;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	e1ce      	b.n	8016dee <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016a5c:	4293      	cmp	r3, r2
 8016a5e:	bf28      	it	cs
 8016a60:	4613      	movcs	r3, r2
 8016a62:	b29b      	uxth	r3, r3
 8016a64:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d10b      	bne.n	8016a8a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	8b5b      	ldrh	r3, [r3, #26]
 8016a76:	f003 0302 	and.w	r3, r3, #2
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	f000 81aa 	beq.w	8016dd4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016a80:	6878      	ldr	r0, [r7, #4]
 8016a82:	f000 fdcb 	bl	801761c <tcp_send_empty_ack>
 8016a86:	4603      	mov	r3, r0
 8016a88:	e1b1      	b.n	8016dee <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016a8a:	6879      	ldr	r1, [r7, #4]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	3304      	adds	r3, #4
 8016a90:	461a      	mov	r2, r3
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	f7ff f824 	bl	8015ae0 <tcp_route>
 8016a98:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016a9a:	697b      	ldr	r3, [r7, #20]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d102      	bne.n	8016aa6 <tcp_output+0x96>
    return ERR_RTE;
 8016aa0:	f06f 0303 	mvn.w	r3, #3
 8016aa4:	e1a3      	b.n	8016dee <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d003      	beq.n	8016ab4 <tcp_output+0xa4>
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d111      	bne.n	8016ad8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016ab4:	697b      	ldr	r3, [r7, #20]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d002      	beq.n	8016ac0 <tcp_output+0xb0>
 8016aba:	697b      	ldr	r3, [r7, #20]
 8016abc:	3304      	adds	r3, #4
 8016abe:	e000      	b.n	8016ac2 <tcp_output+0xb2>
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d102      	bne.n	8016ad0 <tcp_output+0xc0>
      return ERR_RTE;
 8016aca:	f06f 0303 	mvn.w	r3, #3
 8016ace:	e18e      	b.n	8016dee <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016ad0:	693b      	ldr	r3, [r7, #16]
 8016ad2:	681a      	ldr	r2, [r3, #0]
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ada:	68db      	ldr	r3, [r3, #12]
 8016adc:	685b      	ldr	r3, [r3, #4]
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f7f8 ffa1 	bl	800fa26 <lwip_htonl>
 8016ae4:	4602      	mov	r2, r0
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016aea:	1ad3      	subs	r3, r2, r3
 8016aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016aee:	8912      	ldrh	r2, [r2, #8]
 8016af0:	4413      	add	r3, r2
 8016af2:	69ba      	ldr	r2, [r7, #24]
 8016af4:	429a      	cmp	r2, r3
 8016af6:	d227      	bcs.n	8016b48 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016afe:	461a      	mov	r2, r3
 8016b00:	69bb      	ldr	r3, [r7, #24]
 8016b02:	4293      	cmp	r3, r2
 8016b04:	d114      	bne.n	8016b30 <tcp_output+0x120>
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d110      	bne.n	8016b30 <tcp_output+0x120>
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d10b      	bne.n	8016b30 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	2201      	movs	r2, #1
 8016b24:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	8b5b      	ldrh	r3, [r3, #26]
 8016b34:	f003 0302 	and.w	r3, r3, #2
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	f000 814d 	beq.w	8016dd8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016b3e:	6878      	ldr	r0, [r7, #4]
 8016b40:	f000 fd6c 	bl	801761c <tcp_send_empty_ack>
 8016b44:	4603      	mov	r3, r0
 8016b46:	e152      	b.n	8016dee <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	2200      	movs	r2, #0
 8016b4c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b54:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016b56:	6a3b      	ldr	r3, [r7, #32]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	f000 811c 	beq.w	8016d96 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016b5e:	e002      	b.n	8016b66 <tcp_output+0x156>
 8016b60:	6a3b      	ldr	r3, [r7, #32]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	623b      	str	r3, [r7, #32]
 8016b66:	6a3b      	ldr	r3, [r7, #32]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d1f8      	bne.n	8016b60 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016b6e:	e112      	b.n	8016d96 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b72:	68db      	ldr	r3, [r3, #12]
 8016b74:	899b      	ldrh	r3, [r3, #12]
 8016b76:	b29b      	uxth	r3, r3
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7f8 ff3f 	bl	800f9fc <lwip_htons>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	b2db      	uxtb	r3, r3
 8016b82:	f003 0304 	and.w	r3, r3, #4
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d006      	beq.n	8016b98 <tcp_output+0x188>
 8016b8a:	4b2f      	ldr	r3, [pc, #188]	; (8016c48 <tcp_output+0x238>)
 8016b8c:	f240 5236 	movw	r2, #1334	; 0x536
 8016b90:	4932      	ldr	r1, [pc, #200]	; (8016c5c <tcp_output+0x24c>)
 8016b92:	482f      	ldr	r0, [pc, #188]	; (8016c50 <tcp_output+0x240>)
 8016b94:	f004 fb38 	bl	801b208 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d01f      	beq.n	8016be0 <tcp_output+0x1d0>
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	8b5b      	ldrh	r3, [r3, #26]
 8016ba4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d119      	bne.n	8016be0 <tcp_output+0x1d0>
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d00b      	beq.n	8016bcc <tcp_output+0x1bc>
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d110      	bne.n	8016be0 <tcp_output+0x1d0>
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bc2:	891a      	ldrh	r2, [r3, #8]
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016bc8:	429a      	cmp	r2, r3
 8016bca:	d209      	bcs.n	8016be0 <tcp_output+0x1d0>
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d004      	beq.n	8016be0 <tcp_output+0x1d0>
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016bdc:	2b0e      	cmp	r3, #14
 8016bde:	d901      	bls.n	8016be4 <tcp_output+0x1d4>
 8016be0:	2301      	movs	r3, #1
 8016be2:	e000      	b.n	8016be6 <tcp_output+0x1d6>
 8016be4:	2300      	movs	r3, #0
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d106      	bne.n	8016bf8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	8b5b      	ldrh	r3, [r3, #26]
 8016bee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	f000 80e4 	beq.w	8016dc0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	7d1b      	ldrb	r3, [r3, #20]
 8016bfc:	2b02      	cmp	r3, #2
 8016bfe:	d00d      	beq.n	8016c1c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c02:	68db      	ldr	r3, [r3, #12]
 8016c04:	899b      	ldrh	r3, [r3, #12]
 8016c06:	b29c      	uxth	r4, r3
 8016c08:	2010      	movs	r0, #16
 8016c0a:	f7f8 fef7 	bl	800f9fc <lwip_htons>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	461a      	mov	r2, r3
 8016c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c14:	68db      	ldr	r3, [r3, #12]
 8016c16:	4322      	orrs	r2, r4
 8016c18:	b292      	uxth	r2, r2
 8016c1a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016c1c:	697a      	ldr	r2, [r7, #20]
 8016c1e:	6879      	ldr	r1, [r7, #4]
 8016c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c22:	f000 f909 	bl	8016e38 <tcp_output_segment>
 8016c26:	4603      	mov	r3, r0
 8016c28:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d016      	beq.n	8016c60 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	8b5b      	ldrh	r3, [r3, #26]
 8016c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c3a:	b29a      	uxth	r2, r3
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	835a      	strh	r2, [r3, #26]
      return err;
 8016c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c44:	e0d3      	b.n	8016dee <tcp_output+0x3de>
 8016c46:	bf00      	nop
 8016c48:	0801f120 	.word	0x0801f120
 8016c4c:	0801f664 	.word	0x0801f664
 8016c50:	0801f174 	.word	0x0801f174
 8016c54:	0801f67c 	.word	0x0801f67c
 8016c58:	2001dd30 	.word	0x2001dd30
 8016c5c:	0801f6a4 	.word	0x0801f6a4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c62:	681a      	ldr	r2, [r3, #0]
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	7d1b      	ldrb	r3, [r3, #20]
 8016c6c:	2b02      	cmp	r3, #2
 8016c6e:	d006      	beq.n	8016c7e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	8b5b      	ldrh	r3, [r3, #26]
 8016c74:	f023 0303 	bic.w	r3, r3, #3
 8016c78:	b29a      	uxth	r2, r3
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c80:	68db      	ldr	r3, [r3, #12]
 8016c82:	685b      	ldr	r3, [r3, #4]
 8016c84:	4618      	mov	r0, r3
 8016c86:	f7f8 fece 	bl	800fa26 <lwip_htonl>
 8016c8a:	4604      	mov	r4, r0
 8016c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c8e:	891b      	ldrh	r3, [r3, #8]
 8016c90:	461d      	mov	r5, r3
 8016c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c94:	68db      	ldr	r3, [r3, #12]
 8016c96:	899b      	ldrh	r3, [r3, #12]
 8016c98:	b29b      	uxth	r3, r3
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f7f8 feae 	bl	800f9fc <lwip_htons>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	b2db      	uxtb	r3, r3
 8016ca4:	f003 0303 	and.w	r3, r3, #3
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d001      	beq.n	8016cb0 <tcp_output+0x2a0>
 8016cac:	2301      	movs	r3, #1
 8016cae:	e000      	b.n	8016cb2 <tcp_output+0x2a2>
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	442b      	add	r3, r5
 8016cb4:	4423      	add	r3, r4
 8016cb6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016cbc:	68bb      	ldr	r3, [r7, #8]
 8016cbe:	1ad3      	subs	r3, r2, r3
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	da02      	bge.n	8016cca <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	68ba      	ldr	r2, [r7, #8]
 8016cc8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ccc:	891b      	ldrh	r3, [r3, #8]
 8016cce:	461c      	mov	r4, r3
 8016cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd2:	68db      	ldr	r3, [r3, #12]
 8016cd4:	899b      	ldrh	r3, [r3, #12]
 8016cd6:	b29b      	uxth	r3, r3
 8016cd8:	4618      	mov	r0, r3
 8016cda:	f7f8 fe8f 	bl	800f9fc <lwip_htons>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	b2db      	uxtb	r3, r3
 8016ce2:	f003 0303 	and.w	r3, r3, #3
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d001      	beq.n	8016cee <tcp_output+0x2de>
 8016cea:	2301      	movs	r3, #1
 8016cec:	e000      	b.n	8016cf0 <tcp_output+0x2e0>
 8016cee:	2300      	movs	r3, #0
 8016cf0:	4423      	add	r3, r4
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d049      	beq.n	8016d8a <tcp_output+0x37a>
      seg->next = NULL;
 8016cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf8:	2200      	movs	r2, #0
 8016cfa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d105      	bne.n	8016d10 <tcp_output+0x300>
        pcb->unacked = seg;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d08:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0c:	623b      	str	r3, [r7, #32]
 8016d0e:	e03f      	b.n	8016d90 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d12:	68db      	ldr	r3, [r3, #12]
 8016d14:	685b      	ldr	r3, [r3, #4]
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7f8 fe85 	bl	800fa26 <lwip_htonl>
 8016d1c:	4604      	mov	r4, r0
 8016d1e:	6a3b      	ldr	r3, [r7, #32]
 8016d20:	68db      	ldr	r3, [r3, #12]
 8016d22:	685b      	ldr	r3, [r3, #4]
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7f8 fe7e 	bl	800fa26 <lwip_htonl>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	1ae3      	subs	r3, r4, r3
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	da24      	bge.n	8016d7c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	3370      	adds	r3, #112	; 0x70
 8016d36:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016d38:	e002      	b.n	8016d40 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016d3a:	69fb      	ldr	r3, [r7, #28]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016d40:	69fb      	ldr	r3, [r7, #28]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d011      	beq.n	8016d6c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016d48:	69fb      	ldr	r3, [r7, #28]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	68db      	ldr	r3, [r3, #12]
 8016d4e:	685b      	ldr	r3, [r3, #4]
 8016d50:	4618      	mov	r0, r3
 8016d52:	f7f8 fe68 	bl	800fa26 <lwip_htonl>
 8016d56:	4604      	mov	r4, r0
 8016d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d5a:	68db      	ldr	r3, [r3, #12]
 8016d5c:	685b      	ldr	r3, [r3, #4]
 8016d5e:	4618      	mov	r0, r3
 8016d60:	f7f8 fe61 	bl	800fa26 <lwip_htonl>
 8016d64:	4603      	mov	r3, r0
 8016d66:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	dbe6      	blt.n	8016d3a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016d6c:	69fb      	ldr	r3, [r7, #28]
 8016d6e:	681a      	ldr	r2, [r3, #0]
 8016d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d72:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016d74:	69fb      	ldr	r3, [r7, #28]
 8016d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d78:	601a      	str	r2, [r3, #0]
 8016d7a:	e009      	b.n	8016d90 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016d7c:	6a3b      	ldr	r3, [r7, #32]
 8016d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d80:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016d82:	6a3b      	ldr	r3, [r7, #32]
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	623b      	str	r3, [r7, #32]
 8016d88:	e002      	b.n	8016d90 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d8c:	f7fb ff31 	bl	8012bf2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d94:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d012      	beq.n	8016dc2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d9e:	68db      	ldr	r3, [r3, #12]
 8016da0:	685b      	ldr	r3, [r3, #4]
 8016da2:	4618      	mov	r0, r3
 8016da4:	f7f8 fe3f 	bl	800fa26 <lwip_htonl>
 8016da8:	4602      	mov	r2, r0
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016dae:	1ad3      	subs	r3, r2, r3
 8016db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016db2:	8912      	ldrh	r2, [r2, #8]
 8016db4:	4413      	add	r3, r2
  while (seg != NULL &&
 8016db6:	69ba      	ldr	r2, [r7, #24]
 8016db8:	429a      	cmp	r2, r3
 8016dba:	f4bf aed9 	bcs.w	8016b70 <tcp_output+0x160>
 8016dbe:	e000      	b.n	8016dc2 <tcp_output+0x3b2>
      break;
 8016dc0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d108      	bne.n	8016ddc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	2200      	movs	r2, #0
 8016dce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016dd2:	e004      	b.n	8016dde <tcp_output+0x3ce>
    goto output_done;
 8016dd4:	bf00      	nop
 8016dd6:	e002      	b.n	8016dde <tcp_output+0x3ce>
    goto output_done;
 8016dd8:	bf00      	nop
 8016dda:	e000      	b.n	8016dde <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016ddc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	8b5b      	ldrh	r3, [r3, #26]
 8016de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016de6:	b29a      	uxth	r2, r3
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016dec:	2300      	movs	r3, #0
}
 8016dee:	4618      	mov	r0, r3
 8016df0:	3728      	adds	r7, #40	; 0x28
 8016df2:	46bd      	mov	sp, r7
 8016df4:	bdb0      	pop	{r4, r5, r7, pc}
 8016df6:	bf00      	nop

08016df8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b082      	sub	sp, #8
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d106      	bne.n	8016e14 <tcp_output_segment_busy+0x1c>
 8016e06:	4b09      	ldr	r3, [pc, #36]	; (8016e2c <tcp_output_segment_busy+0x34>)
 8016e08:	f240 529a 	movw	r2, #1434	; 0x59a
 8016e0c:	4908      	ldr	r1, [pc, #32]	; (8016e30 <tcp_output_segment_busy+0x38>)
 8016e0e:	4809      	ldr	r0, [pc, #36]	; (8016e34 <tcp_output_segment_busy+0x3c>)
 8016e10:	f004 f9fa 	bl	801b208 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	685b      	ldr	r3, [r3, #4]
 8016e18:	7b9b      	ldrb	r3, [r3, #14]
 8016e1a:	2b01      	cmp	r3, #1
 8016e1c:	d001      	beq.n	8016e22 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016e1e:	2301      	movs	r3, #1
 8016e20:	e000      	b.n	8016e24 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016e22:	2300      	movs	r3, #0
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3708      	adds	r7, #8
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}
 8016e2c:	0801f120 	.word	0x0801f120
 8016e30:	0801f6bc 	.word	0x0801f6bc
 8016e34:	0801f174 	.word	0x0801f174

08016e38 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016e38:	b5b0      	push	{r4, r5, r7, lr}
 8016e3a:	b08c      	sub	sp, #48	; 0x30
 8016e3c:	af04      	add	r7, sp, #16
 8016e3e:	60f8      	str	r0, [r7, #12]
 8016e40:	60b9      	str	r1, [r7, #8]
 8016e42:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d106      	bne.n	8016e58 <tcp_output_segment+0x20>
 8016e4a:	4b64      	ldr	r3, [pc, #400]	; (8016fdc <tcp_output_segment+0x1a4>)
 8016e4c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016e50:	4963      	ldr	r1, [pc, #396]	; (8016fe0 <tcp_output_segment+0x1a8>)
 8016e52:	4864      	ldr	r0, [pc, #400]	; (8016fe4 <tcp_output_segment+0x1ac>)
 8016e54:	f004 f9d8 	bl	801b208 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d106      	bne.n	8016e6c <tcp_output_segment+0x34>
 8016e5e:	4b5f      	ldr	r3, [pc, #380]	; (8016fdc <tcp_output_segment+0x1a4>)
 8016e60:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016e64:	4960      	ldr	r1, [pc, #384]	; (8016fe8 <tcp_output_segment+0x1b0>)
 8016e66:	485f      	ldr	r0, [pc, #380]	; (8016fe4 <tcp_output_segment+0x1ac>)
 8016e68:	f004 f9ce 	bl	801b208 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d106      	bne.n	8016e80 <tcp_output_segment+0x48>
 8016e72:	4b5a      	ldr	r3, [pc, #360]	; (8016fdc <tcp_output_segment+0x1a4>)
 8016e74:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016e78:	495c      	ldr	r1, [pc, #368]	; (8016fec <tcp_output_segment+0x1b4>)
 8016e7a:	485a      	ldr	r0, [pc, #360]	; (8016fe4 <tcp_output_segment+0x1ac>)
 8016e7c:	f004 f9c4 	bl	801b208 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016e80:	68f8      	ldr	r0, [r7, #12]
 8016e82:	f7ff ffb9 	bl	8016df8 <tcp_output_segment_busy>
 8016e86:	4603      	mov	r3, r0
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d001      	beq.n	8016e90 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	e0a1      	b.n	8016fd4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016e90:	68bb      	ldr	r3, [r7, #8]
 8016e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	68dc      	ldr	r4, [r3, #12]
 8016e98:	4610      	mov	r0, r2
 8016e9a:	f7f8 fdc4 	bl	800fa26 <lwip_htonl>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016ea2:	68bb      	ldr	r3, [r7, #8]
 8016ea4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	68dc      	ldr	r4, [r3, #12]
 8016eaa:	4610      	mov	r0, r2
 8016eac:	f7f8 fda6 	bl	800f9fc <lwip_htons>
 8016eb0:	4603      	mov	r3, r0
 8016eb2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016eb8:	68ba      	ldr	r2, [r7, #8]
 8016eba:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016ebc:	441a      	add	r2, r3
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	68db      	ldr	r3, [r3, #12]
 8016ec6:	3314      	adds	r3, #20
 8016ec8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	7a9b      	ldrb	r3, [r3, #10]
 8016ece:	f003 0301 	and.w	r3, r3, #1
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d015      	beq.n	8016f02 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	3304      	adds	r3, #4
 8016eda:	461a      	mov	r2, r3
 8016edc:	6879      	ldr	r1, [r7, #4]
 8016ede:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8016ee2:	f7fc fa33 	bl	801334c <tcp_eff_send_mss_netif>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016eea:	8b7b      	ldrh	r3, [r7, #26]
 8016eec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f7f8 fd98 	bl	800fa26 <lwip_htonl>
 8016ef6:	4602      	mov	r2, r0
 8016ef8:	69fb      	ldr	r3, [r7, #28]
 8016efa:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016efc:	69fb      	ldr	r3, [r7, #28]
 8016efe:	3304      	adds	r3, #4
 8016f00:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016f02:	68bb      	ldr	r3, [r7, #8]
 8016f04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	da02      	bge.n	8016f12 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	2200      	movs	r2, #0
 8016f10:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016f12:	68bb      	ldr	r3, [r7, #8]
 8016f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d10c      	bne.n	8016f34 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016f1a:	4b35      	ldr	r3, [pc, #212]	; (8016ff0 <tcp_output_segment+0x1b8>)
 8016f1c:	681a      	ldr	r2, [r3, #0]
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	68db      	ldr	r3, [r3, #12]
 8016f26:	685b      	ldr	r3, [r3, #4]
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f7f8 fd7c 	bl	800fa26 <lwip_htonl>
 8016f2e:	4602      	mov	r2, r0
 8016f30:	68bb      	ldr	r3, [r7, #8]
 8016f32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	68da      	ldr	r2, [r3, #12]
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	685b      	ldr	r3, [r3, #4]
 8016f3c:	685b      	ldr	r3, [r3, #4]
 8016f3e:	1ad3      	subs	r3, r2, r3
 8016f40:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	8959      	ldrh	r1, [r3, #10]
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	685b      	ldr	r3, [r3, #4]
 8016f4c:	8b3a      	ldrh	r2, [r7, #24]
 8016f4e:	1a8a      	subs	r2, r1, r2
 8016f50:	b292      	uxth	r2, r2
 8016f52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	685b      	ldr	r3, [r3, #4]
 8016f58:	8919      	ldrh	r1, [r3, #8]
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	685b      	ldr	r3, [r3, #4]
 8016f5e:	8b3a      	ldrh	r2, [r7, #24]
 8016f60:	1a8a      	subs	r2, r1, r2
 8016f62:	b292      	uxth	r2, r2
 8016f64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	685b      	ldr	r3, [r3, #4]
 8016f6a:	68fa      	ldr	r2, [r7, #12]
 8016f6c:	68d2      	ldr	r2, [r2, #12]
 8016f6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	68db      	ldr	r3, [r3, #12]
 8016f74:	2200      	movs	r2, #0
 8016f76:	741a      	strb	r2, [r3, #16]
 8016f78:	2200      	movs	r2, #0
 8016f7a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	68da      	ldr	r2, [r3, #12]
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	7a9b      	ldrb	r3, [r3, #10]
 8016f84:	f003 0301 	and.w	r3, r3, #1
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d001      	beq.n	8016f90 <tcp_output_segment+0x158>
 8016f8c:	2318      	movs	r3, #24
 8016f8e:	e000      	b.n	8016f92 <tcp_output_segment+0x15a>
 8016f90:	2314      	movs	r3, #20
 8016f92:	4413      	add	r3, r2
 8016f94:	69fa      	ldr	r2, [r7, #28]
 8016f96:	429a      	cmp	r2, r3
 8016f98:	d006      	beq.n	8016fa8 <tcp_output_segment+0x170>
 8016f9a:	4b10      	ldr	r3, [pc, #64]	; (8016fdc <tcp_output_segment+0x1a4>)
 8016f9c:	f240 621c 	movw	r2, #1564	; 0x61c
 8016fa0:	4914      	ldr	r1, [pc, #80]	; (8016ff4 <tcp_output_segment+0x1bc>)
 8016fa2:	4810      	ldr	r0, [pc, #64]	; (8016fe4 <tcp_output_segment+0x1ac>)
 8016fa4:	f004 f930 	bl	801b208 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	6858      	ldr	r0, [r3, #4]
 8016fac:	68b9      	ldr	r1, [r7, #8]
 8016fae:	68bb      	ldr	r3, [r7, #8]
 8016fb0:	1d1c      	adds	r4, r3, #4
 8016fb2:	68bb      	ldr	r3, [r7, #8]
 8016fb4:	7add      	ldrb	r5, [r3, #11]
 8016fb6:	68bb      	ldr	r3, [r7, #8]
 8016fb8:	7a9b      	ldrb	r3, [r3, #10]
 8016fba:	687a      	ldr	r2, [r7, #4]
 8016fbc:	9202      	str	r2, [sp, #8]
 8016fbe:	2206      	movs	r2, #6
 8016fc0:	9201      	str	r2, [sp, #4]
 8016fc2:	9300      	str	r3, [sp, #0]
 8016fc4:	462b      	mov	r3, r5
 8016fc6:	4622      	mov	r2, r4
 8016fc8:	f002 fa9e 	bl	8019508 <ip4_output_if>
 8016fcc:	4603      	mov	r3, r0
 8016fce:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	3720      	adds	r7, #32
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bdb0      	pop	{r4, r5, r7, pc}
 8016fdc:	0801f120 	.word	0x0801f120
 8016fe0:	0801f6e4 	.word	0x0801f6e4
 8016fe4:	0801f174 	.word	0x0801f174
 8016fe8:	0801f704 	.word	0x0801f704
 8016fec:	0801f724 	.word	0x0801f724
 8016ff0:	2001dce4 	.word	0x2001dce4
 8016ff4:	0801f748 	.word	0x0801f748

08016ff8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016ff8:	b5b0      	push	{r4, r5, r7, lr}
 8016ffa:	b084      	sub	sp, #16
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d106      	bne.n	8017014 <tcp_rexmit_rto_prepare+0x1c>
 8017006:	4b31      	ldr	r3, [pc, #196]	; (80170cc <tcp_rexmit_rto_prepare+0xd4>)
 8017008:	f240 6263 	movw	r2, #1635	; 0x663
 801700c:	4930      	ldr	r1, [pc, #192]	; (80170d0 <tcp_rexmit_rto_prepare+0xd8>)
 801700e:	4831      	ldr	r0, [pc, #196]	; (80170d4 <tcp_rexmit_rto_prepare+0xdc>)
 8017010:	f004 f8fa 	bl	801b208 <iprintf>

  if (pcb->unacked == NULL) {
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017018:	2b00      	cmp	r3, #0
 801701a:	d102      	bne.n	8017022 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801701c:	f06f 0305 	mvn.w	r3, #5
 8017020:	e050      	b.n	80170c4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017026:	60fb      	str	r3, [r7, #12]
 8017028:	e00b      	b.n	8017042 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801702a:	68f8      	ldr	r0, [r7, #12]
 801702c:	f7ff fee4 	bl	8016df8 <tcp_output_segment_busy>
 8017030:	4603      	mov	r3, r0
 8017032:	2b00      	cmp	r3, #0
 8017034:	d002      	beq.n	801703c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017036:	f06f 0305 	mvn.w	r3, #5
 801703a:	e043      	b.n	80170c4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	60fb      	str	r3, [r7, #12]
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d1ef      	bne.n	801702a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801704a:	68f8      	ldr	r0, [r7, #12]
 801704c:	f7ff fed4 	bl	8016df8 <tcp_output_segment_busy>
 8017050:	4603      	mov	r3, r0
 8017052:	2b00      	cmp	r3, #0
 8017054:	d002      	beq.n	801705c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017056:	f06f 0305 	mvn.w	r3, #5
 801705a:	e033      	b.n	80170c4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	2200      	movs	r2, #0
 8017070:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	8b5b      	ldrh	r3, [r3, #26]
 8017076:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801707a:	b29a      	uxth	r2, r3
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	68db      	ldr	r3, [r3, #12]
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	4618      	mov	r0, r3
 8017088:	f7f8 fccd 	bl	800fa26 <lwip_htonl>
 801708c:	4604      	mov	r4, r0
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	891b      	ldrh	r3, [r3, #8]
 8017092:	461d      	mov	r5, r3
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	68db      	ldr	r3, [r3, #12]
 8017098:	899b      	ldrh	r3, [r3, #12]
 801709a:	b29b      	uxth	r3, r3
 801709c:	4618      	mov	r0, r3
 801709e:	f7f8 fcad 	bl	800f9fc <lwip_htons>
 80170a2:	4603      	mov	r3, r0
 80170a4:	b2db      	uxtb	r3, r3
 80170a6:	f003 0303 	and.w	r3, r3, #3
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d001      	beq.n	80170b2 <tcp_rexmit_rto_prepare+0xba>
 80170ae:	2301      	movs	r3, #1
 80170b0:	e000      	b.n	80170b4 <tcp_rexmit_rto_prepare+0xbc>
 80170b2:	2300      	movs	r3, #0
 80170b4:	442b      	add	r3, r5
 80170b6:	18e2      	adds	r2, r4, r3
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	2200      	movs	r2, #0
 80170c0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80170c2:	2300      	movs	r3, #0
}
 80170c4:	4618      	mov	r0, r3
 80170c6:	3710      	adds	r7, #16
 80170c8:	46bd      	mov	sp, r7
 80170ca:	bdb0      	pop	{r4, r5, r7, pc}
 80170cc:	0801f120 	.word	0x0801f120
 80170d0:	0801f75c 	.word	0x0801f75c
 80170d4:	0801f174 	.word	0x0801f174

080170d8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80170d8:	b580      	push	{r7, lr}
 80170da:	b082      	sub	sp, #8
 80170dc:	af00      	add	r7, sp, #0
 80170de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d106      	bne.n	80170f4 <tcp_rexmit_rto_commit+0x1c>
 80170e6:	4b0d      	ldr	r3, [pc, #52]	; (801711c <tcp_rexmit_rto_commit+0x44>)
 80170e8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80170ec:	490c      	ldr	r1, [pc, #48]	; (8017120 <tcp_rexmit_rto_commit+0x48>)
 80170ee:	480d      	ldr	r0, [pc, #52]	; (8017124 <tcp_rexmit_rto_commit+0x4c>)
 80170f0:	f004 f88a 	bl	801b208 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80170fa:	2bff      	cmp	r3, #255	; 0xff
 80170fc:	d007      	beq.n	801710e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017104:	3301      	adds	r3, #1
 8017106:	b2da      	uxtb	r2, r3
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801710e:	6878      	ldr	r0, [r7, #4]
 8017110:	f7ff fc7e 	bl	8016a10 <tcp_output>
}
 8017114:	bf00      	nop
 8017116:	3708      	adds	r7, #8
 8017118:	46bd      	mov	sp, r7
 801711a:	bd80      	pop	{r7, pc}
 801711c:	0801f120 	.word	0x0801f120
 8017120:	0801f780 	.word	0x0801f780
 8017124:	0801f174 	.word	0x0801f174

08017128 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017128:	b580      	push	{r7, lr}
 801712a:	b082      	sub	sp, #8
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d106      	bne.n	8017144 <tcp_rexmit_rto+0x1c>
 8017136:	4b0a      	ldr	r3, [pc, #40]	; (8017160 <tcp_rexmit_rto+0x38>)
 8017138:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801713c:	4909      	ldr	r1, [pc, #36]	; (8017164 <tcp_rexmit_rto+0x3c>)
 801713e:	480a      	ldr	r0, [pc, #40]	; (8017168 <tcp_rexmit_rto+0x40>)
 8017140:	f004 f862 	bl	801b208 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017144:	6878      	ldr	r0, [r7, #4]
 8017146:	f7ff ff57 	bl	8016ff8 <tcp_rexmit_rto_prepare>
 801714a:	4603      	mov	r3, r0
 801714c:	2b00      	cmp	r3, #0
 801714e:	d102      	bne.n	8017156 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017150:	6878      	ldr	r0, [r7, #4]
 8017152:	f7ff ffc1 	bl	80170d8 <tcp_rexmit_rto_commit>
  }
}
 8017156:	bf00      	nop
 8017158:	3708      	adds	r7, #8
 801715a:	46bd      	mov	sp, r7
 801715c:	bd80      	pop	{r7, pc}
 801715e:	bf00      	nop
 8017160:	0801f120 	.word	0x0801f120
 8017164:	0801f7a4 	.word	0x0801f7a4
 8017168:	0801f174 	.word	0x0801f174

0801716c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801716c:	b590      	push	{r4, r7, lr}
 801716e:	b085      	sub	sp, #20
 8017170:	af00      	add	r7, sp, #0
 8017172:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d106      	bne.n	8017188 <tcp_rexmit+0x1c>
 801717a:	4b2f      	ldr	r3, [pc, #188]	; (8017238 <tcp_rexmit+0xcc>)
 801717c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017180:	492e      	ldr	r1, [pc, #184]	; (801723c <tcp_rexmit+0xd0>)
 8017182:	482f      	ldr	r0, [pc, #188]	; (8017240 <tcp_rexmit+0xd4>)
 8017184:	f004 f840 	bl	801b208 <iprintf>

  if (pcb->unacked == NULL) {
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801718c:	2b00      	cmp	r3, #0
 801718e:	d102      	bne.n	8017196 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017190:	f06f 0305 	mvn.w	r3, #5
 8017194:	e04c      	b.n	8017230 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801719a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801719c:	68b8      	ldr	r0, [r7, #8]
 801719e:	f7ff fe2b 	bl	8016df8 <tcp_output_segment_busy>
 80171a2:	4603      	mov	r3, r0
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d002      	beq.n	80171ae <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80171a8:	f06f 0305 	mvn.w	r3, #5
 80171ac:	e040      	b.n	8017230 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80171ae:	68bb      	ldr	r3, [r7, #8]
 80171b0:	681a      	ldr	r2, [r3, #0]
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	336c      	adds	r3, #108	; 0x6c
 80171ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80171bc:	e002      	b.n	80171c4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d011      	beq.n	80171f0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	68db      	ldr	r3, [r3, #12]
 80171d2:	685b      	ldr	r3, [r3, #4]
 80171d4:	4618      	mov	r0, r3
 80171d6:	f7f8 fc26 	bl	800fa26 <lwip_htonl>
 80171da:	4604      	mov	r4, r0
 80171dc:	68bb      	ldr	r3, [r7, #8]
 80171de:	68db      	ldr	r3, [r3, #12]
 80171e0:	685b      	ldr	r3, [r3, #4]
 80171e2:	4618      	mov	r0, r3
 80171e4:	f7f8 fc1f 	bl	800fa26 <lwip_htonl>
 80171e8:	4603      	mov	r3, r0
 80171ea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	dbe6      	blt.n	80171be <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	681a      	ldr	r2, [r3, #0]
 80171f4:	68bb      	ldr	r3, [r7, #8]
 80171f6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	68ba      	ldr	r2, [r7, #8]
 80171fc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80171fe:	68bb      	ldr	r3, [r7, #8]
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d103      	bne.n	801720e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	2200      	movs	r2, #0
 801720a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017214:	2bff      	cmp	r3, #255	; 0xff
 8017216:	d007      	beq.n	8017228 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801721e:	3301      	adds	r3, #1
 8017220:	b2da      	uxtb	r2, r3
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	2200      	movs	r2, #0
 801722c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801722e:	2300      	movs	r3, #0
}
 8017230:	4618      	mov	r0, r3
 8017232:	3714      	adds	r7, #20
 8017234:	46bd      	mov	sp, r7
 8017236:	bd90      	pop	{r4, r7, pc}
 8017238:	0801f120 	.word	0x0801f120
 801723c:	0801f7c0 	.word	0x0801f7c0
 8017240:	0801f174 	.word	0x0801f174

08017244 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017244:	b580      	push	{r7, lr}
 8017246:	b082      	sub	sp, #8
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d106      	bne.n	8017260 <tcp_rexmit_fast+0x1c>
 8017252:	4b2a      	ldr	r3, [pc, #168]	; (80172fc <tcp_rexmit_fast+0xb8>)
 8017254:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017258:	4929      	ldr	r1, [pc, #164]	; (8017300 <tcp_rexmit_fast+0xbc>)
 801725a:	482a      	ldr	r0, [pc, #168]	; (8017304 <tcp_rexmit_fast+0xc0>)
 801725c:	f003 ffd4 	bl	801b208 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017264:	2b00      	cmp	r3, #0
 8017266:	d045      	beq.n	80172f4 <tcp_rexmit_fast+0xb0>
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	8b5b      	ldrh	r3, [r3, #26]
 801726c:	f003 0304 	and.w	r3, r3, #4
 8017270:	2b00      	cmp	r3, #0
 8017272:	d13f      	bne.n	80172f4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017274:	6878      	ldr	r0, [r7, #4]
 8017276:	f7ff ff79 	bl	801716c <tcp_rexmit>
 801727a:	4603      	mov	r3, r0
 801727c:	2b00      	cmp	r3, #0
 801727e:	d139      	bne.n	80172f4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801728c:	4293      	cmp	r3, r2
 801728e:	bf28      	it	cs
 8017290:	4613      	movcs	r3, r2
 8017292:	b29b      	uxth	r3, r3
 8017294:	2b00      	cmp	r3, #0
 8017296:	da00      	bge.n	801729a <tcp_rexmit_fast+0x56>
 8017298:	3301      	adds	r3, #1
 801729a:	105b      	asrs	r3, r3, #1
 801729c:	b29a      	uxth	r2, r3
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80172aa:	461a      	mov	r2, r3
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80172b0:	005b      	lsls	r3, r3, #1
 80172b2:	429a      	cmp	r2, r3
 80172b4:	d206      	bcs.n	80172c4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80172ba:	005b      	lsls	r3, r3, #1
 80172bc:	b29a      	uxth	r2, r3
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80172ce:	4619      	mov	r1, r3
 80172d0:	0049      	lsls	r1, r1, #1
 80172d2:	440b      	add	r3, r1
 80172d4:	b29b      	uxth	r3, r3
 80172d6:	4413      	add	r3, r2
 80172d8:	b29a      	uxth	r2, r3
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	8b5b      	ldrh	r3, [r3, #26]
 80172e4:	f043 0304 	orr.w	r3, r3, #4
 80172e8:	b29a      	uxth	r2, r3
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	2200      	movs	r2, #0
 80172f2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80172f4:	bf00      	nop
 80172f6:	3708      	adds	r7, #8
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bd80      	pop	{r7, pc}
 80172fc:	0801f120 	.word	0x0801f120
 8017300:	0801f7d8 	.word	0x0801f7d8
 8017304:	0801f174 	.word	0x0801f174

08017308 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b086      	sub	sp, #24
 801730c:	af00      	add	r7, sp, #0
 801730e:	60f8      	str	r0, [r7, #12]
 8017310:	607b      	str	r3, [r7, #4]
 8017312:	460b      	mov	r3, r1
 8017314:	817b      	strh	r3, [r7, #10]
 8017316:	4613      	mov	r3, r2
 8017318:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801731a:	897a      	ldrh	r2, [r7, #10]
 801731c:	893b      	ldrh	r3, [r7, #8]
 801731e:	4413      	add	r3, r2
 8017320:	b29b      	uxth	r3, r3
 8017322:	3314      	adds	r3, #20
 8017324:	b29b      	uxth	r3, r3
 8017326:	f44f 7220 	mov.w	r2, #640	; 0x280
 801732a:	4619      	mov	r1, r3
 801732c:	2022      	movs	r0, #34	; 0x22
 801732e:	f7f9 fc9b 	bl	8010c68 <pbuf_alloc>
 8017332:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017334:	697b      	ldr	r3, [r7, #20]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d04d      	beq.n	80173d6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801733a:	897b      	ldrh	r3, [r7, #10]
 801733c:	3313      	adds	r3, #19
 801733e:	697a      	ldr	r2, [r7, #20]
 8017340:	8952      	ldrh	r2, [r2, #10]
 8017342:	4293      	cmp	r3, r2
 8017344:	db06      	blt.n	8017354 <tcp_output_alloc_header_common+0x4c>
 8017346:	4b26      	ldr	r3, [pc, #152]	; (80173e0 <tcp_output_alloc_header_common+0xd8>)
 8017348:	f240 7223 	movw	r2, #1827	; 0x723
 801734c:	4925      	ldr	r1, [pc, #148]	; (80173e4 <tcp_output_alloc_header_common+0xdc>)
 801734e:	4826      	ldr	r0, [pc, #152]	; (80173e8 <tcp_output_alloc_header_common+0xe0>)
 8017350:	f003 ff5a 	bl	801b208 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017354:	697b      	ldr	r3, [r7, #20]
 8017356:	685b      	ldr	r3, [r3, #4]
 8017358:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801735a:	8c3b      	ldrh	r3, [r7, #32]
 801735c:	4618      	mov	r0, r3
 801735e:	f7f8 fb4d 	bl	800f9fc <lwip_htons>
 8017362:	4603      	mov	r3, r0
 8017364:	461a      	mov	r2, r3
 8017366:	693b      	ldr	r3, [r7, #16]
 8017368:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801736a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801736c:	4618      	mov	r0, r3
 801736e:	f7f8 fb45 	bl	800f9fc <lwip_htons>
 8017372:	4603      	mov	r3, r0
 8017374:	461a      	mov	r2, r3
 8017376:	693b      	ldr	r3, [r7, #16]
 8017378:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801737a:	693b      	ldr	r3, [r7, #16]
 801737c:	687a      	ldr	r2, [r7, #4]
 801737e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017380:	68f8      	ldr	r0, [r7, #12]
 8017382:	f7f8 fb50 	bl	800fa26 <lwip_htonl>
 8017386:	4602      	mov	r2, r0
 8017388:	693b      	ldr	r3, [r7, #16]
 801738a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801738c:	897b      	ldrh	r3, [r7, #10]
 801738e:	089b      	lsrs	r3, r3, #2
 8017390:	b29b      	uxth	r3, r3
 8017392:	3305      	adds	r3, #5
 8017394:	b29b      	uxth	r3, r3
 8017396:	031b      	lsls	r3, r3, #12
 8017398:	b29a      	uxth	r2, r3
 801739a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801739e:	b29b      	uxth	r3, r3
 80173a0:	4313      	orrs	r3, r2
 80173a2:	b29b      	uxth	r3, r3
 80173a4:	4618      	mov	r0, r3
 80173a6:	f7f8 fb29 	bl	800f9fc <lwip_htons>
 80173aa:	4603      	mov	r3, r0
 80173ac:	461a      	mov	r2, r3
 80173ae:	693b      	ldr	r3, [r7, #16]
 80173b0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80173b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80173b4:	4618      	mov	r0, r3
 80173b6:	f7f8 fb21 	bl	800f9fc <lwip_htons>
 80173ba:	4603      	mov	r3, r0
 80173bc:	461a      	mov	r2, r3
 80173be:	693b      	ldr	r3, [r7, #16]
 80173c0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80173c2:	693b      	ldr	r3, [r7, #16]
 80173c4:	2200      	movs	r2, #0
 80173c6:	741a      	strb	r2, [r3, #16]
 80173c8:	2200      	movs	r2, #0
 80173ca:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80173cc:	693b      	ldr	r3, [r7, #16]
 80173ce:	2200      	movs	r2, #0
 80173d0:	749a      	strb	r2, [r3, #18]
 80173d2:	2200      	movs	r2, #0
 80173d4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80173d6:	697b      	ldr	r3, [r7, #20]
}
 80173d8:	4618      	mov	r0, r3
 80173da:	3718      	adds	r7, #24
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}
 80173e0:	0801f120 	.word	0x0801f120
 80173e4:	0801f7f8 	.word	0x0801f7f8
 80173e8:	0801f174 	.word	0x0801f174

080173ec <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80173ec:	b5b0      	push	{r4, r5, r7, lr}
 80173ee:	b08a      	sub	sp, #40	; 0x28
 80173f0:	af04      	add	r7, sp, #16
 80173f2:	60f8      	str	r0, [r7, #12]
 80173f4:	607b      	str	r3, [r7, #4]
 80173f6:	460b      	mov	r3, r1
 80173f8:	817b      	strh	r3, [r7, #10]
 80173fa:	4613      	mov	r3, r2
 80173fc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d106      	bne.n	8017412 <tcp_output_alloc_header+0x26>
 8017404:	4b15      	ldr	r3, [pc, #84]	; (801745c <tcp_output_alloc_header+0x70>)
 8017406:	f240 7242 	movw	r2, #1858	; 0x742
 801740a:	4915      	ldr	r1, [pc, #84]	; (8017460 <tcp_output_alloc_header+0x74>)
 801740c:	4815      	ldr	r0, [pc, #84]	; (8017464 <tcp_output_alloc_header+0x78>)
 801740e:	f003 fefb 	bl	801b208 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	8adb      	ldrh	r3, [r3, #22]
 801741a:	68fa      	ldr	r2, [r7, #12]
 801741c:	8b12      	ldrh	r2, [r2, #24]
 801741e:	68f9      	ldr	r1, [r7, #12]
 8017420:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017422:	893d      	ldrh	r5, [r7, #8]
 8017424:	897c      	ldrh	r4, [r7, #10]
 8017426:	9103      	str	r1, [sp, #12]
 8017428:	2110      	movs	r1, #16
 801742a:	9102      	str	r1, [sp, #8]
 801742c:	9201      	str	r2, [sp, #4]
 801742e:	9300      	str	r3, [sp, #0]
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	462a      	mov	r2, r5
 8017434:	4621      	mov	r1, r4
 8017436:	f7ff ff67 	bl	8017308 <tcp_output_alloc_header_common>
 801743a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801743c:	697b      	ldr	r3, [r7, #20]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d006      	beq.n	8017450 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017446:	68fa      	ldr	r2, [r7, #12]
 8017448:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801744a:	441a      	add	r2, r3
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017450:	697b      	ldr	r3, [r7, #20]
}
 8017452:	4618      	mov	r0, r3
 8017454:	3718      	adds	r7, #24
 8017456:	46bd      	mov	sp, r7
 8017458:	bdb0      	pop	{r4, r5, r7, pc}
 801745a:	bf00      	nop
 801745c:	0801f120 	.word	0x0801f120
 8017460:	0801f828 	.word	0x0801f828
 8017464:	0801f174 	.word	0x0801f174

08017468 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b088      	sub	sp, #32
 801746c:	af00      	add	r7, sp, #0
 801746e:	60f8      	str	r0, [r7, #12]
 8017470:	60b9      	str	r1, [r7, #8]
 8017472:	4611      	mov	r1, r2
 8017474:	461a      	mov	r2, r3
 8017476:	460b      	mov	r3, r1
 8017478:	71fb      	strb	r3, [r7, #7]
 801747a:	4613      	mov	r3, r2
 801747c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801747e:	2300      	movs	r3, #0
 8017480:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d106      	bne.n	8017496 <tcp_output_fill_options+0x2e>
 8017488:	4b12      	ldr	r3, [pc, #72]	; (80174d4 <tcp_output_fill_options+0x6c>)
 801748a:	f240 7256 	movw	r2, #1878	; 0x756
 801748e:	4912      	ldr	r1, [pc, #72]	; (80174d8 <tcp_output_fill_options+0x70>)
 8017490:	4812      	ldr	r0, [pc, #72]	; (80174dc <tcp_output_fill_options+0x74>)
 8017492:	f003 feb9 	bl	801b208 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017496:	68bb      	ldr	r3, [r7, #8]
 8017498:	685b      	ldr	r3, [r3, #4]
 801749a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801749c:	69bb      	ldr	r3, [r7, #24]
 801749e:	3314      	adds	r3, #20
 80174a0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80174a2:	8bfb      	ldrh	r3, [r7, #30]
 80174a4:	009b      	lsls	r3, r3, #2
 80174a6:	461a      	mov	r2, r3
 80174a8:	79fb      	ldrb	r3, [r7, #7]
 80174aa:	009b      	lsls	r3, r3, #2
 80174ac:	f003 0304 	and.w	r3, r3, #4
 80174b0:	4413      	add	r3, r2
 80174b2:	3314      	adds	r3, #20
 80174b4:	69ba      	ldr	r2, [r7, #24]
 80174b6:	4413      	add	r3, r2
 80174b8:	697a      	ldr	r2, [r7, #20]
 80174ba:	429a      	cmp	r2, r3
 80174bc:	d006      	beq.n	80174cc <tcp_output_fill_options+0x64>
 80174be:	4b05      	ldr	r3, [pc, #20]	; (80174d4 <tcp_output_fill_options+0x6c>)
 80174c0:	f240 7275 	movw	r2, #1909	; 0x775
 80174c4:	4906      	ldr	r1, [pc, #24]	; (80174e0 <tcp_output_fill_options+0x78>)
 80174c6:	4805      	ldr	r0, [pc, #20]	; (80174dc <tcp_output_fill_options+0x74>)
 80174c8:	f003 fe9e 	bl	801b208 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80174cc:	bf00      	nop
 80174ce:	3720      	adds	r7, #32
 80174d0:	46bd      	mov	sp, r7
 80174d2:	bd80      	pop	{r7, pc}
 80174d4:	0801f120 	.word	0x0801f120
 80174d8:	0801f850 	.word	0x0801f850
 80174dc:	0801f174 	.word	0x0801f174
 80174e0:	0801f748 	.word	0x0801f748

080174e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b08a      	sub	sp, #40	; 0x28
 80174e8:	af04      	add	r7, sp, #16
 80174ea:	60f8      	str	r0, [r7, #12]
 80174ec:	60b9      	str	r1, [r7, #8]
 80174ee:	607a      	str	r2, [r7, #4]
 80174f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80174f2:	68bb      	ldr	r3, [r7, #8]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d106      	bne.n	8017506 <tcp_output_control_segment+0x22>
 80174f8:	4b1c      	ldr	r3, [pc, #112]	; (801756c <tcp_output_control_segment+0x88>)
 80174fa:	f240 7287 	movw	r2, #1927	; 0x787
 80174fe:	491c      	ldr	r1, [pc, #112]	; (8017570 <tcp_output_control_segment+0x8c>)
 8017500:	481c      	ldr	r0, [pc, #112]	; (8017574 <tcp_output_control_segment+0x90>)
 8017502:	f003 fe81 	bl	801b208 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017506:	683a      	ldr	r2, [r7, #0]
 8017508:	6879      	ldr	r1, [r7, #4]
 801750a:	68f8      	ldr	r0, [r7, #12]
 801750c:	f7fe fae8 	bl	8015ae0 <tcp_route>
 8017510:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017512:	693b      	ldr	r3, [r7, #16]
 8017514:	2b00      	cmp	r3, #0
 8017516:	d102      	bne.n	801751e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017518:	23fc      	movs	r3, #252	; 0xfc
 801751a:	75fb      	strb	r3, [r7, #23]
 801751c:	e01c      	b.n	8017558 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d006      	beq.n	8017532 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	7adb      	ldrb	r3, [r3, #11]
 8017528:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	7a9b      	ldrb	r3, [r3, #10]
 801752e:	757b      	strb	r3, [r7, #21]
 8017530:	e003      	b.n	801753a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017532:	23ff      	movs	r3, #255	; 0xff
 8017534:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017536:	2300      	movs	r3, #0
 8017538:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801753a:	7dba      	ldrb	r2, [r7, #22]
 801753c:	693b      	ldr	r3, [r7, #16]
 801753e:	9302      	str	r3, [sp, #8]
 8017540:	2306      	movs	r3, #6
 8017542:	9301      	str	r3, [sp, #4]
 8017544:	7d7b      	ldrb	r3, [r7, #21]
 8017546:	9300      	str	r3, [sp, #0]
 8017548:	4613      	mov	r3, r2
 801754a:	683a      	ldr	r2, [r7, #0]
 801754c:	6879      	ldr	r1, [r7, #4]
 801754e:	68b8      	ldr	r0, [r7, #8]
 8017550:	f001 ffda 	bl	8019508 <ip4_output_if>
 8017554:	4603      	mov	r3, r0
 8017556:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017558:	68b8      	ldr	r0, [r7, #8]
 801755a:	f7f9 fe6d 	bl	8011238 <pbuf_free>
  return err;
 801755e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017562:	4618      	mov	r0, r3
 8017564:	3718      	adds	r7, #24
 8017566:	46bd      	mov	sp, r7
 8017568:	bd80      	pop	{r7, pc}
 801756a:	bf00      	nop
 801756c:	0801f120 	.word	0x0801f120
 8017570:	0801f878 	.word	0x0801f878
 8017574:	0801f174 	.word	0x0801f174

08017578 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017578:	b590      	push	{r4, r7, lr}
 801757a:	b08b      	sub	sp, #44	; 0x2c
 801757c:	af04      	add	r7, sp, #16
 801757e:	60f8      	str	r0, [r7, #12]
 8017580:	60b9      	str	r1, [r7, #8]
 8017582:	607a      	str	r2, [r7, #4]
 8017584:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017586:	683b      	ldr	r3, [r7, #0]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d106      	bne.n	801759a <tcp_rst+0x22>
 801758c:	4b1f      	ldr	r3, [pc, #124]	; (801760c <tcp_rst+0x94>)
 801758e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8017592:	491f      	ldr	r1, [pc, #124]	; (8017610 <tcp_rst+0x98>)
 8017594:	481f      	ldr	r0, [pc, #124]	; (8017614 <tcp_rst+0x9c>)
 8017596:	f003 fe37 	bl	801b208 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801759c:	2b00      	cmp	r3, #0
 801759e:	d106      	bne.n	80175ae <tcp_rst+0x36>
 80175a0:	4b1a      	ldr	r3, [pc, #104]	; (801760c <tcp_rst+0x94>)
 80175a2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80175a6:	491c      	ldr	r1, [pc, #112]	; (8017618 <tcp_rst+0xa0>)
 80175a8:	481a      	ldr	r0, [pc, #104]	; (8017614 <tcp_rst+0x9c>)
 80175aa:	f003 fe2d 	bl	801b208 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80175ae:	2300      	movs	r3, #0
 80175b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80175b2:	f24d 0316 	movw	r3, #53270	; 0xd016
 80175b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80175b8:	7dfb      	ldrb	r3, [r7, #23]
 80175ba:	b29c      	uxth	r4, r3
 80175bc:	68b8      	ldr	r0, [r7, #8]
 80175be:	f7f8 fa32 	bl	800fa26 <lwip_htonl>
 80175c2:	4602      	mov	r2, r0
 80175c4:	8abb      	ldrh	r3, [r7, #20]
 80175c6:	9303      	str	r3, [sp, #12]
 80175c8:	2314      	movs	r3, #20
 80175ca:	9302      	str	r3, [sp, #8]
 80175cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80175ce:	9301      	str	r3, [sp, #4]
 80175d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80175d2:	9300      	str	r3, [sp, #0]
 80175d4:	4613      	mov	r3, r2
 80175d6:	2200      	movs	r2, #0
 80175d8:	4621      	mov	r1, r4
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	f7ff fe94 	bl	8017308 <tcp_output_alloc_header_common>
 80175e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80175e2:	693b      	ldr	r3, [r7, #16]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d00c      	beq.n	8017602 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80175e8:	7dfb      	ldrb	r3, [r7, #23]
 80175ea:	2200      	movs	r2, #0
 80175ec:	6939      	ldr	r1, [r7, #16]
 80175ee:	68f8      	ldr	r0, [r7, #12]
 80175f0:	f7ff ff3a 	bl	8017468 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80175f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f6:	683a      	ldr	r2, [r7, #0]
 80175f8:	6939      	ldr	r1, [r7, #16]
 80175fa:	68f8      	ldr	r0, [r7, #12]
 80175fc:	f7ff ff72 	bl	80174e4 <tcp_output_control_segment>
 8017600:	e000      	b.n	8017604 <tcp_rst+0x8c>
    return;
 8017602:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017604:	371c      	adds	r7, #28
 8017606:	46bd      	mov	sp, r7
 8017608:	bd90      	pop	{r4, r7, pc}
 801760a:	bf00      	nop
 801760c:	0801f120 	.word	0x0801f120
 8017610:	0801f8a4 	.word	0x0801f8a4
 8017614:	0801f174 	.word	0x0801f174
 8017618:	0801f8c0 	.word	0x0801f8c0

0801761c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801761c:	b590      	push	{r4, r7, lr}
 801761e:	b087      	sub	sp, #28
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017624:	2300      	movs	r3, #0
 8017626:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017628:	2300      	movs	r3, #0
 801762a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d106      	bne.n	8017640 <tcp_send_empty_ack+0x24>
 8017632:	4b28      	ldr	r3, [pc, #160]	; (80176d4 <tcp_send_empty_ack+0xb8>)
 8017634:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017638:	4927      	ldr	r1, [pc, #156]	; (80176d8 <tcp_send_empty_ack+0xbc>)
 801763a:	4828      	ldr	r0, [pc, #160]	; (80176dc <tcp_send_empty_ack+0xc0>)
 801763c:	f003 fde4 	bl	801b208 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017640:	7dfb      	ldrb	r3, [r7, #23]
 8017642:	009b      	lsls	r3, r3, #2
 8017644:	b2db      	uxtb	r3, r3
 8017646:	f003 0304 	and.w	r3, r3, #4
 801764a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801764c:	7d7b      	ldrb	r3, [r7, #21]
 801764e:	b29c      	uxth	r4, r3
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017654:	4618      	mov	r0, r3
 8017656:	f7f8 f9e6 	bl	800fa26 <lwip_htonl>
 801765a:	4603      	mov	r3, r0
 801765c:	2200      	movs	r2, #0
 801765e:	4621      	mov	r1, r4
 8017660:	6878      	ldr	r0, [r7, #4]
 8017662:	f7ff fec3 	bl	80173ec <tcp_output_alloc_header>
 8017666:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017668:	693b      	ldr	r3, [r7, #16]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d109      	bne.n	8017682 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	8b5b      	ldrh	r3, [r3, #26]
 8017672:	f043 0303 	orr.w	r3, r3, #3
 8017676:	b29a      	uxth	r2, r3
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801767c:	f06f 0301 	mvn.w	r3, #1
 8017680:	e023      	b.n	80176ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017682:	7dbb      	ldrb	r3, [r7, #22]
 8017684:	7dfa      	ldrb	r2, [r7, #23]
 8017686:	6939      	ldr	r1, [r7, #16]
 8017688:	6878      	ldr	r0, [r7, #4]
 801768a:	f7ff feed 	bl	8017468 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801768e:	687a      	ldr	r2, [r7, #4]
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	3304      	adds	r3, #4
 8017694:	6939      	ldr	r1, [r7, #16]
 8017696:	6878      	ldr	r0, [r7, #4]
 8017698:	f7ff ff24 	bl	80174e4 <tcp_output_control_segment>
 801769c:	4603      	mov	r3, r0
 801769e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80176a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d007      	beq.n	80176b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	8b5b      	ldrh	r3, [r3, #26]
 80176ac:	f043 0303 	orr.w	r3, r3, #3
 80176b0:	b29a      	uxth	r2, r3
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	835a      	strh	r2, [r3, #26]
 80176b6:	e006      	b.n	80176c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	8b5b      	ldrh	r3, [r3, #26]
 80176bc:	f023 0303 	bic.w	r3, r3, #3
 80176c0:	b29a      	uxth	r2, r3
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80176c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80176ca:	4618      	mov	r0, r3
 80176cc:	371c      	adds	r7, #28
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd90      	pop	{r4, r7, pc}
 80176d2:	bf00      	nop
 80176d4:	0801f120 	.word	0x0801f120
 80176d8:	0801f8dc 	.word	0x0801f8dc
 80176dc:	0801f174 	.word	0x0801f174

080176e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80176e0:	b590      	push	{r4, r7, lr}
 80176e2:	b087      	sub	sp, #28
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80176e8:	2300      	movs	r3, #0
 80176ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d106      	bne.n	8017700 <tcp_keepalive+0x20>
 80176f2:	4b18      	ldr	r3, [pc, #96]	; (8017754 <tcp_keepalive+0x74>)
 80176f4:	f640 0224 	movw	r2, #2084	; 0x824
 80176f8:	4917      	ldr	r1, [pc, #92]	; (8017758 <tcp_keepalive+0x78>)
 80176fa:	4818      	ldr	r0, [pc, #96]	; (801775c <tcp_keepalive+0x7c>)
 80176fc:	f003 fd84 	bl	801b208 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017700:	7dfb      	ldrb	r3, [r7, #23]
 8017702:	b29c      	uxth	r4, r3
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017708:	3b01      	subs	r3, #1
 801770a:	4618      	mov	r0, r3
 801770c:	f7f8 f98b 	bl	800fa26 <lwip_htonl>
 8017710:	4603      	mov	r3, r0
 8017712:	2200      	movs	r2, #0
 8017714:	4621      	mov	r1, r4
 8017716:	6878      	ldr	r0, [r7, #4]
 8017718:	f7ff fe68 	bl	80173ec <tcp_output_alloc_header>
 801771c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801771e:	693b      	ldr	r3, [r7, #16]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d102      	bne.n	801772a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017724:	f04f 33ff 	mov.w	r3, #4294967295
 8017728:	e010      	b.n	801774c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801772a:	7dfb      	ldrb	r3, [r7, #23]
 801772c:	2200      	movs	r2, #0
 801772e:	6939      	ldr	r1, [r7, #16]
 8017730:	6878      	ldr	r0, [r7, #4]
 8017732:	f7ff fe99 	bl	8017468 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017736:	687a      	ldr	r2, [r7, #4]
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	3304      	adds	r3, #4
 801773c:	6939      	ldr	r1, [r7, #16]
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	f7ff fed0 	bl	80174e4 <tcp_output_control_segment>
 8017744:	4603      	mov	r3, r0
 8017746:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801774c:	4618      	mov	r0, r3
 801774e:	371c      	adds	r7, #28
 8017750:	46bd      	mov	sp, r7
 8017752:	bd90      	pop	{r4, r7, pc}
 8017754:	0801f120 	.word	0x0801f120
 8017758:	0801f8fc 	.word	0x0801f8fc
 801775c:	0801f174 	.word	0x0801f174

08017760 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017760:	b590      	push	{r4, r7, lr}
 8017762:	b08b      	sub	sp, #44	; 0x2c
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017768:	2300      	movs	r3, #0
 801776a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d106      	bne.n	8017782 <tcp_zero_window_probe+0x22>
 8017774:	4b4c      	ldr	r3, [pc, #304]	; (80178a8 <tcp_zero_window_probe+0x148>)
 8017776:	f640 024f 	movw	r2, #2127	; 0x84f
 801777a:	494c      	ldr	r1, [pc, #304]	; (80178ac <tcp_zero_window_probe+0x14c>)
 801777c:	484c      	ldr	r0, [pc, #304]	; (80178b0 <tcp_zero_window_probe+0x150>)
 801777e:	f003 fd43 	bl	801b208 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017786:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017788:	6a3b      	ldr	r3, [r7, #32]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d101      	bne.n	8017792 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801778e:	2300      	movs	r3, #0
 8017790:	e086      	b.n	80178a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017798:	2bff      	cmp	r3, #255	; 0xff
 801779a:	d007      	beq.n	80177ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80177a2:	3301      	adds	r3, #1
 80177a4:	b2da      	uxtb	r2, r3
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80177ac:	6a3b      	ldr	r3, [r7, #32]
 80177ae:	68db      	ldr	r3, [r3, #12]
 80177b0:	899b      	ldrh	r3, [r3, #12]
 80177b2:	b29b      	uxth	r3, r3
 80177b4:	4618      	mov	r0, r3
 80177b6:	f7f8 f921 	bl	800f9fc <lwip_htons>
 80177ba:	4603      	mov	r3, r0
 80177bc:	b2db      	uxtb	r3, r3
 80177be:	f003 0301 	and.w	r3, r3, #1
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d005      	beq.n	80177d2 <tcp_zero_window_probe+0x72>
 80177c6:	6a3b      	ldr	r3, [r7, #32]
 80177c8:	891b      	ldrh	r3, [r3, #8]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d101      	bne.n	80177d2 <tcp_zero_window_probe+0x72>
 80177ce:	2301      	movs	r3, #1
 80177d0:	e000      	b.n	80177d4 <tcp_zero_window_probe+0x74>
 80177d2:	2300      	movs	r3, #0
 80177d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80177d6:	7ffb      	ldrb	r3, [r7, #31]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	bf0c      	ite	eq
 80177dc:	2301      	moveq	r3, #1
 80177de:	2300      	movne	r3, #0
 80177e0:	b2db      	uxtb	r3, r3
 80177e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80177e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80177e8:	b299      	uxth	r1, r3
 80177ea:	6a3b      	ldr	r3, [r7, #32]
 80177ec:	68db      	ldr	r3, [r3, #12]
 80177ee:	685b      	ldr	r3, [r3, #4]
 80177f0:	8bba      	ldrh	r2, [r7, #28]
 80177f2:	6878      	ldr	r0, [r7, #4]
 80177f4:	f7ff fdfa 	bl	80173ec <tcp_output_alloc_header>
 80177f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80177fa:	69bb      	ldr	r3, [r7, #24]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d102      	bne.n	8017806 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017800:	f04f 33ff 	mov.w	r3, #4294967295
 8017804:	e04c      	b.n	80178a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017806:	69bb      	ldr	r3, [r7, #24]
 8017808:	685b      	ldr	r3, [r3, #4]
 801780a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801780c:	7ffb      	ldrb	r3, [r7, #31]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d011      	beq.n	8017836 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017812:	697b      	ldr	r3, [r7, #20]
 8017814:	899b      	ldrh	r3, [r3, #12]
 8017816:	b29b      	uxth	r3, r3
 8017818:	b21b      	sxth	r3, r3
 801781a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801781e:	b21c      	sxth	r4, r3
 8017820:	2011      	movs	r0, #17
 8017822:	f7f8 f8eb 	bl	800f9fc <lwip_htons>
 8017826:	4603      	mov	r3, r0
 8017828:	b21b      	sxth	r3, r3
 801782a:	4323      	orrs	r3, r4
 801782c:	b21b      	sxth	r3, r3
 801782e:	b29a      	uxth	r2, r3
 8017830:	697b      	ldr	r3, [r7, #20]
 8017832:	819a      	strh	r2, [r3, #12]
 8017834:	e010      	b.n	8017858 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017836:	69bb      	ldr	r3, [r7, #24]
 8017838:	685b      	ldr	r3, [r3, #4]
 801783a:	3314      	adds	r3, #20
 801783c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801783e:	6a3b      	ldr	r3, [r7, #32]
 8017840:	6858      	ldr	r0, [r3, #4]
 8017842:	6a3b      	ldr	r3, [r7, #32]
 8017844:	685b      	ldr	r3, [r3, #4]
 8017846:	891a      	ldrh	r2, [r3, #8]
 8017848:	6a3b      	ldr	r3, [r7, #32]
 801784a:	891b      	ldrh	r3, [r3, #8]
 801784c:	1ad3      	subs	r3, r2, r3
 801784e:	b29b      	uxth	r3, r3
 8017850:	2201      	movs	r2, #1
 8017852:	6939      	ldr	r1, [r7, #16]
 8017854:	f7f9 fee6 	bl	8011624 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017858:	6a3b      	ldr	r3, [r7, #32]
 801785a:	68db      	ldr	r3, [r3, #12]
 801785c:	685b      	ldr	r3, [r3, #4]
 801785e:	4618      	mov	r0, r3
 8017860:	f7f8 f8e1 	bl	800fa26 <lwip_htonl>
 8017864:	4603      	mov	r3, r0
 8017866:	3301      	adds	r3, #1
 8017868:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	1ad3      	subs	r3, r2, r3
 8017872:	2b00      	cmp	r3, #0
 8017874:	da02      	bge.n	801787c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	68fa      	ldr	r2, [r7, #12]
 801787a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801787c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017880:	2200      	movs	r2, #0
 8017882:	69b9      	ldr	r1, [r7, #24]
 8017884:	6878      	ldr	r0, [r7, #4]
 8017886:	f7ff fdef 	bl	8017468 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801788a:	687a      	ldr	r2, [r7, #4]
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	3304      	adds	r3, #4
 8017890:	69b9      	ldr	r1, [r7, #24]
 8017892:	6878      	ldr	r0, [r7, #4]
 8017894:	f7ff fe26 	bl	80174e4 <tcp_output_control_segment>
 8017898:	4603      	mov	r3, r0
 801789a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801789c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80178a0:	4618      	mov	r0, r3
 80178a2:	372c      	adds	r7, #44	; 0x2c
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bd90      	pop	{r4, r7, pc}
 80178a8:	0801f120 	.word	0x0801f120
 80178ac:	0801f918 	.word	0x0801f918
 80178b0:	0801f174 	.word	0x0801f174

080178b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b082      	sub	sp, #8
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80178bc:	f7fa f804 	bl	80118c8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80178c0:	4b0a      	ldr	r3, [pc, #40]	; (80178ec <tcpip_tcp_timer+0x38>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d103      	bne.n	80178d0 <tcpip_tcp_timer+0x1c>
 80178c8:	4b09      	ldr	r3, [pc, #36]	; (80178f0 <tcpip_tcp_timer+0x3c>)
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d005      	beq.n	80178dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80178d0:	2200      	movs	r2, #0
 80178d2:	4908      	ldr	r1, [pc, #32]	; (80178f4 <tcpip_tcp_timer+0x40>)
 80178d4:	20fa      	movs	r0, #250	; 0xfa
 80178d6:	f000 f8f3 	bl	8017ac0 <sys_timeout>
 80178da:	e003      	b.n	80178e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80178dc:	4b06      	ldr	r3, [pc, #24]	; (80178f8 <tcpip_tcp_timer+0x44>)
 80178de:	2200      	movs	r2, #0
 80178e0:	601a      	str	r2, [r3, #0]
  }
}
 80178e2:	bf00      	nop
 80178e4:	bf00      	nop
 80178e6:	3708      	adds	r7, #8
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}
 80178ec:	2001dcf0 	.word	0x2001dcf0
 80178f0:	2001dcf4 	.word	0x2001dcf4
 80178f4:	080178b5 	.word	0x080178b5
 80178f8:	2001dd3c 	.word	0x2001dd3c

080178fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017900:	4b0a      	ldr	r3, [pc, #40]	; (801792c <tcp_timer_needed+0x30>)
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d10f      	bne.n	8017928 <tcp_timer_needed+0x2c>
 8017908:	4b09      	ldr	r3, [pc, #36]	; (8017930 <tcp_timer_needed+0x34>)
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d103      	bne.n	8017918 <tcp_timer_needed+0x1c>
 8017910:	4b08      	ldr	r3, [pc, #32]	; (8017934 <tcp_timer_needed+0x38>)
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d007      	beq.n	8017928 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017918:	4b04      	ldr	r3, [pc, #16]	; (801792c <tcp_timer_needed+0x30>)
 801791a:	2201      	movs	r2, #1
 801791c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801791e:	2200      	movs	r2, #0
 8017920:	4905      	ldr	r1, [pc, #20]	; (8017938 <tcp_timer_needed+0x3c>)
 8017922:	20fa      	movs	r0, #250	; 0xfa
 8017924:	f000 f8cc 	bl	8017ac0 <sys_timeout>
  }
}
 8017928:	bf00      	nop
 801792a:	bd80      	pop	{r7, pc}
 801792c:	2001dd3c 	.word	0x2001dd3c
 8017930:	2001dcf0 	.word	0x2001dcf0
 8017934:	2001dcf4 	.word	0x2001dcf4
 8017938:	080178b5 	.word	0x080178b5

0801793c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b086      	sub	sp, #24
 8017940:	af00      	add	r7, sp, #0
 8017942:	60f8      	str	r0, [r7, #12]
 8017944:	60b9      	str	r1, [r7, #8]
 8017946:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017948:	200a      	movs	r0, #10
 801794a:	f7f8 fd57 	bl	80103fc <memp_malloc>
 801794e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017950:	693b      	ldr	r3, [r7, #16]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d109      	bne.n	801796a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017956:	693b      	ldr	r3, [r7, #16]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d151      	bne.n	8017a00 <sys_timeout_abs+0xc4>
 801795c:	4b2a      	ldr	r3, [pc, #168]	; (8017a08 <sys_timeout_abs+0xcc>)
 801795e:	22be      	movs	r2, #190	; 0xbe
 8017960:	492a      	ldr	r1, [pc, #168]	; (8017a0c <sys_timeout_abs+0xd0>)
 8017962:	482b      	ldr	r0, [pc, #172]	; (8017a10 <sys_timeout_abs+0xd4>)
 8017964:	f003 fc50 	bl	801b208 <iprintf>
    return;
 8017968:	e04a      	b.n	8017a00 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801796a:	693b      	ldr	r3, [r7, #16]
 801796c:	2200      	movs	r2, #0
 801796e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017970:	693b      	ldr	r3, [r7, #16]
 8017972:	68ba      	ldr	r2, [r7, #8]
 8017974:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017976:	693b      	ldr	r3, [r7, #16]
 8017978:	687a      	ldr	r2, [r7, #4]
 801797a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801797c:	693b      	ldr	r3, [r7, #16]
 801797e:	68fa      	ldr	r2, [r7, #12]
 8017980:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017982:	4b24      	ldr	r3, [pc, #144]	; (8017a14 <sys_timeout_abs+0xd8>)
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	2b00      	cmp	r3, #0
 8017988:	d103      	bne.n	8017992 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801798a:	4a22      	ldr	r2, [pc, #136]	; (8017a14 <sys_timeout_abs+0xd8>)
 801798c:	693b      	ldr	r3, [r7, #16]
 801798e:	6013      	str	r3, [r2, #0]
    return;
 8017990:	e037      	b.n	8017a02 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017992:	693b      	ldr	r3, [r7, #16]
 8017994:	685a      	ldr	r2, [r3, #4]
 8017996:	4b1f      	ldr	r3, [pc, #124]	; (8017a14 <sys_timeout_abs+0xd8>)
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	685b      	ldr	r3, [r3, #4]
 801799c:	1ad3      	subs	r3, r2, r3
 801799e:	0fdb      	lsrs	r3, r3, #31
 80179a0:	f003 0301 	and.w	r3, r3, #1
 80179a4:	b2db      	uxtb	r3, r3
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d007      	beq.n	80179ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80179aa:	4b1a      	ldr	r3, [pc, #104]	; (8017a14 <sys_timeout_abs+0xd8>)
 80179ac:	681a      	ldr	r2, [r3, #0]
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80179b2:	4a18      	ldr	r2, [pc, #96]	; (8017a14 <sys_timeout_abs+0xd8>)
 80179b4:	693b      	ldr	r3, [r7, #16]
 80179b6:	6013      	str	r3, [r2, #0]
 80179b8:	e023      	b.n	8017a02 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80179ba:	4b16      	ldr	r3, [pc, #88]	; (8017a14 <sys_timeout_abs+0xd8>)
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	617b      	str	r3, [r7, #20]
 80179c0:	e01a      	b.n	80179f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80179c2:	697b      	ldr	r3, [r7, #20]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d00b      	beq.n	80179e2 <sys_timeout_abs+0xa6>
 80179ca:	693b      	ldr	r3, [r7, #16]
 80179cc:	685a      	ldr	r2, [r3, #4]
 80179ce:	697b      	ldr	r3, [r7, #20]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	685b      	ldr	r3, [r3, #4]
 80179d4:	1ad3      	subs	r3, r2, r3
 80179d6:	0fdb      	lsrs	r3, r3, #31
 80179d8:	f003 0301 	and.w	r3, r3, #1
 80179dc:	b2db      	uxtb	r3, r3
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d007      	beq.n	80179f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80179e2:	697b      	ldr	r3, [r7, #20]
 80179e4:	681a      	ldr	r2, [r3, #0]
 80179e6:	693b      	ldr	r3, [r7, #16]
 80179e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80179ea:	697b      	ldr	r3, [r7, #20]
 80179ec:	693a      	ldr	r2, [r7, #16]
 80179ee:	601a      	str	r2, [r3, #0]
        break;
 80179f0:	e007      	b.n	8017a02 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80179f2:	697b      	ldr	r3, [r7, #20]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	617b      	str	r3, [r7, #20]
 80179f8:	697b      	ldr	r3, [r7, #20]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d1e1      	bne.n	80179c2 <sys_timeout_abs+0x86>
 80179fe:	e000      	b.n	8017a02 <sys_timeout_abs+0xc6>
    return;
 8017a00:	bf00      	nop
      }
    }
  }
}
 8017a02:	3718      	adds	r7, #24
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}
 8017a08:	0801f93c 	.word	0x0801f93c
 8017a0c:	0801f970 	.word	0x0801f970
 8017a10:	0801f9b0 	.word	0x0801f9b0
 8017a14:	2001dd34 	.word	0x2001dd34

08017a18 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b086      	sub	sp, #24
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017a24:	697b      	ldr	r3, [r7, #20]
 8017a26:	685b      	ldr	r3, [r3, #4]
 8017a28:	4798      	blx	r3

  now = sys_now();
 8017a2a:	f7f2 fdef 	bl	800a60c <sys_now>
 8017a2e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017a30:	697b      	ldr	r3, [r7, #20]
 8017a32:	681a      	ldr	r2, [r3, #0]
 8017a34:	4b0f      	ldr	r3, [pc, #60]	; (8017a74 <lwip_cyclic_timer+0x5c>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	4413      	add	r3, r2
 8017a3a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017a3c:	68fa      	ldr	r2, [r7, #12]
 8017a3e:	693b      	ldr	r3, [r7, #16]
 8017a40:	1ad3      	subs	r3, r2, r3
 8017a42:	0fdb      	lsrs	r3, r3, #31
 8017a44:	f003 0301 	and.w	r3, r3, #1
 8017a48:	b2db      	uxtb	r3, r3
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d009      	beq.n	8017a62 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017a4e:	697b      	ldr	r3, [r7, #20]
 8017a50:	681a      	ldr	r2, [r3, #0]
 8017a52:	693b      	ldr	r3, [r7, #16]
 8017a54:	4413      	add	r3, r2
 8017a56:	687a      	ldr	r2, [r7, #4]
 8017a58:	4907      	ldr	r1, [pc, #28]	; (8017a78 <lwip_cyclic_timer+0x60>)
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	f7ff ff6e 	bl	801793c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017a60:	e004      	b.n	8017a6c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017a62:	687a      	ldr	r2, [r7, #4]
 8017a64:	4904      	ldr	r1, [pc, #16]	; (8017a78 <lwip_cyclic_timer+0x60>)
 8017a66:	68f8      	ldr	r0, [r7, #12]
 8017a68:	f7ff ff68 	bl	801793c <sys_timeout_abs>
}
 8017a6c:	bf00      	nop
 8017a6e:	3718      	adds	r7, #24
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd80      	pop	{r7, pc}
 8017a74:	2001dd38 	.word	0x2001dd38
 8017a78:	08017a19 	.word	0x08017a19

08017a7c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017a82:	2301      	movs	r3, #1
 8017a84:	607b      	str	r3, [r7, #4]
 8017a86:	e00e      	b.n	8017aa6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017a88:	4a0b      	ldr	r2, [pc, #44]	; (8017ab8 <sys_timeouts_init+0x3c>)
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	00db      	lsls	r3, r3, #3
 8017a94:	4a08      	ldr	r2, [pc, #32]	; (8017ab8 <sys_timeouts_init+0x3c>)
 8017a96:	4413      	add	r3, r2
 8017a98:	461a      	mov	r2, r3
 8017a9a:	4908      	ldr	r1, [pc, #32]	; (8017abc <sys_timeouts_init+0x40>)
 8017a9c:	f000 f810 	bl	8017ac0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	3301      	adds	r3, #1
 8017aa4:	607b      	str	r3, [r7, #4]
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	2b02      	cmp	r3, #2
 8017aaa:	d9ed      	bls.n	8017a88 <sys_timeouts_init+0xc>
  }
}
 8017aac:	bf00      	nop
 8017aae:	bf00      	nop
 8017ab0:	3708      	adds	r7, #8
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	bd80      	pop	{r7, pc}
 8017ab6:	bf00      	nop
 8017ab8:	08020570 	.word	0x08020570
 8017abc:	08017a19 	.word	0x08017a19

08017ac0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b086      	sub	sp, #24
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	60f8      	str	r0, [r7, #12]
 8017ac8:	60b9      	str	r1, [r7, #8]
 8017aca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017ad2:	d306      	bcc.n	8017ae2 <sys_timeout+0x22>
 8017ad4:	4b0a      	ldr	r3, [pc, #40]	; (8017b00 <sys_timeout+0x40>)
 8017ad6:	f240 1229 	movw	r2, #297	; 0x129
 8017ada:	490a      	ldr	r1, [pc, #40]	; (8017b04 <sys_timeout+0x44>)
 8017adc:	480a      	ldr	r0, [pc, #40]	; (8017b08 <sys_timeout+0x48>)
 8017ade:	f003 fb93 	bl	801b208 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017ae2:	f7f2 fd93 	bl	800a60c <sys_now>
 8017ae6:	4602      	mov	r2, r0
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	4413      	add	r3, r2
 8017aec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017aee:	687a      	ldr	r2, [r7, #4]
 8017af0:	68b9      	ldr	r1, [r7, #8]
 8017af2:	6978      	ldr	r0, [r7, #20]
 8017af4:	f7ff ff22 	bl	801793c <sys_timeout_abs>
#endif
}
 8017af8:	bf00      	nop
 8017afa:	3718      	adds	r7, #24
 8017afc:	46bd      	mov	sp, r7
 8017afe:	bd80      	pop	{r7, pc}
 8017b00:	0801f93c 	.word	0x0801f93c
 8017b04:	0801f9d8 	.word	0x0801f9d8
 8017b08:	0801f9b0 	.word	0x0801f9b0

08017b0c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b084      	sub	sp, #16
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
 8017b14:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017b16:	4b19      	ldr	r3, [pc, #100]	; (8017b7c <sys_untimeout+0x70>)
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d029      	beq.n	8017b72 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8017b1e:	4b17      	ldr	r3, [pc, #92]	; (8017b7c <sys_untimeout+0x70>)
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	60bb      	str	r3, [r7, #8]
 8017b24:	2300      	movs	r3, #0
 8017b26:	60fb      	str	r3, [r7, #12]
 8017b28:	e01f      	b.n	8017b6a <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8017b2a:	68bb      	ldr	r3, [r7, #8]
 8017b2c:	689b      	ldr	r3, [r3, #8]
 8017b2e:	687a      	ldr	r2, [r7, #4]
 8017b30:	429a      	cmp	r2, r3
 8017b32:	d115      	bne.n	8017b60 <sys_untimeout+0x54>
 8017b34:	68bb      	ldr	r3, [r7, #8]
 8017b36:	68db      	ldr	r3, [r3, #12]
 8017b38:	683a      	ldr	r2, [r7, #0]
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	d110      	bne.n	8017b60 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d104      	bne.n	8017b4e <sys_untimeout+0x42>
        next_timeout = t->next;
 8017b44:	68bb      	ldr	r3, [r7, #8]
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	4a0c      	ldr	r2, [pc, #48]	; (8017b7c <sys_untimeout+0x70>)
 8017b4a:	6013      	str	r3, [r2, #0]
 8017b4c:	e003      	b.n	8017b56 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8017b4e:	68bb      	ldr	r3, [r7, #8]
 8017b50:	681a      	ldr	r2, [r3, #0]
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8017b56:	68b9      	ldr	r1, [r7, #8]
 8017b58:	200a      	movs	r0, #10
 8017b5a:	f7f8 fcc5 	bl	80104e8 <memp_free>
      return;
 8017b5e:	e009      	b.n	8017b74 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8017b60:	68bb      	ldr	r3, [r7, #8]
 8017b62:	60fb      	str	r3, [r7, #12]
 8017b64:	68bb      	ldr	r3, [r7, #8]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	60bb      	str	r3, [r7, #8]
 8017b6a:	68bb      	ldr	r3, [r7, #8]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d1dc      	bne.n	8017b2a <sys_untimeout+0x1e>
    }
  }
  return;
 8017b70:	e000      	b.n	8017b74 <sys_untimeout+0x68>
    return;
 8017b72:	bf00      	nop
}
 8017b74:	3710      	adds	r7, #16
 8017b76:	46bd      	mov	sp, r7
 8017b78:	bd80      	pop	{r7, pc}
 8017b7a:	bf00      	nop
 8017b7c:	2001dd34 	.word	0x2001dd34

08017b80 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b084      	sub	sp, #16
 8017b84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017b86:	f7f2 fd41 	bl	800a60c <sys_now>
 8017b8a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017b8c:	4b17      	ldr	r3, [pc, #92]	; (8017bec <sys_check_timeouts+0x6c>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017b92:	68bb      	ldr	r3, [r7, #8]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d022      	beq.n	8017bde <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017b98:	68bb      	ldr	r3, [r7, #8]
 8017b9a:	685b      	ldr	r3, [r3, #4]
 8017b9c:	68fa      	ldr	r2, [r7, #12]
 8017b9e:	1ad3      	subs	r3, r2, r3
 8017ba0:	0fdb      	lsrs	r3, r3, #31
 8017ba2:	f003 0301 	and.w	r3, r3, #1
 8017ba6:	b2db      	uxtb	r3, r3
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d11a      	bne.n	8017be2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017bac:	68bb      	ldr	r3, [r7, #8]
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	4a0e      	ldr	r2, [pc, #56]	; (8017bec <sys_check_timeouts+0x6c>)
 8017bb2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017bb4:	68bb      	ldr	r3, [r7, #8]
 8017bb6:	689b      	ldr	r3, [r3, #8]
 8017bb8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017bba:	68bb      	ldr	r3, [r7, #8]
 8017bbc:	68db      	ldr	r3, [r3, #12]
 8017bbe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017bc0:	68bb      	ldr	r3, [r7, #8]
 8017bc2:	685b      	ldr	r3, [r3, #4]
 8017bc4:	4a0a      	ldr	r2, [pc, #40]	; (8017bf0 <sys_check_timeouts+0x70>)
 8017bc6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017bc8:	68b9      	ldr	r1, [r7, #8]
 8017bca:	200a      	movs	r0, #10
 8017bcc:	f7f8 fc8c 	bl	80104e8 <memp_free>
    if (handler != NULL) {
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d0da      	beq.n	8017b8c <sys_check_timeouts+0xc>
      handler(arg);
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	6838      	ldr	r0, [r7, #0]
 8017bda:	4798      	blx	r3
  do {
 8017bdc:	e7d6      	b.n	8017b8c <sys_check_timeouts+0xc>
      return;
 8017bde:	bf00      	nop
 8017be0:	e000      	b.n	8017be4 <sys_check_timeouts+0x64>
      return;
 8017be2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017be4:	3710      	adds	r7, #16
 8017be6:	46bd      	mov	sp, r7
 8017be8:	bd80      	pop	{r7, pc}
 8017bea:	bf00      	nop
 8017bec:	2001dd34 	.word	0x2001dd34
 8017bf0:	2001dd38 	.word	0x2001dd38

08017bf4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b082      	sub	sp, #8
 8017bf8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017bfa:	4b16      	ldr	r3, [pc, #88]	; (8017c54 <sys_timeouts_sleeptime+0x60>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d102      	bne.n	8017c08 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017c02:	f04f 33ff 	mov.w	r3, #4294967295
 8017c06:	e020      	b.n	8017c4a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017c08:	f7f2 fd00 	bl	800a60c <sys_now>
 8017c0c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017c0e:	4b11      	ldr	r3, [pc, #68]	; (8017c54 <sys_timeouts_sleeptime+0x60>)
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	685a      	ldr	r2, [r3, #4]
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	1ad3      	subs	r3, r2, r3
 8017c18:	0fdb      	lsrs	r3, r3, #31
 8017c1a:	f003 0301 	and.w	r3, r3, #1
 8017c1e:	b2db      	uxtb	r3, r3
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d001      	beq.n	8017c28 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017c24:	2300      	movs	r3, #0
 8017c26:	e010      	b.n	8017c4a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017c28:	4b0a      	ldr	r3, [pc, #40]	; (8017c54 <sys_timeouts_sleeptime+0x60>)
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	685a      	ldr	r2, [r3, #4]
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	1ad3      	subs	r3, r2, r3
 8017c32:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017c34:	683b      	ldr	r3, [r7, #0]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	da06      	bge.n	8017c48 <sys_timeouts_sleeptime+0x54>
 8017c3a:	4b07      	ldr	r3, [pc, #28]	; (8017c58 <sys_timeouts_sleeptime+0x64>)
 8017c3c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017c40:	4906      	ldr	r1, [pc, #24]	; (8017c5c <sys_timeouts_sleeptime+0x68>)
 8017c42:	4807      	ldr	r0, [pc, #28]	; (8017c60 <sys_timeouts_sleeptime+0x6c>)
 8017c44:	f003 fae0 	bl	801b208 <iprintf>
    return ret;
 8017c48:	683b      	ldr	r3, [r7, #0]
  }
}
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	3708      	adds	r7, #8
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	bd80      	pop	{r7, pc}
 8017c52:	bf00      	nop
 8017c54:	2001dd34 	.word	0x2001dd34
 8017c58:	0801f93c 	.word	0x0801f93c
 8017c5c:	0801fa10 	.word	0x0801fa10
 8017c60:	0801f9b0 	.word	0x0801f9b0

08017c64 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017c68:	f002 fd92 	bl	801a790 <rand>
 8017c6c:	4603      	mov	r3, r0
 8017c6e:	b29b      	uxth	r3, r3
 8017c70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017c74:	b29b      	uxth	r3, r3
 8017c76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017c7a:	b29a      	uxth	r2, r3
 8017c7c:	4b01      	ldr	r3, [pc, #4]	; (8017c84 <udp_init+0x20>)
 8017c7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017c80:	bf00      	nop
 8017c82:	bd80      	pop	{r7, pc}
 8017c84:	20000034 	.word	0x20000034

08017c88 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b084      	sub	sp, #16
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	60f8      	str	r0, [r7, #12]
 8017c90:	60b9      	str	r1, [r7, #8]
 8017c92:	4613      	mov	r3, r2
 8017c94:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d105      	bne.n	8017ca8 <udp_input_local_match+0x20>
 8017c9c:	4b27      	ldr	r3, [pc, #156]	; (8017d3c <udp_input_local_match+0xb4>)
 8017c9e:	2287      	movs	r2, #135	; 0x87
 8017ca0:	4927      	ldr	r1, [pc, #156]	; (8017d40 <udp_input_local_match+0xb8>)
 8017ca2:	4828      	ldr	r0, [pc, #160]	; (8017d44 <udp_input_local_match+0xbc>)
 8017ca4:	f003 fab0 	bl	801b208 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017ca8:	68bb      	ldr	r3, [r7, #8]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d105      	bne.n	8017cba <udp_input_local_match+0x32>
 8017cae:	4b23      	ldr	r3, [pc, #140]	; (8017d3c <udp_input_local_match+0xb4>)
 8017cb0:	2288      	movs	r2, #136	; 0x88
 8017cb2:	4925      	ldr	r1, [pc, #148]	; (8017d48 <udp_input_local_match+0xc0>)
 8017cb4:	4823      	ldr	r0, [pc, #140]	; (8017d44 <udp_input_local_match+0xbc>)
 8017cb6:	f003 faa7 	bl	801b208 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	7a1b      	ldrb	r3, [r3, #8]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d00b      	beq.n	8017cda <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	7a1a      	ldrb	r2, [r3, #8]
 8017cc6:	4b21      	ldr	r3, [pc, #132]	; (8017d4c <udp_input_local_match+0xc4>)
 8017cc8:	685b      	ldr	r3, [r3, #4]
 8017cca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017cce:	3301      	adds	r3, #1
 8017cd0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017cd2:	429a      	cmp	r2, r3
 8017cd4:	d001      	beq.n	8017cda <udp_input_local_match+0x52>
    return 0;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	e02b      	b.n	8017d32 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017cda:	79fb      	ldrb	r3, [r7, #7]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d018      	beq.n	8017d12 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d013      	beq.n	8017d0e <udp_input_local_match+0x86>
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d00f      	beq.n	8017d0e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017cee:	4b17      	ldr	r3, [pc, #92]	; (8017d4c <udp_input_local_match+0xc4>)
 8017cf0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cf6:	d00a      	beq.n	8017d0e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	681a      	ldr	r2, [r3, #0]
 8017cfc:	4b13      	ldr	r3, [pc, #76]	; (8017d4c <udp_input_local_match+0xc4>)
 8017cfe:	695b      	ldr	r3, [r3, #20]
 8017d00:	405a      	eors	r2, r3
 8017d02:	68bb      	ldr	r3, [r7, #8]
 8017d04:	3308      	adds	r3, #8
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d110      	bne.n	8017d30 <udp_input_local_match+0xa8>
          return 1;
 8017d0e:	2301      	movs	r3, #1
 8017d10:	e00f      	b.n	8017d32 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d009      	beq.n	8017d2c <udp_input_local_match+0xa4>
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d005      	beq.n	8017d2c <udp_input_local_match+0xa4>
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	681a      	ldr	r2, [r3, #0]
 8017d24:	4b09      	ldr	r3, [pc, #36]	; (8017d4c <udp_input_local_match+0xc4>)
 8017d26:	695b      	ldr	r3, [r3, #20]
 8017d28:	429a      	cmp	r2, r3
 8017d2a:	d101      	bne.n	8017d30 <udp_input_local_match+0xa8>
        return 1;
 8017d2c:	2301      	movs	r3, #1
 8017d2e:	e000      	b.n	8017d32 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017d30:	2300      	movs	r3, #0
}
 8017d32:	4618      	mov	r0, r3
 8017d34:	3710      	adds	r7, #16
 8017d36:	46bd      	mov	sp, r7
 8017d38:	bd80      	pop	{r7, pc}
 8017d3a:	bf00      	nop
 8017d3c:	0801fa24 	.word	0x0801fa24
 8017d40:	0801fa54 	.word	0x0801fa54
 8017d44:	0801fa78 	.word	0x0801fa78
 8017d48:	0801faa0 	.word	0x0801faa0
 8017d4c:	2000e29c 	.word	0x2000e29c

08017d50 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017d50:	b590      	push	{r4, r7, lr}
 8017d52:	b08d      	sub	sp, #52	; 0x34
 8017d54:	af02      	add	r7, sp, #8
 8017d56:	6078      	str	r0, [r7, #4]
 8017d58:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d105      	bne.n	8017d70 <udp_input+0x20>
 8017d64:	4b7c      	ldr	r3, [pc, #496]	; (8017f58 <udp_input+0x208>)
 8017d66:	22cf      	movs	r2, #207	; 0xcf
 8017d68:	497c      	ldr	r1, [pc, #496]	; (8017f5c <udp_input+0x20c>)
 8017d6a:	487d      	ldr	r0, [pc, #500]	; (8017f60 <udp_input+0x210>)
 8017d6c:	f003 fa4c 	bl	801b208 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017d70:	683b      	ldr	r3, [r7, #0]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d105      	bne.n	8017d82 <udp_input+0x32>
 8017d76:	4b78      	ldr	r3, [pc, #480]	; (8017f58 <udp_input+0x208>)
 8017d78:	22d0      	movs	r2, #208	; 0xd0
 8017d7a:	497a      	ldr	r1, [pc, #488]	; (8017f64 <udp_input+0x214>)
 8017d7c:	4878      	ldr	r0, [pc, #480]	; (8017f60 <udp_input+0x210>)
 8017d7e:	f003 fa43 	bl	801b208 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	895b      	ldrh	r3, [r3, #10]
 8017d86:	2b07      	cmp	r3, #7
 8017d88:	d803      	bhi.n	8017d92 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017d8a:	6878      	ldr	r0, [r7, #4]
 8017d8c:	f7f9 fa54 	bl	8011238 <pbuf_free>
    goto end;
 8017d90:	e0de      	b.n	8017f50 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	685b      	ldr	r3, [r3, #4]
 8017d96:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017d98:	4b73      	ldr	r3, [pc, #460]	; (8017f68 <udp_input+0x218>)
 8017d9a:	695b      	ldr	r3, [r3, #20]
 8017d9c:	4a72      	ldr	r2, [pc, #456]	; (8017f68 <udp_input+0x218>)
 8017d9e:	6812      	ldr	r2, [r2, #0]
 8017da0:	4611      	mov	r1, r2
 8017da2:	4618      	mov	r0, r3
 8017da4:	f001 fc88 	bl	80196b8 <ip4_addr_isbroadcast_u32>
 8017da8:	4603      	mov	r3, r0
 8017daa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017dac:	697b      	ldr	r3, [r7, #20]
 8017dae:	881b      	ldrh	r3, [r3, #0]
 8017db0:	b29b      	uxth	r3, r3
 8017db2:	4618      	mov	r0, r3
 8017db4:	f7f7 fe22 	bl	800f9fc <lwip_htons>
 8017db8:	4603      	mov	r3, r0
 8017dba:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017dbc:	697b      	ldr	r3, [r7, #20]
 8017dbe:	885b      	ldrh	r3, [r3, #2]
 8017dc0:	b29b      	uxth	r3, r3
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	f7f7 fe1a 	bl	800f9fc <lwip_htons>
 8017dc8:	4603      	mov	r3, r0
 8017dca:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017dcc:	2300      	movs	r3, #0
 8017dce:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017dd8:	4b64      	ldr	r3, [pc, #400]	; (8017f6c <udp_input+0x21c>)
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8017dde:	e054      	b.n	8017e8a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de2:	8a5b      	ldrh	r3, [r3, #18]
 8017de4:	89fa      	ldrh	r2, [r7, #14]
 8017de6:	429a      	cmp	r2, r3
 8017de8:	d14a      	bne.n	8017e80 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017dea:	7cfb      	ldrb	r3, [r7, #19]
 8017dec:	461a      	mov	r2, r3
 8017dee:	6839      	ldr	r1, [r7, #0]
 8017df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017df2:	f7ff ff49 	bl	8017c88 <udp_input_local_match>
 8017df6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d041      	beq.n	8017e80 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfe:	7c1b      	ldrb	r3, [r3, #16]
 8017e00:	f003 0304 	and.w	r3, r3, #4
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d11d      	bne.n	8017e44 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017e08:	69fb      	ldr	r3, [r7, #28]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d102      	bne.n	8017e14 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e10:	61fb      	str	r3, [r7, #28]
 8017e12:	e017      	b.n	8017e44 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017e14:	7cfb      	ldrb	r3, [r7, #19]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d014      	beq.n	8017e44 <udp_input+0xf4>
 8017e1a:	4b53      	ldr	r3, [pc, #332]	; (8017f68 <udp_input+0x218>)
 8017e1c:	695b      	ldr	r3, [r3, #20]
 8017e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e22:	d10f      	bne.n	8017e44 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017e24:	69fb      	ldr	r3, [r7, #28]
 8017e26:	681a      	ldr	r2, [r3, #0]
 8017e28:	683b      	ldr	r3, [r7, #0]
 8017e2a:	3304      	adds	r3, #4
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	429a      	cmp	r2, r3
 8017e30:	d008      	beq.n	8017e44 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e34:	681a      	ldr	r2, [r3, #0]
 8017e36:	683b      	ldr	r3, [r7, #0]
 8017e38:	3304      	adds	r3, #4
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	429a      	cmp	r2, r3
 8017e3e:	d101      	bne.n	8017e44 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e42:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e46:	8a9b      	ldrh	r3, [r3, #20]
 8017e48:	8a3a      	ldrh	r2, [r7, #16]
 8017e4a:	429a      	cmp	r2, r3
 8017e4c:	d118      	bne.n	8017e80 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e50:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d005      	beq.n	8017e62 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e58:	685a      	ldr	r2, [r3, #4]
 8017e5a:	4b43      	ldr	r3, [pc, #268]	; (8017f68 <udp_input+0x218>)
 8017e5c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	d10e      	bne.n	8017e80 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017e62:	6a3b      	ldr	r3, [r7, #32]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d014      	beq.n	8017e92 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e6a:	68da      	ldr	r2, [r3, #12]
 8017e6c:	6a3b      	ldr	r3, [r7, #32]
 8017e6e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017e70:	4b3e      	ldr	r3, [pc, #248]	; (8017f6c <udp_input+0x21c>)
 8017e72:	681a      	ldr	r2, [r3, #0]
 8017e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e76:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017e78:	4a3c      	ldr	r2, [pc, #240]	; (8017f6c <udp_input+0x21c>)
 8017e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e7c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017e7e:	e008      	b.n	8017e92 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e82:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e86:	68db      	ldr	r3, [r3, #12]
 8017e88:	627b      	str	r3, [r7, #36]	; 0x24
 8017e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d1a7      	bne.n	8017de0 <udp_input+0x90>
 8017e90:	e000      	b.n	8017e94 <udp_input+0x144>
        break;
 8017e92:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d101      	bne.n	8017e9e <udp_input+0x14e>
    pcb = uncon_pcb;
 8017e9a:	69fb      	ldr	r3, [r7, #28]
 8017e9c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d002      	beq.n	8017eaa <udp_input+0x15a>
    for_us = 1;
 8017ea4:	2301      	movs	r3, #1
 8017ea6:	76fb      	strb	r3, [r7, #27]
 8017ea8:	e00a      	b.n	8017ec0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017eaa:	683b      	ldr	r3, [r7, #0]
 8017eac:	3304      	adds	r3, #4
 8017eae:	681a      	ldr	r2, [r3, #0]
 8017eb0:	4b2d      	ldr	r3, [pc, #180]	; (8017f68 <udp_input+0x218>)
 8017eb2:	695b      	ldr	r3, [r3, #20]
 8017eb4:	429a      	cmp	r2, r3
 8017eb6:	bf0c      	ite	eq
 8017eb8:	2301      	moveq	r3, #1
 8017eba:	2300      	movne	r3, #0
 8017ebc:	b2db      	uxtb	r3, r3
 8017ebe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017ec0:	7efb      	ldrb	r3, [r7, #27]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d041      	beq.n	8017f4a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017ec6:	2108      	movs	r1, #8
 8017ec8:	6878      	ldr	r0, [r7, #4]
 8017eca:	f7f9 f92f 	bl	801112c <pbuf_remove_header>
 8017ece:	4603      	mov	r3, r0
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d00a      	beq.n	8017eea <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017ed4:	4b20      	ldr	r3, [pc, #128]	; (8017f58 <udp_input+0x208>)
 8017ed6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017eda:	4925      	ldr	r1, [pc, #148]	; (8017f70 <udp_input+0x220>)
 8017edc:	4820      	ldr	r0, [pc, #128]	; (8017f60 <udp_input+0x210>)
 8017ede:	f003 f993 	bl	801b208 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017ee2:	6878      	ldr	r0, [r7, #4]
 8017ee4:	f7f9 f9a8 	bl	8011238 <pbuf_free>
      goto end;
 8017ee8:	e032      	b.n	8017f50 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d012      	beq.n	8017f16 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef2:	699b      	ldr	r3, [r3, #24]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d00a      	beq.n	8017f0e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017efa:	699c      	ldr	r4, [r3, #24]
 8017efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017efe:	69d8      	ldr	r0, [r3, #28]
 8017f00:	8a3b      	ldrh	r3, [r7, #16]
 8017f02:	9300      	str	r3, [sp, #0]
 8017f04:	4b1b      	ldr	r3, [pc, #108]	; (8017f74 <udp_input+0x224>)
 8017f06:	687a      	ldr	r2, [r7, #4]
 8017f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017f0a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017f0c:	e021      	b.n	8017f52 <udp_input+0x202>
        pbuf_free(p);
 8017f0e:	6878      	ldr	r0, [r7, #4]
 8017f10:	f7f9 f992 	bl	8011238 <pbuf_free>
        goto end;
 8017f14:	e01c      	b.n	8017f50 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017f16:	7cfb      	ldrb	r3, [r7, #19]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d112      	bne.n	8017f42 <udp_input+0x1f2>
 8017f1c:	4b12      	ldr	r3, [pc, #72]	; (8017f68 <udp_input+0x218>)
 8017f1e:	695b      	ldr	r3, [r3, #20]
 8017f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017f24:	2be0      	cmp	r3, #224	; 0xe0
 8017f26:	d00c      	beq.n	8017f42 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017f28:	4b0f      	ldr	r3, [pc, #60]	; (8017f68 <udp_input+0x218>)
 8017f2a:	899b      	ldrh	r3, [r3, #12]
 8017f2c:	3308      	adds	r3, #8
 8017f2e:	b29b      	uxth	r3, r3
 8017f30:	b21b      	sxth	r3, r3
 8017f32:	4619      	mov	r1, r3
 8017f34:	6878      	ldr	r0, [r7, #4]
 8017f36:	f7f9 f96c 	bl	8011212 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017f3a:	2103      	movs	r1, #3
 8017f3c:	6878      	ldr	r0, [r7, #4]
 8017f3e:	f001 f89b 	bl	8019078 <icmp_dest_unreach>
      pbuf_free(p);
 8017f42:	6878      	ldr	r0, [r7, #4]
 8017f44:	f7f9 f978 	bl	8011238 <pbuf_free>
  return;
 8017f48:	e003      	b.n	8017f52 <udp_input+0x202>
    pbuf_free(p);
 8017f4a:	6878      	ldr	r0, [r7, #4]
 8017f4c:	f7f9 f974 	bl	8011238 <pbuf_free>
  return;
 8017f50:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017f52:	372c      	adds	r7, #44	; 0x2c
 8017f54:	46bd      	mov	sp, r7
 8017f56:	bd90      	pop	{r4, r7, pc}
 8017f58:	0801fa24 	.word	0x0801fa24
 8017f5c:	0801fac8 	.word	0x0801fac8
 8017f60:	0801fa78 	.word	0x0801fa78
 8017f64:	0801fae0 	.word	0x0801fae0
 8017f68:	2000e29c 	.word	0x2000e29c
 8017f6c:	2001dd40 	.word	0x2001dd40
 8017f70:	0801fafc 	.word	0x0801fafc
 8017f74:	2000e2ac 	.word	0x2000e2ac

08017f78 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017f78:	b480      	push	{r7}
 8017f7a:	b085      	sub	sp, #20
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
 8017f80:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d01e      	beq.n	8017fc6 <udp_netif_ip_addr_changed+0x4e>
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d01a      	beq.n	8017fc6 <udp_netif_ip_addr_changed+0x4e>
 8017f90:	683b      	ldr	r3, [r7, #0]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d017      	beq.n	8017fc6 <udp_netif_ip_addr_changed+0x4e>
 8017f96:	683b      	ldr	r3, [r7, #0]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d013      	beq.n	8017fc6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017f9e:	4b0d      	ldr	r3, [pc, #52]	; (8017fd4 <udp_netif_ip_addr_changed+0x5c>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	60fb      	str	r3, [r7, #12]
 8017fa4:	e00c      	b.n	8017fc0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	681a      	ldr	r2, [r3, #0]
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	429a      	cmp	r2, r3
 8017fb0:	d103      	bne.n	8017fba <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017fb2:	683b      	ldr	r3, [r7, #0]
 8017fb4:	681a      	ldr	r2, [r3, #0]
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	68db      	ldr	r3, [r3, #12]
 8017fbe:	60fb      	str	r3, [r7, #12]
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d1ef      	bne.n	8017fa6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8017fc6:	bf00      	nop
 8017fc8:	3714      	adds	r7, #20
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd0:	4770      	bx	lr
 8017fd2:	bf00      	nop
 8017fd4:	2001dd40 	.word	0x2001dd40

08017fd8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b082      	sub	sp, #8
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017fe0:	4915      	ldr	r1, [pc, #84]	; (8018038 <etharp_free_entry+0x60>)
 8017fe2:	687a      	ldr	r2, [r7, #4]
 8017fe4:	4613      	mov	r3, r2
 8017fe6:	005b      	lsls	r3, r3, #1
 8017fe8:	4413      	add	r3, r2
 8017fea:	00db      	lsls	r3, r3, #3
 8017fec:	440b      	add	r3, r1
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d013      	beq.n	801801c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017ff4:	4910      	ldr	r1, [pc, #64]	; (8018038 <etharp_free_entry+0x60>)
 8017ff6:	687a      	ldr	r2, [r7, #4]
 8017ff8:	4613      	mov	r3, r2
 8017ffa:	005b      	lsls	r3, r3, #1
 8017ffc:	4413      	add	r3, r2
 8017ffe:	00db      	lsls	r3, r3, #3
 8018000:	440b      	add	r3, r1
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	4618      	mov	r0, r3
 8018006:	f7f9 f917 	bl	8011238 <pbuf_free>
    arp_table[i].q = NULL;
 801800a:	490b      	ldr	r1, [pc, #44]	; (8018038 <etharp_free_entry+0x60>)
 801800c:	687a      	ldr	r2, [r7, #4]
 801800e:	4613      	mov	r3, r2
 8018010:	005b      	lsls	r3, r3, #1
 8018012:	4413      	add	r3, r2
 8018014:	00db      	lsls	r3, r3, #3
 8018016:	440b      	add	r3, r1
 8018018:	2200      	movs	r2, #0
 801801a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801801c:	4906      	ldr	r1, [pc, #24]	; (8018038 <etharp_free_entry+0x60>)
 801801e:	687a      	ldr	r2, [r7, #4]
 8018020:	4613      	mov	r3, r2
 8018022:	005b      	lsls	r3, r3, #1
 8018024:	4413      	add	r3, r2
 8018026:	00db      	lsls	r3, r3, #3
 8018028:	440b      	add	r3, r1
 801802a:	3314      	adds	r3, #20
 801802c:	2200      	movs	r2, #0
 801802e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018030:	bf00      	nop
 8018032:	3708      	adds	r7, #8
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}
 8018038:	2001dd44 	.word	0x2001dd44

0801803c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b082      	sub	sp, #8
 8018040:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018042:	2300      	movs	r3, #0
 8018044:	607b      	str	r3, [r7, #4]
 8018046:	e096      	b.n	8018176 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018048:	494f      	ldr	r1, [pc, #316]	; (8018188 <etharp_tmr+0x14c>)
 801804a:	687a      	ldr	r2, [r7, #4]
 801804c:	4613      	mov	r3, r2
 801804e:	005b      	lsls	r3, r3, #1
 8018050:	4413      	add	r3, r2
 8018052:	00db      	lsls	r3, r3, #3
 8018054:	440b      	add	r3, r1
 8018056:	3314      	adds	r3, #20
 8018058:	781b      	ldrb	r3, [r3, #0]
 801805a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801805c:	78fb      	ldrb	r3, [r7, #3]
 801805e:	2b00      	cmp	r3, #0
 8018060:	f000 8086 	beq.w	8018170 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018064:	4948      	ldr	r1, [pc, #288]	; (8018188 <etharp_tmr+0x14c>)
 8018066:	687a      	ldr	r2, [r7, #4]
 8018068:	4613      	mov	r3, r2
 801806a:	005b      	lsls	r3, r3, #1
 801806c:	4413      	add	r3, r2
 801806e:	00db      	lsls	r3, r3, #3
 8018070:	440b      	add	r3, r1
 8018072:	3312      	adds	r3, #18
 8018074:	881b      	ldrh	r3, [r3, #0]
 8018076:	3301      	adds	r3, #1
 8018078:	b298      	uxth	r0, r3
 801807a:	4943      	ldr	r1, [pc, #268]	; (8018188 <etharp_tmr+0x14c>)
 801807c:	687a      	ldr	r2, [r7, #4]
 801807e:	4613      	mov	r3, r2
 8018080:	005b      	lsls	r3, r3, #1
 8018082:	4413      	add	r3, r2
 8018084:	00db      	lsls	r3, r3, #3
 8018086:	440b      	add	r3, r1
 8018088:	3312      	adds	r3, #18
 801808a:	4602      	mov	r2, r0
 801808c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801808e:	493e      	ldr	r1, [pc, #248]	; (8018188 <etharp_tmr+0x14c>)
 8018090:	687a      	ldr	r2, [r7, #4]
 8018092:	4613      	mov	r3, r2
 8018094:	005b      	lsls	r3, r3, #1
 8018096:	4413      	add	r3, r2
 8018098:	00db      	lsls	r3, r3, #3
 801809a:	440b      	add	r3, r1
 801809c:	3312      	adds	r3, #18
 801809e:	881b      	ldrh	r3, [r3, #0]
 80180a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80180a4:	d215      	bcs.n	80180d2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80180a6:	4938      	ldr	r1, [pc, #224]	; (8018188 <etharp_tmr+0x14c>)
 80180a8:	687a      	ldr	r2, [r7, #4]
 80180aa:	4613      	mov	r3, r2
 80180ac:	005b      	lsls	r3, r3, #1
 80180ae:	4413      	add	r3, r2
 80180b0:	00db      	lsls	r3, r3, #3
 80180b2:	440b      	add	r3, r1
 80180b4:	3314      	adds	r3, #20
 80180b6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80180b8:	2b01      	cmp	r3, #1
 80180ba:	d10e      	bne.n	80180da <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80180bc:	4932      	ldr	r1, [pc, #200]	; (8018188 <etharp_tmr+0x14c>)
 80180be:	687a      	ldr	r2, [r7, #4]
 80180c0:	4613      	mov	r3, r2
 80180c2:	005b      	lsls	r3, r3, #1
 80180c4:	4413      	add	r3, r2
 80180c6:	00db      	lsls	r3, r3, #3
 80180c8:	440b      	add	r3, r1
 80180ca:	3312      	adds	r3, #18
 80180cc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80180ce:	2b04      	cmp	r3, #4
 80180d0:	d903      	bls.n	80180da <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80180d2:	6878      	ldr	r0, [r7, #4]
 80180d4:	f7ff ff80 	bl	8017fd8 <etharp_free_entry>
 80180d8:	e04a      	b.n	8018170 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80180da:	492b      	ldr	r1, [pc, #172]	; (8018188 <etharp_tmr+0x14c>)
 80180dc:	687a      	ldr	r2, [r7, #4]
 80180de:	4613      	mov	r3, r2
 80180e0:	005b      	lsls	r3, r3, #1
 80180e2:	4413      	add	r3, r2
 80180e4:	00db      	lsls	r3, r3, #3
 80180e6:	440b      	add	r3, r1
 80180e8:	3314      	adds	r3, #20
 80180ea:	781b      	ldrb	r3, [r3, #0]
 80180ec:	2b03      	cmp	r3, #3
 80180ee:	d10a      	bne.n	8018106 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80180f0:	4925      	ldr	r1, [pc, #148]	; (8018188 <etharp_tmr+0x14c>)
 80180f2:	687a      	ldr	r2, [r7, #4]
 80180f4:	4613      	mov	r3, r2
 80180f6:	005b      	lsls	r3, r3, #1
 80180f8:	4413      	add	r3, r2
 80180fa:	00db      	lsls	r3, r3, #3
 80180fc:	440b      	add	r3, r1
 80180fe:	3314      	adds	r3, #20
 8018100:	2204      	movs	r2, #4
 8018102:	701a      	strb	r2, [r3, #0]
 8018104:	e034      	b.n	8018170 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018106:	4920      	ldr	r1, [pc, #128]	; (8018188 <etharp_tmr+0x14c>)
 8018108:	687a      	ldr	r2, [r7, #4]
 801810a:	4613      	mov	r3, r2
 801810c:	005b      	lsls	r3, r3, #1
 801810e:	4413      	add	r3, r2
 8018110:	00db      	lsls	r3, r3, #3
 8018112:	440b      	add	r3, r1
 8018114:	3314      	adds	r3, #20
 8018116:	781b      	ldrb	r3, [r3, #0]
 8018118:	2b04      	cmp	r3, #4
 801811a:	d10a      	bne.n	8018132 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801811c:	491a      	ldr	r1, [pc, #104]	; (8018188 <etharp_tmr+0x14c>)
 801811e:	687a      	ldr	r2, [r7, #4]
 8018120:	4613      	mov	r3, r2
 8018122:	005b      	lsls	r3, r3, #1
 8018124:	4413      	add	r3, r2
 8018126:	00db      	lsls	r3, r3, #3
 8018128:	440b      	add	r3, r1
 801812a:	3314      	adds	r3, #20
 801812c:	2202      	movs	r2, #2
 801812e:	701a      	strb	r2, [r3, #0]
 8018130:	e01e      	b.n	8018170 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018132:	4915      	ldr	r1, [pc, #84]	; (8018188 <etharp_tmr+0x14c>)
 8018134:	687a      	ldr	r2, [r7, #4]
 8018136:	4613      	mov	r3, r2
 8018138:	005b      	lsls	r3, r3, #1
 801813a:	4413      	add	r3, r2
 801813c:	00db      	lsls	r3, r3, #3
 801813e:	440b      	add	r3, r1
 8018140:	3314      	adds	r3, #20
 8018142:	781b      	ldrb	r3, [r3, #0]
 8018144:	2b01      	cmp	r3, #1
 8018146:	d113      	bne.n	8018170 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018148:	490f      	ldr	r1, [pc, #60]	; (8018188 <etharp_tmr+0x14c>)
 801814a:	687a      	ldr	r2, [r7, #4]
 801814c:	4613      	mov	r3, r2
 801814e:	005b      	lsls	r3, r3, #1
 8018150:	4413      	add	r3, r2
 8018152:	00db      	lsls	r3, r3, #3
 8018154:	440b      	add	r3, r1
 8018156:	3308      	adds	r3, #8
 8018158:	6818      	ldr	r0, [r3, #0]
 801815a:	687a      	ldr	r2, [r7, #4]
 801815c:	4613      	mov	r3, r2
 801815e:	005b      	lsls	r3, r3, #1
 8018160:	4413      	add	r3, r2
 8018162:	00db      	lsls	r3, r3, #3
 8018164:	4a08      	ldr	r2, [pc, #32]	; (8018188 <etharp_tmr+0x14c>)
 8018166:	4413      	add	r3, r2
 8018168:	3304      	adds	r3, #4
 801816a:	4619      	mov	r1, r3
 801816c:	f000 fe6e 	bl	8018e4c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	3301      	adds	r3, #1
 8018174:	607b      	str	r3, [r7, #4]
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	2b09      	cmp	r3, #9
 801817a:	f77f af65 	ble.w	8018048 <etharp_tmr+0xc>
      }
    }
  }
}
 801817e:	bf00      	nop
 8018180:	bf00      	nop
 8018182:	3708      	adds	r7, #8
 8018184:	46bd      	mov	sp, r7
 8018186:	bd80      	pop	{r7, pc}
 8018188:	2001dd44 	.word	0x2001dd44

0801818c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b08a      	sub	sp, #40	; 0x28
 8018190:	af00      	add	r7, sp, #0
 8018192:	60f8      	str	r0, [r7, #12]
 8018194:	460b      	mov	r3, r1
 8018196:	607a      	str	r2, [r7, #4]
 8018198:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801819a:	230a      	movs	r3, #10
 801819c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801819e:	230a      	movs	r3, #10
 80181a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80181a2:	230a      	movs	r3, #10
 80181a4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80181a6:	2300      	movs	r3, #0
 80181a8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80181aa:	230a      	movs	r3, #10
 80181ac:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80181ae:	2300      	movs	r3, #0
 80181b0:	83bb      	strh	r3, [r7, #28]
 80181b2:	2300      	movs	r3, #0
 80181b4:	837b      	strh	r3, [r7, #26]
 80181b6:	2300      	movs	r3, #0
 80181b8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80181ba:	2300      	movs	r3, #0
 80181bc:	843b      	strh	r3, [r7, #32]
 80181be:	e0ae      	b.n	801831e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80181c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80181c4:	49a6      	ldr	r1, [pc, #664]	; (8018460 <etharp_find_entry+0x2d4>)
 80181c6:	4613      	mov	r3, r2
 80181c8:	005b      	lsls	r3, r3, #1
 80181ca:	4413      	add	r3, r2
 80181cc:	00db      	lsls	r3, r3, #3
 80181ce:	440b      	add	r3, r1
 80181d0:	3314      	adds	r3, #20
 80181d2:	781b      	ldrb	r3, [r3, #0]
 80181d4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80181d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80181da:	2b0a      	cmp	r3, #10
 80181dc:	d105      	bne.n	80181ea <etharp_find_entry+0x5e>
 80181de:	7dfb      	ldrb	r3, [r7, #23]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d102      	bne.n	80181ea <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80181e4:	8c3b      	ldrh	r3, [r7, #32]
 80181e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80181e8:	e095      	b.n	8018316 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80181ea:	7dfb      	ldrb	r3, [r7, #23]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	f000 8092 	beq.w	8018316 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80181f2:	7dfb      	ldrb	r3, [r7, #23]
 80181f4:	2b01      	cmp	r3, #1
 80181f6:	d009      	beq.n	801820c <etharp_find_entry+0x80>
 80181f8:	7dfb      	ldrb	r3, [r7, #23]
 80181fa:	2b01      	cmp	r3, #1
 80181fc:	d806      	bhi.n	801820c <etharp_find_entry+0x80>
 80181fe:	4b99      	ldr	r3, [pc, #612]	; (8018464 <etharp_find_entry+0x2d8>)
 8018200:	f240 1223 	movw	r2, #291	; 0x123
 8018204:	4998      	ldr	r1, [pc, #608]	; (8018468 <etharp_find_entry+0x2dc>)
 8018206:	4899      	ldr	r0, [pc, #612]	; (801846c <etharp_find_entry+0x2e0>)
 8018208:	f002 fffe 	bl	801b208 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d020      	beq.n	8018254 <etharp_find_entry+0xc8>
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	6819      	ldr	r1, [r3, #0]
 8018216:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801821a:	4891      	ldr	r0, [pc, #580]	; (8018460 <etharp_find_entry+0x2d4>)
 801821c:	4613      	mov	r3, r2
 801821e:	005b      	lsls	r3, r3, #1
 8018220:	4413      	add	r3, r2
 8018222:	00db      	lsls	r3, r3, #3
 8018224:	4403      	add	r3, r0
 8018226:	3304      	adds	r3, #4
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	4299      	cmp	r1, r3
 801822c:	d112      	bne.n	8018254 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d00c      	beq.n	801824e <etharp_find_entry+0xc2>
 8018234:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018238:	4989      	ldr	r1, [pc, #548]	; (8018460 <etharp_find_entry+0x2d4>)
 801823a:	4613      	mov	r3, r2
 801823c:	005b      	lsls	r3, r3, #1
 801823e:	4413      	add	r3, r2
 8018240:	00db      	lsls	r3, r3, #3
 8018242:	440b      	add	r3, r1
 8018244:	3308      	adds	r3, #8
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	687a      	ldr	r2, [r7, #4]
 801824a:	429a      	cmp	r2, r3
 801824c:	d102      	bne.n	8018254 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801824e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018252:	e100      	b.n	8018456 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018254:	7dfb      	ldrb	r3, [r7, #23]
 8018256:	2b01      	cmp	r3, #1
 8018258:	d140      	bne.n	80182dc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801825a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801825e:	4980      	ldr	r1, [pc, #512]	; (8018460 <etharp_find_entry+0x2d4>)
 8018260:	4613      	mov	r3, r2
 8018262:	005b      	lsls	r3, r3, #1
 8018264:	4413      	add	r3, r2
 8018266:	00db      	lsls	r3, r3, #3
 8018268:	440b      	add	r3, r1
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d01a      	beq.n	80182a6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018270:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018274:	497a      	ldr	r1, [pc, #488]	; (8018460 <etharp_find_entry+0x2d4>)
 8018276:	4613      	mov	r3, r2
 8018278:	005b      	lsls	r3, r3, #1
 801827a:	4413      	add	r3, r2
 801827c:	00db      	lsls	r3, r3, #3
 801827e:	440b      	add	r3, r1
 8018280:	3312      	adds	r3, #18
 8018282:	881b      	ldrh	r3, [r3, #0]
 8018284:	8bba      	ldrh	r2, [r7, #28]
 8018286:	429a      	cmp	r2, r3
 8018288:	d845      	bhi.n	8018316 <etharp_find_entry+0x18a>
            old_queue = i;
 801828a:	8c3b      	ldrh	r3, [r7, #32]
 801828c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801828e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018292:	4973      	ldr	r1, [pc, #460]	; (8018460 <etharp_find_entry+0x2d4>)
 8018294:	4613      	mov	r3, r2
 8018296:	005b      	lsls	r3, r3, #1
 8018298:	4413      	add	r3, r2
 801829a:	00db      	lsls	r3, r3, #3
 801829c:	440b      	add	r3, r1
 801829e:	3312      	adds	r3, #18
 80182a0:	881b      	ldrh	r3, [r3, #0]
 80182a2:	83bb      	strh	r3, [r7, #28]
 80182a4:	e037      	b.n	8018316 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80182a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182aa:	496d      	ldr	r1, [pc, #436]	; (8018460 <etharp_find_entry+0x2d4>)
 80182ac:	4613      	mov	r3, r2
 80182ae:	005b      	lsls	r3, r3, #1
 80182b0:	4413      	add	r3, r2
 80182b2:	00db      	lsls	r3, r3, #3
 80182b4:	440b      	add	r3, r1
 80182b6:	3312      	adds	r3, #18
 80182b8:	881b      	ldrh	r3, [r3, #0]
 80182ba:	8b7a      	ldrh	r2, [r7, #26]
 80182bc:	429a      	cmp	r2, r3
 80182be:	d82a      	bhi.n	8018316 <etharp_find_entry+0x18a>
            old_pending = i;
 80182c0:	8c3b      	ldrh	r3, [r7, #32]
 80182c2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80182c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182c8:	4965      	ldr	r1, [pc, #404]	; (8018460 <etharp_find_entry+0x2d4>)
 80182ca:	4613      	mov	r3, r2
 80182cc:	005b      	lsls	r3, r3, #1
 80182ce:	4413      	add	r3, r2
 80182d0:	00db      	lsls	r3, r3, #3
 80182d2:	440b      	add	r3, r1
 80182d4:	3312      	adds	r3, #18
 80182d6:	881b      	ldrh	r3, [r3, #0]
 80182d8:	837b      	strh	r3, [r7, #26]
 80182da:	e01c      	b.n	8018316 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80182dc:	7dfb      	ldrb	r3, [r7, #23]
 80182de:	2b01      	cmp	r3, #1
 80182e0:	d919      	bls.n	8018316 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80182e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182e6:	495e      	ldr	r1, [pc, #376]	; (8018460 <etharp_find_entry+0x2d4>)
 80182e8:	4613      	mov	r3, r2
 80182ea:	005b      	lsls	r3, r3, #1
 80182ec:	4413      	add	r3, r2
 80182ee:	00db      	lsls	r3, r3, #3
 80182f0:	440b      	add	r3, r1
 80182f2:	3312      	adds	r3, #18
 80182f4:	881b      	ldrh	r3, [r3, #0]
 80182f6:	8b3a      	ldrh	r2, [r7, #24]
 80182f8:	429a      	cmp	r2, r3
 80182fa:	d80c      	bhi.n	8018316 <etharp_find_entry+0x18a>
            old_stable = i;
 80182fc:	8c3b      	ldrh	r3, [r7, #32]
 80182fe:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018300:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018304:	4956      	ldr	r1, [pc, #344]	; (8018460 <etharp_find_entry+0x2d4>)
 8018306:	4613      	mov	r3, r2
 8018308:	005b      	lsls	r3, r3, #1
 801830a:	4413      	add	r3, r2
 801830c:	00db      	lsls	r3, r3, #3
 801830e:	440b      	add	r3, r1
 8018310:	3312      	adds	r3, #18
 8018312:	881b      	ldrh	r3, [r3, #0]
 8018314:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018316:	8c3b      	ldrh	r3, [r7, #32]
 8018318:	3301      	adds	r3, #1
 801831a:	b29b      	uxth	r3, r3
 801831c:	843b      	strh	r3, [r7, #32]
 801831e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018322:	2b09      	cmp	r3, #9
 8018324:	f77f af4c 	ble.w	80181c0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018328:	7afb      	ldrb	r3, [r7, #11]
 801832a:	f003 0302 	and.w	r3, r3, #2
 801832e:	2b00      	cmp	r3, #0
 8018330:	d108      	bne.n	8018344 <etharp_find_entry+0x1b8>
 8018332:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018336:	2b0a      	cmp	r3, #10
 8018338:	d107      	bne.n	801834a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801833a:	7afb      	ldrb	r3, [r7, #11]
 801833c:	f003 0301 	and.w	r3, r3, #1
 8018340:	2b00      	cmp	r3, #0
 8018342:	d102      	bne.n	801834a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018344:	f04f 33ff 	mov.w	r3, #4294967295
 8018348:	e085      	b.n	8018456 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801834a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801834e:	2b09      	cmp	r3, #9
 8018350:	dc02      	bgt.n	8018358 <etharp_find_entry+0x1cc>
    i = empty;
 8018352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018354:	843b      	strh	r3, [r7, #32]
 8018356:	e039      	b.n	80183cc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018358:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801835c:	2b09      	cmp	r3, #9
 801835e:	dc14      	bgt.n	801838a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018362:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018364:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018368:	493d      	ldr	r1, [pc, #244]	; (8018460 <etharp_find_entry+0x2d4>)
 801836a:	4613      	mov	r3, r2
 801836c:	005b      	lsls	r3, r3, #1
 801836e:	4413      	add	r3, r2
 8018370:	00db      	lsls	r3, r3, #3
 8018372:	440b      	add	r3, r1
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d018      	beq.n	80183ac <etharp_find_entry+0x220>
 801837a:	4b3a      	ldr	r3, [pc, #232]	; (8018464 <etharp_find_entry+0x2d8>)
 801837c:	f240 126d 	movw	r2, #365	; 0x16d
 8018380:	493b      	ldr	r1, [pc, #236]	; (8018470 <etharp_find_entry+0x2e4>)
 8018382:	483a      	ldr	r0, [pc, #232]	; (801846c <etharp_find_entry+0x2e0>)
 8018384:	f002 ff40 	bl	801b208 <iprintf>
 8018388:	e010      	b.n	80183ac <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801838a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801838e:	2b09      	cmp	r3, #9
 8018390:	dc02      	bgt.n	8018398 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018392:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018394:	843b      	strh	r3, [r7, #32]
 8018396:	e009      	b.n	80183ac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018398:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801839c:	2b09      	cmp	r3, #9
 801839e:	dc02      	bgt.n	80183a6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80183a0:	8bfb      	ldrh	r3, [r7, #30]
 80183a2:	843b      	strh	r3, [r7, #32]
 80183a4:	e002      	b.n	80183ac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80183a6:	f04f 33ff 	mov.w	r3, #4294967295
 80183aa:	e054      	b.n	8018456 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80183ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80183b0:	2b09      	cmp	r3, #9
 80183b2:	dd06      	ble.n	80183c2 <etharp_find_entry+0x236>
 80183b4:	4b2b      	ldr	r3, [pc, #172]	; (8018464 <etharp_find_entry+0x2d8>)
 80183b6:	f240 127f 	movw	r2, #383	; 0x17f
 80183ba:	492e      	ldr	r1, [pc, #184]	; (8018474 <etharp_find_entry+0x2e8>)
 80183bc:	482b      	ldr	r0, [pc, #172]	; (801846c <etharp_find_entry+0x2e0>)
 80183be:	f002 ff23 	bl	801b208 <iprintf>
    etharp_free_entry(i);
 80183c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80183c6:	4618      	mov	r0, r3
 80183c8:	f7ff fe06 	bl	8017fd8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80183cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80183d0:	2b09      	cmp	r3, #9
 80183d2:	dd06      	ble.n	80183e2 <etharp_find_entry+0x256>
 80183d4:	4b23      	ldr	r3, [pc, #140]	; (8018464 <etharp_find_entry+0x2d8>)
 80183d6:	f240 1283 	movw	r2, #387	; 0x183
 80183da:	4926      	ldr	r1, [pc, #152]	; (8018474 <etharp_find_entry+0x2e8>)
 80183dc:	4823      	ldr	r0, [pc, #140]	; (801846c <etharp_find_entry+0x2e0>)
 80183de:	f002 ff13 	bl	801b208 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80183e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183e6:	491e      	ldr	r1, [pc, #120]	; (8018460 <etharp_find_entry+0x2d4>)
 80183e8:	4613      	mov	r3, r2
 80183ea:	005b      	lsls	r3, r3, #1
 80183ec:	4413      	add	r3, r2
 80183ee:	00db      	lsls	r3, r3, #3
 80183f0:	440b      	add	r3, r1
 80183f2:	3314      	adds	r3, #20
 80183f4:	781b      	ldrb	r3, [r3, #0]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d006      	beq.n	8018408 <etharp_find_entry+0x27c>
 80183fa:	4b1a      	ldr	r3, [pc, #104]	; (8018464 <etharp_find_entry+0x2d8>)
 80183fc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018400:	491d      	ldr	r1, [pc, #116]	; (8018478 <etharp_find_entry+0x2ec>)
 8018402:	481a      	ldr	r0, [pc, #104]	; (801846c <etharp_find_entry+0x2e0>)
 8018404:	f002 ff00 	bl	801b208 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d00b      	beq.n	8018426 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801840e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	6819      	ldr	r1, [r3, #0]
 8018416:	4812      	ldr	r0, [pc, #72]	; (8018460 <etharp_find_entry+0x2d4>)
 8018418:	4613      	mov	r3, r2
 801841a:	005b      	lsls	r3, r3, #1
 801841c:	4413      	add	r3, r2
 801841e:	00db      	lsls	r3, r3, #3
 8018420:	4403      	add	r3, r0
 8018422:	3304      	adds	r3, #4
 8018424:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018426:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801842a:	490d      	ldr	r1, [pc, #52]	; (8018460 <etharp_find_entry+0x2d4>)
 801842c:	4613      	mov	r3, r2
 801842e:	005b      	lsls	r3, r3, #1
 8018430:	4413      	add	r3, r2
 8018432:	00db      	lsls	r3, r3, #3
 8018434:	440b      	add	r3, r1
 8018436:	3312      	adds	r3, #18
 8018438:	2200      	movs	r2, #0
 801843a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801843c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018440:	4907      	ldr	r1, [pc, #28]	; (8018460 <etharp_find_entry+0x2d4>)
 8018442:	4613      	mov	r3, r2
 8018444:	005b      	lsls	r3, r3, #1
 8018446:	4413      	add	r3, r2
 8018448:	00db      	lsls	r3, r3, #3
 801844a:	440b      	add	r3, r1
 801844c:	3308      	adds	r3, #8
 801844e:	687a      	ldr	r2, [r7, #4]
 8018450:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018452:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018456:	4618      	mov	r0, r3
 8018458:	3728      	adds	r7, #40	; 0x28
 801845a:	46bd      	mov	sp, r7
 801845c:	bd80      	pop	{r7, pc}
 801845e:	bf00      	nop
 8018460:	2001dd44 	.word	0x2001dd44
 8018464:	0801fd88 	.word	0x0801fd88
 8018468:	0801fdc0 	.word	0x0801fdc0
 801846c:	0801fe00 	.word	0x0801fe00
 8018470:	0801fe28 	.word	0x0801fe28
 8018474:	0801fe40 	.word	0x0801fe40
 8018478:	0801fe54 	.word	0x0801fe54

0801847c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b088      	sub	sp, #32
 8018480:	af02      	add	r7, sp, #8
 8018482:	60f8      	str	r0, [r7, #12]
 8018484:	60b9      	str	r1, [r7, #8]
 8018486:	607a      	str	r2, [r7, #4]
 8018488:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018490:	2b06      	cmp	r3, #6
 8018492:	d006      	beq.n	80184a2 <etharp_update_arp_entry+0x26>
 8018494:	4b48      	ldr	r3, [pc, #288]	; (80185b8 <etharp_update_arp_entry+0x13c>)
 8018496:	f240 12a9 	movw	r2, #425	; 0x1a9
 801849a:	4948      	ldr	r1, [pc, #288]	; (80185bc <etharp_update_arp_entry+0x140>)
 801849c:	4848      	ldr	r0, [pc, #288]	; (80185c0 <etharp_update_arp_entry+0x144>)
 801849e:	f002 feb3 	bl	801b208 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80184a2:	68bb      	ldr	r3, [r7, #8]
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d012      	beq.n	80184ce <etharp_update_arp_entry+0x52>
 80184a8:	68bb      	ldr	r3, [r7, #8]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d00e      	beq.n	80184ce <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80184b0:	68bb      	ldr	r3, [r7, #8]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	68f9      	ldr	r1, [r7, #12]
 80184b6:	4618      	mov	r0, r3
 80184b8:	f001 f8fe 	bl	80196b8 <ip4_addr_isbroadcast_u32>
 80184bc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d105      	bne.n	80184ce <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80184c2:	68bb      	ldr	r3, [r7, #8]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80184ca:	2be0      	cmp	r3, #224	; 0xe0
 80184cc:	d102      	bne.n	80184d4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80184ce:	f06f 030f 	mvn.w	r3, #15
 80184d2:	e06c      	b.n	80185ae <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80184d4:	78fb      	ldrb	r3, [r7, #3]
 80184d6:	68fa      	ldr	r2, [r7, #12]
 80184d8:	4619      	mov	r1, r3
 80184da:	68b8      	ldr	r0, [r7, #8]
 80184dc:	f7ff fe56 	bl	801818c <etharp_find_entry>
 80184e0:	4603      	mov	r3, r0
 80184e2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80184e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	da02      	bge.n	80184f2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80184ec:	8afb      	ldrh	r3, [r7, #22]
 80184ee:	b25b      	sxtb	r3, r3
 80184f0:	e05d      	b.n	80185ae <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80184f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80184f6:	4933      	ldr	r1, [pc, #204]	; (80185c4 <etharp_update_arp_entry+0x148>)
 80184f8:	4613      	mov	r3, r2
 80184fa:	005b      	lsls	r3, r3, #1
 80184fc:	4413      	add	r3, r2
 80184fe:	00db      	lsls	r3, r3, #3
 8018500:	440b      	add	r3, r1
 8018502:	3314      	adds	r3, #20
 8018504:	2202      	movs	r2, #2
 8018506:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018508:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801850c:	492d      	ldr	r1, [pc, #180]	; (80185c4 <etharp_update_arp_entry+0x148>)
 801850e:	4613      	mov	r3, r2
 8018510:	005b      	lsls	r3, r3, #1
 8018512:	4413      	add	r3, r2
 8018514:	00db      	lsls	r3, r3, #3
 8018516:	440b      	add	r3, r1
 8018518:	3308      	adds	r3, #8
 801851a:	68fa      	ldr	r2, [r7, #12]
 801851c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801851e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018522:	4613      	mov	r3, r2
 8018524:	005b      	lsls	r3, r3, #1
 8018526:	4413      	add	r3, r2
 8018528:	00db      	lsls	r3, r3, #3
 801852a:	3308      	adds	r3, #8
 801852c:	4a25      	ldr	r2, [pc, #148]	; (80185c4 <etharp_update_arp_entry+0x148>)
 801852e:	4413      	add	r3, r2
 8018530:	3304      	adds	r3, #4
 8018532:	2206      	movs	r2, #6
 8018534:	6879      	ldr	r1, [r7, #4]
 8018536:	4618      	mov	r0, r3
 8018538:	f002 ff9b 	bl	801b472 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801853c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018540:	4920      	ldr	r1, [pc, #128]	; (80185c4 <etharp_update_arp_entry+0x148>)
 8018542:	4613      	mov	r3, r2
 8018544:	005b      	lsls	r3, r3, #1
 8018546:	4413      	add	r3, r2
 8018548:	00db      	lsls	r3, r3, #3
 801854a:	440b      	add	r3, r1
 801854c:	3312      	adds	r3, #18
 801854e:	2200      	movs	r2, #0
 8018550:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018552:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018556:	491b      	ldr	r1, [pc, #108]	; (80185c4 <etharp_update_arp_entry+0x148>)
 8018558:	4613      	mov	r3, r2
 801855a:	005b      	lsls	r3, r3, #1
 801855c:	4413      	add	r3, r2
 801855e:	00db      	lsls	r3, r3, #3
 8018560:	440b      	add	r3, r1
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d021      	beq.n	80185ac <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018568:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801856c:	4915      	ldr	r1, [pc, #84]	; (80185c4 <etharp_update_arp_entry+0x148>)
 801856e:	4613      	mov	r3, r2
 8018570:	005b      	lsls	r3, r3, #1
 8018572:	4413      	add	r3, r2
 8018574:	00db      	lsls	r3, r3, #3
 8018576:	440b      	add	r3, r1
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801857c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018580:	4910      	ldr	r1, [pc, #64]	; (80185c4 <etharp_update_arp_entry+0x148>)
 8018582:	4613      	mov	r3, r2
 8018584:	005b      	lsls	r3, r3, #1
 8018586:	4413      	add	r3, r2
 8018588:	00db      	lsls	r3, r3, #3
 801858a:	440b      	add	r3, r1
 801858c:	2200      	movs	r2, #0
 801858e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018596:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801859a:	9300      	str	r3, [sp, #0]
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	6939      	ldr	r1, [r7, #16]
 80185a0:	68f8      	ldr	r0, [r7, #12]
 80185a2:	f001 ff97 	bl	801a4d4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80185a6:	6938      	ldr	r0, [r7, #16]
 80185a8:	f7f8 fe46 	bl	8011238 <pbuf_free>
  }
  return ERR_OK;
 80185ac:	2300      	movs	r3, #0
}
 80185ae:	4618      	mov	r0, r3
 80185b0:	3718      	adds	r7, #24
 80185b2:	46bd      	mov	sp, r7
 80185b4:	bd80      	pop	{r7, pc}
 80185b6:	bf00      	nop
 80185b8:	0801fd88 	.word	0x0801fd88
 80185bc:	0801fe80 	.word	0x0801fe80
 80185c0:	0801fe00 	.word	0x0801fe00
 80185c4:	2001dd44 	.word	0x2001dd44

080185c8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b084      	sub	sp, #16
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80185d0:	2300      	movs	r3, #0
 80185d2:	60fb      	str	r3, [r7, #12]
 80185d4:	e01e      	b.n	8018614 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80185d6:	4913      	ldr	r1, [pc, #76]	; (8018624 <etharp_cleanup_netif+0x5c>)
 80185d8:	68fa      	ldr	r2, [r7, #12]
 80185da:	4613      	mov	r3, r2
 80185dc:	005b      	lsls	r3, r3, #1
 80185de:	4413      	add	r3, r2
 80185e0:	00db      	lsls	r3, r3, #3
 80185e2:	440b      	add	r3, r1
 80185e4:	3314      	adds	r3, #20
 80185e6:	781b      	ldrb	r3, [r3, #0]
 80185e8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80185ea:	7afb      	ldrb	r3, [r7, #11]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d00e      	beq.n	801860e <etharp_cleanup_netif+0x46>
 80185f0:	490c      	ldr	r1, [pc, #48]	; (8018624 <etharp_cleanup_netif+0x5c>)
 80185f2:	68fa      	ldr	r2, [r7, #12]
 80185f4:	4613      	mov	r3, r2
 80185f6:	005b      	lsls	r3, r3, #1
 80185f8:	4413      	add	r3, r2
 80185fa:	00db      	lsls	r3, r3, #3
 80185fc:	440b      	add	r3, r1
 80185fe:	3308      	adds	r3, #8
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	687a      	ldr	r2, [r7, #4]
 8018604:	429a      	cmp	r2, r3
 8018606:	d102      	bne.n	801860e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018608:	68f8      	ldr	r0, [r7, #12]
 801860a:	f7ff fce5 	bl	8017fd8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	3301      	adds	r3, #1
 8018612:	60fb      	str	r3, [r7, #12]
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	2b09      	cmp	r3, #9
 8018618:	dddd      	ble.n	80185d6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801861a:	bf00      	nop
 801861c:	bf00      	nop
 801861e:	3710      	adds	r7, #16
 8018620:	46bd      	mov	sp, r7
 8018622:	bd80      	pop	{r7, pc}
 8018624:	2001dd44 	.word	0x2001dd44

08018628 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018628:	b5b0      	push	{r4, r5, r7, lr}
 801862a:	b08a      	sub	sp, #40	; 0x28
 801862c:	af04      	add	r7, sp, #16
 801862e:	6078      	str	r0, [r7, #4]
 8018630:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018632:	683b      	ldr	r3, [r7, #0]
 8018634:	2b00      	cmp	r3, #0
 8018636:	d107      	bne.n	8018648 <etharp_input+0x20>
 8018638:	4b3d      	ldr	r3, [pc, #244]	; (8018730 <etharp_input+0x108>)
 801863a:	f240 228a 	movw	r2, #650	; 0x28a
 801863e:	493d      	ldr	r1, [pc, #244]	; (8018734 <etharp_input+0x10c>)
 8018640:	483d      	ldr	r0, [pc, #244]	; (8018738 <etharp_input+0x110>)
 8018642:	f002 fde1 	bl	801b208 <iprintf>
 8018646:	e06f      	b.n	8018728 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	685b      	ldr	r3, [r3, #4]
 801864c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801864e:	693b      	ldr	r3, [r7, #16]
 8018650:	881b      	ldrh	r3, [r3, #0]
 8018652:	b29b      	uxth	r3, r3
 8018654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018658:	d10c      	bne.n	8018674 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801865a:	693b      	ldr	r3, [r7, #16]
 801865c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801865e:	2b06      	cmp	r3, #6
 8018660:	d108      	bne.n	8018674 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018662:	693b      	ldr	r3, [r7, #16]
 8018664:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018666:	2b04      	cmp	r3, #4
 8018668:	d104      	bne.n	8018674 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801866a:	693b      	ldr	r3, [r7, #16]
 801866c:	885b      	ldrh	r3, [r3, #2]
 801866e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018670:	2b08      	cmp	r3, #8
 8018672:	d003      	beq.n	801867c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018674:	6878      	ldr	r0, [r7, #4]
 8018676:	f7f8 fddf 	bl	8011238 <pbuf_free>
    return;
 801867a:	e055      	b.n	8018728 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801867c:	693b      	ldr	r3, [r7, #16]
 801867e:	330e      	adds	r3, #14
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018684:	693b      	ldr	r3, [r7, #16]
 8018686:	3318      	adds	r3, #24
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801868c:	683b      	ldr	r3, [r7, #0]
 801868e:	3304      	adds	r3, #4
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d102      	bne.n	801869c <etharp_input+0x74>
    for_us = 0;
 8018696:	2300      	movs	r3, #0
 8018698:	75fb      	strb	r3, [r7, #23]
 801869a:	e009      	b.n	80186b0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801869c:	68ba      	ldr	r2, [r7, #8]
 801869e:	683b      	ldr	r3, [r7, #0]
 80186a0:	3304      	adds	r3, #4
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	429a      	cmp	r2, r3
 80186a6:	bf0c      	ite	eq
 80186a8:	2301      	moveq	r3, #1
 80186aa:	2300      	movne	r3, #0
 80186ac:	b2db      	uxtb	r3, r3
 80186ae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80186b0:	693b      	ldr	r3, [r7, #16]
 80186b2:	f103 0208 	add.w	r2, r3, #8
 80186b6:	7dfb      	ldrb	r3, [r7, #23]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d001      	beq.n	80186c0 <etharp_input+0x98>
 80186bc:	2301      	movs	r3, #1
 80186be:	e000      	b.n	80186c2 <etharp_input+0x9a>
 80186c0:	2302      	movs	r3, #2
 80186c2:	f107 010c 	add.w	r1, r7, #12
 80186c6:	6838      	ldr	r0, [r7, #0]
 80186c8:	f7ff fed8 	bl	801847c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80186cc:	693b      	ldr	r3, [r7, #16]
 80186ce:	88db      	ldrh	r3, [r3, #6]
 80186d0:	b29b      	uxth	r3, r3
 80186d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80186d6:	d003      	beq.n	80186e0 <etharp_input+0xb8>
 80186d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80186dc:	d01e      	beq.n	801871c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80186de:	e020      	b.n	8018722 <etharp_input+0xfa>
      if (for_us) {
 80186e0:	7dfb      	ldrb	r3, [r7, #23]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d01c      	beq.n	8018720 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80186e6:	683b      	ldr	r3, [r7, #0]
 80186e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80186ec:	693b      	ldr	r3, [r7, #16]
 80186ee:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80186f2:	683b      	ldr	r3, [r7, #0]
 80186f4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80186f8:	683b      	ldr	r3, [r7, #0]
 80186fa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80186fc:	693a      	ldr	r2, [r7, #16]
 80186fe:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018700:	2102      	movs	r1, #2
 8018702:	9103      	str	r1, [sp, #12]
 8018704:	f107 010c 	add.w	r1, r7, #12
 8018708:	9102      	str	r1, [sp, #8]
 801870a:	9201      	str	r2, [sp, #4]
 801870c:	9300      	str	r3, [sp, #0]
 801870e:	462b      	mov	r3, r5
 8018710:	4622      	mov	r2, r4
 8018712:	4601      	mov	r1, r0
 8018714:	6838      	ldr	r0, [r7, #0]
 8018716:	f000 faeb 	bl	8018cf0 <etharp_raw>
      break;
 801871a:	e001      	b.n	8018720 <etharp_input+0xf8>
      break;
 801871c:	bf00      	nop
 801871e:	e000      	b.n	8018722 <etharp_input+0xfa>
      break;
 8018720:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018722:	6878      	ldr	r0, [r7, #4]
 8018724:	f7f8 fd88 	bl	8011238 <pbuf_free>
}
 8018728:	3718      	adds	r7, #24
 801872a:	46bd      	mov	sp, r7
 801872c:	bdb0      	pop	{r4, r5, r7, pc}
 801872e:	bf00      	nop
 8018730:	0801fd88 	.word	0x0801fd88
 8018734:	0801fed8 	.word	0x0801fed8
 8018738:	0801fe00 	.word	0x0801fe00

0801873c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b086      	sub	sp, #24
 8018740:	af02      	add	r7, sp, #8
 8018742:	60f8      	str	r0, [r7, #12]
 8018744:	60b9      	str	r1, [r7, #8]
 8018746:	4613      	mov	r3, r2
 8018748:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801874a:	79fa      	ldrb	r2, [r7, #7]
 801874c:	4944      	ldr	r1, [pc, #272]	; (8018860 <etharp_output_to_arp_index+0x124>)
 801874e:	4613      	mov	r3, r2
 8018750:	005b      	lsls	r3, r3, #1
 8018752:	4413      	add	r3, r2
 8018754:	00db      	lsls	r3, r3, #3
 8018756:	440b      	add	r3, r1
 8018758:	3314      	adds	r3, #20
 801875a:	781b      	ldrb	r3, [r3, #0]
 801875c:	2b01      	cmp	r3, #1
 801875e:	d806      	bhi.n	801876e <etharp_output_to_arp_index+0x32>
 8018760:	4b40      	ldr	r3, [pc, #256]	; (8018864 <etharp_output_to_arp_index+0x128>)
 8018762:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018766:	4940      	ldr	r1, [pc, #256]	; (8018868 <etharp_output_to_arp_index+0x12c>)
 8018768:	4840      	ldr	r0, [pc, #256]	; (801886c <etharp_output_to_arp_index+0x130>)
 801876a:	f002 fd4d 	bl	801b208 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801876e:	79fa      	ldrb	r2, [r7, #7]
 8018770:	493b      	ldr	r1, [pc, #236]	; (8018860 <etharp_output_to_arp_index+0x124>)
 8018772:	4613      	mov	r3, r2
 8018774:	005b      	lsls	r3, r3, #1
 8018776:	4413      	add	r3, r2
 8018778:	00db      	lsls	r3, r3, #3
 801877a:	440b      	add	r3, r1
 801877c:	3314      	adds	r3, #20
 801877e:	781b      	ldrb	r3, [r3, #0]
 8018780:	2b02      	cmp	r3, #2
 8018782:	d153      	bne.n	801882c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018784:	79fa      	ldrb	r2, [r7, #7]
 8018786:	4936      	ldr	r1, [pc, #216]	; (8018860 <etharp_output_to_arp_index+0x124>)
 8018788:	4613      	mov	r3, r2
 801878a:	005b      	lsls	r3, r3, #1
 801878c:	4413      	add	r3, r2
 801878e:	00db      	lsls	r3, r3, #3
 8018790:	440b      	add	r3, r1
 8018792:	3312      	adds	r3, #18
 8018794:	881b      	ldrh	r3, [r3, #0]
 8018796:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801879a:	d919      	bls.n	80187d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801879c:	79fa      	ldrb	r2, [r7, #7]
 801879e:	4613      	mov	r3, r2
 80187a0:	005b      	lsls	r3, r3, #1
 80187a2:	4413      	add	r3, r2
 80187a4:	00db      	lsls	r3, r3, #3
 80187a6:	4a2e      	ldr	r2, [pc, #184]	; (8018860 <etharp_output_to_arp_index+0x124>)
 80187a8:	4413      	add	r3, r2
 80187aa:	3304      	adds	r3, #4
 80187ac:	4619      	mov	r1, r3
 80187ae:	68f8      	ldr	r0, [r7, #12]
 80187b0:	f000 fb4c 	bl	8018e4c <etharp_request>
 80187b4:	4603      	mov	r3, r0
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d138      	bne.n	801882c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80187ba:	79fa      	ldrb	r2, [r7, #7]
 80187bc:	4928      	ldr	r1, [pc, #160]	; (8018860 <etharp_output_to_arp_index+0x124>)
 80187be:	4613      	mov	r3, r2
 80187c0:	005b      	lsls	r3, r3, #1
 80187c2:	4413      	add	r3, r2
 80187c4:	00db      	lsls	r3, r3, #3
 80187c6:	440b      	add	r3, r1
 80187c8:	3314      	adds	r3, #20
 80187ca:	2203      	movs	r2, #3
 80187cc:	701a      	strb	r2, [r3, #0]
 80187ce:	e02d      	b.n	801882c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80187d0:	79fa      	ldrb	r2, [r7, #7]
 80187d2:	4923      	ldr	r1, [pc, #140]	; (8018860 <etharp_output_to_arp_index+0x124>)
 80187d4:	4613      	mov	r3, r2
 80187d6:	005b      	lsls	r3, r3, #1
 80187d8:	4413      	add	r3, r2
 80187da:	00db      	lsls	r3, r3, #3
 80187dc:	440b      	add	r3, r1
 80187de:	3312      	adds	r3, #18
 80187e0:	881b      	ldrh	r3, [r3, #0]
 80187e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80187e6:	d321      	bcc.n	801882c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80187e8:	79fa      	ldrb	r2, [r7, #7]
 80187ea:	4613      	mov	r3, r2
 80187ec:	005b      	lsls	r3, r3, #1
 80187ee:	4413      	add	r3, r2
 80187f0:	00db      	lsls	r3, r3, #3
 80187f2:	4a1b      	ldr	r2, [pc, #108]	; (8018860 <etharp_output_to_arp_index+0x124>)
 80187f4:	4413      	add	r3, r2
 80187f6:	1d19      	adds	r1, r3, #4
 80187f8:	79fa      	ldrb	r2, [r7, #7]
 80187fa:	4613      	mov	r3, r2
 80187fc:	005b      	lsls	r3, r3, #1
 80187fe:	4413      	add	r3, r2
 8018800:	00db      	lsls	r3, r3, #3
 8018802:	3308      	adds	r3, #8
 8018804:	4a16      	ldr	r2, [pc, #88]	; (8018860 <etharp_output_to_arp_index+0x124>)
 8018806:	4413      	add	r3, r2
 8018808:	3304      	adds	r3, #4
 801880a:	461a      	mov	r2, r3
 801880c:	68f8      	ldr	r0, [r7, #12]
 801880e:	f000 fafb 	bl	8018e08 <etharp_request_dst>
 8018812:	4603      	mov	r3, r0
 8018814:	2b00      	cmp	r3, #0
 8018816:	d109      	bne.n	801882c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018818:	79fa      	ldrb	r2, [r7, #7]
 801881a:	4911      	ldr	r1, [pc, #68]	; (8018860 <etharp_output_to_arp_index+0x124>)
 801881c:	4613      	mov	r3, r2
 801881e:	005b      	lsls	r3, r3, #1
 8018820:	4413      	add	r3, r2
 8018822:	00db      	lsls	r3, r3, #3
 8018824:	440b      	add	r3, r1
 8018826:	3314      	adds	r3, #20
 8018828:	2203      	movs	r2, #3
 801882a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8018832:	79fa      	ldrb	r2, [r7, #7]
 8018834:	4613      	mov	r3, r2
 8018836:	005b      	lsls	r3, r3, #1
 8018838:	4413      	add	r3, r2
 801883a:	00db      	lsls	r3, r3, #3
 801883c:	3308      	adds	r3, #8
 801883e:	4a08      	ldr	r2, [pc, #32]	; (8018860 <etharp_output_to_arp_index+0x124>)
 8018840:	4413      	add	r3, r2
 8018842:	3304      	adds	r3, #4
 8018844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018848:	9200      	str	r2, [sp, #0]
 801884a:	460a      	mov	r2, r1
 801884c:	68b9      	ldr	r1, [r7, #8]
 801884e:	68f8      	ldr	r0, [r7, #12]
 8018850:	f001 fe40 	bl	801a4d4 <ethernet_output>
 8018854:	4603      	mov	r3, r0
}
 8018856:	4618      	mov	r0, r3
 8018858:	3710      	adds	r7, #16
 801885a:	46bd      	mov	sp, r7
 801885c:	bd80      	pop	{r7, pc}
 801885e:	bf00      	nop
 8018860:	2001dd44 	.word	0x2001dd44
 8018864:	0801fd88 	.word	0x0801fd88
 8018868:	0801fef8 	.word	0x0801fef8
 801886c:	0801fe00 	.word	0x0801fe00

08018870 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018870:	b580      	push	{r7, lr}
 8018872:	b08a      	sub	sp, #40	; 0x28
 8018874:	af02      	add	r7, sp, #8
 8018876:	60f8      	str	r0, [r7, #12]
 8018878:	60b9      	str	r1, [r7, #8]
 801887a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d106      	bne.n	8018894 <etharp_output+0x24>
 8018886:	4b73      	ldr	r3, [pc, #460]	; (8018a54 <etharp_output+0x1e4>)
 8018888:	f240 321e 	movw	r2, #798	; 0x31e
 801888c:	4972      	ldr	r1, [pc, #456]	; (8018a58 <etharp_output+0x1e8>)
 801888e:	4873      	ldr	r0, [pc, #460]	; (8018a5c <etharp_output+0x1ec>)
 8018890:	f002 fcba 	bl	801b208 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018894:	68bb      	ldr	r3, [r7, #8]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d106      	bne.n	80188a8 <etharp_output+0x38>
 801889a:	4b6e      	ldr	r3, [pc, #440]	; (8018a54 <etharp_output+0x1e4>)
 801889c:	f240 321f 	movw	r2, #799	; 0x31f
 80188a0:	496f      	ldr	r1, [pc, #444]	; (8018a60 <etharp_output+0x1f0>)
 80188a2:	486e      	ldr	r0, [pc, #440]	; (8018a5c <etharp_output+0x1ec>)
 80188a4:	f002 fcb0 	bl	801b208 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d106      	bne.n	80188bc <etharp_output+0x4c>
 80188ae:	4b69      	ldr	r3, [pc, #420]	; (8018a54 <etharp_output+0x1e4>)
 80188b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80188b4:	496b      	ldr	r1, [pc, #428]	; (8018a64 <etharp_output+0x1f4>)
 80188b6:	4869      	ldr	r0, [pc, #420]	; (8018a5c <etharp_output+0x1ec>)
 80188b8:	f002 fca6 	bl	801b208 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	68f9      	ldr	r1, [r7, #12]
 80188c2:	4618      	mov	r0, r3
 80188c4:	f000 fef8 	bl	80196b8 <ip4_addr_isbroadcast_u32>
 80188c8:	4603      	mov	r3, r0
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d002      	beq.n	80188d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80188ce:	4b66      	ldr	r3, [pc, #408]	; (8018a68 <etharp_output+0x1f8>)
 80188d0:	61fb      	str	r3, [r7, #28]
 80188d2:	e0af      	b.n	8018a34 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80188dc:	2be0      	cmp	r3, #224	; 0xe0
 80188de:	d118      	bne.n	8018912 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80188e0:	2301      	movs	r3, #1
 80188e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80188e4:	2300      	movs	r3, #0
 80188e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80188e8:	235e      	movs	r3, #94	; 0x5e
 80188ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	3301      	adds	r3, #1
 80188f0:	781b      	ldrb	r3, [r3, #0]
 80188f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80188f6:	b2db      	uxtb	r3, r3
 80188f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	3302      	adds	r3, #2
 80188fe:	781b      	ldrb	r3, [r3, #0]
 8018900:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	3303      	adds	r3, #3
 8018906:	781b      	ldrb	r3, [r3, #0]
 8018908:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801890a:	f107 0310 	add.w	r3, r7, #16
 801890e:	61fb      	str	r3, [r7, #28]
 8018910:	e090      	b.n	8018a34 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	681a      	ldr	r2, [r3, #0]
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	3304      	adds	r3, #4
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	405a      	eors	r2, r3
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	3308      	adds	r3, #8
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	4013      	ands	r3, r2
 8018926:	2b00      	cmp	r3, #0
 8018928:	d012      	beq.n	8018950 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018930:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018934:	4293      	cmp	r3, r2
 8018936:	d00b      	beq.n	8018950 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	330c      	adds	r3, #12
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d003      	beq.n	801894a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	330c      	adds	r3, #12
 8018946:	61bb      	str	r3, [r7, #24]
 8018948:	e002      	b.n	8018950 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801894a:	f06f 0303 	mvn.w	r3, #3
 801894e:	e07d      	b.n	8018a4c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018950:	4b46      	ldr	r3, [pc, #280]	; (8018a6c <etharp_output+0x1fc>)
 8018952:	781b      	ldrb	r3, [r3, #0]
 8018954:	4619      	mov	r1, r3
 8018956:	4a46      	ldr	r2, [pc, #280]	; (8018a70 <etharp_output+0x200>)
 8018958:	460b      	mov	r3, r1
 801895a:	005b      	lsls	r3, r3, #1
 801895c:	440b      	add	r3, r1
 801895e:	00db      	lsls	r3, r3, #3
 8018960:	4413      	add	r3, r2
 8018962:	3314      	adds	r3, #20
 8018964:	781b      	ldrb	r3, [r3, #0]
 8018966:	2b01      	cmp	r3, #1
 8018968:	d925      	bls.n	80189b6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801896a:	4b40      	ldr	r3, [pc, #256]	; (8018a6c <etharp_output+0x1fc>)
 801896c:	781b      	ldrb	r3, [r3, #0]
 801896e:	4619      	mov	r1, r3
 8018970:	4a3f      	ldr	r2, [pc, #252]	; (8018a70 <etharp_output+0x200>)
 8018972:	460b      	mov	r3, r1
 8018974:	005b      	lsls	r3, r3, #1
 8018976:	440b      	add	r3, r1
 8018978:	00db      	lsls	r3, r3, #3
 801897a:	4413      	add	r3, r2
 801897c:	3308      	adds	r3, #8
 801897e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018980:	68fa      	ldr	r2, [r7, #12]
 8018982:	429a      	cmp	r2, r3
 8018984:	d117      	bne.n	80189b6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018986:	69bb      	ldr	r3, [r7, #24]
 8018988:	681a      	ldr	r2, [r3, #0]
 801898a:	4b38      	ldr	r3, [pc, #224]	; (8018a6c <etharp_output+0x1fc>)
 801898c:	781b      	ldrb	r3, [r3, #0]
 801898e:	4618      	mov	r0, r3
 8018990:	4937      	ldr	r1, [pc, #220]	; (8018a70 <etharp_output+0x200>)
 8018992:	4603      	mov	r3, r0
 8018994:	005b      	lsls	r3, r3, #1
 8018996:	4403      	add	r3, r0
 8018998:	00db      	lsls	r3, r3, #3
 801899a:	440b      	add	r3, r1
 801899c:	3304      	adds	r3, #4
 801899e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d108      	bne.n	80189b6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80189a4:	4b31      	ldr	r3, [pc, #196]	; (8018a6c <etharp_output+0x1fc>)
 80189a6:	781b      	ldrb	r3, [r3, #0]
 80189a8:	461a      	mov	r2, r3
 80189aa:	68b9      	ldr	r1, [r7, #8]
 80189ac:	68f8      	ldr	r0, [r7, #12]
 80189ae:	f7ff fec5 	bl	801873c <etharp_output_to_arp_index>
 80189b2:	4603      	mov	r3, r0
 80189b4:	e04a      	b.n	8018a4c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80189b6:	2300      	movs	r3, #0
 80189b8:	75fb      	strb	r3, [r7, #23]
 80189ba:	e031      	b.n	8018a20 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80189bc:	7dfa      	ldrb	r2, [r7, #23]
 80189be:	492c      	ldr	r1, [pc, #176]	; (8018a70 <etharp_output+0x200>)
 80189c0:	4613      	mov	r3, r2
 80189c2:	005b      	lsls	r3, r3, #1
 80189c4:	4413      	add	r3, r2
 80189c6:	00db      	lsls	r3, r3, #3
 80189c8:	440b      	add	r3, r1
 80189ca:	3314      	adds	r3, #20
 80189cc:	781b      	ldrb	r3, [r3, #0]
 80189ce:	2b01      	cmp	r3, #1
 80189d0:	d923      	bls.n	8018a1a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80189d2:	7dfa      	ldrb	r2, [r7, #23]
 80189d4:	4926      	ldr	r1, [pc, #152]	; (8018a70 <etharp_output+0x200>)
 80189d6:	4613      	mov	r3, r2
 80189d8:	005b      	lsls	r3, r3, #1
 80189da:	4413      	add	r3, r2
 80189dc:	00db      	lsls	r3, r3, #3
 80189de:	440b      	add	r3, r1
 80189e0:	3308      	adds	r3, #8
 80189e2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80189e4:	68fa      	ldr	r2, [r7, #12]
 80189e6:	429a      	cmp	r2, r3
 80189e8:	d117      	bne.n	8018a1a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80189ea:	69bb      	ldr	r3, [r7, #24]
 80189ec:	6819      	ldr	r1, [r3, #0]
 80189ee:	7dfa      	ldrb	r2, [r7, #23]
 80189f0:	481f      	ldr	r0, [pc, #124]	; (8018a70 <etharp_output+0x200>)
 80189f2:	4613      	mov	r3, r2
 80189f4:	005b      	lsls	r3, r3, #1
 80189f6:	4413      	add	r3, r2
 80189f8:	00db      	lsls	r3, r3, #3
 80189fa:	4403      	add	r3, r0
 80189fc:	3304      	adds	r3, #4
 80189fe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018a00:	4299      	cmp	r1, r3
 8018a02:	d10a      	bne.n	8018a1a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018a04:	4a19      	ldr	r2, [pc, #100]	; (8018a6c <etharp_output+0x1fc>)
 8018a06:	7dfb      	ldrb	r3, [r7, #23]
 8018a08:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018a0a:	7dfb      	ldrb	r3, [r7, #23]
 8018a0c:	461a      	mov	r2, r3
 8018a0e:	68b9      	ldr	r1, [r7, #8]
 8018a10:	68f8      	ldr	r0, [r7, #12]
 8018a12:	f7ff fe93 	bl	801873c <etharp_output_to_arp_index>
 8018a16:	4603      	mov	r3, r0
 8018a18:	e018      	b.n	8018a4c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018a1a:	7dfb      	ldrb	r3, [r7, #23]
 8018a1c:	3301      	adds	r3, #1
 8018a1e:	75fb      	strb	r3, [r7, #23]
 8018a20:	7dfb      	ldrb	r3, [r7, #23]
 8018a22:	2b09      	cmp	r3, #9
 8018a24:	d9ca      	bls.n	80189bc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018a26:	68ba      	ldr	r2, [r7, #8]
 8018a28:	69b9      	ldr	r1, [r7, #24]
 8018a2a:	68f8      	ldr	r0, [r7, #12]
 8018a2c:	f000 f822 	bl	8018a74 <etharp_query>
 8018a30:	4603      	mov	r3, r0
 8018a32:	e00b      	b.n	8018a4c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018a3e:	9300      	str	r3, [sp, #0]
 8018a40:	69fb      	ldr	r3, [r7, #28]
 8018a42:	68b9      	ldr	r1, [r7, #8]
 8018a44:	68f8      	ldr	r0, [r7, #12]
 8018a46:	f001 fd45 	bl	801a4d4 <ethernet_output>
 8018a4a:	4603      	mov	r3, r0
}
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	3720      	adds	r7, #32
 8018a50:	46bd      	mov	sp, r7
 8018a52:	bd80      	pop	{r7, pc}
 8018a54:	0801fd88 	.word	0x0801fd88
 8018a58:	0801fed8 	.word	0x0801fed8
 8018a5c:	0801fe00 	.word	0x0801fe00
 8018a60:	0801ff28 	.word	0x0801ff28
 8018a64:	0801fec8 	.word	0x0801fec8
 8018a68:	0802058c 	.word	0x0802058c
 8018a6c:	2001de34 	.word	0x2001de34
 8018a70:	2001dd44 	.word	0x2001dd44

08018a74 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b08c      	sub	sp, #48	; 0x30
 8018a78:	af02      	add	r7, sp, #8
 8018a7a:	60f8      	str	r0, [r7, #12]
 8018a7c:	60b9      	str	r1, [r7, #8]
 8018a7e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	3326      	adds	r3, #38	; 0x26
 8018a84:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018a86:	23ff      	movs	r3, #255	; 0xff
 8018a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018a90:	68bb      	ldr	r3, [r7, #8]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	68f9      	ldr	r1, [r7, #12]
 8018a96:	4618      	mov	r0, r3
 8018a98:	f000 fe0e 	bl	80196b8 <ip4_addr_isbroadcast_u32>
 8018a9c:	4603      	mov	r3, r0
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d10c      	bne.n	8018abc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018aa2:	68bb      	ldr	r3, [r7, #8]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018aaa:	2be0      	cmp	r3, #224	; 0xe0
 8018aac:	d006      	beq.n	8018abc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018aae:	68bb      	ldr	r3, [r7, #8]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d003      	beq.n	8018abc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018ab4:	68bb      	ldr	r3, [r7, #8]
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d102      	bne.n	8018ac2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018abc:	f06f 030f 	mvn.w	r3, #15
 8018ac0:	e101      	b.n	8018cc6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018ac2:	68fa      	ldr	r2, [r7, #12]
 8018ac4:	2101      	movs	r1, #1
 8018ac6:	68b8      	ldr	r0, [r7, #8]
 8018ac8:	f7ff fb60 	bl	801818c <etharp_find_entry>
 8018acc:	4603      	mov	r3, r0
 8018ace:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018ad0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	da02      	bge.n	8018ade <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018ad8:	8a7b      	ldrh	r3, [r7, #18]
 8018ada:	b25b      	sxtb	r3, r3
 8018adc:	e0f3      	b.n	8018cc6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018ade:	8a7b      	ldrh	r3, [r7, #18]
 8018ae0:	2b7e      	cmp	r3, #126	; 0x7e
 8018ae2:	d906      	bls.n	8018af2 <etharp_query+0x7e>
 8018ae4:	4b7a      	ldr	r3, [pc, #488]	; (8018cd0 <etharp_query+0x25c>)
 8018ae6:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018aea:	497a      	ldr	r1, [pc, #488]	; (8018cd4 <etharp_query+0x260>)
 8018aec:	487a      	ldr	r0, [pc, #488]	; (8018cd8 <etharp_query+0x264>)
 8018aee:	f002 fb8b 	bl	801b208 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018af2:	8a7b      	ldrh	r3, [r7, #18]
 8018af4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018af6:	7c7a      	ldrb	r2, [r7, #17]
 8018af8:	4978      	ldr	r1, [pc, #480]	; (8018cdc <etharp_query+0x268>)
 8018afa:	4613      	mov	r3, r2
 8018afc:	005b      	lsls	r3, r3, #1
 8018afe:	4413      	add	r3, r2
 8018b00:	00db      	lsls	r3, r3, #3
 8018b02:	440b      	add	r3, r1
 8018b04:	3314      	adds	r3, #20
 8018b06:	781b      	ldrb	r3, [r3, #0]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d115      	bne.n	8018b38 <etharp_query+0xc4>
    is_new_entry = 1;
 8018b0c:	2301      	movs	r3, #1
 8018b0e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018b10:	7c7a      	ldrb	r2, [r7, #17]
 8018b12:	4972      	ldr	r1, [pc, #456]	; (8018cdc <etharp_query+0x268>)
 8018b14:	4613      	mov	r3, r2
 8018b16:	005b      	lsls	r3, r3, #1
 8018b18:	4413      	add	r3, r2
 8018b1a:	00db      	lsls	r3, r3, #3
 8018b1c:	440b      	add	r3, r1
 8018b1e:	3314      	adds	r3, #20
 8018b20:	2201      	movs	r2, #1
 8018b22:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018b24:	7c7a      	ldrb	r2, [r7, #17]
 8018b26:	496d      	ldr	r1, [pc, #436]	; (8018cdc <etharp_query+0x268>)
 8018b28:	4613      	mov	r3, r2
 8018b2a:	005b      	lsls	r3, r3, #1
 8018b2c:	4413      	add	r3, r2
 8018b2e:	00db      	lsls	r3, r3, #3
 8018b30:	440b      	add	r3, r1
 8018b32:	3308      	adds	r3, #8
 8018b34:	68fa      	ldr	r2, [r7, #12]
 8018b36:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018b38:	7c7a      	ldrb	r2, [r7, #17]
 8018b3a:	4968      	ldr	r1, [pc, #416]	; (8018cdc <etharp_query+0x268>)
 8018b3c:	4613      	mov	r3, r2
 8018b3e:	005b      	lsls	r3, r3, #1
 8018b40:	4413      	add	r3, r2
 8018b42:	00db      	lsls	r3, r3, #3
 8018b44:	440b      	add	r3, r1
 8018b46:	3314      	adds	r3, #20
 8018b48:	781b      	ldrb	r3, [r3, #0]
 8018b4a:	2b01      	cmp	r3, #1
 8018b4c:	d011      	beq.n	8018b72 <etharp_query+0xfe>
 8018b4e:	7c7a      	ldrb	r2, [r7, #17]
 8018b50:	4962      	ldr	r1, [pc, #392]	; (8018cdc <etharp_query+0x268>)
 8018b52:	4613      	mov	r3, r2
 8018b54:	005b      	lsls	r3, r3, #1
 8018b56:	4413      	add	r3, r2
 8018b58:	00db      	lsls	r3, r3, #3
 8018b5a:	440b      	add	r3, r1
 8018b5c:	3314      	adds	r3, #20
 8018b5e:	781b      	ldrb	r3, [r3, #0]
 8018b60:	2b01      	cmp	r3, #1
 8018b62:	d806      	bhi.n	8018b72 <etharp_query+0xfe>
 8018b64:	4b5a      	ldr	r3, [pc, #360]	; (8018cd0 <etharp_query+0x25c>)
 8018b66:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018b6a:	495d      	ldr	r1, [pc, #372]	; (8018ce0 <etharp_query+0x26c>)
 8018b6c:	485a      	ldr	r0, [pc, #360]	; (8018cd8 <etharp_query+0x264>)
 8018b6e:	f002 fb4b 	bl	801b208 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018b72:	6a3b      	ldr	r3, [r7, #32]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d102      	bne.n	8018b7e <etharp_query+0x10a>
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d10c      	bne.n	8018b98 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018b7e:	68b9      	ldr	r1, [r7, #8]
 8018b80:	68f8      	ldr	r0, [r7, #12]
 8018b82:	f000 f963 	bl	8018e4c <etharp_request>
 8018b86:	4603      	mov	r3, r0
 8018b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d102      	bne.n	8018b98 <etharp_query+0x124>
      return result;
 8018b92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018b96:	e096      	b.n	8018cc6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d106      	bne.n	8018bac <etharp_query+0x138>
 8018b9e:	4b4c      	ldr	r3, [pc, #304]	; (8018cd0 <etharp_query+0x25c>)
 8018ba0:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018ba4:	494f      	ldr	r1, [pc, #316]	; (8018ce4 <etharp_query+0x270>)
 8018ba6:	484c      	ldr	r0, [pc, #304]	; (8018cd8 <etharp_query+0x264>)
 8018ba8:	f002 fb2e 	bl	801b208 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018bac:	7c7a      	ldrb	r2, [r7, #17]
 8018bae:	494b      	ldr	r1, [pc, #300]	; (8018cdc <etharp_query+0x268>)
 8018bb0:	4613      	mov	r3, r2
 8018bb2:	005b      	lsls	r3, r3, #1
 8018bb4:	4413      	add	r3, r2
 8018bb6:	00db      	lsls	r3, r3, #3
 8018bb8:	440b      	add	r3, r1
 8018bba:	3314      	adds	r3, #20
 8018bbc:	781b      	ldrb	r3, [r3, #0]
 8018bbe:	2b01      	cmp	r3, #1
 8018bc0:	d917      	bls.n	8018bf2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018bc2:	4a49      	ldr	r2, [pc, #292]	; (8018ce8 <etharp_query+0x274>)
 8018bc4:	7c7b      	ldrb	r3, [r7, #17]
 8018bc6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018bc8:	7c7a      	ldrb	r2, [r7, #17]
 8018bca:	4613      	mov	r3, r2
 8018bcc:	005b      	lsls	r3, r3, #1
 8018bce:	4413      	add	r3, r2
 8018bd0:	00db      	lsls	r3, r3, #3
 8018bd2:	3308      	adds	r3, #8
 8018bd4:	4a41      	ldr	r2, [pc, #260]	; (8018cdc <etharp_query+0x268>)
 8018bd6:	4413      	add	r3, r2
 8018bd8:	3304      	adds	r3, #4
 8018bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018bde:	9200      	str	r2, [sp, #0]
 8018be0:	697a      	ldr	r2, [r7, #20]
 8018be2:	6879      	ldr	r1, [r7, #4]
 8018be4:	68f8      	ldr	r0, [r7, #12]
 8018be6:	f001 fc75 	bl	801a4d4 <ethernet_output>
 8018bea:	4603      	mov	r3, r0
 8018bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018bf0:	e067      	b.n	8018cc2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018bf2:	7c7a      	ldrb	r2, [r7, #17]
 8018bf4:	4939      	ldr	r1, [pc, #228]	; (8018cdc <etharp_query+0x268>)
 8018bf6:	4613      	mov	r3, r2
 8018bf8:	005b      	lsls	r3, r3, #1
 8018bfa:	4413      	add	r3, r2
 8018bfc:	00db      	lsls	r3, r3, #3
 8018bfe:	440b      	add	r3, r1
 8018c00:	3314      	adds	r3, #20
 8018c02:	781b      	ldrb	r3, [r3, #0]
 8018c04:	2b01      	cmp	r3, #1
 8018c06:	d15c      	bne.n	8018cc2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018c08:	2300      	movs	r3, #0
 8018c0a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018c10:	e01c      	b.n	8018c4c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018c12:	69fb      	ldr	r3, [r7, #28]
 8018c14:	895a      	ldrh	r2, [r3, #10]
 8018c16:	69fb      	ldr	r3, [r7, #28]
 8018c18:	891b      	ldrh	r3, [r3, #8]
 8018c1a:	429a      	cmp	r2, r3
 8018c1c:	d10a      	bne.n	8018c34 <etharp_query+0x1c0>
 8018c1e:	69fb      	ldr	r3, [r7, #28]
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d006      	beq.n	8018c34 <etharp_query+0x1c0>
 8018c26:	4b2a      	ldr	r3, [pc, #168]	; (8018cd0 <etharp_query+0x25c>)
 8018c28:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018c2c:	492f      	ldr	r1, [pc, #188]	; (8018cec <etharp_query+0x278>)
 8018c2e:	482a      	ldr	r0, [pc, #168]	; (8018cd8 <etharp_query+0x264>)
 8018c30:	f002 faea 	bl	801b208 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018c34:	69fb      	ldr	r3, [r7, #28]
 8018c36:	7b1b      	ldrb	r3, [r3, #12]
 8018c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d002      	beq.n	8018c46 <etharp_query+0x1d2>
        copy_needed = 1;
 8018c40:	2301      	movs	r3, #1
 8018c42:	61bb      	str	r3, [r7, #24]
        break;
 8018c44:	e005      	b.n	8018c52 <etharp_query+0x1de>
      }
      p = p->next;
 8018c46:	69fb      	ldr	r3, [r7, #28]
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018c4c:	69fb      	ldr	r3, [r7, #28]
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d1df      	bne.n	8018c12 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018c52:	69bb      	ldr	r3, [r7, #24]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d007      	beq.n	8018c68 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018c58:	687a      	ldr	r2, [r7, #4]
 8018c5a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018c5e:	200e      	movs	r0, #14
 8018c60:	f7f8 fd7c 	bl	801175c <pbuf_clone>
 8018c64:	61f8      	str	r0, [r7, #28]
 8018c66:	e004      	b.n	8018c72 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018c6c:	69f8      	ldr	r0, [r7, #28]
 8018c6e:	f7f8 fb89 	bl	8011384 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018c72:	69fb      	ldr	r3, [r7, #28]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d021      	beq.n	8018cbc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018c78:	7c7a      	ldrb	r2, [r7, #17]
 8018c7a:	4918      	ldr	r1, [pc, #96]	; (8018cdc <etharp_query+0x268>)
 8018c7c:	4613      	mov	r3, r2
 8018c7e:	005b      	lsls	r3, r3, #1
 8018c80:	4413      	add	r3, r2
 8018c82:	00db      	lsls	r3, r3, #3
 8018c84:	440b      	add	r3, r1
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d00a      	beq.n	8018ca2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018c8c:	7c7a      	ldrb	r2, [r7, #17]
 8018c8e:	4913      	ldr	r1, [pc, #76]	; (8018cdc <etharp_query+0x268>)
 8018c90:	4613      	mov	r3, r2
 8018c92:	005b      	lsls	r3, r3, #1
 8018c94:	4413      	add	r3, r2
 8018c96:	00db      	lsls	r3, r3, #3
 8018c98:	440b      	add	r3, r1
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	f7f8 facb 	bl	8011238 <pbuf_free>
      }
      arp_table[i].q = p;
 8018ca2:	7c7a      	ldrb	r2, [r7, #17]
 8018ca4:	490d      	ldr	r1, [pc, #52]	; (8018cdc <etharp_query+0x268>)
 8018ca6:	4613      	mov	r3, r2
 8018ca8:	005b      	lsls	r3, r3, #1
 8018caa:	4413      	add	r3, r2
 8018cac:	00db      	lsls	r3, r3, #3
 8018cae:	440b      	add	r3, r1
 8018cb0:	69fa      	ldr	r2, [r7, #28]
 8018cb2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018cba:	e002      	b.n	8018cc2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018cbc:	23ff      	movs	r3, #255	; 0xff
 8018cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018cc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	3728      	adds	r7, #40	; 0x28
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	bd80      	pop	{r7, pc}
 8018cce:	bf00      	nop
 8018cd0:	0801fd88 	.word	0x0801fd88
 8018cd4:	0801ff34 	.word	0x0801ff34
 8018cd8:	0801fe00 	.word	0x0801fe00
 8018cdc:	2001dd44 	.word	0x2001dd44
 8018ce0:	0801ff44 	.word	0x0801ff44
 8018ce4:	0801ff28 	.word	0x0801ff28
 8018ce8:	2001de34 	.word	0x2001de34
 8018cec:	0801ff6c 	.word	0x0801ff6c

08018cf0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b08a      	sub	sp, #40	; 0x28
 8018cf4:	af02      	add	r7, sp, #8
 8018cf6:	60f8      	str	r0, [r7, #12]
 8018cf8:	60b9      	str	r1, [r7, #8]
 8018cfa:	607a      	str	r2, [r7, #4]
 8018cfc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018cfe:	2300      	movs	r3, #0
 8018d00:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d106      	bne.n	8018d16 <etharp_raw+0x26>
 8018d08:	4b3a      	ldr	r3, [pc, #232]	; (8018df4 <etharp_raw+0x104>)
 8018d0a:	f240 4257 	movw	r2, #1111	; 0x457
 8018d0e:	493a      	ldr	r1, [pc, #232]	; (8018df8 <etharp_raw+0x108>)
 8018d10:	483a      	ldr	r0, [pc, #232]	; (8018dfc <etharp_raw+0x10c>)
 8018d12:	f002 fa79 	bl	801b208 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018d16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018d1a:	211c      	movs	r1, #28
 8018d1c:	200e      	movs	r0, #14
 8018d1e:	f7f7 ffa3 	bl	8010c68 <pbuf_alloc>
 8018d22:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018d24:	69bb      	ldr	r3, [r7, #24]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d102      	bne.n	8018d30 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d2e:	e05d      	b.n	8018dec <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018d30:	69bb      	ldr	r3, [r7, #24]
 8018d32:	895b      	ldrh	r3, [r3, #10]
 8018d34:	2b1b      	cmp	r3, #27
 8018d36:	d806      	bhi.n	8018d46 <etharp_raw+0x56>
 8018d38:	4b2e      	ldr	r3, [pc, #184]	; (8018df4 <etharp_raw+0x104>)
 8018d3a:	f240 4262 	movw	r2, #1122	; 0x462
 8018d3e:	4930      	ldr	r1, [pc, #192]	; (8018e00 <etharp_raw+0x110>)
 8018d40:	482e      	ldr	r0, [pc, #184]	; (8018dfc <etharp_raw+0x10c>)
 8018d42:	f002 fa61 	bl	801b208 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018d46:	69bb      	ldr	r3, [r7, #24]
 8018d48:	685b      	ldr	r3, [r3, #4]
 8018d4a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018d4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018d4e:	4618      	mov	r0, r3
 8018d50:	f7f6 fe54 	bl	800f9fc <lwip_htons>
 8018d54:	4603      	mov	r3, r0
 8018d56:	461a      	mov	r2, r3
 8018d58:	697b      	ldr	r3, [r7, #20]
 8018d5a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018d62:	2b06      	cmp	r3, #6
 8018d64:	d006      	beq.n	8018d74 <etharp_raw+0x84>
 8018d66:	4b23      	ldr	r3, [pc, #140]	; (8018df4 <etharp_raw+0x104>)
 8018d68:	f240 4269 	movw	r2, #1129	; 0x469
 8018d6c:	4925      	ldr	r1, [pc, #148]	; (8018e04 <etharp_raw+0x114>)
 8018d6e:	4823      	ldr	r0, [pc, #140]	; (8018dfc <etharp_raw+0x10c>)
 8018d70:	f002 fa4a 	bl	801b208 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018d74:	697b      	ldr	r3, [r7, #20]
 8018d76:	3308      	adds	r3, #8
 8018d78:	2206      	movs	r2, #6
 8018d7a:	6839      	ldr	r1, [r7, #0]
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	f002 fb78 	bl	801b472 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018d82:	697b      	ldr	r3, [r7, #20]
 8018d84:	3312      	adds	r3, #18
 8018d86:	2206      	movs	r2, #6
 8018d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	f002 fb71 	bl	801b472 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018d90:	697b      	ldr	r3, [r7, #20]
 8018d92:	330e      	adds	r3, #14
 8018d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018d96:	6812      	ldr	r2, [r2, #0]
 8018d98:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018d9a:	697b      	ldr	r3, [r7, #20]
 8018d9c:	3318      	adds	r3, #24
 8018d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018da0:	6812      	ldr	r2, [r2, #0]
 8018da2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018da4:	697b      	ldr	r3, [r7, #20]
 8018da6:	2200      	movs	r2, #0
 8018da8:	701a      	strb	r2, [r3, #0]
 8018daa:	2200      	movs	r2, #0
 8018dac:	f042 0201 	orr.w	r2, r2, #1
 8018db0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018db2:	697b      	ldr	r3, [r7, #20]
 8018db4:	2200      	movs	r2, #0
 8018db6:	f042 0208 	orr.w	r2, r2, #8
 8018dba:	709a      	strb	r2, [r3, #2]
 8018dbc:	2200      	movs	r2, #0
 8018dbe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018dc0:	697b      	ldr	r3, [r7, #20]
 8018dc2:	2206      	movs	r2, #6
 8018dc4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018dc6:	697b      	ldr	r3, [r7, #20]
 8018dc8:	2204      	movs	r2, #4
 8018dca:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018dcc:	f640 0306 	movw	r3, #2054	; 0x806
 8018dd0:	9300      	str	r3, [sp, #0]
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	68ba      	ldr	r2, [r7, #8]
 8018dd6:	69b9      	ldr	r1, [r7, #24]
 8018dd8:	68f8      	ldr	r0, [r7, #12]
 8018dda:	f001 fb7b 	bl	801a4d4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018dde:	69b8      	ldr	r0, [r7, #24]
 8018de0:	f7f8 fa2a 	bl	8011238 <pbuf_free>
  p = NULL;
 8018de4:	2300      	movs	r3, #0
 8018de6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018de8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018dec:	4618      	mov	r0, r3
 8018dee:	3720      	adds	r7, #32
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd80      	pop	{r7, pc}
 8018df4:	0801fd88 	.word	0x0801fd88
 8018df8:	0801fed8 	.word	0x0801fed8
 8018dfc:	0801fe00 	.word	0x0801fe00
 8018e00:	0801ff88 	.word	0x0801ff88
 8018e04:	0801ffbc 	.word	0x0801ffbc

08018e08 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b088      	sub	sp, #32
 8018e0c:	af04      	add	r7, sp, #16
 8018e0e:	60f8      	str	r0, [r7, #12]
 8018e10:	60b9      	str	r1, [r7, #8]
 8018e12:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018e24:	2201      	movs	r2, #1
 8018e26:	9203      	str	r2, [sp, #12]
 8018e28:	68ba      	ldr	r2, [r7, #8]
 8018e2a:	9202      	str	r2, [sp, #8]
 8018e2c:	4a06      	ldr	r2, [pc, #24]	; (8018e48 <etharp_request_dst+0x40>)
 8018e2e:	9201      	str	r2, [sp, #4]
 8018e30:	9300      	str	r3, [sp, #0]
 8018e32:	4603      	mov	r3, r0
 8018e34:	687a      	ldr	r2, [r7, #4]
 8018e36:	68f8      	ldr	r0, [r7, #12]
 8018e38:	f7ff ff5a 	bl	8018cf0 <etharp_raw>
 8018e3c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018e3e:	4618      	mov	r0, r3
 8018e40:	3710      	adds	r7, #16
 8018e42:	46bd      	mov	sp, r7
 8018e44:	bd80      	pop	{r7, pc}
 8018e46:	bf00      	nop
 8018e48:	08020594 	.word	0x08020594

08018e4c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b082      	sub	sp, #8
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
 8018e54:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018e56:	4a05      	ldr	r2, [pc, #20]	; (8018e6c <etharp_request+0x20>)
 8018e58:	6839      	ldr	r1, [r7, #0]
 8018e5a:	6878      	ldr	r0, [r7, #4]
 8018e5c:	f7ff ffd4 	bl	8018e08 <etharp_request_dst>
 8018e60:	4603      	mov	r3, r0
}
 8018e62:	4618      	mov	r0, r3
 8018e64:	3708      	adds	r7, #8
 8018e66:	46bd      	mov	sp, r7
 8018e68:	bd80      	pop	{r7, pc}
 8018e6a:	bf00      	nop
 8018e6c:	0802058c 	.word	0x0802058c

08018e70 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b08e      	sub	sp, #56	; 0x38
 8018e74:	af04      	add	r7, sp, #16
 8018e76:	6078      	str	r0, [r7, #4]
 8018e78:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018e7a:	4b79      	ldr	r3, [pc, #484]	; (8019060 <icmp_input+0x1f0>)
 8018e7c:	689b      	ldr	r3, [r3, #8]
 8018e7e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e82:	781b      	ldrb	r3, [r3, #0]
 8018e84:	f003 030f 	and.w	r3, r3, #15
 8018e88:	b2db      	uxtb	r3, r3
 8018e8a:	009b      	lsls	r3, r3, #2
 8018e8c:	b2db      	uxtb	r3, r3
 8018e8e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018e90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018e92:	2b13      	cmp	r3, #19
 8018e94:	f240 80cd 	bls.w	8019032 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	895b      	ldrh	r3, [r3, #10]
 8018e9c:	2b03      	cmp	r3, #3
 8018e9e:	f240 80ca 	bls.w	8019036 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	685b      	ldr	r3, [r3, #4]
 8018ea6:	781b      	ldrb	r3, [r3, #0]
 8018ea8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018eac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	f000 80b7 	beq.w	8019024 <icmp_input+0x1b4>
 8018eb6:	2b08      	cmp	r3, #8
 8018eb8:	f040 80b7 	bne.w	801902a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018ebc:	4b69      	ldr	r3, [pc, #420]	; (8019064 <icmp_input+0x1f4>)
 8018ebe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018ec0:	4b67      	ldr	r3, [pc, #412]	; (8019060 <icmp_input+0x1f0>)
 8018ec2:	695b      	ldr	r3, [r3, #20]
 8018ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018ec8:	2be0      	cmp	r3, #224	; 0xe0
 8018eca:	f000 80bb 	beq.w	8019044 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018ece:	4b64      	ldr	r3, [pc, #400]	; (8019060 <icmp_input+0x1f0>)
 8018ed0:	695b      	ldr	r3, [r3, #20]
 8018ed2:	4a63      	ldr	r2, [pc, #396]	; (8019060 <icmp_input+0x1f0>)
 8018ed4:	6812      	ldr	r2, [r2, #0]
 8018ed6:	4611      	mov	r1, r2
 8018ed8:	4618      	mov	r0, r3
 8018eda:	f000 fbed 	bl	80196b8 <ip4_addr_isbroadcast_u32>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	f040 80b1 	bne.w	8019048 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	891b      	ldrh	r3, [r3, #8]
 8018eea:	2b07      	cmp	r3, #7
 8018eec:	f240 80a5 	bls.w	801903a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018ef0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018ef2:	330e      	adds	r3, #14
 8018ef4:	4619      	mov	r1, r3
 8018ef6:	6878      	ldr	r0, [r7, #4]
 8018ef8:	f7f8 f908 	bl	801110c <pbuf_add_header>
 8018efc:	4603      	mov	r3, r0
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d04b      	beq.n	8018f9a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	891a      	ldrh	r2, [r3, #8]
 8018f06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f08:	4413      	add	r3, r2
 8018f0a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	891b      	ldrh	r3, [r3, #8]
 8018f10:	8b7a      	ldrh	r2, [r7, #26]
 8018f12:	429a      	cmp	r2, r3
 8018f14:	f0c0 809a 	bcc.w	801904c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018f18:	8b7b      	ldrh	r3, [r7, #26]
 8018f1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018f1e:	4619      	mov	r1, r3
 8018f20:	200e      	movs	r0, #14
 8018f22:	f7f7 fea1 	bl	8010c68 <pbuf_alloc>
 8018f26:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018f28:	697b      	ldr	r3, [r7, #20]
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	f000 8090 	beq.w	8019050 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018f30:	697b      	ldr	r3, [r7, #20]
 8018f32:	895b      	ldrh	r3, [r3, #10]
 8018f34:	461a      	mov	r2, r3
 8018f36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f38:	3308      	adds	r3, #8
 8018f3a:	429a      	cmp	r2, r3
 8018f3c:	d203      	bcs.n	8018f46 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018f3e:	6978      	ldr	r0, [r7, #20]
 8018f40:	f7f8 f97a 	bl	8011238 <pbuf_free>
          goto icmperr;
 8018f44:	e085      	b.n	8019052 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018f46:	697b      	ldr	r3, [r7, #20]
 8018f48:	685b      	ldr	r3, [r3, #4]
 8018f4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018f4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f002 fa8f 	bl	801b472 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018f54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f56:	4619      	mov	r1, r3
 8018f58:	6978      	ldr	r0, [r7, #20]
 8018f5a:	f7f8 f8e7 	bl	801112c <pbuf_remove_header>
 8018f5e:	4603      	mov	r3, r0
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d009      	beq.n	8018f78 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018f64:	4b40      	ldr	r3, [pc, #256]	; (8019068 <icmp_input+0x1f8>)
 8018f66:	22b6      	movs	r2, #182	; 0xb6
 8018f68:	4940      	ldr	r1, [pc, #256]	; (801906c <icmp_input+0x1fc>)
 8018f6a:	4841      	ldr	r0, [pc, #260]	; (8019070 <icmp_input+0x200>)
 8018f6c:	f002 f94c 	bl	801b208 <iprintf>
          pbuf_free(r);
 8018f70:	6978      	ldr	r0, [r7, #20]
 8018f72:	f7f8 f961 	bl	8011238 <pbuf_free>
          goto icmperr;
 8018f76:	e06c      	b.n	8019052 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018f78:	6879      	ldr	r1, [r7, #4]
 8018f7a:	6978      	ldr	r0, [r7, #20]
 8018f7c:	f7f8 fa80 	bl	8011480 <pbuf_copy>
 8018f80:	4603      	mov	r3, r0
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d003      	beq.n	8018f8e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018f86:	6978      	ldr	r0, [r7, #20]
 8018f88:	f7f8 f956 	bl	8011238 <pbuf_free>
          goto icmperr;
 8018f8c:	e061      	b.n	8019052 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8018f8e:	6878      	ldr	r0, [r7, #4]
 8018f90:	f7f8 f952 	bl	8011238 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018f94:	697b      	ldr	r3, [r7, #20]
 8018f96:	607b      	str	r3, [r7, #4]
 8018f98:	e00f      	b.n	8018fba <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018f9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f9c:	330e      	adds	r3, #14
 8018f9e:	4619      	mov	r1, r3
 8018fa0:	6878      	ldr	r0, [r7, #4]
 8018fa2:	f7f8 f8c3 	bl	801112c <pbuf_remove_header>
 8018fa6:	4603      	mov	r3, r0
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d006      	beq.n	8018fba <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018fac:	4b2e      	ldr	r3, [pc, #184]	; (8019068 <icmp_input+0x1f8>)
 8018fae:	22c7      	movs	r2, #199	; 0xc7
 8018fb0:	4930      	ldr	r1, [pc, #192]	; (8019074 <icmp_input+0x204>)
 8018fb2:	482f      	ldr	r0, [pc, #188]	; (8019070 <icmp_input+0x200>)
 8018fb4:	f002 f928 	bl	801b208 <iprintf>
          goto icmperr;
 8018fb8:	e04b      	b.n	8019052 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	685b      	ldr	r3, [r3, #4]
 8018fbe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018fc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018fc2:	4619      	mov	r1, r3
 8018fc4:	6878      	ldr	r0, [r7, #4]
 8018fc6:	f7f8 f8a1 	bl	801110c <pbuf_add_header>
 8018fca:	4603      	mov	r3, r0
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d12b      	bne.n	8019028 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	685b      	ldr	r3, [r3, #4]
 8018fd4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018fd6:	69fb      	ldr	r3, [r7, #28]
 8018fd8:	681a      	ldr	r2, [r3, #0]
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018fde:	4b20      	ldr	r3, [pc, #128]	; (8019060 <icmp_input+0x1f0>)
 8018fe0:	691a      	ldr	r2, [r3, #16]
 8018fe2:	68fb      	ldr	r3, [r7, #12]
 8018fe4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018fe6:	693b      	ldr	r3, [r7, #16]
 8018fe8:	2200      	movs	r2, #0
 8018fea:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8018fec:	693b      	ldr	r3, [r7, #16]
 8018fee:	2200      	movs	r2, #0
 8018ff0:	709a      	strb	r2, [r3, #2]
 8018ff2:	2200      	movs	r2, #0
 8018ff4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	22ff      	movs	r2, #255	; 0xff
 8018ffa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	2200      	movs	r2, #0
 8019000:	729a      	strb	r2, [r3, #10]
 8019002:	2200      	movs	r2, #0
 8019004:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019006:	683b      	ldr	r3, [r7, #0]
 8019008:	9302      	str	r3, [sp, #8]
 801900a:	2301      	movs	r3, #1
 801900c:	9301      	str	r3, [sp, #4]
 801900e:	2300      	movs	r3, #0
 8019010:	9300      	str	r3, [sp, #0]
 8019012:	23ff      	movs	r3, #255	; 0xff
 8019014:	2200      	movs	r2, #0
 8019016:	69f9      	ldr	r1, [r7, #28]
 8019018:	6878      	ldr	r0, [r7, #4]
 801901a:	f000 fa75 	bl	8019508 <ip4_output_if>
 801901e:	4603      	mov	r3, r0
 8019020:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019022:	e001      	b.n	8019028 <icmp_input+0x1b8>
      break;
 8019024:	bf00      	nop
 8019026:	e000      	b.n	801902a <icmp_input+0x1ba>
      break;
 8019028:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801902a:	6878      	ldr	r0, [r7, #4]
 801902c:	f7f8 f904 	bl	8011238 <pbuf_free>
  return;
 8019030:	e013      	b.n	801905a <icmp_input+0x1ea>
    goto lenerr;
 8019032:	bf00      	nop
 8019034:	e002      	b.n	801903c <icmp_input+0x1cc>
    goto lenerr;
 8019036:	bf00      	nop
 8019038:	e000      	b.n	801903c <icmp_input+0x1cc>
        goto lenerr;
 801903a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801903c:	6878      	ldr	r0, [r7, #4]
 801903e:	f7f8 f8fb 	bl	8011238 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019042:	e00a      	b.n	801905a <icmp_input+0x1ea>
        goto icmperr;
 8019044:	bf00      	nop
 8019046:	e004      	b.n	8019052 <icmp_input+0x1e2>
        goto icmperr;
 8019048:	bf00      	nop
 801904a:	e002      	b.n	8019052 <icmp_input+0x1e2>
          goto icmperr;
 801904c:	bf00      	nop
 801904e:	e000      	b.n	8019052 <icmp_input+0x1e2>
          goto icmperr;
 8019050:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019052:	6878      	ldr	r0, [r7, #4]
 8019054:	f7f8 f8f0 	bl	8011238 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019058:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801905a:	3728      	adds	r7, #40	; 0x28
 801905c:	46bd      	mov	sp, r7
 801905e:	bd80      	pop	{r7, pc}
 8019060:	2000e29c 	.word	0x2000e29c
 8019064:	2000e2b0 	.word	0x2000e2b0
 8019068:	08020000 	.word	0x08020000
 801906c:	08020038 	.word	0x08020038
 8019070:	08020070 	.word	0x08020070
 8019074:	08020098 	.word	0x08020098

08019078 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b082      	sub	sp, #8
 801907c:	af00      	add	r7, sp, #0
 801907e:	6078      	str	r0, [r7, #4]
 8019080:	460b      	mov	r3, r1
 8019082:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019084:	78fb      	ldrb	r3, [r7, #3]
 8019086:	461a      	mov	r2, r3
 8019088:	2103      	movs	r1, #3
 801908a:	6878      	ldr	r0, [r7, #4]
 801908c:	f000 f814 	bl	80190b8 <icmp_send_response>
}
 8019090:	bf00      	nop
 8019092:	3708      	adds	r7, #8
 8019094:	46bd      	mov	sp, r7
 8019096:	bd80      	pop	{r7, pc}

08019098 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b082      	sub	sp, #8
 801909c:	af00      	add	r7, sp, #0
 801909e:	6078      	str	r0, [r7, #4]
 80190a0:	460b      	mov	r3, r1
 80190a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80190a4:	78fb      	ldrb	r3, [r7, #3]
 80190a6:	461a      	mov	r2, r3
 80190a8:	210b      	movs	r1, #11
 80190aa:	6878      	ldr	r0, [r7, #4]
 80190ac:	f000 f804 	bl	80190b8 <icmp_send_response>
}
 80190b0:	bf00      	nop
 80190b2:	3708      	adds	r7, #8
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd80      	pop	{r7, pc}

080190b8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b08c      	sub	sp, #48	; 0x30
 80190bc:	af04      	add	r7, sp, #16
 80190be:	6078      	str	r0, [r7, #4]
 80190c0:	460b      	mov	r3, r1
 80190c2:	70fb      	strb	r3, [r7, #3]
 80190c4:	4613      	mov	r3, r2
 80190c6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80190c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80190cc:	2124      	movs	r1, #36	; 0x24
 80190ce:	2022      	movs	r0, #34	; 0x22
 80190d0:	f7f7 fdca 	bl	8010c68 <pbuf_alloc>
 80190d4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80190d6:	69fb      	ldr	r3, [r7, #28]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d04c      	beq.n	8019176 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80190dc:	69fb      	ldr	r3, [r7, #28]
 80190de:	895b      	ldrh	r3, [r3, #10]
 80190e0:	2b23      	cmp	r3, #35	; 0x23
 80190e2:	d806      	bhi.n	80190f2 <icmp_send_response+0x3a>
 80190e4:	4b26      	ldr	r3, [pc, #152]	; (8019180 <icmp_send_response+0xc8>)
 80190e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80190ea:	4926      	ldr	r1, [pc, #152]	; (8019184 <icmp_send_response+0xcc>)
 80190ec:	4826      	ldr	r0, [pc, #152]	; (8019188 <icmp_send_response+0xd0>)
 80190ee:	f002 f88b 	bl	801b208 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	685b      	ldr	r3, [r3, #4]
 80190f6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80190f8:	69fb      	ldr	r3, [r7, #28]
 80190fa:	685b      	ldr	r3, [r3, #4]
 80190fc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80190fe:	697b      	ldr	r3, [r7, #20]
 8019100:	78fa      	ldrb	r2, [r7, #3]
 8019102:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019104:	697b      	ldr	r3, [r7, #20]
 8019106:	78ba      	ldrb	r2, [r7, #2]
 8019108:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801910a:	697b      	ldr	r3, [r7, #20]
 801910c:	2200      	movs	r2, #0
 801910e:	711a      	strb	r2, [r3, #4]
 8019110:	2200      	movs	r2, #0
 8019112:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019114:	697b      	ldr	r3, [r7, #20]
 8019116:	2200      	movs	r2, #0
 8019118:	719a      	strb	r2, [r3, #6]
 801911a:	2200      	movs	r2, #0
 801911c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801911e:	69fb      	ldr	r3, [r7, #28]
 8019120:	685b      	ldr	r3, [r3, #4]
 8019122:	f103 0008 	add.w	r0, r3, #8
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	685b      	ldr	r3, [r3, #4]
 801912a:	221c      	movs	r2, #28
 801912c:	4619      	mov	r1, r3
 801912e:	f002 f9a0 	bl	801b472 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019132:	69bb      	ldr	r3, [r7, #24]
 8019134:	68db      	ldr	r3, [r3, #12]
 8019136:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019138:	f107 030c 	add.w	r3, r7, #12
 801913c:	4618      	mov	r0, r3
 801913e:	f000 f825 	bl	801918c <ip4_route>
 8019142:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019144:	693b      	ldr	r3, [r7, #16]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d011      	beq.n	801916e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801914a:	697b      	ldr	r3, [r7, #20]
 801914c:	2200      	movs	r2, #0
 801914e:	709a      	strb	r2, [r3, #2]
 8019150:	2200      	movs	r2, #0
 8019152:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019154:	f107 020c 	add.w	r2, r7, #12
 8019158:	693b      	ldr	r3, [r7, #16]
 801915a:	9302      	str	r3, [sp, #8]
 801915c:	2301      	movs	r3, #1
 801915e:	9301      	str	r3, [sp, #4]
 8019160:	2300      	movs	r3, #0
 8019162:	9300      	str	r3, [sp, #0]
 8019164:	23ff      	movs	r3, #255	; 0xff
 8019166:	2100      	movs	r1, #0
 8019168:	69f8      	ldr	r0, [r7, #28]
 801916a:	f000 f9cd 	bl	8019508 <ip4_output_if>
  }
  pbuf_free(q);
 801916e:	69f8      	ldr	r0, [r7, #28]
 8019170:	f7f8 f862 	bl	8011238 <pbuf_free>
 8019174:	e000      	b.n	8019178 <icmp_send_response+0xc0>
    return;
 8019176:	bf00      	nop
}
 8019178:	3720      	adds	r7, #32
 801917a:	46bd      	mov	sp, r7
 801917c:	bd80      	pop	{r7, pc}
 801917e:	bf00      	nop
 8019180:	08020000 	.word	0x08020000
 8019184:	080200cc 	.word	0x080200cc
 8019188:	08020070 	.word	0x08020070

0801918c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801918c:	b480      	push	{r7}
 801918e:	b085      	sub	sp, #20
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019194:	4b33      	ldr	r3, [pc, #204]	; (8019264 <ip4_route+0xd8>)
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	60fb      	str	r3, [r7, #12]
 801919a:	e036      	b.n	801920a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80191a2:	f003 0301 	and.w	r3, r3, #1
 80191a6:	b2db      	uxtb	r3, r3
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d02b      	beq.n	8019204 <ip4_route+0x78>
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80191b2:	089b      	lsrs	r3, r3, #2
 80191b4:	f003 0301 	and.w	r3, r3, #1
 80191b8:	b2db      	uxtb	r3, r3
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d022      	beq.n	8019204 <ip4_route+0x78>
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	3304      	adds	r3, #4
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d01d      	beq.n	8019204 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	681a      	ldr	r2, [r3, #0]
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	3304      	adds	r3, #4
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	405a      	eors	r2, r3
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	3308      	adds	r3, #8
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	4013      	ands	r3, r2
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d101      	bne.n	80191e4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	e038      	b.n	8019256 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80191ea:	f003 0302 	and.w	r3, r3, #2
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d108      	bne.n	8019204 <ip4_route+0x78>
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	681a      	ldr	r2, [r3, #0]
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	330c      	adds	r3, #12
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	429a      	cmp	r2, r3
 80191fe:	d101      	bne.n	8019204 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019200:	68fb      	ldr	r3, [r7, #12]
 8019202:	e028      	b.n	8019256 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	60fb      	str	r3, [r7, #12]
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	2b00      	cmp	r3, #0
 801920e:	d1c5      	bne.n	801919c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019210:	4b15      	ldr	r3, [pc, #84]	; (8019268 <ip4_route+0xdc>)
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d01a      	beq.n	801924e <ip4_route+0xc2>
 8019218:	4b13      	ldr	r3, [pc, #76]	; (8019268 <ip4_route+0xdc>)
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019220:	f003 0301 	and.w	r3, r3, #1
 8019224:	2b00      	cmp	r3, #0
 8019226:	d012      	beq.n	801924e <ip4_route+0xc2>
 8019228:	4b0f      	ldr	r3, [pc, #60]	; (8019268 <ip4_route+0xdc>)
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019230:	f003 0304 	and.w	r3, r3, #4
 8019234:	2b00      	cmp	r3, #0
 8019236:	d00a      	beq.n	801924e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019238:	4b0b      	ldr	r3, [pc, #44]	; (8019268 <ip4_route+0xdc>)
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	3304      	adds	r3, #4
 801923e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019240:	2b00      	cmp	r3, #0
 8019242:	d004      	beq.n	801924e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	b2db      	uxtb	r3, r3
 801924a:	2b7f      	cmp	r3, #127	; 0x7f
 801924c:	d101      	bne.n	8019252 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801924e:	2300      	movs	r3, #0
 8019250:	e001      	b.n	8019256 <ip4_route+0xca>
  }

  return netif_default;
 8019252:	4b05      	ldr	r3, [pc, #20]	; (8019268 <ip4_route+0xdc>)
 8019254:	681b      	ldr	r3, [r3, #0]
}
 8019256:	4618      	mov	r0, r3
 8019258:	3714      	adds	r7, #20
 801925a:	46bd      	mov	sp, r7
 801925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019260:	4770      	bx	lr
 8019262:	bf00      	nop
 8019264:	2001dcd8 	.word	0x2001dcd8
 8019268:	2001dcdc 	.word	0x2001dcdc

0801926c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801926c:	b580      	push	{r7, lr}
 801926e:	b082      	sub	sp, #8
 8019270:	af00      	add	r7, sp, #0
 8019272:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801927a:	f003 0301 	and.w	r3, r3, #1
 801927e:	b2db      	uxtb	r3, r3
 8019280:	2b00      	cmp	r3, #0
 8019282:	d016      	beq.n	80192b2 <ip4_input_accept+0x46>
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	3304      	adds	r3, #4
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	2b00      	cmp	r3, #0
 801928c:	d011      	beq.n	80192b2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801928e:	4b0b      	ldr	r3, [pc, #44]	; (80192bc <ip4_input_accept+0x50>)
 8019290:	695a      	ldr	r2, [r3, #20]
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	3304      	adds	r3, #4
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	429a      	cmp	r2, r3
 801929a:	d008      	beq.n	80192ae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801929c:	4b07      	ldr	r3, [pc, #28]	; (80192bc <ip4_input_accept+0x50>)
 801929e:	695b      	ldr	r3, [r3, #20]
 80192a0:	6879      	ldr	r1, [r7, #4]
 80192a2:	4618      	mov	r0, r3
 80192a4:	f000 fa08 	bl	80196b8 <ip4_addr_isbroadcast_u32>
 80192a8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d001      	beq.n	80192b2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80192ae:	2301      	movs	r3, #1
 80192b0:	e000      	b.n	80192b4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80192b2:	2300      	movs	r3, #0
}
 80192b4:	4618      	mov	r0, r3
 80192b6:	3708      	adds	r7, #8
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}
 80192bc:	2000e29c 	.word	0x2000e29c

080192c0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b086      	sub	sp, #24
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	6078      	str	r0, [r7, #4]
 80192c8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	685b      	ldr	r3, [r3, #4]
 80192ce:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80192d0:	697b      	ldr	r3, [r7, #20]
 80192d2:	781b      	ldrb	r3, [r3, #0]
 80192d4:	091b      	lsrs	r3, r3, #4
 80192d6:	b2db      	uxtb	r3, r3
 80192d8:	2b04      	cmp	r3, #4
 80192da:	d004      	beq.n	80192e6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80192dc:	6878      	ldr	r0, [r7, #4]
 80192de:	f7f7 ffab 	bl	8011238 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80192e2:	2300      	movs	r3, #0
 80192e4:	e107      	b.n	80194f6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80192e6:	697b      	ldr	r3, [r7, #20]
 80192e8:	781b      	ldrb	r3, [r3, #0]
 80192ea:	f003 030f 	and.w	r3, r3, #15
 80192ee:	b2db      	uxtb	r3, r3
 80192f0:	009b      	lsls	r3, r3, #2
 80192f2:	b2db      	uxtb	r3, r3
 80192f4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80192f6:	697b      	ldr	r3, [r7, #20]
 80192f8:	885b      	ldrh	r3, [r3, #2]
 80192fa:	b29b      	uxth	r3, r3
 80192fc:	4618      	mov	r0, r3
 80192fe:	f7f6 fb7d 	bl	800f9fc <lwip_htons>
 8019302:	4603      	mov	r3, r0
 8019304:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	891b      	ldrh	r3, [r3, #8]
 801930a:	89ba      	ldrh	r2, [r7, #12]
 801930c:	429a      	cmp	r2, r3
 801930e:	d204      	bcs.n	801931a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019310:	89bb      	ldrh	r3, [r7, #12]
 8019312:	4619      	mov	r1, r3
 8019314:	6878      	ldr	r0, [r7, #4]
 8019316:	f7f7 fe09 	bl	8010f2c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	895b      	ldrh	r3, [r3, #10]
 801931e:	89fa      	ldrh	r2, [r7, #14]
 8019320:	429a      	cmp	r2, r3
 8019322:	d807      	bhi.n	8019334 <ip4_input+0x74>
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	891b      	ldrh	r3, [r3, #8]
 8019328:	89ba      	ldrh	r2, [r7, #12]
 801932a:	429a      	cmp	r2, r3
 801932c:	d802      	bhi.n	8019334 <ip4_input+0x74>
 801932e:	89fb      	ldrh	r3, [r7, #14]
 8019330:	2b13      	cmp	r3, #19
 8019332:	d804      	bhi.n	801933e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019334:	6878      	ldr	r0, [r7, #4]
 8019336:	f7f7 ff7f 	bl	8011238 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801933a:	2300      	movs	r3, #0
 801933c:	e0db      	b.n	80194f6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801933e:	697b      	ldr	r3, [r7, #20]
 8019340:	691b      	ldr	r3, [r3, #16]
 8019342:	4a6f      	ldr	r2, [pc, #444]	; (8019500 <ip4_input+0x240>)
 8019344:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019346:	697b      	ldr	r3, [r7, #20]
 8019348:	68db      	ldr	r3, [r3, #12]
 801934a:	4a6d      	ldr	r2, [pc, #436]	; (8019500 <ip4_input+0x240>)
 801934c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801934e:	4b6c      	ldr	r3, [pc, #432]	; (8019500 <ip4_input+0x240>)
 8019350:	695b      	ldr	r3, [r3, #20]
 8019352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019356:	2be0      	cmp	r3, #224	; 0xe0
 8019358:	d112      	bne.n	8019380 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801935a:	683b      	ldr	r3, [r7, #0]
 801935c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019360:	f003 0301 	and.w	r3, r3, #1
 8019364:	b2db      	uxtb	r3, r3
 8019366:	2b00      	cmp	r3, #0
 8019368:	d007      	beq.n	801937a <ip4_input+0xba>
 801936a:	683b      	ldr	r3, [r7, #0]
 801936c:	3304      	adds	r3, #4
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d002      	beq.n	801937a <ip4_input+0xba>
      netif = inp;
 8019374:	683b      	ldr	r3, [r7, #0]
 8019376:	613b      	str	r3, [r7, #16]
 8019378:	e02a      	b.n	80193d0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801937a:	2300      	movs	r3, #0
 801937c:	613b      	str	r3, [r7, #16]
 801937e:	e027      	b.n	80193d0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019380:	6838      	ldr	r0, [r7, #0]
 8019382:	f7ff ff73 	bl	801926c <ip4_input_accept>
 8019386:	4603      	mov	r3, r0
 8019388:	2b00      	cmp	r3, #0
 801938a:	d002      	beq.n	8019392 <ip4_input+0xd2>
      netif = inp;
 801938c:	683b      	ldr	r3, [r7, #0]
 801938e:	613b      	str	r3, [r7, #16]
 8019390:	e01e      	b.n	80193d0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019392:	2300      	movs	r3, #0
 8019394:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019396:	4b5a      	ldr	r3, [pc, #360]	; (8019500 <ip4_input+0x240>)
 8019398:	695b      	ldr	r3, [r3, #20]
 801939a:	b2db      	uxtb	r3, r3
 801939c:	2b7f      	cmp	r3, #127	; 0x7f
 801939e:	d017      	beq.n	80193d0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80193a0:	4b58      	ldr	r3, [pc, #352]	; (8019504 <ip4_input+0x244>)
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	613b      	str	r3, [r7, #16]
 80193a6:	e00e      	b.n	80193c6 <ip4_input+0x106>
          if (netif == inp) {
 80193a8:	693a      	ldr	r2, [r7, #16]
 80193aa:	683b      	ldr	r3, [r7, #0]
 80193ac:	429a      	cmp	r2, r3
 80193ae:	d006      	beq.n	80193be <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80193b0:	6938      	ldr	r0, [r7, #16]
 80193b2:	f7ff ff5b 	bl	801926c <ip4_input_accept>
 80193b6:	4603      	mov	r3, r0
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d108      	bne.n	80193ce <ip4_input+0x10e>
 80193bc:	e000      	b.n	80193c0 <ip4_input+0x100>
            continue;
 80193be:	bf00      	nop
        NETIF_FOREACH(netif) {
 80193c0:	693b      	ldr	r3, [r7, #16]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	613b      	str	r3, [r7, #16]
 80193c6:	693b      	ldr	r3, [r7, #16]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d1ed      	bne.n	80193a8 <ip4_input+0xe8>
 80193cc:	e000      	b.n	80193d0 <ip4_input+0x110>
            break;
 80193ce:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80193d0:	4b4b      	ldr	r3, [pc, #300]	; (8019500 <ip4_input+0x240>)
 80193d2:	691b      	ldr	r3, [r3, #16]
 80193d4:	6839      	ldr	r1, [r7, #0]
 80193d6:	4618      	mov	r0, r3
 80193d8:	f000 f96e 	bl	80196b8 <ip4_addr_isbroadcast_u32>
 80193dc:	4603      	mov	r3, r0
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d105      	bne.n	80193ee <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80193e2:	4b47      	ldr	r3, [pc, #284]	; (8019500 <ip4_input+0x240>)
 80193e4:	691b      	ldr	r3, [r3, #16]
 80193e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80193ea:	2be0      	cmp	r3, #224	; 0xe0
 80193ec:	d104      	bne.n	80193f8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80193ee:	6878      	ldr	r0, [r7, #4]
 80193f0:	f7f7 ff22 	bl	8011238 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80193f4:	2300      	movs	r3, #0
 80193f6:	e07e      	b.n	80194f6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80193f8:	693b      	ldr	r3, [r7, #16]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d104      	bne.n	8019408 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80193fe:	6878      	ldr	r0, [r7, #4]
 8019400:	f7f7 ff1a 	bl	8011238 <pbuf_free>
    return ERR_OK;
 8019404:	2300      	movs	r3, #0
 8019406:	e076      	b.n	80194f6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019408:	697b      	ldr	r3, [r7, #20]
 801940a:	88db      	ldrh	r3, [r3, #6]
 801940c:	b29b      	uxth	r3, r3
 801940e:	461a      	mov	r2, r3
 8019410:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019414:	4013      	ands	r3, r2
 8019416:	2b00      	cmp	r3, #0
 8019418:	d00b      	beq.n	8019432 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801941a:	6878      	ldr	r0, [r7, #4]
 801941c:	f000 fc92 	bl	8019d44 <ip4_reass>
 8019420:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d101      	bne.n	801942c <ip4_input+0x16c>
      return ERR_OK;
 8019428:	2300      	movs	r3, #0
 801942a:	e064      	b.n	80194f6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	685b      	ldr	r3, [r3, #4]
 8019430:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019432:	4a33      	ldr	r2, [pc, #204]	; (8019500 <ip4_input+0x240>)
 8019434:	693b      	ldr	r3, [r7, #16]
 8019436:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019438:	4a31      	ldr	r2, [pc, #196]	; (8019500 <ip4_input+0x240>)
 801943a:	683b      	ldr	r3, [r7, #0]
 801943c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801943e:	4a30      	ldr	r2, [pc, #192]	; (8019500 <ip4_input+0x240>)
 8019440:	697b      	ldr	r3, [r7, #20]
 8019442:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019444:	697b      	ldr	r3, [r7, #20]
 8019446:	781b      	ldrb	r3, [r3, #0]
 8019448:	f003 030f 	and.w	r3, r3, #15
 801944c:	b2db      	uxtb	r3, r3
 801944e:	009b      	lsls	r3, r3, #2
 8019450:	b2db      	uxtb	r3, r3
 8019452:	b29a      	uxth	r2, r3
 8019454:	4b2a      	ldr	r3, [pc, #168]	; (8019500 <ip4_input+0x240>)
 8019456:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019458:	89fb      	ldrh	r3, [r7, #14]
 801945a:	4619      	mov	r1, r3
 801945c:	6878      	ldr	r0, [r7, #4]
 801945e:	f7f7 fe65 	bl	801112c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019462:	697b      	ldr	r3, [r7, #20]
 8019464:	7a5b      	ldrb	r3, [r3, #9]
 8019466:	2b11      	cmp	r3, #17
 8019468:	d006      	beq.n	8019478 <ip4_input+0x1b8>
 801946a:	2b11      	cmp	r3, #17
 801946c:	dc13      	bgt.n	8019496 <ip4_input+0x1d6>
 801946e:	2b01      	cmp	r3, #1
 8019470:	d00c      	beq.n	801948c <ip4_input+0x1cc>
 8019472:	2b06      	cmp	r3, #6
 8019474:	d005      	beq.n	8019482 <ip4_input+0x1c2>
 8019476:	e00e      	b.n	8019496 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019478:	6839      	ldr	r1, [r7, #0]
 801947a:	6878      	ldr	r0, [r7, #4]
 801947c:	f7fe fc68 	bl	8017d50 <udp_input>
        break;
 8019480:	e026      	b.n	80194d0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019482:	6839      	ldr	r1, [r7, #0]
 8019484:	6878      	ldr	r0, [r7, #4]
 8019486:	f7fa f81f 	bl	80134c8 <tcp_input>
        break;
 801948a:	e021      	b.n	80194d0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801948c:	6839      	ldr	r1, [r7, #0]
 801948e:	6878      	ldr	r0, [r7, #4]
 8019490:	f7ff fcee 	bl	8018e70 <icmp_input>
        break;
 8019494:	e01c      	b.n	80194d0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019496:	4b1a      	ldr	r3, [pc, #104]	; (8019500 <ip4_input+0x240>)
 8019498:	695b      	ldr	r3, [r3, #20]
 801949a:	6939      	ldr	r1, [r7, #16]
 801949c:	4618      	mov	r0, r3
 801949e:	f000 f90b 	bl	80196b8 <ip4_addr_isbroadcast_u32>
 80194a2:	4603      	mov	r3, r0
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d10f      	bne.n	80194c8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80194a8:	4b15      	ldr	r3, [pc, #84]	; (8019500 <ip4_input+0x240>)
 80194aa:	695b      	ldr	r3, [r3, #20]
 80194ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80194b0:	2be0      	cmp	r3, #224	; 0xe0
 80194b2:	d009      	beq.n	80194c8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80194b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80194b8:	4619      	mov	r1, r3
 80194ba:	6878      	ldr	r0, [r7, #4]
 80194bc:	f7f7 fea9 	bl	8011212 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80194c0:	2102      	movs	r1, #2
 80194c2:	6878      	ldr	r0, [r7, #4]
 80194c4:	f7ff fdd8 	bl	8019078 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80194c8:	6878      	ldr	r0, [r7, #4]
 80194ca:	f7f7 feb5 	bl	8011238 <pbuf_free>
        break;
 80194ce:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80194d0:	4b0b      	ldr	r3, [pc, #44]	; (8019500 <ip4_input+0x240>)
 80194d2:	2200      	movs	r2, #0
 80194d4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80194d6:	4b0a      	ldr	r3, [pc, #40]	; (8019500 <ip4_input+0x240>)
 80194d8:	2200      	movs	r2, #0
 80194da:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80194dc:	4b08      	ldr	r3, [pc, #32]	; (8019500 <ip4_input+0x240>)
 80194de:	2200      	movs	r2, #0
 80194e0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80194e2:	4b07      	ldr	r3, [pc, #28]	; (8019500 <ip4_input+0x240>)
 80194e4:	2200      	movs	r2, #0
 80194e6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80194e8:	4b05      	ldr	r3, [pc, #20]	; (8019500 <ip4_input+0x240>)
 80194ea:	2200      	movs	r2, #0
 80194ec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80194ee:	4b04      	ldr	r3, [pc, #16]	; (8019500 <ip4_input+0x240>)
 80194f0:	2200      	movs	r2, #0
 80194f2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80194f4:	2300      	movs	r3, #0
}
 80194f6:	4618      	mov	r0, r3
 80194f8:	3718      	adds	r7, #24
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd80      	pop	{r7, pc}
 80194fe:	bf00      	nop
 8019500:	2000e29c 	.word	0x2000e29c
 8019504:	2001dcd8 	.word	0x2001dcd8

08019508 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019508:	b580      	push	{r7, lr}
 801950a:	b08a      	sub	sp, #40	; 0x28
 801950c:	af04      	add	r7, sp, #16
 801950e:	60f8      	str	r0, [r7, #12]
 8019510:	60b9      	str	r1, [r7, #8]
 8019512:	607a      	str	r2, [r7, #4]
 8019514:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019516:	68bb      	ldr	r3, [r7, #8]
 8019518:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	2b00      	cmp	r3, #0
 801951e:	d009      	beq.n	8019534 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019520:	68bb      	ldr	r3, [r7, #8]
 8019522:	2b00      	cmp	r3, #0
 8019524:	d003      	beq.n	801952e <ip4_output_if+0x26>
 8019526:	68bb      	ldr	r3, [r7, #8]
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d102      	bne.n	8019534 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019530:	3304      	adds	r3, #4
 8019532:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019534:	78fa      	ldrb	r2, [r7, #3]
 8019536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019538:	9302      	str	r3, [sp, #8]
 801953a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801953e:	9301      	str	r3, [sp, #4]
 8019540:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019544:	9300      	str	r3, [sp, #0]
 8019546:	4613      	mov	r3, r2
 8019548:	687a      	ldr	r2, [r7, #4]
 801954a:	6979      	ldr	r1, [r7, #20]
 801954c:	68f8      	ldr	r0, [r7, #12]
 801954e:	f000 f805 	bl	801955c <ip4_output_if_src>
 8019552:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019554:	4618      	mov	r0, r3
 8019556:	3718      	adds	r7, #24
 8019558:	46bd      	mov	sp, r7
 801955a:	bd80      	pop	{r7, pc}

0801955c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801955c:	b580      	push	{r7, lr}
 801955e:	b088      	sub	sp, #32
 8019560:	af00      	add	r7, sp, #0
 8019562:	60f8      	str	r0, [r7, #12]
 8019564:	60b9      	str	r1, [r7, #8]
 8019566:	607a      	str	r2, [r7, #4]
 8019568:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	7b9b      	ldrb	r3, [r3, #14]
 801956e:	2b01      	cmp	r3, #1
 8019570:	d006      	beq.n	8019580 <ip4_output_if_src+0x24>
 8019572:	4b4b      	ldr	r3, [pc, #300]	; (80196a0 <ip4_output_if_src+0x144>)
 8019574:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019578:	494a      	ldr	r1, [pc, #296]	; (80196a4 <ip4_output_if_src+0x148>)
 801957a:	484b      	ldr	r0, [pc, #300]	; (80196a8 <ip4_output_if_src+0x14c>)
 801957c:	f001 fe44 	bl	801b208 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d060      	beq.n	8019648 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019586:	2314      	movs	r3, #20
 8019588:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801958a:	2114      	movs	r1, #20
 801958c:	68f8      	ldr	r0, [r7, #12]
 801958e:	f7f7 fdbd 	bl	801110c <pbuf_add_header>
 8019592:	4603      	mov	r3, r0
 8019594:	2b00      	cmp	r3, #0
 8019596:	d002      	beq.n	801959e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019598:	f06f 0301 	mvn.w	r3, #1
 801959c:	e07c      	b.n	8019698 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	685b      	ldr	r3, [r3, #4]
 80195a2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80195a4:	68fb      	ldr	r3, [r7, #12]
 80195a6:	895b      	ldrh	r3, [r3, #10]
 80195a8:	2b13      	cmp	r3, #19
 80195aa:	d806      	bhi.n	80195ba <ip4_output_if_src+0x5e>
 80195ac:	4b3c      	ldr	r3, [pc, #240]	; (80196a0 <ip4_output_if_src+0x144>)
 80195ae:	f44f 7262 	mov.w	r2, #904	; 0x388
 80195b2:	493e      	ldr	r1, [pc, #248]	; (80196ac <ip4_output_if_src+0x150>)
 80195b4:	483c      	ldr	r0, [pc, #240]	; (80196a8 <ip4_output_if_src+0x14c>)
 80195b6:	f001 fe27 	bl	801b208 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80195ba:	69fb      	ldr	r3, [r7, #28]
 80195bc:	78fa      	ldrb	r2, [r7, #3]
 80195be:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80195c0:	69fb      	ldr	r3, [r7, #28]
 80195c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80195c6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	681a      	ldr	r2, [r3, #0]
 80195cc:	69fb      	ldr	r3, [r7, #28]
 80195ce:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80195d0:	8b7b      	ldrh	r3, [r7, #26]
 80195d2:	089b      	lsrs	r3, r3, #2
 80195d4:	b29b      	uxth	r3, r3
 80195d6:	b2db      	uxtb	r3, r3
 80195d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195dc:	b2da      	uxtb	r2, r3
 80195de:	69fb      	ldr	r3, [r7, #28]
 80195e0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80195e2:	69fb      	ldr	r3, [r7, #28]
 80195e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80195e8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	891b      	ldrh	r3, [r3, #8]
 80195ee:	4618      	mov	r0, r3
 80195f0:	f7f6 fa04 	bl	800f9fc <lwip_htons>
 80195f4:	4603      	mov	r3, r0
 80195f6:	461a      	mov	r2, r3
 80195f8:	69fb      	ldr	r3, [r7, #28]
 80195fa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80195fc:	69fb      	ldr	r3, [r7, #28]
 80195fe:	2200      	movs	r2, #0
 8019600:	719a      	strb	r2, [r3, #6]
 8019602:	2200      	movs	r2, #0
 8019604:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019606:	4b2a      	ldr	r3, [pc, #168]	; (80196b0 <ip4_output_if_src+0x154>)
 8019608:	881b      	ldrh	r3, [r3, #0]
 801960a:	4618      	mov	r0, r3
 801960c:	f7f6 f9f6 	bl	800f9fc <lwip_htons>
 8019610:	4603      	mov	r3, r0
 8019612:	461a      	mov	r2, r3
 8019614:	69fb      	ldr	r3, [r7, #28]
 8019616:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019618:	4b25      	ldr	r3, [pc, #148]	; (80196b0 <ip4_output_if_src+0x154>)
 801961a:	881b      	ldrh	r3, [r3, #0]
 801961c:	3301      	adds	r3, #1
 801961e:	b29a      	uxth	r2, r3
 8019620:	4b23      	ldr	r3, [pc, #140]	; (80196b0 <ip4_output_if_src+0x154>)
 8019622:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019624:	68bb      	ldr	r3, [r7, #8]
 8019626:	2b00      	cmp	r3, #0
 8019628:	d104      	bne.n	8019634 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801962a:	4b22      	ldr	r3, [pc, #136]	; (80196b4 <ip4_output_if_src+0x158>)
 801962c:	681a      	ldr	r2, [r3, #0]
 801962e:	69fb      	ldr	r3, [r7, #28]
 8019630:	60da      	str	r2, [r3, #12]
 8019632:	e003      	b.n	801963c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019634:	68bb      	ldr	r3, [r7, #8]
 8019636:	681a      	ldr	r2, [r3, #0]
 8019638:	69fb      	ldr	r3, [r7, #28]
 801963a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801963c:	69fb      	ldr	r3, [r7, #28]
 801963e:	2200      	movs	r2, #0
 8019640:	729a      	strb	r2, [r3, #10]
 8019642:	2200      	movs	r2, #0
 8019644:	72da      	strb	r2, [r3, #11]
 8019646:	e00f      	b.n	8019668 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	895b      	ldrh	r3, [r3, #10]
 801964c:	2b13      	cmp	r3, #19
 801964e:	d802      	bhi.n	8019656 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019650:	f06f 0301 	mvn.w	r3, #1
 8019654:	e020      	b.n	8019698 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	685b      	ldr	r3, [r3, #4]
 801965a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801965c:	69fb      	ldr	r3, [r7, #28]
 801965e:	691b      	ldr	r3, [r3, #16]
 8019660:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019662:	f107 0314 	add.w	r3, r7, #20
 8019666:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801966a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801966c:	2b00      	cmp	r3, #0
 801966e:	d00c      	beq.n	801968a <ip4_output_if_src+0x12e>
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	891a      	ldrh	r2, [r3, #8]
 8019674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019676:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019678:	429a      	cmp	r2, r3
 801967a:	d906      	bls.n	801968a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801967c:	687a      	ldr	r2, [r7, #4]
 801967e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019680:	68f8      	ldr	r0, [r7, #12]
 8019682:	f000 fd53 	bl	801a12c <ip4_frag>
 8019686:	4603      	mov	r3, r0
 8019688:	e006      	b.n	8019698 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801968c:	695b      	ldr	r3, [r3, #20]
 801968e:	687a      	ldr	r2, [r7, #4]
 8019690:	68f9      	ldr	r1, [r7, #12]
 8019692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019694:	4798      	blx	r3
 8019696:	4603      	mov	r3, r0
}
 8019698:	4618      	mov	r0, r3
 801969a:	3720      	adds	r7, #32
 801969c:	46bd      	mov	sp, r7
 801969e:	bd80      	pop	{r7, pc}
 80196a0:	080200f8 	.word	0x080200f8
 80196a4:	0802012c 	.word	0x0802012c
 80196a8:	08020138 	.word	0x08020138
 80196ac:	08020160 	.word	0x08020160
 80196b0:	2001de36 	.word	0x2001de36
 80196b4:	08020588 	.word	0x08020588

080196b8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80196b8:	b480      	push	{r7}
 80196ba:	b085      	sub	sp, #20
 80196bc:	af00      	add	r7, sp, #0
 80196be:	6078      	str	r0, [r7, #4]
 80196c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196cc:	d002      	beq.n	80196d4 <ip4_addr_isbroadcast_u32+0x1c>
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d101      	bne.n	80196d8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80196d4:	2301      	movs	r3, #1
 80196d6:	e02a      	b.n	801972e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80196d8:	683b      	ldr	r3, [r7, #0]
 80196da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80196de:	f003 0302 	and.w	r3, r3, #2
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d101      	bne.n	80196ea <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80196e6:	2300      	movs	r3, #0
 80196e8:	e021      	b.n	801972e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80196ea:	683b      	ldr	r3, [r7, #0]
 80196ec:	3304      	adds	r3, #4
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	687a      	ldr	r2, [r7, #4]
 80196f2:	429a      	cmp	r2, r3
 80196f4:	d101      	bne.n	80196fa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80196f6:	2300      	movs	r3, #0
 80196f8:	e019      	b.n	801972e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80196fa:	68fa      	ldr	r2, [r7, #12]
 80196fc:	683b      	ldr	r3, [r7, #0]
 80196fe:	3304      	adds	r3, #4
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	405a      	eors	r2, r3
 8019704:	683b      	ldr	r3, [r7, #0]
 8019706:	3308      	adds	r3, #8
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	4013      	ands	r3, r2
 801970c:	2b00      	cmp	r3, #0
 801970e:	d10d      	bne.n	801972c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019710:	683b      	ldr	r3, [r7, #0]
 8019712:	3308      	adds	r3, #8
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	43da      	mvns	r2, r3
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801971c:	683b      	ldr	r3, [r7, #0]
 801971e:	3308      	adds	r3, #8
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019724:	429a      	cmp	r2, r3
 8019726:	d101      	bne.n	801972c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019728:	2301      	movs	r3, #1
 801972a:	e000      	b.n	801972e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801972c:	2300      	movs	r3, #0
  }
}
 801972e:	4618      	mov	r0, r3
 8019730:	3714      	adds	r7, #20
 8019732:	46bd      	mov	sp, r7
 8019734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019738:	4770      	bx	lr
	...

0801973c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801973c:	b580      	push	{r7, lr}
 801973e:	b084      	sub	sp, #16
 8019740:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019742:	2300      	movs	r3, #0
 8019744:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019746:	4b12      	ldr	r3, [pc, #72]	; (8019790 <ip_reass_tmr+0x54>)
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801974c:	e018      	b.n	8019780 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	7fdb      	ldrb	r3, [r3, #31]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d00b      	beq.n	801976e <ip_reass_tmr+0x32>
      r->timer--;
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	7fdb      	ldrb	r3, [r3, #31]
 801975a:	3b01      	subs	r3, #1
 801975c:	b2da      	uxtb	r2, r3
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019762:	68fb      	ldr	r3, [r7, #12]
 8019764:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019766:	68fb      	ldr	r3, [r7, #12]
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	60fb      	str	r3, [r7, #12]
 801976c:	e008      	b.n	8019780 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801976e:	68fb      	ldr	r3, [r7, #12]
 8019770:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019778:	68b9      	ldr	r1, [r7, #8]
 801977a:	6878      	ldr	r0, [r7, #4]
 801977c:	f000 f80a 	bl	8019794 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019780:	68fb      	ldr	r3, [r7, #12]
 8019782:	2b00      	cmp	r3, #0
 8019784:	d1e3      	bne.n	801974e <ip_reass_tmr+0x12>
    }
  }
}
 8019786:	bf00      	nop
 8019788:	bf00      	nop
 801978a:	3710      	adds	r7, #16
 801978c:	46bd      	mov	sp, r7
 801978e:	bd80      	pop	{r7, pc}
 8019790:	2001de38 	.word	0x2001de38

08019794 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019794:	b580      	push	{r7, lr}
 8019796:	b088      	sub	sp, #32
 8019798:	af00      	add	r7, sp, #0
 801979a:	6078      	str	r0, [r7, #4]
 801979c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801979e:	2300      	movs	r3, #0
 80197a0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80197a2:	683a      	ldr	r2, [r7, #0]
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	429a      	cmp	r2, r3
 80197a8:	d105      	bne.n	80197b6 <ip_reass_free_complete_datagram+0x22>
 80197aa:	4b45      	ldr	r3, [pc, #276]	; (80198c0 <ip_reass_free_complete_datagram+0x12c>)
 80197ac:	22ab      	movs	r2, #171	; 0xab
 80197ae:	4945      	ldr	r1, [pc, #276]	; (80198c4 <ip_reass_free_complete_datagram+0x130>)
 80197b0:	4845      	ldr	r0, [pc, #276]	; (80198c8 <ip_reass_free_complete_datagram+0x134>)
 80197b2:	f001 fd29 	bl	801b208 <iprintf>
  if (prev != NULL) {
 80197b6:	683b      	ldr	r3, [r7, #0]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d00a      	beq.n	80197d2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80197bc:	683b      	ldr	r3, [r7, #0]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	687a      	ldr	r2, [r7, #4]
 80197c2:	429a      	cmp	r2, r3
 80197c4:	d005      	beq.n	80197d2 <ip_reass_free_complete_datagram+0x3e>
 80197c6:	4b3e      	ldr	r3, [pc, #248]	; (80198c0 <ip_reass_free_complete_datagram+0x12c>)
 80197c8:	22ad      	movs	r2, #173	; 0xad
 80197ca:	4940      	ldr	r1, [pc, #256]	; (80198cc <ip_reass_free_complete_datagram+0x138>)
 80197cc:	483e      	ldr	r0, [pc, #248]	; (80198c8 <ip_reass_free_complete_datagram+0x134>)
 80197ce:	f001 fd1b 	bl	801b208 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	685b      	ldr	r3, [r3, #4]
 80197d6:	685b      	ldr	r3, [r3, #4]
 80197d8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80197da:	697b      	ldr	r3, [r7, #20]
 80197dc:	889b      	ldrh	r3, [r3, #4]
 80197de:	b29b      	uxth	r3, r3
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d12a      	bne.n	801983a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	685b      	ldr	r3, [r3, #4]
 80197e8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80197ea:	697b      	ldr	r3, [r7, #20]
 80197ec:	681a      	ldr	r2, [r3, #0]
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80197f2:	69bb      	ldr	r3, [r7, #24]
 80197f4:	6858      	ldr	r0, [r3, #4]
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	3308      	adds	r3, #8
 80197fa:	2214      	movs	r2, #20
 80197fc:	4619      	mov	r1, r3
 80197fe:	f001 fe38 	bl	801b472 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019802:	2101      	movs	r1, #1
 8019804:	69b8      	ldr	r0, [r7, #24]
 8019806:	f7ff fc47 	bl	8019098 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801980a:	69b8      	ldr	r0, [r7, #24]
 801980c:	f7f7 fda2 	bl	8011354 <pbuf_clen>
 8019810:	4603      	mov	r3, r0
 8019812:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019814:	8bfa      	ldrh	r2, [r7, #30]
 8019816:	8a7b      	ldrh	r3, [r7, #18]
 8019818:	4413      	add	r3, r2
 801981a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801981e:	db05      	blt.n	801982c <ip_reass_free_complete_datagram+0x98>
 8019820:	4b27      	ldr	r3, [pc, #156]	; (80198c0 <ip_reass_free_complete_datagram+0x12c>)
 8019822:	22bc      	movs	r2, #188	; 0xbc
 8019824:	492a      	ldr	r1, [pc, #168]	; (80198d0 <ip_reass_free_complete_datagram+0x13c>)
 8019826:	4828      	ldr	r0, [pc, #160]	; (80198c8 <ip_reass_free_complete_datagram+0x134>)
 8019828:	f001 fcee 	bl	801b208 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801982c:	8bfa      	ldrh	r2, [r7, #30]
 801982e:	8a7b      	ldrh	r3, [r7, #18]
 8019830:	4413      	add	r3, r2
 8019832:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019834:	69b8      	ldr	r0, [r7, #24]
 8019836:	f7f7 fcff 	bl	8011238 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	685b      	ldr	r3, [r3, #4]
 801983e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019840:	e01f      	b.n	8019882 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019842:	69bb      	ldr	r3, [r7, #24]
 8019844:	685b      	ldr	r3, [r3, #4]
 8019846:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019848:	69bb      	ldr	r3, [r7, #24]
 801984a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801984c:	697b      	ldr	r3, [r7, #20]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019852:	68f8      	ldr	r0, [r7, #12]
 8019854:	f7f7 fd7e 	bl	8011354 <pbuf_clen>
 8019858:	4603      	mov	r3, r0
 801985a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801985c:	8bfa      	ldrh	r2, [r7, #30]
 801985e:	8a7b      	ldrh	r3, [r7, #18]
 8019860:	4413      	add	r3, r2
 8019862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019866:	db05      	blt.n	8019874 <ip_reass_free_complete_datagram+0xe0>
 8019868:	4b15      	ldr	r3, [pc, #84]	; (80198c0 <ip_reass_free_complete_datagram+0x12c>)
 801986a:	22cc      	movs	r2, #204	; 0xcc
 801986c:	4918      	ldr	r1, [pc, #96]	; (80198d0 <ip_reass_free_complete_datagram+0x13c>)
 801986e:	4816      	ldr	r0, [pc, #88]	; (80198c8 <ip_reass_free_complete_datagram+0x134>)
 8019870:	f001 fcca 	bl	801b208 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019874:	8bfa      	ldrh	r2, [r7, #30]
 8019876:	8a7b      	ldrh	r3, [r7, #18]
 8019878:	4413      	add	r3, r2
 801987a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801987c:	68f8      	ldr	r0, [r7, #12]
 801987e:	f7f7 fcdb 	bl	8011238 <pbuf_free>
  while (p != NULL) {
 8019882:	69bb      	ldr	r3, [r7, #24]
 8019884:	2b00      	cmp	r3, #0
 8019886:	d1dc      	bne.n	8019842 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019888:	6839      	ldr	r1, [r7, #0]
 801988a:	6878      	ldr	r0, [r7, #4]
 801988c:	f000 f8c2 	bl	8019a14 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019890:	4b10      	ldr	r3, [pc, #64]	; (80198d4 <ip_reass_free_complete_datagram+0x140>)
 8019892:	881b      	ldrh	r3, [r3, #0]
 8019894:	8bfa      	ldrh	r2, [r7, #30]
 8019896:	429a      	cmp	r2, r3
 8019898:	d905      	bls.n	80198a6 <ip_reass_free_complete_datagram+0x112>
 801989a:	4b09      	ldr	r3, [pc, #36]	; (80198c0 <ip_reass_free_complete_datagram+0x12c>)
 801989c:	22d2      	movs	r2, #210	; 0xd2
 801989e:	490e      	ldr	r1, [pc, #56]	; (80198d8 <ip_reass_free_complete_datagram+0x144>)
 80198a0:	4809      	ldr	r0, [pc, #36]	; (80198c8 <ip_reass_free_complete_datagram+0x134>)
 80198a2:	f001 fcb1 	bl	801b208 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80198a6:	4b0b      	ldr	r3, [pc, #44]	; (80198d4 <ip_reass_free_complete_datagram+0x140>)
 80198a8:	881a      	ldrh	r2, [r3, #0]
 80198aa:	8bfb      	ldrh	r3, [r7, #30]
 80198ac:	1ad3      	subs	r3, r2, r3
 80198ae:	b29a      	uxth	r2, r3
 80198b0:	4b08      	ldr	r3, [pc, #32]	; (80198d4 <ip_reass_free_complete_datagram+0x140>)
 80198b2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80198b4:	8bfb      	ldrh	r3, [r7, #30]
}
 80198b6:	4618      	mov	r0, r3
 80198b8:	3720      	adds	r7, #32
 80198ba:	46bd      	mov	sp, r7
 80198bc:	bd80      	pop	{r7, pc}
 80198be:	bf00      	nop
 80198c0:	08020190 	.word	0x08020190
 80198c4:	080201cc 	.word	0x080201cc
 80198c8:	080201d8 	.word	0x080201d8
 80198cc:	08020200 	.word	0x08020200
 80198d0:	08020214 	.word	0x08020214
 80198d4:	2001de3c 	.word	0x2001de3c
 80198d8:	08020234 	.word	0x08020234

080198dc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80198dc:	b580      	push	{r7, lr}
 80198de:	b08a      	sub	sp, #40	; 0x28
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	6078      	str	r0, [r7, #4]
 80198e4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80198e6:	2300      	movs	r3, #0
 80198e8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80198ea:	2300      	movs	r3, #0
 80198ec:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80198ee:	2300      	movs	r3, #0
 80198f0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80198f2:	2300      	movs	r3, #0
 80198f4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80198f6:	2300      	movs	r3, #0
 80198f8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80198fa:	4b28      	ldr	r3, [pc, #160]	; (801999c <ip_reass_remove_oldest_datagram+0xc0>)
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019900:	e030      	b.n	8019964 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019904:	695a      	ldr	r2, [r3, #20]
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	68db      	ldr	r3, [r3, #12]
 801990a:	429a      	cmp	r2, r3
 801990c:	d10c      	bne.n	8019928 <ip_reass_remove_oldest_datagram+0x4c>
 801990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019910:	699a      	ldr	r2, [r3, #24]
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	691b      	ldr	r3, [r3, #16]
 8019916:	429a      	cmp	r2, r3
 8019918:	d106      	bne.n	8019928 <ip_reass_remove_oldest_datagram+0x4c>
 801991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801991c:	899a      	ldrh	r2, [r3, #12]
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	889b      	ldrh	r3, [r3, #4]
 8019922:	b29b      	uxth	r3, r3
 8019924:	429a      	cmp	r2, r3
 8019926:	d014      	beq.n	8019952 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019928:	693b      	ldr	r3, [r7, #16]
 801992a:	3301      	adds	r3, #1
 801992c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801992e:	6a3b      	ldr	r3, [r7, #32]
 8019930:	2b00      	cmp	r3, #0
 8019932:	d104      	bne.n	801993e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019936:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019938:	69fb      	ldr	r3, [r7, #28]
 801993a:	61bb      	str	r3, [r7, #24]
 801993c:	e009      	b.n	8019952 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019940:	7fda      	ldrb	r2, [r3, #31]
 8019942:	6a3b      	ldr	r3, [r7, #32]
 8019944:	7fdb      	ldrb	r3, [r3, #31]
 8019946:	429a      	cmp	r2, r3
 8019948:	d803      	bhi.n	8019952 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801994c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801994e:	69fb      	ldr	r3, [r7, #28]
 8019950:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	2b00      	cmp	r3, #0
 8019958:	d001      	beq.n	801995e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801995c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019966:	2b00      	cmp	r3, #0
 8019968:	d1cb      	bne.n	8019902 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801996a:	6a3b      	ldr	r3, [r7, #32]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d008      	beq.n	8019982 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019970:	69b9      	ldr	r1, [r7, #24]
 8019972:	6a38      	ldr	r0, [r7, #32]
 8019974:	f7ff ff0e 	bl	8019794 <ip_reass_free_complete_datagram>
 8019978:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801997a:	697a      	ldr	r2, [r7, #20]
 801997c:	68fb      	ldr	r3, [r7, #12]
 801997e:	4413      	add	r3, r2
 8019980:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019982:	697a      	ldr	r2, [r7, #20]
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	429a      	cmp	r2, r3
 8019988:	da02      	bge.n	8019990 <ip_reass_remove_oldest_datagram+0xb4>
 801998a:	693b      	ldr	r3, [r7, #16]
 801998c:	2b01      	cmp	r3, #1
 801998e:	dcac      	bgt.n	80198ea <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019990:	697b      	ldr	r3, [r7, #20]
}
 8019992:	4618      	mov	r0, r3
 8019994:	3728      	adds	r7, #40	; 0x28
 8019996:	46bd      	mov	sp, r7
 8019998:	bd80      	pop	{r7, pc}
 801999a:	bf00      	nop
 801999c:	2001de38 	.word	0x2001de38

080199a0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80199a0:	b580      	push	{r7, lr}
 80199a2:	b084      	sub	sp, #16
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	6078      	str	r0, [r7, #4]
 80199a8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80199aa:	2004      	movs	r0, #4
 80199ac:	f7f6 fd26 	bl	80103fc <memp_malloc>
 80199b0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d110      	bne.n	80199da <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80199b8:	6839      	ldr	r1, [r7, #0]
 80199ba:	6878      	ldr	r0, [r7, #4]
 80199bc:	f7ff ff8e 	bl	80198dc <ip_reass_remove_oldest_datagram>
 80199c0:	4602      	mov	r2, r0
 80199c2:	683b      	ldr	r3, [r7, #0]
 80199c4:	4293      	cmp	r3, r2
 80199c6:	dc03      	bgt.n	80199d0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80199c8:	2004      	movs	r0, #4
 80199ca:	f7f6 fd17 	bl	80103fc <memp_malloc>
 80199ce:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d101      	bne.n	80199da <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80199d6:	2300      	movs	r3, #0
 80199d8:	e016      	b.n	8019a08 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80199da:	2220      	movs	r2, #32
 80199dc:	2100      	movs	r1, #0
 80199de:	68f8      	ldr	r0, [r7, #12]
 80199e0:	f001 fc77 	bl	801b2d2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	220f      	movs	r2, #15
 80199e8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80199ea:	4b09      	ldr	r3, [pc, #36]	; (8019a10 <ip_reass_enqueue_new_datagram+0x70>)
 80199ec:	681a      	ldr	r2, [r3, #0]
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80199f2:	4a07      	ldr	r2, [pc, #28]	; (8019a10 <ip_reass_enqueue_new_datagram+0x70>)
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	3308      	adds	r3, #8
 80199fc:	2214      	movs	r2, #20
 80199fe:	6879      	ldr	r1, [r7, #4]
 8019a00:	4618      	mov	r0, r3
 8019a02:	f001 fd36 	bl	801b472 <memcpy>
  return ipr;
 8019a06:	68fb      	ldr	r3, [r7, #12]
}
 8019a08:	4618      	mov	r0, r3
 8019a0a:	3710      	adds	r7, #16
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	bd80      	pop	{r7, pc}
 8019a10:	2001de38 	.word	0x2001de38

08019a14 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019a14:	b580      	push	{r7, lr}
 8019a16:	b082      	sub	sp, #8
 8019a18:	af00      	add	r7, sp, #0
 8019a1a:	6078      	str	r0, [r7, #4]
 8019a1c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019a1e:	4b10      	ldr	r3, [pc, #64]	; (8019a60 <ip_reass_dequeue_datagram+0x4c>)
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	687a      	ldr	r2, [r7, #4]
 8019a24:	429a      	cmp	r2, r3
 8019a26:	d104      	bne.n	8019a32 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	4a0c      	ldr	r2, [pc, #48]	; (8019a60 <ip_reass_dequeue_datagram+0x4c>)
 8019a2e:	6013      	str	r3, [r2, #0]
 8019a30:	e00d      	b.n	8019a4e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019a32:	683b      	ldr	r3, [r7, #0]
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d106      	bne.n	8019a46 <ip_reass_dequeue_datagram+0x32>
 8019a38:	4b0a      	ldr	r3, [pc, #40]	; (8019a64 <ip_reass_dequeue_datagram+0x50>)
 8019a3a:	f240 1245 	movw	r2, #325	; 0x145
 8019a3e:	490a      	ldr	r1, [pc, #40]	; (8019a68 <ip_reass_dequeue_datagram+0x54>)
 8019a40:	480a      	ldr	r0, [pc, #40]	; (8019a6c <ip_reass_dequeue_datagram+0x58>)
 8019a42:	f001 fbe1 	bl	801b208 <iprintf>
    prev->next = ipr->next;
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	681a      	ldr	r2, [r3, #0]
 8019a4a:	683b      	ldr	r3, [r7, #0]
 8019a4c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019a4e:	6879      	ldr	r1, [r7, #4]
 8019a50:	2004      	movs	r0, #4
 8019a52:	f7f6 fd49 	bl	80104e8 <memp_free>
}
 8019a56:	bf00      	nop
 8019a58:	3708      	adds	r7, #8
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	bd80      	pop	{r7, pc}
 8019a5e:	bf00      	nop
 8019a60:	2001de38 	.word	0x2001de38
 8019a64:	08020190 	.word	0x08020190
 8019a68:	08020258 	.word	0x08020258
 8019a6c:	080201d8 	.word	0x080201d8

08019a70 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b08c      	sub	sp, #48	; 0x30
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	60f8      	str	r0, [r7, #12]
 8019a78:	60b9      	str	r1, [r7, #8]
 8019a7a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019a80:	2301      	movs	r3, #1
 8019a82:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019a84:	68bb      	ldr	r3, [r7, #8]
 8019a86:	685b      	ldr	r3, [r3, #4]
 8019a88:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019a8a:	69fb      	ldr	r3, [r7, #28]
 8019a8c:	885b      	ldrh	r3, [r3, #2]
 8019a8e:	b29b      	uxth	r3, r3
 8019a90:	4618      	mov	r0, r3
 8019a92:	f7f5 ffb3 	bl	800f9fc <lwip_htons>
 8019a96:	4603      	mov	r3, r0
 8019a98:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019a9a:	69fb      	ldr	r3, [r7, #28]
 8019a9c:	781b      	ldrb	r3, [r3, #0]
 8019a9e:	f003 030f 	and.w	r3, r3, #15
 8019aa2:	b2db      	uxtb	r3, r3
 8019aa4:	009b      	lsls	r3, r3, #2
 8019aa6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019aa8:	7e7b      	ldrb	r3, [r7, #25]
 8019aaa:	b29b      	uxth	r3, r3
 8019aac:	8b7a      	ldrh	r2, [r7, #26]
 8019aae:	429a      	cmp	r2, r3
 8019ab0:	d202      	bcs.n	8019ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8019ab6:	e135      	b.n	8019d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019ab8:	7e7b      	ldrb	r3, [r7, #25]
 8019aba:	b29b      	uxth	r3, r3
 8019abc:	8b7a      	ldrh	r2, [r7, #26]
 8019abe:	1ad3      	subs	r3, r2, r3
 8019ac0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019ac2:	69fb      	ldr	r3, [r7, #28]
 8019ac4:	88db      	ldrh	r3, [r3, #6]
 8019ac6:	b29b      	uxth	r3, r3
 8019ac8:	4618      	mov	r0, r3
 8019aca:	f7f5 ff97 	bl	800f9fc <lwip_htons>
 8019ace:	4603      	mov	r3, r0
 8019ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019ad4:	b29b      	uxth	r3, r3
 8019ad6:	00db      	lsls	r3, r3, #3
 8019ad8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019ada:	68bb      	ldr	r3, [r7, #8]
 8019adc:	685b      	ldr	r3, [r3, #4]
 8019ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	701a      	strb	r2, [r3, #0]
 8019ae6:	2200      	movs	r2, #0
 8019ae8:	705a      	strb	r2, [r3, #1]
 8019aea:	2200      	movs	r2, #0
 8019aec:	709a      	strb	r2, [r3, #2]
 8019aee:	2200      	movs	r2, #0
 8019af0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019af4:	8afa      	ldrh	r2, [r7, #22]
 8019af6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019af8:	8afa      	ldrh	r2, [r7, #22]
 8019afa:	8b7b      	ldrh	r3, [r7, #26]
 8019afc:	4413      	add	r3, r2
 8019afe:	b29a      	uxth	r2, r3
 8019b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b02:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b06:	88db      	ldrh	r3, [r3, #6]
 8019b08:	b29b      	uxth	r3, r3
 8019b0a:	8afa      	ldrh	r2, [r7, #22]
 8019b0c:	429a      	cmp	r2, r3
 8019b0e:	d902      	bls.n	8019b16 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019b10:	f04f 33ff 	mov.w	r3, #4294967295
 8019b14:	e106      	b.n	8019d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	685b      	ldr	r3, [r3, #4]
 8019b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8019b1c:	e068      	b.n	8019bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b20:	685b      	ldr	r3, [r3, #4]
 8019b22:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b26:	889b      	ldrh	r3, [r3, #4]
 8019b28:	b29a      	uxth	r2, r3
 8019b2a:	693b      	ldr	r3, [r7, #16]
 8019b2c:	889b      	ldrh	r3, [r3, #4]
 8019b2e:	b29b      	uxth	r3, r3
 8019b30:	429a      	cmp	r2, r3
 8019b32:	d235      	bcs.n	8019ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b38:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d020      	beq.n	8019b82 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b42:	889b      	ldrh	r3, [r3, #4]
 8019b44:	b29a      	uxth	r2, r3
 8019b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b48:	88db      	ldrh	r3, [r3, #6]
 8019b4a:	b29b      	uxth	r3, r3
 8019b4c:	429a      	cmp	r2, r3
 8019b4e:	d307      	bcc.n	8019b60 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b52:	88db      	ldrh	r3, [r3, #6]
 8019b54:	b29a      	uxth	r2, r3
 8019b56:	693b      	ldr	r3, [r7, #16]
 8019b58:	889b      	ldrh	r3, [r3, #4]
 8019b5a:	b29b      	uxth	r3, r3
 8019b5c:	429a      	cmp	r2, r3
 8019b5e:	d902      	bls.n	8019b66 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019b60:	f04f 33ff 	mov.w	r3, #4294967295
 8019b64:	e0de      	b.n	8019d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b68:	68ba      	ldr	r2, [r7, #8]
 8019b6a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b6e:	88db      	ldrh	r3, [r3, #6]
 8019b70:	b29a      	uxth	r2, r3
 8019b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b74:	889b      	ldrh	r3, [r3, #4]
 8019b76:	b29b      	uxth	r3, r3
 8019b78:	429a      	cmp	r2, r3
 8019b7a:	d03d      	beq.n	8019bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019b80:	e03a      	b.n	8019bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b84:	88db      	ldrh	r3, [r3, #6]
 8019b86:	b29a      	uxth	r2, r3
 8019b88:	693b      	ldr	r3, [r7, #16]
 8019b8a:	889b      	ldrh	r3, [r3, #4]
 8019b8c:	b29b      	uxth	r3, r3
 8019b8e:	429a      	cmp	r2, r3
 8019b90:	d902      	bls.n	8019b98 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019b92:	f04f 33ff 	mov.w	r3, #4294967295
 8019b96:	e0c5      	b.n	8019d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	68ba      	ldr	r2, [r7, #8]
 8019b9c:	605a      	str	r2, [r3, #4]
      break;
 8019b9e:	e02b      	b.n	8019bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ba2:	889b      	ldrh	r3, [r3, #4]
 8019ba4:	b29a      	uxth	r2, r3
 8019ba6:	693b      	ldr	r3, [r7, #16]
 8019ba8:	889b      	ldrh	r3, [r3, #4]
 8019baa:	b29b      	uxth	r3, r3
 8019bac:	429a      	cmp	r2, r3
 8019bae:	d102      	bne.n	8019bb6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8019bb4:	e0b6      	b.n	8019d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bb8:	889b      	ldrh	r3, [r3, #4]
 8019bba:	b29a      	uxth	r2, r3
 8019bbc:	693b      	ldr	r3, [r7, #16]
 8019bbe:	88db      	ldrh	r3, [r3, #6]
 8019bc0:	b29b      	uxth	r3, r3
 8019bc2:	429a      	cmp	r2, r3
 8019bc4:	d202      	bcs.n	8019bcc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8019bca:	e0ab      	b.n	8019d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d009      	beq.n	8019be6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bd4:	88db      	ldrh	r3, [r3, #6]
 8019bd6:	b29a      	uxth	r2, r3
 8019bd8:	693b      	ldr	r3, [r7, #16]
 8019bda:	889b      	ldrh	r3, [r3, #4]
 8019bdc:	b29b      	uxth	r3, r3
 8019bde:	429a      	cmp	r2, r3
 8019be0:	d001      	beq.n	8019be6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019be2:	2300      	movs	r3, #0
 8019be4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019be6:	693b      	ldr	r3, [r7, #16]
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019bec:	693b      	ldr	r3, [r7, #16]
 8019bee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d193      	bne.n	8019b1e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019bf6:	e000      	b.n	8019bfa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019bf8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d12d      	bne.n	8019c5c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d01c      	beq.n	8019c40 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c08:	88db      	ldrh	r3, [r3, #6]
 8019c0a:	b29a      	uxth	r2, r3
 8019c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c0e:	889b      	ldrh	r3, [r3, #4]
 8019c10:	b29b      	uxth	r3, r3
 8019c12:	429a      	cmp	r2, r3
 8019c14:	d906      	bls.n	8019c24 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019c16:	4b45      	ldr	r3, [pc, #276]	; (8019d2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019c18:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019c1c:	4944      	ldr	r1, [pc, #272]	; (8019d30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019c1e:	4845      	ldr	r0, [pc, #276]	; (8019d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019c20:	f001 faf2 	bl	801b208 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c26:	68ba      	ldr	r2, [r7, #8]
 8019c28:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c2c:	88db      	ldrh	r3, [r3, #6]
 8019c2e:	b29a      	uxth	r2, r3
 8019c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c32:	889b      	ldrh	r3, [r3, #4]
 8019c34:	b29b      	uxth	r3, r3
 8019c36:	429a      	cmp	r2, r3
 8019c38:	d010      	beq.n	8019c5c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	623b      	str	r3, [r7, #32]
 8019c3e:	e00d      	b.n	8019c5c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	685b      	ldr	r3, [r3, #4]
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d006      	beq.n	8019c56 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019c48:	4b38      	ldr	r3, [pc, #224]	; (8019d2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019c4a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019c4e:	493a      	ldr	r1, [pc, #232]	; (8019d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019c50:	4838      	ldr	r0, [pc, #224]	; (8019d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019c52:	f001 fad9 	bl	801b208 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	68ba      	ldr	r2, [r7, #8]
 8019c5a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d105      	bne.n	8019c6e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	7f9b      	ldrb	r3, [r3, #30]
 8019c66:	f003 0301 	and.w	r3, r3, #1
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d059      	beq.n	8019d22 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019c6e:	6a3b      	ldr	r3, [r7, #32]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d04f      	beq.n	8019d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	685b      	ldr	r3, [r3, #4]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d006      	beq.n	8019c8a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	685b      	ldr	r3, [r3, #4]
 8019c80:	685b      	ldr	r3, [r3, #4]
 8019c82:	889b      	ldrh	r3, [r3, #4]
 8019c84:	b29b      	uxth	r3, r3
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d002      	beq.n	8019c90 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019c8a:	2300      	movs	r3, #0
 8019c8c:	623b      	str	r3, [r7, #32]
 8019c8e:	e041      	b.n	8019d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c92:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019c9a:	e012      	b.n	8019cc2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c9e:	685b      	ldr	r3, [r3, #4]
 8019ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ca4:	88db      	ldrh	r3, [r3, #6]
 8019ca6:	b29a      	uxth	r2, r3
 8019ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019caa:	889b      	ldrh	r3, [r3, #4]
 8019cac:	b29b      	uxth	r3, r3
 8019cae:	429a      	cmp	r2, r3
 8019cb0:	d002      	beq.n	8019cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	623b      	str	r3, [r7, #32]
            break;
 8019cb6:	e007      	b.n	8019cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cba:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d1e9      	bne.n	8019c9c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019cc8:	6a3b      	ldr	r3, [r7, #32]
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d022      	beq.n	8019d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	685b      	ldr	r3, [r3, #4]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d106      	bne.n	8019ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019cd6:	4b15      	ldr	r3, [pc, #84]	; (8019d2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019cd8:	f240 12df 	movw	r2, #479	; 0x1df
 8019cdc:	4917      	ldr	r1, [pc, #92]	; (8019d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019cde:	4815      	ldr	r0, [pc, #84]	; (8019d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019ce0:	f001 fa92 	bl	801b208 <iprintf>
          LWIP_ASSERT("sanity check",
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	685b      	ldr	r3, [r3, #4]
 8019ce8:	685b      	ldr	r3, [r3, #4]
 8019cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019cec:	429a      	cmp	r2, r3
 8019cee:	d106      	bne.n	8019cfe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019cf0:	4b0e      	ldr	r3, [pc, #56]	; (8019d2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019cf2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019cf6:	4911      	ldr	r1, [pc, #68]	; (8019d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019cf8:	480e      	ldr	r0, [pc, #56]	; (8019d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019cfa:	f001 fa85 	bl	801b208 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d006      	beq.n	8019d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019d06:	4b09      	ldr	r3, [pc, #36]	; (8019d2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019d08:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019d0c:	490c      	ldr	r1, [pc, #48]	; (8019d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019d0e:	4809      	ldr	r0, [pc, #36]	; (8019d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019d10:	f001 fa7a 	bl	801b208 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019d14:	6a3b      	ldr	r3, [r7, #32]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	bf14      	ite	ne
 8019d1a:	2301      	movne	r3, #1
 8019d1c:	2300      	moveq	r3, #0
 8019d1e:	b2db      	uxtb	r3, r3
 8019d20:	e000      	b.n	8019d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019d22:	2300      	movs	r3, #0
}
 8019d24:	4618      	mov	r0, r3
 8019d26:	3730      	adds	r7, #48	; 0x30
 8019d28:	46bd      	mov	sp, r7
 8019d2a:	bd80      	pop	{r7, pc}
 8019d2c:	08020190 	.word	0x08020190
 8019d30:	08020274 	.word	0x08020274
 8019d34:	080201d8 	.word	0x080201d8
 8019d38:	08020294 	.word	0x08020294
 8019d3c:	080202cc 	.word	0x080202cc
 8019d40:	080202dc 	.word	0x080202dc

08019d44 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b08e      	sub	sp, #56	; 0x38
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	685b      	ldr	r3, [r3, #4]
 8019d50:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d54:	781b      	ldrb	r3, [r3, #0]
 8019d56:	f003 030f 	and.w	r3, r3, #15
 8019d5a:	b2db      	uxtb	r3, r3
 8019d5c:	009b      	lsls	r3, r3, #2
 8019d5e:	b2db      	uxtb	r3, r3
 8019d60:	2b14      	cmp	r3, #20
 8019d62:	f040 8171 	bne.w	801a048 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d68:	88db      	ldrh	r3, [r3, #6]
 8019d6a:	b29b      	uxth	r3, r3
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	f7f5 fe45 	bl	800f9fc <lwip_htons>
 8019d72:	4603      	mov	r3, r0
 8019d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019d78:	b29b      	uxth	r3, r3
 8019d7a:	00db      	lsls	r3, r3, #3
 8019d7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d80:	885b      	ldrh	r3, [r3, #2]
 8019d82:	b29b      	uxth	r3, r3
 8019d84:	4618      	mov	r0, r3
 8019d86:	f7f5 fe39 	bl	800f9fc <lwip_htons>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d90:	781b      	ldrb	r3, [r3, #0]
 8019d92:	f003 030f 	and.w	r3, r3, #15
 8019d96:	b2db      	uxtb	r3, r3
 8019d98:	009b      	lsls	r3, r3, #2
 8019d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8019d9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019da2:	b29b      	uxth	r3, r3
 8019da4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019da6:	429a      	cmp	r2, r3
 8019da8:	f0c0 8150 	bcc.w	801a04c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019db0:	b29b      	uxth	r3, r3
 8019db2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019db4:	1ad3      	subs	r3, r2, r3
 8019db6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019db8:	6878      	ldr	r0, [r7, #4]
 8019dba:	f7f7 facb 	bl	8011354 <pbuf_clen>
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019dc2:	4b8c      	ldr	r3, [pc, #560]	; (8019ff4 <ip4_reass+0x2b0>)
 8019dc4:	881b      	ldrh	r3, [r3, #0]
 8019dc6:	461a      	mov	r2, r3
 8019dc8:	8c3b      	ldrh	r3, [r7, #32]
 8019dca:	4413      	add	r3, r2
 8019dcc:	2b0a      	cmp	r3, #10
 8019dce:	dd10      	ble.n	8019df2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019dd0:	8c3b      	ldrh	r3, [r7, #32]
 8019dd2:	4619      	mov	r1, r3
 8019dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019dd6:	f7ff fd81 	bl	80198dc <ip_reass_remove_oldest_datagram>
 8019dda:	4603      	mov	r3, r0
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	f000 8137 	beq.w	801a050 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019de2:	4b84      	ldr	r3, [pc, #528]	; (8019ff4 <ip4_reass+0x2b0>)
 8019de4:	881b      	ldrh	r3, [r3, #0]
 8019de6:	461a      	mov	r2, r3
 8019de8:	8c3b      	ldrh	r3, [r7, #32]
 8019dea:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019dec:	2b0a      	cmp	r3, #10
 8019dee:	f300 812f 	bgt.w	801a050 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019df2:	4b81      	ldr	r3, [pc, #516]	; (8019ff8 <ip4_reass+0x2b4>)
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	633b      	str	r3, [r7, #48]	; 0x30
 8019df8:	e015      	b.n	8019e26 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dfc:	695a      	ldr	r2, [r3, #20]
 8019dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e00:	68db      	ldr	r3, [r3, #12]
 8019e02:	429a      	cmp	r2, r3
 8019e04:	d10c      	bne.n	8019e20 <ip4_reass+0xdc>
 8019e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e08:	699a      	ldr	r2, [r3, #24]
 8019e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e0c:	691b      	ldr	r3, [r3, #16]
 8019e0e:	429a      	cmp	r2, r3
 8019e10:	d106      	bne.n	8019e20 <ip4_reass+0xdc>
 8019e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e14:	899a      	ldrh	r2, [r3, #12]
 8019e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e18:	889b      	ldrh	r3, [r3, #4]
 8019e1a:	b29b      	uxth	r3, r3
 8019e1c:	429a      	cmp	r2, r3
 8019e1e:	d006      	beq.n	8019e2e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	633b      	str	r3, [r7, #48]	; 0x30
 8019e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d1e6      	bne.n	8019dfa <ip4_reass+0xb6>
 8019e2c:	e000      	b.n	8019e30 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8019e2e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d109      	bne.n	8019e4a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019e36:	8c3b      	ldrh	r3, [r7, #32]
 8019e38:	4619      	mov	r1, r3
 8019e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e3c:	f7ff fdb0 	bl	80199a0 <ip_reass_enqueue_new_datagram>
 8019e40:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d11c      	bne.n	8019e82 <ip4_reass+0x13e>
      goto nullreturn;
 8019e48:	e105      	b.n	801a056 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e4c:	88db      	ldrh	r3, [r3, #6]
 8019e4e:	b29b      	uxth	r3, r3
 8019e50:	4618      	mov	r0, r3
 8019e52:	f7f5 fdd3 	bl	800f9fc <lwip_htons>
 8019e56:	4603      	mov	r3, r0
 8019e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d110      	bne.n	8019e82 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e62:	89db      	ldrh	r3, [r3, #14]
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7f5 fdc9 	bl	800f9fc <lwip_htons>
 8019e6a:	4603      	mov	r3, r0
 8019e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d006      	beq.n	8019e82 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e76:	3308      	adds	r3, #8
 8019e78:	2214      	movs	r2, #20
 8019e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019e7c:	4618      	mov	r0, r3
 8019e7e:	f001 faf8 	bl	801b472 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e84:	88db      	ldrh	r3, [r3, #6]
 8019e86:	b29b      	uxth	r3, r3
 8019e88:	f003 0320 	and.w	r3, r3, #32
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	bf0c      	ite	eq
 8019e90:	2301      	moveq	r3, #1
 8019e92:	2300      	movne	r3, #0
 8019e94:	b2db      	uxtb	r3, r3
 8019e96:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019e98:	69fb      	ldr	r3, [r7, #28]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d00e      	beq.n	8019ebc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019e9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019ea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019ea2:	4413      	add	r3, r2
 8019ea4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019ea6:	8b7a      	ldrh	r2, [r7, #26]
 8019ea8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019eaa:	429a      	cmp	r2, r3
 8019eac:	f0c0 80a0 	bcc.w	8019ff0 <ip4_reass+0x2ac>
 8019eb0:	8b7b      	ldrh	r3, [r7, #26]
 8019eb2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019eb6:	4293      	cmp	r3, r2
 8019eb8:	f200 809a 	bhi.w	8019ff0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019ebc:	69fa      	ldr	r2, [r7, #28]
 8019ebe:	6879      	ldr	r1, [r7, #4]
 8019ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019ec2:	f7ff fdd5 	bl	8019a70 <ip_reass_chain_frag_into_datagram_and_validate>
 8019ec6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019ec8:	697b      	ldr	r3, [r7, #20]
 8019eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ece:	f000 809b 	beq.w	801a008 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019ed2:	4b48      	ldr	r3, [pc, #288]	; (8019ff4 <ip4_reass+0x2b0>)
 8019ed4:	881a      	ldrh	r2, [r3, #0]
 8019ed6:	8c3b      	ldrh	r3, [r7, #32]
 8019ed8:	4413      	add	r3, r2
 8019eda:	b29a      	uxth	r2, r3
 8019edc:	4b45      	ldr	r3, [pc, #276]	; (8019ff4 <ip4_reass+0x2b0>)
 8019ede:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019ee0:	69fb      	ldr	r3, [r7, #28]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d00d      	beq.n	8019f02 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019ee6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019eea:	4413      	add	r3, r2
 8019eec:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ef0:	8a7a      	ldrh	r2, [r7, #18]
 8019ef2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ef6:	7f9b      	ldrb	r3, [r3, #30]
 8019ef8:	f043 0301 	orr.w	r3, r3, #1
 8019efc:	b2da      	uxtb	r2, r3
 8019efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f00:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019f02:	697b      	ldr	r3, [r7, #20]
 8019f04:	2b01      	cmp	r3, #1
 8019f06:	d171      	bne.n	8019fec <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f0a:	8b9b      	ldrh	r3, [r3, #28]
 8019f0c:	3314      	adds	r3, #20
 8019f0e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f12:	685b      	ldr	r3, [r3, #4]
 8019f14:	685b      	ldr	r3, [r3, #4]
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8019f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f1c:	685b      	ldr	r3, [r3, #4]
 8019f1e:	685b      	ldr	r3, [r3, #4]
 8019f20:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f24:	3308      	adds	r3, #8
 8019f26:	2214      	movs	r2, #20
 8019f28:	4619      	mov	r1, r3
 8019f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f2c:	f001 faa1 	bl	801b472 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019f30:	8a3b      	ldrh	r3, [r7, #16]
 8019f32:	4618      	mov	r0, r3
 8019f34:	f7f5 fd62 	bl	800f9fc <lwip_htons>
 8019f38:	4603      	mov	r3, r0
 8019f3a:	461a      	mov	r2, r3
 8019f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f3e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f42:	2200      	movs	r2, #0
 8019f44:	719a      	strb	r2, [r3, #6]
 8019f46:	2200      	movs	r2, #0
 8019f48:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	729a      	strb	r2, [r3, #10]
 8019f50:	2200      	movs	r2, #0
 8019f52:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f56:	685b      	ldr	r3, [r3, #4]
 8019f58:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019f5a:	e00d      	b.n	8019f78 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f5e:	685b      	ldr	r3, [r3, #4]
 8019f60:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019f62:	2114      	movs	r1, #20
 8019f64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019f66:	f7f7 f8e1 	bl	801112c <pbuf_remove_header>
      pbuf_cat(p, r);
 8019f6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019f6c:	6878      	ldr	r0, [r7, #4]
 8019f6e:	f7f7 fa31 	bl	80113d4 <pbuf_cat>
      r = iprh->next_pbuf;
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8019f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d1ee      	bne.n	8019f5c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019f7e:	4b1e      	ldr	r3, [pc, #120]	; (8019ff8 <ip4_reass+0x2b4>)
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f84:	429a      	cmp	r2, r3
 8019f86:	d102      	bne.n	8019f8e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019f88:	2300      	movs	r3, #0
 8019f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019f8c:	e010      	b.n	8019fb0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019f8e:	4b1a      	ldr	r3, [pc, #104]	; (8019ff8 <ip4_reass+0x2b4>)
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019f94:	e007      	b.n	8019fa6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8019f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f9c:	429a      	cmp	r2, r3
 8019f9e:	d006      	beq.n	8019fae <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d1f4      	bne.n	8019f96 <ip4_reass+0x252>
 8019fac:	e000      	b.n	8019fb0 <ip4_reass+0x26c>
          break;
 8019fae:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019fb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019fb4:	f7ff fd2e 	bl	8019a14 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019fb8:	6878      	ldr	r0, [r7, #4]
 8019fba:	f7f7 f9cb 	bl	8011354 <pbuf_clen>
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019fc2:	4b0c      	ldr	r3, [pc, #48]	; (8019ff4 <ip4_reass+0x2b0>)
 8019fc4:	881b      	ldrh	r3, [r3, #0]
 8019fc6:	8c3a      	ldrh	r2, [r7, #32]
 8019fc8:	429a      	cmp	r2, r3
 8019fca:	d906      	bls.n	8019fda <ip4_reass+0x296>
 8019fcc:	4b0b      	ldr	r3, [pc, #44]	; (8019ffc <ip4_reass+0x2b8>)
 8019fce:	f240 229b 	movw	r2, #667	; 0x29b
 8019fd2:	490b      	ldr	r1, [pc, #44]	; (801a000 <ip4_reass+0x2bc>)
 8019fd4:	480b      	ldr	r0, [pc, #44]	; (801a004 <ip4_reass+0x2c0>)
 8019fd6:	f001 f917 	bl	801b208 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019fda:	4b06      	ldr	r3, [pc, #24]	; (8019ff4 <ip4_reass+0x2b0>)
 8019fdc:	881a      	ldrh	r2, [r3, #0]
 8019fde:	8c3b      	ldrh	r3, [r7, #32]
 8019fe0:	1ad3      	subs	r3, r2, r3
 8019fe2:	b29a      	uxth	r2, r3
 8019fe4:	4b03      	ldr	r3, [pc, #12]	; (8019ff4 <ip4_reass+0x2b0>)
 8019fe6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	e038      	b.n	801a05e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019fec:	2300      	movs	r3, #0
 8019fee:	e036      	b.n	801a05e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8019ff0:	bf00      	nop
 8019ff2:	e00a      	b.n	801a00a <ip4_reass+0x2c6>
 8019ff4:	2001de3c 	.word	0x2001de3c
 8019ff8:	2001de38 	.word	0x2001de38
 8019ffc:	08020190 	.word	0x08020190
 801a000:	08020300 	.word	0x08020300
 801a004:	080201d8 	.word	0x080201d8
    goto nullreturn_ipr;
 801a008:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d106      	bne.n	801a01e <ip4_reass+0x2da>
 801a010:	4b15      	ldr	r3, [pc, #84]	; (801a068 <ip4_reass+0x324>)
 801a012:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a016:	4915      	ldr	r1, [pc, #84]	; (801a06c <ip4_reass+0x328>)
 801a018:	4815      	ldr	r0, [pc, #84]	; (801a070 <ip4_reass+0x32c>)
 801a01a:	f001 f8f5 	bl	801b208 <iprintf>
  if (ipr->p == NULL) {
 801a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a020:	685b      	ldr	r3, [r3, #4]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d116      	bne.n	801a054 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a026:	4b13      	ldr	r3, [pc, #76]	; (801a074 <ip4_reass+0x330>)
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a02c:	429a      	cmp	r2, r3
 801a02e:	d006      	beq.n	801a03e <ip4_reass+0x2fa>
 801a030:	4b0d      	ldr	r3, [pc, #52]	; (801a068 <ip4_reass+0x324>)
 801a032:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a036:	4910      	ldr	r1, [pc, #64]	; (801a078 <ip4_reass+0x334>)
 801a038:	480d      	ldr	r0, [pc, #52]	; (801a070 <ip4_reass+0x32c>)
 801a03a:	f001 f8e5 	bl	801b208 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a03e:	2100      	movs	r1, #0
 801a040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a042:	f7ff fce7 	bl	8019a14 <ip_reass_dequeue_datagram>
 801a046:	e006      	b.n	801a056 <ip4_reass+0x312>
    goto nullreturn;
 801a048:	bf00      	nop
 801a04a:	e004      	b.n	801a056 <ip4_reass+0x312>
    goto nullreturn;
 801a04c:	bf00      	nop
 801a04e:	e002      	b.n	801a056 <ip4_reass+0x312>
      goto nullreturn;
 801a050:	bf00      	nop
 801a052:	e000      	b.n	801a056 <ip4_reass+0x312>
  }

nullreturn:
 801a054:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a056:	6878      	ldr	r0, [r7, #4]
 801a058:	f7f7 f8ee 	bl	8011238 <pbuf_free>
  return NULL;
 801a05c:	2300      	movs	r3, #0
}
 801a05e:	4618      	mov	r0, r3
 801a060:	3738      	adds	r7, #56	; 0x38
 801a062:	46bd      	mov	sp, r7
 801a064:	bd80      	pop	{r7, pc}
 801a066:	bf00      	nop
 801a068:	08020190 	.word	0x08020190
 801a06c:	0802031c 	.word	0x0802031c
 801a070:	080201d8 	.word	0x080201d8
 801a074:	2001de38 	.word	0x2001de38
 801a078:	08020328 	.word	0x08020328

0801a07c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a07c:	b580      	push	{r7, lr}
 801a07e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a080:	2005      	movs	r0, #5
 801a082:	f7f6 f9bb 	bl	80103fc <memp_malloc>
 801a086:	4603      	mov	r3, r0
}
 801a088:	4618      	mov	r0, r3
 801a08a:	bd80      	pop	{r7, pc}

0801a08c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a08c:	b580      	push	{r7, lr}
 801a08e:	b082      	sub	sp, #8
 801a090:	af00      	add	r7, sp, #0
 801a092:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	2b00      	cmp	r3, #0
 801a098:	d106      	bne.n	801a0a8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a09a:	4b07      	ldr	r3, [pc, #28]	; (801a0b8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a09c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a0a0:	4906      	ldr	r1, [pc, #24]	; (801a0bc <ip_frag_free_pbuf_custom_ref+0x30>)
 801a0a2:	4807      	ldr	r0, [pc, #28]	; (801a0c0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a0a4:	f001 f8b0 	bl	801b208 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a0a8:	6879      	ldr	r1, [r7, #4]
 801a0aa:	2005      	movs	r0, #5
 801a0ac:	f7f6 fa1c 	bl	80104e8 <memp_free>
}
 801a0b0:	bf00      	nop
 801a0b2:	3708      	adds	r7, #8
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	bd80      	pop	{r7, pc}
 801a0b8:	08020190 	.word	0x08020190
 801a0bc:	08020348 	.word	0x08020348
 801a0c0:	080201d8 	.word	0x080201d8

0801a0c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a0c4:	b580      	push	{r7, lr}
 801a0c6:	b084      	sub	sp, #16
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d106      	bne.n	801a0e4 <ipfrag_free_pbuf_custom+0x20>
 801a0d6:	4b11      	ldr	r3, [pc, #68]	; (801a11c <ipfrag_free_pbuf_custom+0x58>)
 801a0d8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a0dc:	4910      	ldr	r1, [pc, #64]	; (801a120 <ipfrag_free_pbuf_custom+0x5c>)
 801a0de:	4811      	ldr	r0, [pc, #68]	; (801a124 <ipfrag_free_pbuf_custom+0x60>)
 801a0e0:	f001 f892 	bl	801b208 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a0e4:	68fa      	ldr	r2, [r7, #12]
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	429a      	cmp	r2, r3
 801a0ea:	d006      	beq.n	801a0fa <ipfrag_free_pbuf_custom+0x36>
 801a0ec:	4b0b      	ldr	r3, [pc, #44]	; (801a11c <ipfrag_free_pbuf_custom+0x58>)
 801a0ee:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a0f2:	490d      	ldr	r1, [pc, #52]	; (801a128 <ipfrag_free_pbuf_custom+0x64>)
 801a0f4:	480b      	ldr	r0, [pc, #44]	; (801a124 <ipfrag_free_pbuf_custom+0x60>)
 801a0f6:	f001 f887 	bl	801b208 <iprintf>
  if (pcr->original != NULL) {
 801a0fa:	68fb      	ldr	r3, [r7, #12]
 801a0fc:	695b      	ldr	r3, [r3, #20]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d004      	beq.n	801a10c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	695b      	ldr	r3, [r3, #20]
 801a106:	4618      	mov	r0, r3
 801a108:	f7f7 f896 	bl	8011238 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a10c:	68f8      	ldr	r0, [r7, #12]
 801a10e:	f7ff ffbd 	bl	801a08c <ip_frag_free_pbuf_custom_ref>
}
 801a112:	bf00      	nop
 801a114:	3710      	adds	r7, #16
 801a116:	46bd      	mov	sp, r7
 801a118:	bd80      	pop	{r7, pc}
 801a11a:	bf00      	nop
 801a11c:	08020190 	.word	0x08020190
 801a120:	08020354 	.word	0x08020354
 801a124:	080201d8 	.word	0x080201d8
 801a128:	08020360 	.word	0x08020360

0801a12c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a12c:	b580      	push	{r7, lr}
 801a12e:	b094      	sub	sp, #80	; 0x50
 801a130:	af02      	add	r7, sp, #8
 801a132:	60f8      	str	r0, [r7, #12]
 801a134:	60b9      	str	r1, [r7, #8]
 801a136:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a138:	2300      	movs	r3, #0
 801a13a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a13e:	68bb      	ldr	r3, [r7, #8]
 801a140:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a142:	3b14      	subs	r3, #20
 801a144:	2b00      	cmp	r3, #0
 801a146:	da00      	bge.n	801a14a <ip4_frag+0x1e>
 801a148:	3307      	adds	r3, #7
 801a14a:	10db      	asrs	r3, r3, #3
 801a14c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a14e:	2314      	movs	r3, #20
 801a150:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	685b      	ldr	r3, [r3, #4]
 801a156:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a15a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a15e:	781b      	ldrb	r3, [r3, #0]
 801a160:	f003 030f 	and.w	r3, r3, #15
 801a164:	b2db      	uxtb	r3, r3
 801a166:	009b      	lsls	r3, r3, #2
 801a168:	b2db      	uxtb	r3, r3
 801a16a:	2b14      	cmp	r3, #20
 801a16c:	d002      	beq.n	801a174 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a16e:	f06f 0305 	mvn.w	r3, #5
 801a172:	e110      	b.n	801a396 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	895b      	ldrh	r3, [r3, #10]
 801a178:	2b13      	cmp	r3, #19
 801a17a:	d809      	bhi.n	801a190 <ip4_frag+0x64>
 801a17c:	4b88      	ldr	r3, [pc, #544]	; (801a3a0 <ip4_frag+0x274>)
 801a17e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a182:	4988      	ldr	r1, [pc, #544]	; (801a3a4 <ip4_frag+0x278>)
 801a184:	4888      	ldr	r0, [pc, #544]	; (801a3a8 <ip4_frag+0x27c>)
 801a186:	f001 f83f 	bl	801b208 <iprintf>
 801a18a:	f06f 0305 	mvn.w	r3, #5
 801a18e:	e102      	b.n	801a396 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a192:	88db      	ldrh	r3, [r3, #6]
 801a194:	b29b      	uxth	r3, r3
 801a196:	4618      	mov	r0, r3
 801a198:	f7f5 fc30 	bl	800f9fc <lwip_htons>
 801a19c:	4603      	mov	r3, r0
 801a19e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a1a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a1a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a1a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a1aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a1ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a1b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	891b      	ldrh	r3, [r3, #8]
 801a1b6:	3b14      	subs	r3, #20
 801a1b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a1bc:	e0e1      	b.n	801a382 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a1be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a1c0:	00db      	lsls	r3, r3, #3
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a1c8:	4293      	cmp	r3, r2
 801a1ca:	bf28      	it	cs
 801a1cc:	4613      	movcs	r3, r2
 801a1ce:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a1d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a1d4:	2114      	movs	r1, #20
 801a1d6:	200e      	movs	r0, #14
 801a1d8:	f7f6 fd46 	bl	8010c68 <pbuf_alloc>
 801a1dc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	f000 80d5 	beq.w	801a390 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1e8:	895b      	ldrh	r3, [r3, #10]
 801a1ea:	2b13      	cmp	r3, #19
 801a1ec:	d806      	bhi.n	801a1fc <ip4_frag+0xd0>
 801a1ee:	4b6c      	ldr	r3, [pc, #432]	; (801a3a0 <ip4_frag+0x274>)
 801a1f0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a1f4:	496d      	ldr	r1, [pc, #436]	; (801a3ac <ip4_frag+0x280>)
 801a1f6:	486c      	ldr	r0, [pc, #432]	; (801a3a8 <ip4_frag+0x27c>)
 801a1f8:	f001 f806 	bl	801b208 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1fe:	685b      	ldr	r3, [r3, #4]
 801a200:	2214      	movs	r2, #20
 801a202:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a204:	4618      	mov	r0, r3
 801a206:	f001 f934 	bl	801b472 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a20c:	685b      	ldr	r3, [r3, #4]
 801a20e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a210:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a212:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a216:	e064      	b.n	801a2e2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	895a      	ldrh	r2, [r3, #10]
 801a21c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a21e:	1ad3      	subs	r3, r2, r3
 801a220:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	895b      	ldrh	r3, [r3, #10]
 801a226:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a228:	429a      	cmp	r2, r3
 801a22a:	d906      	bls.n	801a23a <ip4_frag+0x10e>
 801a22c:	4b5c      	ldr	r3, [pc, #368]	; (801a3a0 <ip4_frag+0x274>)
 801a22e:	f240 322d 	movw	r2, #813	; 0x32d
 801a232:	495f      	ldr	r1, [pc, #380]	; (801a3b0 <ip4_frag+0x284>)
 801a234:	485c      	ldr	r0, [pc, #368]	; (801a3a8 <ip4_frag+0x27c>)
 801a236:	f000 ffe7 	bl	801b208 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a23a:	8bfa      	ldrh	r2, [r7, #30]
 801a23c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a240:	4293      	cmp	r3, r2
 801a242:	bf28      	it	cs
 801a244:	4613      	movcs	r3, r2
 801a246:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a24a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d105      	bne.n	801a25e <ip4_frag+0x132>
        poff = 0;
 801a252:	2300      	movs	r3, #0
 801a254:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	60fb      	str	r3, [r7, #12]
        continue;
 801a25c:	e041      	b.n	801a2e2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a25e:	f7ff ff0d 	bl	801a07c <ip_frag_alloc_pbuf_custom_ref>
 801a262:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a264:	69bb      	ldr	r3, [r7, #24]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d103      	bne.n	801a272 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a26a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a26c:	f7f6 ffe4 	bl	8011238 <pbuf_free>
        goto memerr;
 801a270:	e08f      	b.n	801a392 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a272:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a278:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a27a:	4413      	add	r3, r2
 801a27c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a280:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a284:	9201      	str	r2, [sp, #4]
 801a286:	9300      	str	r3, [sp, #0]
 801a288:	4603      	mov	r3, r0
 801a28a:	2241      	movs	r2, #65	; 0x41
 801a28c:	2000      	movs	r0, #0
 801a28e:	f7f6 fe19 	bl	8010ec4 <pbuf_alloced_custom>
 801a292:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a294:	697b      	ldr	r3, [r7, #20]
 801a296:	2b00      	cmp	r3, #0
 801a298:	d106      	bne.n	801a2a8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a29a:	69b8      	ldr	r0, [r7, #24]
 801a29c:	f7ff fef6 	bl	801a08c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a2a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a2a2:	f7f6 ffc9 	bl	8011238 <pbuf_free>
        goto memerr;
 801a2a6:	e074      	b.n	801a392 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a2a8:	68f8      	ldr	r0, [r7, #12]
 801a2aa:	f7f7 f86b 	bl	8011384 <pbuf_ref>
      pcr->original = p;
 801a2ae:	69bb      	ldr	r3, [r7, #24]
 801a2b0:	68fa      	ldr	r2, [r7, #12]
 801a2b2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a2b4:	69bb      	ldr	r3, [r7, #24]
 801a2b6:	4a3f      	ldr	r2, [pc, #252]	; (801a3b4 <ip4_frag+0x288>)
 801a2b8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a2ba:	6979      	ldr	r1, [r7, #20]
 801a2bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a2be:	f7f7 f889 	bl	80113d4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a2c2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a2c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a2ca:	1ad3      	subs	r3, r2, r3
 801a2cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a2d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d004      	beq.n	801a2e2 <ip4_frag+0x1b6>
        poff = 0;
 801a2d8:	2300      	movs	r3, #0
 801a2da:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a2e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d196      	bne.n	801a218 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a2ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a2ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a2f0:	4413      	add	r3, r2
 801a2f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a2f4:	68bb      	ldr	r3, [r7, #8]
 801a2f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a2f8:	f1a3 0213 	sub.w	r2, r3, #19
 801a2fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a300:	429a      	cmp	r2, r3
 801a302:	bfcc      	ite	gt
 801a304:	2301      	movgt	r3, #1
 801a306:	2300      	movle	r3, #0
 801a308:	b2db      	uxtb	r3, r3
 801a30a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a30c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a314:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a316:	6a3b      	ldr	r3, [r7, #32]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d002      	beq.n	801a322 <ip4_frag+0x1f6>
 801a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d003      	beq.n	801a32a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a322:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a324:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a328:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a32a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a32c:	4618      	mov	r0, r3
 801a32e:	f7f5 fb65 	bl	800f9fc <lwip_htons>
 801a332:	4603      	mov	r3, r0
 801a334:	461a      	mov	r2, r3
 801a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a338:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a33a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a33c:	3314      	adds	r3, #20
 801a33e:	b29b      	uxth	r3, r3
 801a340:	4618      	mov	r0, r3
 801a342:	f7f5 fb5b 	bl	800f9fc <lwip_htons>
 801a346:	4603      	mov	r3, r0
 801a348:	461a      	mov	r2, r3
 801a34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a34c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a350:	2200      	movs	r2, #0
 801a352:	729a      	strb	r2, [r3, #10]
 801a354:	2200      	movs	r2, #0
 801a356:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a358:	68bb      	ldr	r3, [r7, #8]
 801a35a:	695b      	ldr	r3, [r3, #20]
 801a35c:	687a      	ldr	r2, [r7, #4]
 801a35e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a360:	68b8      	ldr	r0, [r7, #8]
 801a362:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a366:	f7f6 ff67 	bl	8011238 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a36a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a36e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a370:	1ad3      	subs	r3, r2, r3
 801a372:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a376:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a37a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a37c:	4413      	add	r3, r2
 801a37e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a382:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a386:	2b00      	cmp	r3, #0
 801a388:	f47f af19 	bne.w	801a1be <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a38c:	2300      	movs	r3, #0
 801a38e:	e002      	b.n	801a396 <ip4_frag+0x26a>
      goto memerr;
 801a390:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a392:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a396:	4618      	mov	r0, r3
 801a398:	3748      	adds	r7, #72	; 0x48
 801a39a:	46bd      	mov	sp, r7
 801a39c:	bd80      	pop	{r7, pc}
 801a39e:	bf00      	nop
 801a3a0:	08020190 	.word	0x08020190
 801a3a4:	0802036c 	.word	0x0802036c
 801a3a8:	080201d8 	.word	0x080201d8
 801a3ac:	08020388 	.word	0x08020388
 801a3b0:	080203a8 	.word	0x080203a8
 801a3b4:	0801a0c5 	.word	0x0801a0c5

0801a3b8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b086      	sub	sp, #24
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	6078      	str	r0, [r7, #4]
 801a3c0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a3c2:	230e      	movs	r3, #14
 801a3c4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	895b      	ldrh	r3, [r3, #10]
 801a3ca:	2b0e      	cmp	r3, #14
 801a3cc:	d96e      	bls.n	801a4ac <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	7bdb      	ldrb	r3, [r3, #15]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d106      	bne.n	801a3e4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a3d6:	683b      	ldr	r3, [r7, #0]
 801a3d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a3dc:	3301      	adds	r3, #1
 801a3de:	b2da      	uxtb	r2, r3
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	685b      	ldr	r3, [r3, #4]
 801a3e8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a3ea:	693b      	ldr	r3, [r7, #16]
 801a3ec:	7b1a      	ldrb	r2, [r3, #12]
 801a3ee:	7b5b      	ldrb	r3, [r3, #13]
 801a3f0:	021b      	lsls	r3, r3, #8
 801a3f2:	4313      	orrs	r3, r2
 801a3f4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a3f6:	693b      	ldr	r3, [r7, #16]
 801a3f8:	781b      	ldrb	r3, [r3, #0]
 801a3fa:	f003 0301 	and.w	r3, r3, #1
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d023      	beq.n	801a44a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a402:	693b      	ldr	r3, [r7, #16]
 801a404:	781b      	ldrb	r3, [r3, #0]
 801a406:	2b01      	cmp	r3, #1
 801a408:	d10f      	bne.n	801a42a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a40a:	693b      	ldr	r3, [r7, #16]
 801a40c:	785b      	ldrb	r3, [r3, #1]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d11b      	bne.n	801a44a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a412:	693b      	ldr	r3, [r7, #16]
 801a414:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a416:	2b5e      	cmp	r3, #94	; 0x5e
 801a418:	d117      	bne.n	801a44a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	7b5b      	ldrb	r3, [r3, #13]
 801a41e:	f043 0310 	orr.w	r3, r3, #16
 801a422:	b2da      	uxtb	r2, r3
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	735a      	strb	r2, [r3, #13]
 801a428:	e00f      	b.n	801a44a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a42a:	693b      	ldr	r3, [r7, #16]
 801a42c:	2206      	movs	r2, #6
 801a42e:	4928      	ldr	r1, [pc, #160]	; (801a4d0 <ethernet_input+0x118>)
 801a430:	4618      	mov	r0, r3
 801a432:	f000 ff3e 	bl	801b2b2 <memcmp>
 801a436:	4603      	mov	r3, r0
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d106      	bne.n	801a44a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	7b5b      	ldrb	r3, [r3, #13]
 801a440:	f043 0308 	orr.w	r3, r3, #8
 801a444:	b2da      	uxtb	r2, r3
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a44a:	89fb      	ldrh	r3, [r7, #14]
 801a44c:	2b08      	cmp	r3, #8
 801a44e:	d003      	beq.n	801a458 <ethernet_input+0xa0>
 801a450:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a454:	d014      	beq.n	801a480 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a456:	e032      	b.n	801a4be <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a458:	683b      	ldr	r3, [r7, #0]
 801a45a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a45e:	f003 0308 	and.w	r3, r3, #8
 801a462:	2b00      	cmp	r3, #0
 801a464:	d024      	beq.n	801a4b0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a466:	8afb      	ldrh	r3, [r7, #22]
 801a468:	4619      	mov	r1, r3
 801a46a:	6878      	ldr	r0, [r7, #4]
 801a46c:	f7f6 fe5e 	bl	801112c <pbuf_remove_header>
 801a470:	4603      	mov	r3, r0
 801a472:	2b00      	cmp	r3, #0
 801a474:	d11e      	bne.n	801a4b4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a476:	6839      	ldr	r1, [r7, #0]
 801a478:	6878      	ldr	r0, [r7, #4]
 801a47a:	f7fe ff21 	bl	80192c0 <ip4_input>
      break;
 801a47e:	e013      	b.n	801a4a8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a480:	683b      	ldr	r3, [r7, #0]
 801a482:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a486:	f003 0308 	and.w	r3, r3, #8
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d014      	beq.n	801a4b8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a48e:	8afb      	ldrh	r3, [r7, #22]
 801a490:	4619      	mov	r1, r3
 801a492:	6878      	ldr	r0, [r7, #4]
 801a494:	f7f6 fe4a 	bl	801112c <pbuf_remove_header>
 801a498:	4603      	mov	r3, r0
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d10e      	bne.n	801a4bc <ethernet_input+0x104>
        etharp_input(p, netif);
 801a49e:	6839      	ldr	r1, [r7, #0]
 801a4a0:	6878      	ldr	r0, [r7, #4]
 801a4a2:	f7fe f8c1 	bl	8018628 <etharp_input>
      break;
 801a4a6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	e00c      	b.n	801a4c6 <ethernet_input+0x10e>
    goto free_and_return;
 801a4ac:	bf00      	nop
 801a4ae:	e006      	b.n	801a4be <ethernet_input+0x106>
        goto free_and_return;
 801a4b0:	bf00      	nop
 801a4b2:	e004      	b.n	801a4be <ethernet_input+0x106>
        goto free_and_return;
 801a4b4:	bf00      	nop
 801a4b6:	e002      	b.n	801a4be <ethernet_input+0x106>
        goto free_and_return;
 801a4b8:	bf00      	nop
 801a4ba:	e000      	b.n	801a4be <ethernet_input+0x106>
        goto free_and_return;
 801a4bc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a4be:	6878      	ldr	r0, [r7, #4]
 801a4c0:	f7f6 feba 	bl	8011238 <pbuf_free>
  return ERR_OK;
 801a4c4:	2300      	movs	r3, #0
}
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	3718      	adds	r7, #24
 801a4ca:	46bd      	mov	sp, r7
 801a4cc:	bd80      	pop	{r7, pc}
 801a4ce:	bf00      	nop
 801a4d0:	0802058c 	.word	0x0802058c

0801a4d4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a4d4:	b580      	push	{r7, lr}
 801a4d6:	b086      	sub	sp, #24
 801a4d8:	af00      	add	r7, sp, #0
 801a4da:	60f8      	str	r0, [r7, #12]
 801a4dc:	60b9      	str	r1, [r7, #8]
 801a4de:	607a      	str	r2, [r7, #4]
 801a4e0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a4e2:	8c3b      	ldrh	r3, [r7, #32]
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	f7f5 fa89 	bl	800f9fc <lwip_htons>
 801a4ea:	4603      	mov	r3, r0
 801a4ec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a4ee:	210e      	movs	r1, #14
 801a4f0:	68b8      	ldr	r0, [r7, #8]
 801a4f2:	f7f6 fe0b 	bl	801110c <pbuf_add_header>
 801a4f6:	4603      	mov	r3, r0
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d125      	bne.n	801a548 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a4fc:	68bb      	ldr	r3, [r7, #8]
 801a4fe:	685b      	ldr	r3, [r3, #4]
 801a500:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a502:	693b      	ldr	r3, [r7, #16]
 801a504:	8afa      	ldrh	r2, [r7, #22]
 801a506:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a508:	693b      	ldr	r3, [r7, #16]
 801a50a:	2206      	movs	r2, #6
 801a50c:	6839      	ldr	r1, [r7, #0]
 801a50e:	4618      	mov	r0, r3
 801a510:	f000 ffaf 	bl	801b472 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a514:	693b      	ldr	r3, [r7, #16]
 801a516:	3306      	adds	r3, #6
 801a518:	2206      	movs	r2, #6
 801a51a:	6879      	ldr	r1, [r7, #4]
 801a51c:	4618      	mov	r0, r3
 801a51e:	f000 ffa8 	bl	801b472 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a528:	2b06      	cmp	r3, #6
 801a52a:	d006      	beq.n	801a53a <ethernet_output+0x66>
 801a52c:	4b0a      	ldr	r3, [pc, #40]	; (801a558 <ethernet_output+0x84>)
 801a52e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a532:	490a      	ldr	r1, [pc, #40]	; (801a55c <ethernet_output+0x88>)
 801a534:	480a      	ldr	r0, [pc, #40]	; (801a560 <ethernet_output+0x8c>)
 801a536:	f000 fe67 	bl	801b208 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	699b      	ldr	r3, [r3, #24]
 801a53e:	68b9      	ldr	r1, [r7, #8]
 801a540:	68f8      	ldr	r0, [r7, #12]
 801a542:	4798      	blx	r3
 801a544:	4603      	mov	r3, r0
 801a546:	e002      	b.n	801a54e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a548:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a54a:	f06f 0301 	mvn.w	r3, #1
}
 801a54e:	4618      	mov	r0, r3
 801a550:	3718      	adds	r7, #24
 801a552:	46bd      	mov	sp, r7
 801a554:	bd80      	pop	{r7, pc}
 801a556:	bf00      	nop
 801a558:	080203b8 	.word	0x080203b8
 801a55c:	080203f0 	.word	0x080203f0
 801a560:	08020424 	.word	0x08020424

0801a564 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b086      	sub	sp, #24
 801a568:	af00      	add	r7, sp, #0
 801a56a:	6078      	str	r0, [r7, #4]
 801a56c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801a56e:	683b      	ldr	r3, [r7, #0]
 801a570:	60bb      	str	r3, [r7, #8]
 801a572:	2304      	movs	r3, #4
 801a574:	60fb      	str	r3, [r7, #12]
 801a576:	2300      	movs	r3, #0
 801a578:	613b      	str	r3, [r7, #16]
 801a57a:	2300      	movs	r3, #0
 801a57c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801a57e:	f107 0308 	add.w	r3, r7, #8
 801a582:	2100      	movs	r1, #0
 801a584:	4618      	mov	r0, r3
 801a586:	f7f0 fcaf 	bl	800aee8 <osMessageCreate>
 801a58a:	4602      	mov	r2, r0
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	2b00      	cmp	r3, #0
 801a596:	d102      	bne.n	801a59e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801a598:	f04f 33ff 	mov.w	r3, #4294967295
 801a59c:	e000      	b.n	801a5a0 <sys_mbox_new+0x3c>

  return ERR_OK;
 801a59e:	2300      	movs	r3, #0
}
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	3718      	adds	r7, #24
 801a5a4:	46bd      	mov	sp, r7
 801a5a6:	bd80      	pop	{r7, pc}

0801a5a8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a5a8:	b580      	push	{r7, lr}
 801a5aa:	b084      	sub	sp, #16
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	6078      	str	r0, [r7, #4]
 801a5b0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	6839      	ldr	r1, [r7, #0]
 801a5b8:	2200      	movs	r2, #0
 801a5ba:	4618      	mov	r0, r3
 801a5bc:	f7f0 fcbc 	bl	800af38 <osMessagePut>
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d102      	bne.n	801a5cc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801a5c6:	2300      	movs	r3, #0
 801a5c8:	73fb      	strb	r3, [r7, #15]
 801a5ca:	e001      	b.n	801a5d0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a5cc:	23ff      	movs	r3, #255	; 0xff
 801a5ce:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a5d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a5d4:	4618      	mov	r0, r3
 801a5d6:	3710      	adds	r7, #16
 801a5d8:	46bd      	mov	sp, r7
 801a5da:	bd80      	pop	{r7, pc}

0801a5dc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a5dc:	b580      	push	{r7, lr}
 801a5de:	b08c      	sub	sp, #48	; 0x30
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	61f8      	str	r0, [r7, #28]
 801a5e4:	61b9      	str	r1, [r7, #24]
 801a5e6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801a5e8:	f7f0 fa62 	bl	800aab0 <osKernelSysTick>
 801a5ec:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801a5ee:	697b      	ldr	r3, [r7, #20]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d017      	beq.n	801a624 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801a5f4:	69fb      	ldr	r3, [r7, #28]
 801a5f6:	6819      	ldr	r1, [r3, #0]
 801a5f8:	f107 0320 	add.w	r3, r7, #32
 801a5fc:	697a      	ldr	r2, [r7, #20]
 801a5fe:	4618      	mov	r0, r3
 801a600:	f7f0 fcda 	bl	800afb8 <osMessageGet>

    if(event.status == osEventMessage)
 801a604:	6a3b      	ldr	r3, [r7, #32]
 801a606:	2b10      	cmp	r3, #16
 801a608:	d109      	bne.n	801a61e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a60c:	461a      	mov	r2, r3
 801a60e:	69bb      	ldr	r3, [r7, #24]
 801a610:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801a612:	f7f0 fa4d 	bl	800aab0 <osKernelSysTick>
 801a616:	4602      	mov	r2, r0
 801a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a61a:	1ad3      	subs	r3, r2, r3
 801a61c:	e019      	b.n	801a652 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a61e:	f04f 33ff 	mov.w	r3, #4294967295
 801a622:	e016      	b.n	801a652 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801a624:	69fb      	ldr	r3, [r7, #28]
 801a626:	6819      	ldr	r1, [r3, #0]
 801a628:	463b      	mov	r3, r7
 801a62a:	f04f 32ff 	mov.w	r2, #4294967295
 801a62e:	4618      	mov	r0, r3
 801a630:	f7f0 fcc2 	bl	800afb8 <osMessageGet>
 801a634:	f107 0320 	add.w	r3, r7, #32
 801a638:	463a      	mov	r2, r7
 801a63a:	ca07      	ldmia	r2, {r0, r1, r2}
 801a63c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a642:	461a      	mov	r2, r3
 801a644:	69bb      	ldr	r3, [r7, #24]
 801a646:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801a648:	f7f0 fa32 	bl	800aab0 <osKernelSysTick>
 801a64c:	4602      	mov	r2, r0
 801a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a650:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801a652:	4618      	mov	r0, r3
 801a654:	3730      	adds	r7, #48	; 0x30
 801a656:	46bd      	mov	sp, r7
 801a658:	bd80      	pop	{r7, pc}

0801a65a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a65a:	b480      	push	{r7}
 801a65c:	b083      	sub	sp, #12
 801a65e:	af00      	add	r7, sp, #0
 801a660:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	2b00      	cmp	r3, #0
 801a668:	d101      	bne.n	801a66e <sys_mbox_valid+0x14>
    return 0;
 801a66a:	2300      	movs	r3, #0
 801a66c:	e000      	b.n	801a670 <sys_mbox_valid+0x16>
  else
    return 1;
 801a66e:	2301      	movs	r3, #1
}
 801a670:	4618      	mov	r0, r3
 801a672:	370c      	adds	r7, #12
 801a674:	46bd      	mov	sp, r7
 801a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a67a:	4770      	bx	lr

0801a67c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a67c:	b580      	push	{r7, lr}
 801a67e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801a680:	4803      	ldr	r0, [pc, #12]	; (801a690 <sys_init+0x14>)
 801a682:	f7f0 fb11 	bl	800aca8 <osMutexCreate>
 801a686:	4603      	mov	r3, r0
 801a688:	4a02      	ldr	r2, [pc, #8]	; (801a694 <sys_init+0x18>)
 801a68a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801a68c:	bf00      	nop
 801a68e:	bd80      	pop	{r7, pc}
 801a690:	0802059c 	.word	0x0802059c
 801a694:	2001de40 	.word	0x2001de40

0801a698 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a698:	b580      	push	{r7, lr}
 801a69a:	b084      	sub	sp, #16
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801a6a0:	2300      	movs	r3, #0
 801a6a2:	60bb      	str	r3, [r7, #8]
 801a6a4:	2300      	movs	r3, #0
 801a6a6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801a6a8:	f107 0308 	add.w	r3, r7, #8
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	f7f0 fafb 	bl	800aca8 <osMutexCreate>
 801a6b2:	4602      	mov	r2, r0
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d102      	bne.n	801a6c6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a6c0:	f04f 33ff 	mov.w	r3, #4294967295
 801a6c4:	e000      	b.n	801a6c8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a6c6:	2300      	movs	r3, #0
}
 801a6c8:	4618      	mov	r0, r3
 801a6ca:	3710      	adds	r7, #16
 801a6cc:	46bd      	mov	sp, r7
 801a6ce:	bd80      	pop	{r7, pc}

0801a6d0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	b082      	sub	sp, #8
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	f04f 31ff 	mov.w	r1, #4294967295
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	f7f0 faf9 	bl	800acd8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801a6e6:	bf00      	nop
 801a6e8:	3708      	adds	r7, #8
 801a6ea:	46bd      	mov	sp, r7
 801a6ec:	bd80      	pop	{r7, pc}

0801a6ee <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a6ee:	b580      	push	{r7, lr}
 801a6f0:	b082      	sub	sp, #8
 801a6f2:	af00      	add	r7, sp, #0
 801a6f4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	f7f0 fb3a 	bl	800ad74 <osMutexRelease>
}
 801a700:	bf00      	nop
 801a702:	3708      	adds	r7, #8
 801a704:	46bd      	mov	sp, r7
 801a706:	bd80      	pop	{r7, pc}

0801a708 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a708:	b580      	push	{r7, lr}
 801a70a:	b08c      	sub	sp, #48	; 0x30
 801a70c:	af00      	add	r7, sp, #0
 801a70e:	60f8      	str	r0, [r7, #12]
 801a710:	60b9      	str	r1, [r7, #8]
 801a712:	607a      	str	r2, [r7, #4]
 801a714:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801a716:	f107 0314 	add.w	r3, r7, #20
 801a71a:	2200      	movs	r2, #0
 801a71c:	601a      	str	r2, [r3, #0]
 801a71e:	605a      	str	r2, [r3, #4]
 801a720:	609a      	str	r2, [r3, #8]
 801a722:	60da      	str	r2, [r3, #12]
 801a724:	611a      	str	r2, [r3, #16]
 801a726:	615a      	str	r2, [r3, #20]
 801a728:	619a      	str	r2, [r3, #24]
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	617b      	str	r3, [r7, #20]
 801a72e:	68bb      	ldr	r3, [r7, #8]
 801a730:	61bb      	str	r3, [r7, #24]
 801a732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a734:	b21b      	sxth	r3, r3
 801a736:	83bb      	strh	r3, [r7, #28]
 801a738:	683b      	ldr	r3, [r7, #0]
 801a73a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801a73c:	f107 0314 	add.w	r3, r7, #20
 801a740:	6879      	ldr	r1, [r7, #4]
 801a742:	4618      	mov	r0, r3
 801a744:	f7f0 f9c4 	bl	800aad0 <osThreadCreate>
 801a748:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801a74a:	4618      	mov	r0, r3
 801a74c:	3730      	adds	r7, #48	; 0x30
 801a74e:	46bd      	mov	sp, r7
 801a750:	bd80      	pop	{r7, pc}
	...

0801a754 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a754:	b580      	push	{r7, lr}
 801a756:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801a758:	4b04      	ldr	r3, [pc, #16]	; (801a76c <sys_arch_protect+0x18>)
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	f04f 31ff 	mov.w	r1, #4294967295
 801a760:	4618      	mov	r0, r3
 801a762:	f7f0 fab9 	bl	800acd8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801a766:	2301      	movs	r3, #1
}
 801a768:	4618      	mov	r0, r3
 801a76a:	bd80      	pop	{r7, pc}
 801a76c:	2001de40 	.word	0x2001de40

0801a770 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a770:	b580      	push	{r7, lr}
 801a772:	b082      	sub	sp, #8
 801a774:	af00      	add	r7, sp, #0
 801a776:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a778:	4b04      	ldr	r3, [pc, #16]	; (801a78c <sys_arch_unprotect+0x1c>)
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	4618      	mov	r0, r3
 801a77e:	f7f0 faf9 	bl	800ad74 <osMutexRelease>
}
 801a782:	bf00      	nop
 801a784:	3708      	adds	r7, #8
 801a786:	46bd      	mov	sp, r7
 801a788:	bd80      	pop	{r7, pc}
 801a78a:	bf00      	nop
 801a78c:	2001de40 	.word	0x2001de40

0801a790 <rand>:
 801a790:	4b16      	ldr	r3, [pc, #88]	; (801a7ec <rand+0x5c>)
 801a792:	b510      	push	{r4, lr}
 801a794:	681c      	ldr	r4, [r3, #0]
 801a796:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a798:	b9b3      	cbnz	r3, 801a7c8 <rand+0x38>
 801a79a:	2018      	movs	r0, #24
 801a79c:	f001 fcd8 	bl	801c150 <malloc>
 801a7a0:	4602      	mov	r2, r0
 801a7a2:	6320      	str	r0, [r4, #48]	; 0x30
 801a7a4:	b920      	cbnz	r0, 801a7b0 <rand+0x20>
 801a7a6:	4b12      	ldr	r3, [pc, #72]	; (801a7f0 <rand+0x60>)
 801a7a8:	4812      	ldr	r0, [pc, #72]	; (801a7f4 <rand+0x64>)
 801a7aa:	2152      	movs	r1, #82	; 0x52
 801a7ac:	f000 fe70 	bl	801b490 <__assert_func>
 801a7b0:	4911      	ldr	r1, [pc, #68]	; (801a7f8 <rand+0x68>)
 801a7b2:	4b12      	ldr	r3, [pc, #72]	; (801a7fc <rand+0x6c>)
 801a7b4:	e9c0 1300 	strd	r1, r3, [r0]
 801a7b8:	4b11      	ldr	r3, [pc, #68]	; (801a800 <rand+0x70>)
 801a7ba:	6083      	str	r3, [r0, #8]
 801a7bc:	230b      	movs	r3, #11
 801a7be:	8183      	strh	r3, [r0, #12]
 801a7c0:	2100      	movs	r1, #0
 801a7c2:	2001      	movs	r0, #1
 801a7c4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a7c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a7ca:	480e      	ldr	r0, [pc, #56]	; (801a804 <rand+0x74>)
 801a7cc:	690b      	ldr	r3, [r1, #16]
 801a7ce:	694c      	ldr	r4, [r1, #20]
 801a7d0:	4a0d      	ldr	r2, [pc, #52]	; (801a808 <rand+0x78>)
 801a7d2:	4358      	muls	r0, r3
 801a7d4:	fb02 0004 	mla	r0, r2, r4, r0
 801a7d8:	fba3 3202 	umull	r3, r2, r3, r2
 801a7dc:	3301      	adds	r3, #1
 801a7de:	eb40 0002 	adc.w	r0, r0, r2
 801a7e2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a7e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a7ea:	bd10      	pop	{r4, pc}
 801a7ec:	20000090 	.word	0x20000090
 801a7f0:	080205a4 	.word	0x080205a4
 801a7f4:	080205bb 	.word	0x080205bb
 801a7f8:	abcd330e 	.word	0xabcd330e
 801a7fc:	e66d1234 	.word	0xe66d1234
 801a800:	0005deec 	.word	0x0005deec
 801a804:	5851f42d 	.word	0x5851f42d
 801a808:	4c957f2d 	.word	0x4c957f2d

0801a80c <__cvt>:
 801a80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a80e:	ed2d 8b02 	vpush	{d8}
 801a812:	eeb0 8b40 	vmov.f64	d8, d0
 801a816:	b085      	sub	sp, #20
 801a818:	4617      	mov	r7, r2
 801a81a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a81c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a81e:	ee18 2a90 	vmov	r2, s17
 801a822:	f025 0520 	bic.w	r5, r5, #32
 801a826:	2a00      	cmp	r2, #0
 801a828:	bfb6      	itet	lt
 801a82a:	222d      	movlt	r2, #45	; 0x2d
 801a82c:	2200      	movge	r2, #0
 801a82e:	eeb1 8b40 	vneglt.f64	d8, d0
 801a832:	2d46      	cmp	r5, #70	; 0x46
 801a834:	460c      	mov	r4, r1
 801a836:	701a      	strb	r2, [r3, #0]
 801a838:	d004      	beq.n	801a844 <__cvt+0x38>
 801a83a:	2d45      	cmp	r5, #69	; 0x45
 801a83c:	d100      	bne.n	801a840 <__cvt+0x34>
 801a83e:	3401      	adds	r4, #1
 801a840:	2102      	movs	r1, #2
 801a842:	e000      	b.n	801a846 <__cvt+0x3a>
 801a844:	2103      	movs	r1, #3
 801a846:	ab03      	add	r3, sp, #12
 801a848:	9301      	str	r3, [sp, #4]
 801a84a:	ab02      	add	r3, sp, #8
 801a84c:	9300      	str	r3, [sp, #0]
 801a84e:	4622      	mov	r2, r4
 801a850:	4633      	mov	r3, r6
 801a852:	eeb0 0b48 	vmov.f64	d0, d8
 801a856:	f000 fec3 	bl	801b5e0 <_dtoa_r>
 801a85a:	2d47      	cmp	r5, #71	; 0x47
 801a85c:	d101      	bne.n	801a862 <__cvt+0x56>
 801a85e:	07fb      	lsls	r3, r7, #31
 801a860:	d51a      	bpl.n	801a898 <__cvt+0x8c>
 801a862:	2d46      	cmp	r5, #70	; 0x46
 801a864:	eb00 0204 	add.w	r2, r0, r4
 801a868:	d10c      	bne.n	801a884 <__cvt+0x78>
 801a86a:	7803      	ldrb	r3, [r0, #0]
 801a86c:	2b30      	cmp	r3, #48	; 0x30
 801a86e:	d107      	bne.n	801a880 <__cvt+0x74>
 801a870:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a878:	bf1c      	itt	ne
 801a87a:	f1c4 0401 	rsbne	r4, r4, #1
 801a87e:	6034      	strne	r4, [r6, #0]
 801a880:	6833      	ldr	r3, [r6, #0]
 801a882:	441a      	add	r2, r3
 801a884:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a88c:	bf08      	it	eq
 801a88e:	9203      	streq	r2, [sp, #12]
 801a890:	2130      	movs	r1, #48	; 0x30
 801a892:	9b03      	ldr	r3, [sp, #12]
 801a894:	4293      	cmp	r3, r2
 801a896:	d307      	bcc.n	801a8a8 <__cvt+0x9c>
 801a898:	9b03      	ldr	r3, [sp, #12]
 801a89a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a89c:	1a1b      	subs	r3, r3, r0
 801a89e:	6013      	str	r3, [r2, #0]
 801a8a0:	b005      	add	sp, #20
 801a8a2:	ecbd 8b02 	vpop	{d8}
 801a8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8a8:	1c5c      	adds	r4, r3, #1
 801a8aa:	9403      	str	r4, [sp, #12]
 801a8ac:	7019      	strb	r1, [r3, #0]
 801a8ae:	e7f0      	b.n	801a892 <__cvt+0x86>

0801a8b0 <__exponent>:
 801a8b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a8b2:	4603      	mov	r3, r0
 801a8b4:	2900      	cmp	r1, #0
 801a8b6:	bfb8      	it	lt
 801a8b8:	4249      	neglt	r1, r1
 801a8ba:	f803 2b02 	strb.w	r2, [r3], #2
 801a8be:	bfb4      	ite	lt
 801a8c0:	222d      	movlt	r2, #45	; 0x2d
 801a8c2:	222b      	movge	r2, #43	; 0x2b
 801a8c4:	2909      	cmp	r1, #9
 801a8c6:	7042      	strb	r2, [r0, #1]
 801a8c8:	dd2a      	ble.n	801a920 <__exponent+0x70>
 801a8ca:	f10d 0207 	add.w	r2, sp, #7
 801a8ce:	4617      	mov	r7, r2
 801a8d0:	260a      	movs	r6, #10
 801a8d2:	4694      	mov	ip, r2
 801a8d4:	fb91 f5f6 	sdiv	r5, r1, r6
 801a8d8:	fb06 1415 	mls	r4, r6, r5, r1
 801a8dc:	3430      	adds	r4, #48	; 0x30
 801a8de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801a8e2:	460c      	mov	r4, r1
 801a8e4:	2c63      	cmp	r4, #99	; 0x63
 801a8e6:	f102 32ff 	add.w	r2, r2, #4294967295
 801a8ea:	4629      	mov	r1, r5
 801a8ec:	dcf1      	bgt.n	801a8d2 <__exponent+0x22>
 801a8ee:	3130      	adds	r1, #48	; 0x30
 801a8f0:	f1ac 0402 	sub.w	r4, ip, #2
 801a8f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a8f8:	1c41      	adds	r1, r0, #1
 801a8fa:	4622      	mov	r2, r4
 801a8fc:	42ba      	cmp	r2, r7
 801a8fe:	d30a      	bcc.n	801a916 <__exponent+0x66>
 801a900:	f10d 0209 	add.w	r2, sp, #9
 801a904:	eba2 020c 	sub.w	r2, r2, ip
 801a908:	42bc      	cmp	r4, r7
 801a90a:	bf88      	it	hi
 801a90c:	2200      	movhi	r2, #0
 801a90e:	4413      	add	r3, r2
 801a910:	1a18      	subs	r0, r3, r0
 801a912:	b003      	add	sp, #12
 801a914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a916:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a91a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801a91e:	e7ed      	b.n	801a8fc <__exponent+0x4c>
 801a920:	2330      	movs	r3, #48	; 0x30
 801a922:	3130      	adds	r1, #48	; 0x30
 801a924:	7083      	strb	r3, [r0, #2]
 801a926:	70c1      	strb	r1, [r0, #3]
 801a928:	1d03      	adds	r3, r0, #4
 801a92a:	e7f1      	b.n	801a910 <__exponent+0x60>
 801a92c:	0000      	movs	r0, r0
	...

0801a930 <_printf_float>:
 801a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a934:	b08b      	sub	sp, #44	; 0x2c
 801a936:	460c      	mov	r4, r1
 801a938:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801a93c:	4616      	mov	r6, r2
 801a93e:	461f      	mov	r7, r3
 801a940:	4605      	mov	r5, r0
 801a942:	f000 fccf 	bl	801b2e4 <_localeconv_r>
 801a946:	f8d0 b000 	ldr.w	fp, [r0]
 801a94a:	4658      	mov	r0, fp
 801a94c:	f7e5 fcc8 	bl	80002e0 <strlen>
 801a950:	2300      	movs	r3, #0
 801a952:	9308      	str	r3, [sp, #32]
 801a954:	f8d8 3000 	ldr.w	r3, [r8]
 801a958:	f894 9018 	ldrb.w	r9, [r4, #24]
 801a95c:	6822      	ldr	r2, [r4, #0]
 801a95e:	3307      	adds	r3, #7
 801a960:	f023 0307 	bic.w	r3, r3, #7
 801a964:	f103 0108 	add.w	r1, r3, #8
 801a968:	f8c8 1000 	str.w	r1, [r8]
 801a96c:	ed93 0b00 	vldr	d0, [r3]
 801a970:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801abd0 <_printf_float+0x2a0>
 801a974:	eeb0 7bc0 	vabs.f64	d7, d0
 801a978:	eeb4 7b46 	vcmp.f64	d7, d6
 801a97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a980:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801a984:	4682      	mov	sl, r0
 801a986:	dd24      	ble.n	801a9d2 <_printf_float+0xa2>
 801a988:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a990:	d502      	bpl.n	801a998 <_printf_float+0x68>
 801a992:	232d      	movs	r3, #45	; 0x2d
 801a994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a998:	498f      	ldr	r1, [pc, #572]	; (801abd8 <_printf_float+0x2a8>)
 801a99a:	4b90      	ldr	r3, [pc, #576]	; (801abdc <_printf_float+0x2ac>)
 801a99c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801a9a0:	bf94      	ite	ls
 801a9a2:	4688      	movls	r8, r1
 801a9a4:	4698      	movhi	r8, r3
 801a9a6:	2303      	movs	r3, #3
 801a9a8:	6123      	str	r3, [r4, #16]
 801a9aa:	f022 0204 	bic.w	r2, r2, #4
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	6022      	str	r2, [r4, #0]
 801a9b2:	9304      	str	r3, [sp, #16]
 801a9b4:	9700      	str	r7, [sp, #0]
 801a9b6:	4633      	mov	r3, r6
 801a9b8:	aa09      	add	r2, sp, #36	; 0x24
 801a9ba:	4621      	mov	r1, r4
 801a9bc:	4628      	mov	r0, r5
 801a9be:	f000 f9d1 	bl	801ad64 <_printf_common>
 801a9c2:	3001      	adds	r0, #1
 801a9c4:	f040 808a 	bne.w	801aadc <_printf_float+0x1ac>
 801a9c8:	f04f 30ff 	mov.w	r0, #4294967295
 801a9cc:	b00b      	add	sp, #44	; 0x2c
 801a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9d2:	eeb4 0b40 	vcmp.f64	d0, d0
 801a9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9da:	d709      	bvc.n	801a9f0 <_printf_float+0xc0>
 801a9dc:	ee10 3a90 	vmov	r3, s1
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	bfbc      	itt	lt
 801a9e4:	232d      	movlt	r3, #45	; 0x2d
 801a9e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a9ea:	497d      	ldr	r1, [pc, #500]	; (801abe0 <_printf_float+0x2b0>)
 801a9ec:	4b7d      	ldr	r3, [pc, #500]	; (801abe4 <_printf_float+0x2b4>)
 801a9ee:	e7d5      	b.n	801a99c <_printf_float+0x6c>
 801a9f0:	6863      	ldr	r3, [r4, #4]
 801a9f2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801a9f6:	9104      	str	r1, [sp, #16]
 801a9f8:	1c59      	adds	r1, r3, #1
 801a9fa:	d13c      	bne.n	801aa76 <_printf_float+0x146>
 801a9fc:	2306      	movs	r3, #6
 801a9fe:	6063      	str	r3, [r4, #4]
 801aa00:	2300      	movs	r3, #0
 801aa02:	9303      	str	r3, [sp, #12]
 801aa04:	ab08      	add	r3, sp, #32
 801aa06:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801aa0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801aa0e:	ab07      	add	r3, sp, #28
 801aa10:	6861      	ldr	r1, [r4, #4]
 801aa12:	9300      	str	r3, [sp, #0]
 801aa14:	6022      	str	r2, [r4, #0]
 801aa16:	f10d 031b 	add.w	r3, sp, #27
 801aa1a:	4628      	mov	r0, r5
 801aa1c:	f7ff fef6 	bl	801a80c <__cvt>
 801aa20:	9b04      	ldr	r3, [sp, #16]
 801aa22:	9907      	ldr	r1, [sp, #28]
 801aa24:	2b47      	cmp	r3, #71	; 0x47
 801aa26:	4680      	mov	r8, r0
 801aa28:	d108      	bne.n	801aa3c <_printf_float+0x10c>
 801aa2a:	1cc8      	adds	r0, r1, #3
 801aa2c:	db02      	blt.n	801aa34 <_printf_float+0x104>
 801aa2e:	6863      	ldr	r3, [r4, #4]
 801aa30:	4299      	cmp	r1, r3
 801aa32:	dd41      	ble.n	801aab8 <_printf_float+0x188>
 801aa34:	f1a9 0902 	sub.w	r9, r9, #2
 801aa38:	fa5f f989 	uxtb.w	r9, r9
 801aa3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801aa40:	d820      	bhi.n	801aa84 <_printf_float+0x154>
 801aa42:	3901      	subs	r1, #1
 801aa44:	464a      	mov	r2, r9
 801aa46:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801aa4a:	9107      	str	r1, [sp, #28]
 801aa4c:	f7ff ff30 	bl	801a8b0 <__exponent>
 801aa50:	9a08      	ldr	r2, [sp, #32]
 801aa52:	9004      	str	r0, [sp, #16]
 801aa54:	1813      	adds	r3, r2, r0
 801aa56:	2a01      	cmp	r2, #1
 801aa58:	6123      	str	r3, [r4, #16]
 801aa5a:	dc02      	bgt.n	801aa62 <_printf_float+0x132>
 801aa5c:	6822      	ldr	r2, [r4, #0]
 801aa5e:	07d2      	lsls	r2, r2, #31
 801aa60:	d501      	bpl.n	801aa66 <_printf_float+0x136>
 801aa62:	3301      	adds	r3, #1
 801aa64:	6123      	str	r3, [r4, #16]
 801aa66:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d0a2      	beq.n	801a9b4 <_printf_float+0x84>
 801aa6e:	232d      	movs	r3, #45	; 0x2d
 801aa70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa74:	e79e      	b.n	801a9b4 <_printf_float+0x84>
 801aa76:	9904      	ldr	r1, [sp, #16]
 801aa78:	2947      	cmp	r1, #71	; 0x47
 801aa7a:	d1c1      	bne.n	801aa00 <_printf_float+0xd0>
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d1bf      	bne.n	801aa00 <_printf_float+0xd0>
 801aa80:	2301      	movs	r3, #1
 801aa82:	e7bc      	b.n	801a9fe <_printf_float+0xce>
 801aa84:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801aa88:	d118      	bne.n	801aabc <_printf_float+0x18c>
 801aa8a:	2900      	cmp	r1, #0
 801aa8c:	6863      	ldr	r3, [r4, #4]
 801aa8e:	dd0b      	ble.n	801aaa8 <_printf_float+0x178>
 801aa90:	6121      	str	r1, [r4, #16]
 801aa92:	b913      	cbnz	r3, 801aa9a <_printf_float+0x16a>
 801aa94:	6822      	ldr	r2, [r4, #0]
 801aa96:	07d0      	lsls	r0, r2, #31
 801aa98:	d502      	bpl.n	801aaa0 <_printf_float+0x170>
 801aa9a:	3301      	adds	r3, #1
 801aa9c:	440b      	add	r3, r1
 801aa9e:	6123      	str	r3, [r4, #16]
 801aaa0:	2300      	movs	r3, #0
 801aaa2:	65a1      	str	r1, [r4, #88]	; 0x58
 801aaa4:	9304      	str	r3, [sp, #16]
 801aaa6:	e7de      	b.n	801aa66 <_printf_float+0x136>
 801aaa8:	b913      	cbnz	r3, 801aab0 <_printf_float+0x180>
 801aaaa:	6822      	ldr	r2, [r4, #0]
 801aaac:	07d2      	lsls	r2, r2, #31
 801aaae:	d501      	bpl.n	801aab4 <_printf_float+0x184>
 801aab0:	3302      	adds	r3, #2
 801aab2:	e7f4      	b.n	801aa9e <_printf_float+0x16e>
 801aab4:	2301      	movs	r3, #1
 801aab6:	e7f2      	b.n	801aa9e <_printf_float+0x16e>
 801aab8:	f04f 0967 	mov.w	r9, #103	; 0x67
 801aabc:	9b08      	ldr	r3, [sp, #32]
 801aabe:	4299      	cmp	r1, r3
 801aac0:	db05      	blt.n	801aace <_printf_float+0x19e>
 801aac2:	6823      	ldr	r3, [r4, #0]
 801aac4:	6121      	str	r1, [r4, #16]
 801aac6:	07d8      	lsls	r0, r3, #31
 801aac8:	d5ea      	bpl.n	801aaa0 <_printf_float+0x170>
 801aaca:	1c4b      	adds	r3, r1, #1
 801aacc:	e7e7      	b.n	801aa9e <_printf_float+0x16e>
 801aace:	2900      	cmp	r1, #0
 801aad0:	bfd4      	ite	le
 801aad2:	f1c1 0202 	rsble	r2, r1, #2
 801aad6:	2201      	movgt	r2, #1
 801aad8:	4413      	add	r3, r2
 801aada:	e7e0      	b.n	801aa9e <_printf_float+0x16e>
 801aadc:	6823      	ldr	r3, [r4, #0]
 801aade:	055a      	lsls	r2, r3, #21
 801aae0:	d407      	bmi.n	801aaf2 <_printf_float+0x1c2>
 801aae2:	6923      	ldr	r3, [r4, #16]
 801aae4:	4642      	mov	r2, r8
 801aae6:	4631      	mov	r1, r6
 801aae8:	4628      	mov	r0, r5
 801aaea:	47b8      	blx	r7
 801aaec:	3001      	adds	r0, #1
 801aaee:	d12a      	bne.n	801ab46 <_printf_float+0x216>
 801aaf0:	e76a      	b.n	801a9c8 <_printf_float+0x98>
 801aaf2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801aaf6:	f240 80e0 	bls.w	801acba <_printf_float+0x38a>
 801aafa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801aafe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ab02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab06:	d133      	bne.n	801ab70 <_printf_float+0x240>
 801ab08:	4a37      	ldr	r2, [pc, #220]	; (801abe8 <_printf_float+0x2b8>)
 801ab0a:	2301      	movs	r3, #1
 801ab0c:	4631      	mov	r1, r6
 801ab0e:	4628      	mov	r0, r5
 801ab10:	47b8      	blx	r7
 801ab12:	3001      	adds	r0, #1
 801ab14:	f43f af58 	beq.w	801a9c8 <_printf_float+0x98>
 801ab18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ab1c:	429a      	cmp	r2, r3
 801ab1e:	db02      	blt.n	801ab26 <_printf_float+0x1f6>
 801ab20:	6823      	ldr	r3, [r4, #0]
 801ab22:	07d8      	lsls	r0, r3, #31
 801ab24:	d50f      	bpl.n	801ab46 <_printf_float+0x216>
 801ab26:	4653      	mov	r3, sl
 801ab28:	465a      	mov	r2, fp
 801ab2a:	4631      	mov	r1, r6
 801ab2c:	4628      	mov	r0, r5
 801ab2e:	47b8      	blx	r7
 801ab30:	3001      	adds	r0, #1
 801ab32:	f43f af49 	beq.w	801a9c8 <_printf_float+0x98>
 801ab36:	f04f 0800 	mov.w	r8, #0
 801ab3a:	f104 091a 	add.w	r9, r4, #26
 801ab3e:	9b08      	ldr	r3, [sp, #32]
 801ab40:	3b01      	subs	r3, #1
 801ab42:	4543      	cmp	r3, r8
 801ab44:	dc09      	bgt.n	801ab5a <_printf_float+0x22a>
 801ab46:	6823      	ldr	r3, [r4, #0]
 801ab48:	079b      	lsls	r3, r3, #30
 801ab4a:	f100 8106 	bmi.w	801ad5a <_printf_float+0x42a>
 801ab4e:	68e0      	ldr	r0, [r4, #12]
 801ab50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab52:	4298      	cmp	r0, r3
 801ab54:	bfb8      	it	lt
 801ab56:	4618      	movlt	r0, r3
 801ab58:	e738      	b.n	801a9cc <_printf_float+0x9c>
 801ab5a:	2301      	movs	r3, #1
 801ab5c:	464a      	mov	r2, r9
 801ab5e:	4631      	mov	r1, r6
 801ab60:	4628      	mov	r0, r5
 801ab62:	47b8      	blx	r7
 801ab64:	3001      	adds	r0, #1
 801ab66:	f43f af2f 	beq.w	801a9c8 <_printf_float+0x98>
 801ab6a:	f108 0801 	add.w	r8, r8, #1
 801ab6e:	e7e6      	b.n	801ab3e <_printf_float+0x20e>
 801ab70:	9b07      	ldr	r3, [sp, #28]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	dc3a      	bgt.n	801abec <_printf_float+0x2bc>
 801ab76:	4a1c      	ldr	r2, [pc, #112]	; (801abe8 <_printf_float+0x2b8>)
 801ab78:	2301      	movs	r3, #1
 801ab7a:	4631      	mov	r1, r6
 801ab7c:	4628      	mov	r0, r5
 801ab7e:	47b8      	blx	r7
 801ab80:	3001      	adds	r0, #1
 801ab82:	f43f af21 	beq.w	801a9c8 <_printf_float+0x98>
 801ab86:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801ab8a:	4313      	orrs	r3, r2
 801ab8c:	d102      	bne.n	801ab94 <_printf_float+0x264>
 801ab8e:	6823      	ldr	r3, [r4, #0]
 801ab90:	07d9      	lsls	r1, r3, #31
 801ab92:	d5d8      	bpl.n	801ab46 <_printf_float+0x216>
 801ab94:	4653      	mov	r3, sl
 801ab96:	465a      	mov	r2, fp
 801ab98:	4631      	mov	r1, r6
 801ab9a:	4628      	mov	r0, r5
 801ab9c:	47b8      	blx	r7
 801ab9e:	3001      	adds	r0, #1
 801aba0:	f43f af12 	beq.w	801a9c8 <_printf_float+0x98>
 801aba4:	f04f 0900 	mov.w	r9, #0
 801aba8:	f104 0a1a 	add.w	sl, r4, #26
 801abac:	9b07      	ldr	r3, [sp, #28]
 801abae:	425b      	negs	r3, r3
 801abb0:	454b      	cmp	r3, r9
 801abb2:	dc01      	bgt.n	801abb8 <_printf_float+0x288>
 801abb4:	9b08      	ldr	r3, [sp, #32]
 801abb6:	e795      	b.n	801aae4 <_printf_float+0x1b4>
 801abb8:	2301      	movs	r3, #1
 801abba:	4652      	mov	r2, sl
 801abbc:	4631      	mov	r1, r6
 801abbe:	4628      	mov	r0, r5
 801abc0:	47b8      	blx	r7
 801abc2:	3001      	adds	r0, #1
 801abc4:	f43f af00 	beq.w	801a9c8 <_printf_float+0x98>
 801abc8:	f109 0901 	add.w	r9, r9, #1
 801abcc:	e7ee      	b.n	801abac <_printf_float+0x27c>
 801abce:	bf00      	nop
 801abd0:	ffffffff 	.word	0xffffffff
 801abd4:	7fefffff 	.word	0x7fefffff
 801abd8:	08020714 	.word	0x08020714
 801abdc:	08020718 	.word	0x08020718
 801abe0:	0802071c 	.word	0x0802071c
 801abe4:	08020720 	.word	0x08020720
 801abe8:	08020724 	.word	0x08020724
 801abec:	9a08      	ldr	r2, [sp, #32]
 801abee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801abf0:	429a      	cmp	r2, r3
 801abf2:	bfa8      	it	ge
 801abf4:	461a      	movge	r2, r3
 801abf6:	2a00      	cmp	r2, #0
 801abf8:	4691      	mov	r9, r2
 801abfa:	dc38      	bgt.n	801ac6e <_printf_float+0x33e>
 801abfc:	2300      	movs	r3, #0
 801abfe:	9305      	str	r3, [sp, #20]
 801ac00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ac04:	f104 021a 	add.w	r2, r4, #26
 801ac08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ac0a:	9905      	ldr	r1, [sp, #20]
 801ac0c:	9304      	str	r3, [sp, #16]
 801ac0e:	eba3 0309 	sub.w	r3, r3, r9
 801ac12:	428b      	cmp	r3, r1
 801ac14:	dc33      	bgt.n	801ac7e <_printf_float+0x34e>
 801ac16:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ac1a:	429a      	cmp	r2, r3
 801ac1c:	db3c      	blt.n	801ac98 <_printf_float+0x368>
 801ac1e:	6823      	ldr	r3, [r4, #0]
 801ac20:	07da      	lsls	r2, r3, #31
 801ac22:	d439      	bmi.n	801ac98 <_printf_float+0x368>
 801ac24:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801ac28:	eba2 0903 	sub.w	r9, r2, r3
 801ac2c:	9b04      	ldr	r3, [sp, #16]
 801ac2e:	1ad2      	subs	r2, r2, r3
 801ac30:	4591      	cmp	r9, r2
 801ac32:	bfa8      	it	ge
 801ac34:	4691      	movge	r9, r2
 801ac36:	f1b9 0f00 	cmp.w	r9, #0
 801ac3a:	dc35      	bgt.n	801aca8 <_printf_float+0x378>
 801ac3c:	f04f 0800 	mov.w	r8, #0
 801ac40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ac44:	f104 0a1a 	add.w	sl, r4, #26
 801ac48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ac4c:	1a9b      	subs	r3, r3, r2
 801ac4e:	eba3 0309 	sub.w	r3, r3, r9
 801ac52:	4543      	cmp	r3, r8
 801ac54:	f77f af77 	ble.w	801ab46 <_printf_float+0x216>
 801ac58:	2301      	movs	r3, #1
 801ac5a:	4652      	mov	r2, sl
 801ac5c:	4631      	mov	r1, r6
 801ac5e:	4628      	mov	r0, r5
 801ac60:	47b8      	blx	r7
 801ac62:	3001      	adds	r0, #1
 801ac64:	f43f aeb0 	beq.w	801a9c8 <_printf_float+0x98>
 801ac68:	f108 0801 	add.w	r8, r8, #1
 801ac6c:	e7ec      	b.n	801ac48 <_printf_float+0x318>
 801ac6e:	4613      	mov	r3, r2
 801ac70:	4631      	mov	r1, r6
 801ac72:	4642      	mov	r2, r8
 801ac74:	4628      	mov	r0, r5
 801ac76:	47b8      	blx	r7
 801ac78:	3001      	adds	r0, #1
 801ac7a:	d1bf      	bne.n	801abfc <_printf_float+0x2cc>
 801ac7c:	e6a4      	b.n	801a9c8 <_printf_float+0x98>
 801ac7e:	2301      	movs	r3, #1
 801ac80:	4631      	mov	r1, r6
 801ac82:	4628      	mov	r0, r5
 801ac84:	9204      	str	r2, [sp, #16]
 801ac86:	47b8      	blx	r7
 801ac88:	3001      	adds	r0, #1
 801ac8a:	f43f ae9d 	beq.w	801a9c8 <_printf_float+0x98>
 801ac8e:	9b05      	ldr	r3, [sp, #20]
 801ac90:	9a04      	ldr	r2, [sp, #16]
 801ac92:	3301      	adds	r3, #1
 801ac94:	9305      	str	r3, [sp, #20]
 801ac96:	e7b7      	b.n	801ac08 <_printf_float+0x2d8>
 801ac98:	4653      	mov	r3, sl
 801ac9a:	465a      	mov	r2, fp
 801ac9c:	4631      	mov	r1, r6
 801ac9e:	4628      	mov	r0, r5
 801aca0:	47b8      	blx	r7
 801aca2:	3001      	adds	r0, #1
 801aca4:	d1be      	bne.n	801ac24 <_printf_float+0x2f4>
 801aca6:	e68f      	b.n	801a9c8 <_printf_float+0x98>
 801aca8:	9a04      	ldr	r2, [sp, #16]
 801acaa:	464b      	mov	r3, r9
 801acac:	4442      	add	r2, r8
 801acae:	4631      	mov	r1, r6
 801acb0:	4628      	mov	r0, r5
 801acb2:	47b8      	blx	r7
 801acb4:	3001      	adds	r0, #1
 801acb6:	d1c1      	bne.n	801ac3c <_printf_float+0x30c>
 801acb8:	e686      	b.n	801a9c8 <_printf_float+0x98>
 801acba:	9a08      	ldr	r2, [sp, #32]
 801acbc:	2a01      	cmp	r2, #1
 801acbe:	dc01      	bgt.n	801acc4 <_printf_float+0x394>
 801acc0:	07db      	lsls	r3, r3, #31
 801acc2:	d537      	bpl.n	801ad34 <_printf_float+0x404>
 801acc4:	2301      	movs	r3, #1
 801acc6:	4642      	mov	r2, r8
 801acc8:	4631      	mov	r1, r6
 801acca:	4628      	mov	r0, r5
 801accc:	47b8      	blx	r7
 801acce:	3001      	adds	r0, #1
 801acd0:	f43f ae7a 	beq.w	801a9c8 <_printf_float+0x98>
 801acd4:	4653      	mov	r3, sl
 801acd6:	465a      	mov	r2, fp
 801acd8:	4631      	mov	r1, r6
 801acda:	4628      	mov	r0, r5
 801acdc:	47b8      	blx	r7
 801acde:	3001      	adds	r0, #1
 801ace0:	f43f ae72 	beq.w	801a9c8 <_printf_float+0x98>
 801ace4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ace8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801acec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acf0:	9b08      	ldr	r3, [sp, #32]
 801acf2:	d01a      	beq.n	801ad2a <_printf_float+0x3fa>
 801acf4:	3b01      	subs	r3, #1
 801acf6:	f108 0201 	add.w	r2, r8, #1
 801acfa:	4631      	mov	r1, r6
 801acfc:	4628      	mov	r0, r5
 801acfe:	47b8      	blx	r7
 801ad00:	3001      	adds	r0, #1
 801ad02:	d10e      	bne.n	801ad22 <_printf_float+0x3f2>
 801ad04:	e660      	b.n	801a9c8 <_printf_float+0x98>
 801ad06:	2301      	movs	r3, #1
 801ad08:	464a      	mov	r2, r9
 801ad0a:	4631      	mov	r1, r6
 801ad0c:	4628      	mov	r0, r5
 801ad0e:	47b8      	blx	r7
 801ad10:	3001      	adds	r0, #1
 801ad12:	f43f ae59 	beq.w	801a9c8 <_printf_float+0x98>
 801ad16:	f108 0801 	add.w	r8, r8, #1
 801ad1a:	9b08      	ldr	r3, [sp, #32]
 801ad1c:	3b01      	subs	r3, #1
 801ad1e:	4543      	cmp	r3, r8
 801ad20:	dcf1      	bgt.n	801ad06 <_printf_float+0x3d6>
 801ad22:	9b04      	ldr	r3, [sp, #16]
 801ad24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ad28:	e6dd      	b.n	801aae6 <_printf_float+0x1b6>
 801ad2a:	f04f 0800 	mov.w	r8, #0
 801ad2e:	f104 091a 	add.w	r9, r4, #26
 801ad32:	e7f2      	b.n	801ad1a <_printf_float+0x3ea>
 801ad34:	2301      	movs	r3, #1
 801ad36:	4642      	mov	r2, r8
 801ad38:	e7df      	b.n	801acfa <_printf_float+0x3ca>
 801ad3a:	2301      	movs	r3, #1
 801ad3c:	464a      	mov	r2, r9
 801ad3e:	4631      	mov	r1, r6
 801ad40:	4628      	mov	r0, r5
 801ad42:	47b8      	blx	r7
 801ad44:	3001      	adds	r0, #1
 801ad46:	f43f ae3f 	beq.w	801a9c8 <_printf_float+0x98>
 801ad4a:	f108 0801 	add.w	r8, r8, #1
 801ad4e:	68e3      	ldr	r3, [r4, #12]
 801ad50:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ad52:	1a5b      	subs	r3, r3, r1
 801ad54:	4543      	cmp	r3, r8
 801ad56:	dcf0      	bgt.n	801ad3a <_printf_float+0x40a>
 801ad58:	e6f9      	b.n	801ab4e <_printf_float+0x21e>
 801ad5a:	f04f 0800 	mov.w	r8, #0
 801ad5e:	f104 0919 	add.w	r9, r4, #25
 801ad62:	e7f4      	b.n	801ad4e <_printf_float+0x41e>

0801ad64 <_printf_common>:
 801ad64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad68:	4616      	mov	r6, r2
 801ad6a:	4699      	mov	r9, r3
 801ad6c:	688a      	ldr	r2, [r1, #8]
 801ad6e:	690b      	ldr	r3, [r1, #16]
 801ad70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ad74:	4293      	cmp	r3, r2
 801ad76:	bfb8      	it	lt
 801ad78:	4613      	movlt	r3, r2
 801ad7a:	6033      	str	r3, [r6, #0]
 801ad7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ad80:	4607      	mov	r7, r0
 801ad82:	460c      	mov	r4, r1
 801ad84:	b10a      	cbz	r2, 801ad8a <_printf_common+0x26>
 801ad86:	3301      	adds	r3, #1
 801ad88:	6033      	str	r3, [r6, #0]
 801ad8a:	6823      	ldr	r3, [r4, #0]
 801ad8c:	0699      	lsls	r1, r3, #26
 801ad8e:	bf42      	ittt	mi
 801ad90:	6833      	ldrmi	r3, [r6, #0]
 801ad92:	3302      	addmi	r3, #2
 801ad94:	6033      	strmi	r3, [r6, #0]
 801ad96:	6825      	ldr	r5, [r4, #0]
 801ad98:	f015 0506 	ands.w	r5, r5, #6
 801ad9c:	d106      	bne.n	801adac <_printf_common+0x48>
 801ad9e:	f104 0a19 	add.w	sl, r4, #25
 801ada2:	68e3      	ldr	r3, [r4, #12]
 801ada4:	6832      	ldr	r2, [r6, #0]
 801ada6:	1a9b      	subs	r3, r3, r2
 801ada8:	42ab      	cmp	r3, r5
 801adaa:	dc26      	bgt.n	801adfa <_printf_common+0x96>
 801adac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801adb0:	1e13      	subs	r3, r2, #0
 801adb2:	6822      	ldr	r2, [r4, #0]
 801adb4:	bf18      	it	ne
 801adb6:	2301      	movne	r3, #1
 801adb8:	0692      	lsls	r2, r2, #26
 801adba:	d42b      	bmi.n	801ae14 <_printf_common+0xb0>
 801adbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801adc0:	4649      	mov	r1, r9
 801adc2:	4638      	mov	r0, r7
 801adc4:	47c0      	blx	r8
 801adc6:	3001      	adds	r0, #1
 801adc8:	d01e      	beq.n	801ae08 <_printf_common+0xa4>
 801adca:	6823      	ldr	r3, [r4, #0]
 801adcc:	6922      	ldr	r2, [r4, #16]
 801adce:	f003 0306 	and.w	r3, r3, #6
 801add2:	2b04      	cmp	r3, #4
 801add4:	bf02      	ittt	eq
 801add6:	68e5      	ldreq	r5, [r4, #12]
 801add8:	6833      	ldreq	r3, [r6, #0]
 801adda:	1aed      	subeq	r5, r5, r3
 801addc:	68a3      	ldr	r3, [r4, #8]
 801adde:	bf0c      	ite	eq
 801ade0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ade4:	2500      	movne	r5, #0
 801ade6:	4293      	cmp	r3, r2
 801ade8:	bfc4      	itt	gt
 801adea:	1a9b      	subgt	r3, r3, r2
 801adec:	18ed      	addgt	r5, r5, r3
 801adee:	2600      	movs	r6, #0
 801adf0:	341a      	adds	r4, #26
 801adf2:	42b5      	cmp	r5, r6
 801adf4:	d11a      	bne.n	801ae2c <_printf_common+0xc8>
 801adf6:	2000      	movs	r0, #0
 801adf8:	e008      	b.n	801ae0c <_printf_common+0xa8>
 801adfa:	2301      	movs	r3, #1
 801adfc:	4652      	mov	r2, sl
 801adfe:	4649      	mov	r1, r9
 801ae00:	4638      	mov	r0, r7
 801ae02:	47c0      	blx	r8
 801ae04:	3001      	adds	r0, #1
 801ae06:	d103      	bne.n	801ae10 <_printf_common+0xac>
 801ae08:	f04f 30ff 	mov.w	r0, #4294967295
 801ae0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae10:	3501      	adds	r5, #1
 801ae12:	e7c6      	b.n	801ada2 <_printf_common+0x3e>
 801ae14:	18e1      	adds	r1, r4, r3
 801ae16:	1c5a      	adds	r2, r3, #1
 801ae18:	2030      	movs	r0, #48	; 0x30
 801ae1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ae1e:	4422      	add	r2, r4
 801ae20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ae24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ae28:	3302      	adds	r3, #2
 801ae2a:	e7c7      	b.n	801adbc <_printf_common+0x58>
 801ae2c:	2301      	movs	r3, #1
 801ae2e:	4622      	mov	r2, r4
 801ae30:	4649      	mov	r1, r9
 801ae32:	4638      	mov	r0, r7
 801ae34:	47c0      	blx	r8
 801ae36:	3001      	adds	r0, #1
 801ae38:	d0e6      	beq.n	801ae08 <_printf_common+0xa4>
 801ae3a:	3601      	adds	r6, #1
 801ae3c:	e7d9      	b.n	801adf2 <_printf_common+0x8e>
	...

0801ae40 <_printf_i>:
 801ae40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ae44:	7e0f      	ldrb	r7, [r1, #24]
 801ae46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ae48:	2f78      	cmp	r7, #120	; 0x78
 801ae4a:	4691      	mov	r9, r2
 801ae4c:	4680      	mov	r8, r0
 801ae4e:	460c      	mov	r4, r1
 801ae50:	469a      	mov	sl, r3
 801ae52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ae56:	d807      	bhi.n	801ae68 <_printf_i+0x28>
 801ae58:	2f62      	cmp	r7, #98	; 0x62
 801ae5a:	d80a      	bhi.n	801ae72 <_printf_i+0x32>
 801ae5c:	2f00      	cmp	r7, #0
 801ae5e:	f000 80d4 	beq.w	801b00a <_printf_i+0x1ca>
 801ae62:	2f58      	cmp	r7, #88	; 0x58
 801ae64:	f000 80c0 	beq.w	801afe8 <_printf_i+0x1a8>
 801ae68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ae6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ae70:	e03a      	b.n	801aee8 <_printf_i+0xa8>
 801ae72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ae76:	2b15      	cmp	r3, #21
 801ae78:	d8f6      	bhi.n	801ae68 <_printf_i+0x28>
 801ae7a:	a101      	add	r1, pc, #4	; (adr r1, 801ae80 <_printf_i+0x40>)
 801ae7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ae80:	0801aed9 	.word	0x0801aed9
 801ae84:	0801aeed 	.word	0x0801aeed
 801ae88:	0801ae69 	.word	0x0801ae69
 801ae8c:	0801ae69 	.word	0x0801ae69
 801ae90:	0801ae69 	.word	0x0801ae69
 801ae94:	0801ae69 	.word	0x0801ae69
 801ae98:	0801aeed 	.word	0x0801aeed
 801ae9c:	0801ae69 	.word	0x0801ae69
 801aea0:	0801ae69 	.word	0x0801ae69
 801aea4:	0801ae69 	.word	0x0801ae69
 801aea8:	0801ae69 	.word	0x0801ae69
 801aeac:	0801aff1 	.word	0x0801aff1
 801aeb0:	0801af19 	.word	0x0801af19
 801aeb4:	0801afab 	.word	0x0801afab
 801aeb8:	0801ae69 	.word	0x0801ae69
 801aebc:	0801ae69 	.word	0x0801ae69
 801aec0:	0801b013 	.word	0x0801b013
 801aec4:	0801ae69 	.word	0x0801ae69
 801aec8:	0801af19 	.word	0x0801af19
 801aecc:	0801ae69 	.word	0x0801ae69
 801aed0:	0801ae69 	.word	0x0801ae69
 801aed4:	0801afb3 	.word	0x0801afb3
 801aed8:	682b      	ldr	r3, [r5, #0]
 801aeda:	1d1a      	adds	r2, r3, #4
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	602a      	str	r2, [r5, #0]
 801aee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aee8:	2301      	movs	r3, #1
 801aeea:	e09f      	b.n	801b02c <_printf_i+0x1ec>
 801aeec:	6820      	ldr	r0, [r4, #0]
 801aeee:	682b      	ldr	r3, [r5, #0]
 801aef0:	0607      	lsls	r7, r0, #24
 801aef2:	f103 0104 	add.w	r1, r3, #4
 801aef6:	6029      	str	r1, [r5, #0]
 801aef8:	d501      	bpl.n	801aefe <_printf_i+0xbe>
 801aefa:	681e      	ldr	r6, [r3, #0]
 801aefc:	e003      	b.n	801af06 <_printf_i+0xc6>
 801aefe:	0646      	lsls	r6, r0, #25
 801af00:	d5fb      	bpl.n	801aefa <_printf_i+0xba>
 801af02:	f9b3 6000 	ldrsh.w	r6, [r3]
 801af06:	2e00      	cmp	r6, #0
 801af08:	da03      	bge.n	801af12 <_printf_i+0xd2>
 801af0a:	232d      	movs	r3, #45	; 0x2d
 801af0c:	4276      	negs	r6, r6
 801af0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af12:	485a      	ldr	r0, [pc, #360]	; (801b07c <_printf_i+0x23c>)
 801af14:	230a      	movs	r3, #10
 801af16:	e012      	b.n	801af3e <_printf_i+0xfe>
 801af18:	682b      	ldr	r3, [r5, #0]
 801af1a:	6820      	ldr	r0, [r4, #0]
 801af1c:	1d19      	adds	r1, r3, #4
 801af1e:	6029      	str	r1, [r5, #0]
 801af20:	0605      	lsls	r5, r0, #24
 801af22:	d501      	bpl.n	801af28 <_printf_i+0xe8>
 801af24:	681e      	ldr	r6, [r3, #0]
 801af26:	e002      	b.n	801af2e <_printf_i+0xee>
 801af28:	0641      	lsls	r1, r0, #25
 801af2a:	d5fb      	bpl.n	801af24 <_printf_i+0xe4>
 801af2c:	881e      	ldrh	r6, [r3, #0]
 801af2e:	4853      	ldr	r0, [pc, #332]	; (801b07c <_printf_i+0x23c>)
 801af30:	2f6f      	cmp	r7, #111	; 0x6f
 801af32:	bf0c      	ite	eq
 801af34:	2308      	moveq	r3, #8
 801af36:	230a      	movne	r3, #10
 801af38:	2100      	movs	r1, #0
 801af3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801af3e:	6865      	ldr	r5, [r4, #4]
 801af40:	60a5      	str	r5, [r4, #8]
 801af42:	2d00      	cmp	r5, #0
 801af44:	bfa2      	ittt	ge
 801af46:	6821      	ldrge	r1, [r4, #0]
 801af48:	f021 0104 	bicge.w	r1, r1, #4
 801af4c:	6021      	strge	r1, [r4, #0]
 801af4e:	b90e      	cbnz	r6, 801af54 <_printf_i+0x114>
 801af50:	2d00      	cmp	r5, #0
 801af52:	d04b      	beq.n	801afec <_printf_i+0x1ac>
 801af54:	4615      	mov	r5, r2
 801af56:	fbb6 f1f3 	udiv	r1, r6, r3
 801af5a:	fb03 6711 	mls	r7, r3, r1, r6
 801af5e:	5dc7      	ldrb	r7, [r0, r7]
 801af60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801af64:	4637      	mov	r7, r6
 801af66:	42bb      	cmp	r3, r7
 801af68:	460e      	mov	r6, r1
 801af6a:	d9f4      	bls.n	801af56 <_printf_i+0x116>
 801af6c:	2b08      	cmp	r3, #8
 801af6e:	d10b      	bne.n	801af88 <_printf_i+0x148>
 801af70:	6823      	ldr	r3, [r4, #0]
 801af72:	07de      	lsls	r6, r3, #31
 801af74:	d508      	bpl.n	801af88 <_printf_i+0x148>
 801af76:	6923      	ldr	r3, [r4, #16]
 801af78:	6861      	ldr	r1, [r4, #4]
 801af7a:	4299      	cmp	r1, r3
 801af7c:	bfde      	ittt	le
 801af7e:	2330      	movle	r3, #48	; 0x30
 801af80:	f805 3c01 	strble.w	r3, [r5, #-1]
 801af84:	f105 35ff 	addle.w	r5, r5, #4294967295
 801af88:	1b52      	subs	r2, r2, r5
 801af8a:	6122      	str	r2, [r4, #16]
 801af8c:	f8cd a000 	str.w	sl, [sp]
 801af90:	464b      	mov	r3, r9
 801af92:	aa03      	add	r2, sp, #12
 801af94:	4621      	mov	r1, r4
 801af96:	4640      	mov	r0, r8
 801af98:	f7ff fee4 	bl	801ad64 <_printf_common>
 801af9c:	3001      	adds	r0, #1
 801af9e:	d14a      	bne.n	801b036 <_printf_i+0x1f6>
 801afa0:	f04f 30ff 	mov.w	r0, #4294967295
 801afa4:	b004      	add	sp, #16
 801afa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afaa:	6823      	ldr	r3, [r4, #0]
 801afac:	f043 0320 	orr.w	r3, r3, #32
 801afb0:	6023      	str	r3, [r4, #0]
 801afb2:	4833      	ldr	r0, [pc, #204]	; (801b080 <_printf_i+0x240>)
 801afb4:	2778      	movs	r7, #120	; 0x78
 801afb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801afba:	6823      	ldr	r3, [r4, #0]
 801afbc:	6829      	ldr	r1, [r5, #0]
 801afbe:	061f      	lsls	r7, r3, #24
 801afc0:	f851 6b04 	ldr.w	r6, [r1], #4
 801afc4:	d402      	bmi.n	801afcc <_printf_i+0x18c>
 801afc6:	065f      	lsls	r7, r3, #25
 801afc8:	bf48      	it	mi
 801afca:	b2b6      	uxthmi	r6, r6
 801afcc:	07df      	lsls	r7, r3, #31
 801afce:	bf48      	it	mi
 801afd0:	f043 0320 	orrmi.w	r3, r3, #32
 801afd4:	6029      	str	r1, [r5, #0]
 801afd6:	bf48      	it	mi
 801afd8:	6023      	strmi	r3, [r4, #0]
 801afda:	b91e      	cbnz	r6, 801afe4 <_printf_i+0x1a4>
 801afdc:	6823      	ldr	r3, [r4, #0]
 801afde:	f023 0320 	bic.w	r3, r3, #32
 801afe2:	6023      	str	r3, [r4, #0]
 801afe4:	2310      	movs	r3, #16
 801afe6:	e7a7      	b.n	801af38 <_printf_i+0xf8>
 801afe8:	4824      	ldr	r0, [pc, #144]	; (801b07c <_printf_i+0x23c>)
 801afea:	e7e4      	b.n	801afb6 <_printf_i+0x176>
 801afec:	4615      	mov	r5, r2
 801afee:	e7bd      	b.n	801af6c <_printf_i+0x12c>
 801aff0:	682b      	ldr	r3, [r5, #0]
 801aff2:	6826      	ldr	r6, [r4, #0]
 801aff4:	6961      	ldr	r1, [r4, #20]
 801aff6:	1d18      	adds	r0, r3, #4
 801aff8:	6028      	str	r0, [r5, #0]
 801affa:	0635      	lsls	r5, r6, #24
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	d501      	bpl.n	801b004 <_printf_i+0x1c4>
 801b000:	6019      	str	r1, [r3, #0]
 801b002:	e002      	b.n	801b00a <_printf_i+0x1ca>
 801b004:	0670      	lsls	r0, r6, #25
 801b006:	d5fb      	bpl.n	801b000 <_printf_i+0x1c0>
 801b008:	8019      	strh	r1, [r3, #0]
 801b00a:	2300      	movs	r3, #0
 801b00c:	6123      	str	r3, [r4, #16]
 801b00e:	4615      	mov	r5, r2
 801b010:	e7bc      	b.n	801af8c <_printf_i+0x14c>
 801b012:	682b      	ldr	r3, [r5, #0]
 801b014:	1d1a      	adds	r2, r3, #4
 801b016:	602a      	str	r2, [r5, #0]
 801b018:	681d      	ldr	r5, [r3, #0]
 801b01a:	6862      	ldr	r2, [r4, #4]
 801b01c:	2100      	movs	r1, #0
 801b01e:	4628      	mov	r0, r5
 801b020:	f7e5 f90e 	bl	8000240 <memchr>
 801b024:	b108      	cbz	r0, 801b02a <_printf_i+0x1ea>
 801b026:	1b40      	subs	r0, r0, r5
 801b028:	6060      	str	r0, [r4, #4]
 801b02a:	6863      	ldr	r3, [r4, #4]
 801b02c:	6123      	str	r3, [r4, #16]
 801b02e:	2300      	movs	r3, #0
 801b030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b034:	e7aa      	b.n	801af8c <_printf_i+0x14c>
 801b036:	6923      	ldr	r3, [r4, #16]
 801b038:	462a      	mov	r2, r5
 801b03a:	4649      	mov	r1, r9
 801b03c:	4640      	mov	r0, r8
 801b03e:	47d0      	blx	sl
 801b040:	3001      	adds	r0, #1
 801b042:	d0ad      	beq.n	801afa0 <_printf_i+0x160>
 801b044:	6823      	ldr	r3, [r4, #0]
 801b046:	079b      	lsls	r3, r3, #30
 801b048:	d413      	bmi.n	801b072 <_printf_i+0x232>
 801b04a:	68e0      	ldr	r0, [r4, #12]
 801b04c:	9b03      	ldr	r3, [sp, #12]
 801b04e:	4298      	cmp	r0, r3
 801b050:	bfb8      	it	lt
 801b052:	4618      	movlt	r0, r3
 801b054:	e7a6      	b.n	801afa4 <_printf_i+0x164>
 801b056:	2301      	movs	r3, #1
 801b058:	4632      	mov	r2, r6
 801b05a:	4649      	mov	r1, r9
 801b05c:	4640      	mov	r0, r8
 801b05e:	47d0      	blx	sl
 801b060:	3001      	adds	r0, #1
 801b062:	d09d      	beq.n	801afa0 <_printf_i+0x160>
 801b064:	3501      	adds	r5, #1
 801b066:	68e3      	ldr	r3, [r4, #12]
 801b068:	9903      	ldr	r1, [sp, #12]
 801b06a:	1a5b      	subs	r3, r3, r1
 801b06c:	42ab      	cmp	r3, r5
 801b06e:	dcf2      	bgt.n	801b056 <_printf_i+0x216>
 801b070:	e7eb      	b.n	801b04a <_printf_i+0x20a>
 801b072:	2500      	movs	r5, #0
 801b074:	f104 0619 	add.w	r6, r4, #25
 801b078:	e7f5      	b.n	801b066 <_printf_i+0x226>
 801b07a:	bf00      	nop
 801b07c:	08020726 	.word	0x08020726
 801b080:	08020737 	.word	0x08020737

0801b084 <std>:
 801b084:	2300      	movs	r3, #0
 801b086:	b510      	push	{r4, lr}
 801b088:	4604      	mov	r4, r0
 801b08a:	e9c0 3300 	strd	r3, r3, [r0]
 801b08e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b092:	6083      	str	r3, [r0, #8]
 801b094:	8181      	strh	r1, [r0, #12]
 801b096:	6643      	str	r3, [r0, #100]	; 0x64
 801b098:	81c2      	strh	r2, [r0, #14]
 801b09a:	6183      	str	r3, [r0, #24]
 801b09c:	4619      	mov	r1, r3
 801b09e:	2208      	movs	r2, #8
 801b0a0:	305c      	adds	r0, #92	; 0x5c
 801b0a2:	f000 f916 	bl	801b2d2 <memset>
 801b0a6:	4b0d      	ldr	r3, [pc, #52]	; (801b0dc <std+0x58>)
 801b0a8:	6263      	str	r3, [r4, #36]	; 0x24
 801b0aa:	4b0d      	ldr	r3, [pc, #52]	; (801b0e0 <std+0x5c>)
 801b0ac:	62a3      	str	r3, [r4, #40]	; 0x28
 801b0ae:	4b0d      	ldr	r3, [pc, #52]	; (801b0e4 <std+0x60>)
 801b0b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b0b2:	4b0d      	ldr	r3, [pc, #52]	; (801b0e8 <std+0x64>)
 801b0b4:	6323      	str	r3, [r4, #48]	; 0x30
 801b0b6:	4b0d      	ldr	r3, [pc, #52]	; (801b0ec <std+0x68>)
 801b0b8:	6224      	str	r4, [r4, #32]
 801b0ba:	429c      	cmp	r4, r3
 801b0bc:	d006      	beq.n	801b0cc <std+0x48>
 801b0be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b0c2:	4294      	cmp	r4, r2
 801b0c4:	d002      	beq.n	801b0cc <std+0x48>
 801b0c6:	33d0      	adds	r3, #208	; 0xd0
 801b0c8:	429c      	cmp	r4, r3
 801b0ca:	d105      	bne.n	801b0d8 <std+0x54>
 801b0cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0d4:	f000 b9ca 	b.w	801b46c <__retarget_lock_init_recursive>
 801b0d8:	bd10      	pop	{r4, pc}
 801b0da:	bf00      	nop
 801b0dc:	0801b22d 	.word	0x0801b22d
 801b0e0:	0801b24f 	.word	0x0801b24f
 801b0e4:	0801b287 	.word	0x0801b287
 801b0e8:	0801b2ab 	.word	0x0801b2ab
 801b0ec:	2001de44 	.word	0x2001de44

0801b0f0 <stdio_exit_handler>:
 801b0f0:	4a02      	ldr	r2, [pc, #8]	; (801b0fc <stdio_exit_handler+0xc>)
 801b0f2:	4903      	ldr	r1, [pc, #12]	; (801b100 <stdio_exit_handler+0x10>)
 801b0f4:	4803      	ldr	r0, [pc, #12]	; (801b104 <stdio_exit_handler+0x14>)
 801b0f6:	f000 b869 	b.w	801b1cc <_fwalk_sglue>
 801b0fa:	bf00      	nop
 801b0fc:	20000038 	.word	0x20000038
 801b100:	0801cd45 	.word	0x0801cd45
 801b104:	20000044 	.word	0x20000044

0801b108 <cleanup_stdio>:
 801b108:	6841      	ldr	r1, [r0, #4]
 801b10a:	4b0c      	ldr	r3, [pc, #48]	; (801b13c <cleanup_stdio+0x34>)
 801b10c:	4299      	cmp	r1, r3
 801b10e:	b510      	push	{r4, lr}
 801b110:	4604      	mov	r4, r0
 801b112:	d001      	beq.n	801b118 <cleanup_stdio+0x10>
 801b114:	f001 fe16 	bl	801cd44 <_fflush_r>
 801b118:	68a1      	ldr	r1, [r4, #8]
 801b11a:	4b09      	ldr	r3, [pc, #36]	; (801b140 <cleanup_stdio+0x38>)
 801b11c:	4299      	cmp	r1, r3
 801b11e:	d002      	beq.n	801b126 <cleanup_stdio+0x1e>
 801b120:	4620      	mov	r0, r4
 801b122:	f001 fe0f 	bl	801cd44 <_fflush_r>
 801b126:	68e1      	ldr	r1, [r4, #12]
 801b128:	4b06      	ldr	r3, [pc, #24]	; (801b144 <cleanup_stdio+0x3c>)
 801b12a:	4299      	cmp	r1, r3
 801b12c:	d004      	beq.n	801b138 <cleanup_stdio+0x30>
 801b12e:	4620      	mov	r0, r4
 801b130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b134:	f001 be06 	b.w	801cd44 <_fflush_r>
 801b138:	bd10      	pop	{r4, pc}
 801b13a:	bf00      	nop
 801b13c:	2001de44 	.word	0x2001de44
 801b140:	2001deac 	.word	0x2001deac
 801b144:	2001df14 	.word	0x2001df14

0801b148 <global_stdio_init.part.0>:
 801b148:	b510      	push	{r4, lr}
 801b14a:	4b0b      	ldr	r3, [pc, #44]	; (801b178 <global_stdio_init.part.0+0x30>)
 801b14c:	4c0b      	ldr	r4, [pc, #44]	; (801b17c <global_stdio_init.part.0+0x34>)
 801b14e:	4a0c      	ldr	r2, [pc, #48]	; (801b180 <global_stdio_init.part.0+0x38>)
 801b150:	601a      	str	r2, [r3, #0]
 801b152:	4620      	mov	r0, r4
 801b154:	2200      	movs	r2, #0
 801b156:	2104      	movs	r1, #4
 801b158:	f7ff ff94 	bl	801b084 <std>
 801b15c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b160:	2201      	movs	r2, #1
 801b162:	2109      	movs	r1, #9
 801b164:	f7ff ff8e 	bl	801b084 <std>
 801b168:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b16c:	2202      	movs	r2, #2
 801b16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b172:	2112      	movs	r1, #18
 801b174:	f7ff bf86 	b.w	801b084 <std>
 801b178:	2001df7c 	.word	0x2001df7c
 801b17c:	2001de44 	.word	0x2001de44
 801b180:	0801b0f1 	.word	0x0801b0f1

0801b184 <__sfp_lock_acquire>:
 801b184:	4801      	ldr	r0, [pc, #4]	; (801b18c <__sfp_lock_acquire+0x8>)
 801b186:	f000 b972 	b.w	801b46e <__retarget_lock_acquire_recursive>
 801b18a:	bf00      	nop
 801b18c:	2001df85 	.word	0x2001df85

0801b190 <__sfp_lock_release>:
 801b190:	4801      	ldr	r0, [pc, #4]	; (801b198 <__sfp_lock_release+0x8>)
 801b192:	f000 b96d 	b.w	801b470 <__retarget_lock_release_recursive>
 801b196:	bf00      	nop
 801b198:	2001df85 	.word	0x2001df85

0801b19c <__sinit>:
 801b19c:	b510      	push	{r4, lr}
 801b19e:	4604      	mov	r4, r0
 801b1a0:	f7ff fff0 	bl	801b184 <__sfp_lock_acquire>
 801b1a4:	6a23      	ldr	r3, [r4, #32]
 801b1a6:	b11b      	cbz	r3, 801b1b0 <__sinit+0x14>
 801b1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1ac:	f7ff bff0 	b.w	801b190 <__sfp_lock_release>
 801b1b0:	4b04      	ldr	r3, [pc, #16]	; (801b1c4 <__sinit+0x28>)
 801b1b2:	6223      	str	r3, [r4, #32]
 801b1b4:	4b04      	ldr	r3, [pc, #16]	; (801b1c8 <__sinit+0x2c>)
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d1f5      	bne.n	801b1a8 <__sinit+0xc>
 801b1bc:	f7ff ffc4 	bl	801b148 <global_stdio_init.part.0>
 801b1c0:	e7f2      	b.n	801b1a8 <__sinit+0xc>
 801b1c2:	bf00      	nop
 801b1c4:	0801b109 	.word	0x0801b109
 801b1c8:	2001df7c 	.word	0x2001df7c

0801b1cc <_fwalk_sglue>:
 801b1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1d0:	4607      	mov	r7, r0
 801b1d2:	4688      	mov	r8, r1
 801b1d4:	4614      	mov	r4, r2
 801b1d6:	2600      	movs	r6, #0
 801b1d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b1dc:	f1b9 0901 	subs.w	r9, r9, #1
 801b1e0:	d505      	bpl.n	801b1ee <_fwalk_sglue+0x22>
 801b1e2:	6824      	ldr	r4, [r4, #0]
 801b1e4:	2c00      	cmp	r4, #0
 801b1e6:	d1f7      	bne.n	801b1d8 <_fwalk_sglue+0xc>
 801b1e8:	4630      	mov	r0, r6
 801b1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1ee:	89ab      	ldrh	r3, [r5, #12]
 801b1f0:	2b01      	cmp	r3, #1
 801b1f2:	d907      	bls.n	801b204 <_fwalk_sglue+0x38>
 801b1f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b1f8:	3301      	adds	r3, #1
 801b1fa:	d003      	beq.n	801b204 <_fwalk_sglue+0x38>
 801b1fc:	4629      	mov	r1, r5
 801b1fe:	4638      	mov	r0, r7
 801b200:	47c0      	blx	r8
 801b202:	4306      	orrs	r6, r0
 801b204:	3568      	adds	r5, #104	; 0x68
 801b206:	e7e9      	b.n	801b1dc <_fwalk_sglue+0x10>

0801b208 <iprintf>:
 801b208:	b40f      	push	{r0, r1, r2, r3}
 801b20a:	b507      	push	{r0, r1, r2, lr}
 801b20c:	4906      	ldr	r1, [pc, #24]	; (801b228 <iprintf+0x20>)
 801b20e:	ab04      	add	r3, sp, #16
 801b210:	6808      	ldr	r0, [r1, #0]
 801b212:	f853 2b04 	ldr.w	r2, [r3], #4
 801b216:	6881      	ldr	r1, [r0, #8]
 801b218:	9301      	str	r3, [sp, #4]
 801b21a:	f001 fbf3 	bl	801ca04 <_vfiprintf_r>
 801b21e:	b003      	add	sp, #12
 801b220:	f85d eb04 	ldr.w	lr, [sp], #4
 801b224:	b004      	add	sp, #16
 801b226:	4770      	bx	lr
 801b228:	20000090 	.word	0x20000090

0801b22c <__sread>:
 801b22c:	b510      	push	{r4, lr}
 801b22e:	460c      	mov	r4, r1
 801b230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b234:	f000 f8d2 	bl	801b3dc <_read_r>
 801b238:	2800      	cmp	r0, #0
 801b23a:	bfab      	itete	ge
 801b23c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b23e:	89a3      	ldrhlt	r3, [r4, #12]
 801b240:	181b      	addge	r3, r3, r0
 801b242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b246:	bfac      	ite	ge
 801b248:	6563      	strge	r3, [r4, #84]	; 0x54
 801b24a:	81a3      	strhlt	r3, [r4, #12]
 801b24c:	bd10      	pop	{r4, pc}

0801b24e <__swrite>:
 801b24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b252:	461f      	mov	r7, r3
 801b254:	898b      	ldrh	r3, [r1, #12]
 801b256:	05db      	lsls	r3, r3, #23
 801b258:	4605      	mov	r5, r0
 801b25a:	460c      	mov	r4, r1
 801b25c:	4616      	mov	r6, r2
 801b25e:	d505      	bpl.n	801b26c <__swrite+0x1e>
 801b260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b264:	2302      	movs	r3, #2
 801b266:	2200      	movs	r2, #0
 801b268:	f000 f8a6 	bl	801b3b8 <_lseek_r>
 801b26c:	89a3      	ldrh	r3, [r4, #12]
 801b26e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b276:	81a3      	strh	r3, [r4, #12]
 801b278:	4632      	mov	r2, r6
 801b27a:	463b      	mov	r3, r7
 801b27c:	4628      	mov	r0, r5
 801b27e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b282:	f000 b8bd 	b.w	801b400 <_write_r>

0801b286 <__sseek>:
 801b286:	b510      	push	{r4, lr}
 801b288:	460c      	mov	r4, r1
 801b28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b28e:	f000 f893 	bl	801b3b8 <_lseek_r>
 801b292:	1c43      	adds	r3, r0, #1
 801b294:	89a3      	ldrh	r3, [r4, #12]
 801b296:	bf15      	itete	ne
 801b298:	6560      	strne	r0, [r4, #84]	; 0x54
 801b29a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b29e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b2a2:	81a3      	strheq	r3, [r4, #12]
 801b2a4:	bf18      	it	ne
 801b2a6:	81a3      	strhne	r3, [r4, #12]
 801b2a8:	bd10      	pop	{r4, pc}

0801b2aa <__sclose>:
 801b2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2ae:	f000 b81d 	b.w	801b2ec <_close_r>

0801b2b2 <memcmp>:
 801b2b2:	b510      	push	{r4, lr}
 801b2b4:	3901      	subs	r1, #1
 801b2b6:	4402      	add	r2, r0
 801b2b8:	4290      	cmp	r0, r2
 801b2ba:	d101      	bne.n	801b2c0 <memcmp+0xe>
 801b2bc:	2000      	movs	r0, #0
 801b2be:	e005      	b.n	801b2cc <memcmp+0x1a>
 801b2c0:	7803      	ldrb	r3, [r0, #0]
 801b2c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b2c6:	42a3      	cmp	r3, r4
 801b2c8:	d001      	beq.n	801b2ce <memcmp+0x1c>
 801b2ca:	1b18      	subs	r0, r3, r4
 801b2cc:	bd10      	pop	{r4, pc}
 801b2ce:	3001      	adds	r0, #1
 801b2d0:	e7f2      	b.n	801b2b8 <memcmp+0x6>

0801b2d2 <memset>:
 801b2d2:	4402      	add	r2, r0
 801b2d4:	4603      	mov	r3, r0
 801b2d6:	4293      	cmp	r3, r2
 801b2d8:	d100      	bne.n	801b2dc <memset+0xa>
 801b2da:	4770      	bx	lr
 801b2dc:	f803 1b01 	strb.w	r1, [r3], #1
 801b2e0:	e7f9      	b.n	801b2d6 <memset+0x4>
	...

0801b2e4 <_localeconv_r>:
 801b2e4:	4800      	ldr	r0, [pc, #0]	; (801b2e8 <_localeconv_r+0x4>)
 801b2e6:	4770      	bx	lr
 801b2e8:	20000184 	.word	0x20000184

0801b2ec <_close_r>:
 801b2ec:	b538      	push	{r3, r4, r5, lr}
 801b2ee:	4d06      	ldr	r5, [pc, #24]	; (801b308 <_close_r+0x1c>)
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	4604      	mov	r4, r0
 801b2f4:	4608      	mov	r0, r1
 801b2f6:	602b      	str	r3, [r5, #0]
 801b2f8:	f7e6 fad9 	bl	80018ae <_close>
 801b2fc:	1c43      	adds	r3, r0, #1
 801b2fe:	d102      	bne.n	801b306 <_close_r+0x1a>
 801b300:	682b      	ldr	r3, [r5, #0]
 801b302:	b103      	cbz	r3, 801b306 <_close_r+0x1a>
 801b304:	6023      	str	r3, [r4, #0]
 801b306:	bd38      	pop	{r3, r4, r5, pc}
 801b308:	2001df80 	.word	0x2001df80

0801b30c <_reclaim_reent>:
 801b30c:	4b29      	ldr	r3, [pc, #164]	; (801b3b4 <_reclaim_reent+0xa8>)
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	4283      	cmp	r3, r0
 801b312:	b570      	push	{r4, r5, r6, lr}
 801b314:	4604      	mov	r4, r0
 801b316:	d04b      	beq.n	801b3b0 <_reclaim_reent+0xa4>
 801b318:	69c3      	ldr	r3, [r0, #28]
 801b31a:	b143      	cbz	r3, 801b32e <_reclaim_reent+0x22>
 801b31c:	68db      	ldr	r3, [r3, #12]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d144      	bne.n	801b3ac <_reclaim_reent+0xa0>
 801b322:	69e3      	ldr	r3, [r4, #28]
 801b324:	6819      	ldr	r1, [r3, #0]
 801b326:	b111      	cbz	r1, 801b32e <_reclaim_reent+0x22>
 801b328:	4620      	mov	r0, r4
 801b32a:	f000 fec5 	bl	801c0b8 <_free_r>
 801b32e:	6961      	ldr	r1, [r4, #20]
 801b330:	b111      	cbz	r1, 801b338 <_reclaim_reent+0x2c>
 801b332:	4620      	mov	r0, r4
 801b334:	f000 fec0 	bl	801c0b8 <_free_r>
 801b338:	69e1      	ldr	r1, [r4, #28]
 801b33a:	b111      	cbz	r1, 801b342 <_reclaim_reent+0x36>
 801b33c:	4620      	mov	r0, r4
 801b33e:	f000 febb 	bl	801c0b8 <_free_r>
 801b342:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b344:	b111      	cbz	r1, 801b34c <_reclaim_reent+0x40>
 801b346:	4620      	mov	r0, r4
 801b348:	f000 feb6 	bl	801c0b8 <_free_r>
 801b34c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b34e:	b111      	cbz	r1, 801b356 <_reclaim_reent+0x4a>
 801b350:	4620      	mov	r0, r4
 801b352:	f000 feb1 	bl	801c0b8 <_free_r>
 801b356:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b358:	b111      	cbz	r1, 801b360 <_reclaim_reent+0x54>
 801b35a:	4620      	mov	r0, r4
 801b35c:	f000 feac 	bl	801c0b8 <_free_r>
 801b360:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b362:	b111      	cbz	r1, 801b36a <_reclaim_reent+0x5e>
 801b364:	4620      	mov	r0, r4
 801b366:	f000 fea7 	bl	801c0b8 <_free_r>
 801b36a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801b36c:	b111      	cbz	r1, 801b374 <_reclaim_reent+0x68>
 801b36e:	4620      	mov	r0, r4
 801b370:	f000 fea2 	bl	801c0b8 <_free_r>
 801b374:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801b376:	b111      	cbz	r1, 801b37e <_reclaim_reent+0x72>
 801b378:	4620      	mov	r0, r4
 801b37a:	f000 fe9d 	bl	801c0b8 <_free_r>
 801b37e:	6a23      	ldr	r3, [r4, #32]
 801b380:	b1b3      	cbz	r3, 801b3b0 <_reclaim_reent+0xa4>
 801b382:	4620      	mov	r0, r4
 801b384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b388:	4718      	bx	r3
 801b38a:	5949      	ldr	r1, [r1, r5]
 801b38c:	b941      	cbnz	r1, 801b3a0 <_reclaim_reent+0x94>
 801b38e:	3504      	adds	r5, #4
 801b390:	69e3      	ldr	r3, [r4, #28]
 801b392:	2d80      	cmp	r5, #128	; 0x80
 801b394:	68d9      	ldr	r1, [r3, #12]
 801b396:	d1f8      	bne.n	801b38a <_reclaim_reent+0x7e>
 801b398:	4620      	mov	r0, r4
 801b39a:	f000 fe8d 	bl	801c0b8 <_free_r>
 801b39e:	e7c0      	b.n	801b322 <_reclaim_reent+0x16>
 801b3a0:	680e      	ldr	r6, [r1, #0]
 801b3a2:	4620      	mov	r0, r4
 801b3a4:	f000 fe88 	bl	801c0b8 <_free_r>
 801b3a8:	4631      	mov	r1, r6
 801b3aa:	e7ef      	b.n	801b38c <_reclaim_reent+0x80>
 801b3ac:	2500      	movs	r5, #0
 801b3ae:	e7ef      	b.n	801b390 <_reclaim_reent+0x84>
 801b3b0:	bd70      	pop	{r4, r5, r6, pc}
 801b3b2:	bf00      	nop
 801b3b4:	20000090 	.word	0x20000090

0801b3b8 <_lseek_r>:
 801b3b8:	b538      	push	{r3, r4, r5, lr}
 801b3ba:	4d07      	ldr	r5, [pc, #28]	; (801b3d8 <_lseek_r+0x20>)
 801b3bc:	4604      	mov	r4, r0
 801b3be:	4608      	mov	r0, r1
 801b3c0:	4611      	mov	r1, r2
 801b3c2:	2200      	movs	r2, #0
 801b3c4:	602a      	str	r2, [r5, #0]
 801b3c6:	461a      	mov	r2, r3
 801b3c8:	f7e6 fa98 	bl	80018fc <_lseek>
 801b3cc:	1c43      	adds	r3, r0, #1
 801b3ce:	d102      	bne.n	801b3d6 <_lseek_r+0x1e>
 801b3d0:	682b      	ldr	r3, [r5, #0]
 801b3d2:	b103      	cbz	r3, 801b3d6 <_lseek_r+0x1e>
 801b3d4:	6023      	str	r3, [r4, #0]
 801b3d6:	bd38      	pop	{r3, r4, r5, pc}
 801b3d8:	2001df80 	.word	0x2001df80

0801b3dc <_read_r>:
 801b3dc:	b538      	push	{r3, r4, r5, lr}
 801b3de:	4d07      	ldr	r5, [pc, #28]	; (801b3fc <_read_r+0x20>)
 801b3e0:	4604      	mov	r4, r0
 801b3e2:	4608      	mov	r0, r1
 801b3e4:	4611      	mov	r1, r2
 801b3e6:	2200      	movs	r2, #0
 801b3e8:	602a      	str	r2, [r5, #0]
 801b3ea:	461a      	mov	r2, r3
 801b3ec:	f7e6 fa26 	bl	800183c <_read>
 801b3f0:	1c43      	adds	r3, r0, #1
 801b3f2:	d102      	bne.n	801b3fa <_read_r+0x1e>
 801b3f4:	682b      	ldr	r3, [r5, #0]
 801b3f6:	b103      	cbz	r3, 801b3fa <_read_r+0x1e>
 801b3f8:	6023      	str	r3, [r4, #0]
 801b3fa:	bd38      	pop	{r3, r4, r5, pc}
 801b3fc:	2001df80 	.word	0x2001df80

0801b400 <_write_r>:
 801b400:	b538      	push	{r3, r4, r5, lr}
 801b402:	4d07      	ldr	r5, [pc, #28]	; (801b420 <_write_r+0x20>)
 801b404:	4604      	mov	r4, r0
 801b406:	4608      	mov	r0, r1
 801b408:	4611      	mov	r1, r2
 801b40a:	2200      	movs	r2, #0
 801b40c:	602a      	str	r2, [r5, #0]
 801b40e:	461a      	mov	r2, r3
 801b410:	f7e6 fa31 	bl	8001876 <_write>
 801b414:	1c43      	adds	r3, r0, #1
 801b416:	d102      	bne.n	801b41e <_write_r+0x1e>
 801b418:	682b      	ldr	r3, [r5, #0]
 801b41a:	b103      	cbz	r3, 801b41e <_write_r+0x1e>
 801b41c:	6023      	str	r3, [r4, #0]
 801b41e:	bd38      	pop	{r3, r4, r5, pc}
 801b420:	2001df80 	.word	0x2001df80

0801b424 <__libc_init_array>:
 801b424:	b570      	push	{r4, r5, r6, lr}
 801b426:	4d0d      	ldr	r5, [pc, #52]	; (801b45c <__libc_init_array+0x38>)
 801b428:	4c0d      	ldr	r4, [pc, #52]	; (801b460 <__libc_init_array+0x3c>)
 801b42a:	1b64      	subs	r4, r4, r5
 801b42c:	10a4      	asrs	r4, r4, #2
 801b42e:	2600      	movs	r6, #0
 801b430:	42a6      	cmp	r6, r4
 801b432:	d109      	bne.n	801b448 <__libc_init_array+0x24>
 801b434:	4d0b      	ldr	r5, [pc, #44]	; (801b464 <__libc_init_array+0x40>)
 801b436:	4c0c      	ldr	r4, [pc, #48]	; (801b468 <__libc_init_array+0x44>)
 801b438:	f001 fe68 	bl	801d10c <_init>
 801b43c:	1b64      	subs	r4, r4, r5
 801b43e:	10a4      	asrs	r4, r4, #2
 801b440:	2600      	movs	r6, #0
 801b442:	42a6      	cmp	r6, r4
 801b444:	d105      	bne.n	801b452 <__libc_init_array+0x2e>
 801b446:	bd70      	pop	{r4, r5, r6, pc}
 801b448:	f855 3b04 	ldr.w	r3, [r5], #4
 801b44c:	4798      	blx	r3
 801b44e:	3601      	adds	r6, #1
 801b450:	e7ee      	b.n	801b430 <__libc_init_array+0xc>
 801b452:	f855 3b04 	ldr.w	r3, [r5], #4
 801b456:	4798      	blx	r3
 801b458:	3601      	adds	r6, #1
 801b45a:	e7f2      	b.n	801b442 <__libc_init_array+0x1e>
 801b45c:	08020978 	.word	0x08020978
 801b460:	08020978 	.word	0x08020978
 801b464:	08020978 	.word	0x08020978
 801b468:	0802097c 	.word	0x0802097c

0801b46c <__retarget_lock_init_recursive>:
 801b46c:	4770      	bx	lr

0801b46e <__retarget_lock_acquire_recursive>:
 801b46e:	4770      	bx	lr

0801b470 <__retarget_lock_release_recursive>:
 801b470:	4770      	bx	lr

0801b472 <memcpy>:
 801b472:	440a      	add	r2, r1
 801b474:	4291      	cmp	r1, r2
 801b476:	f100 33ff 	add.w	r3, r0, #4294967295
 801b47a:	d100      	bne.n	801b47e <memcpy+0xc>
 801b47c:	4770      	bx	lr
 801b47e:	b510      	push	{r4, lr}
 801b480:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b484:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b488:	4291      	cmp	r1, r2
 801b48a:	d1f9      	bne.n	801b480 <memcpy+0xe>
 801b48c:	bd10      	pop	{r4, pc}
	...

0801b490 <__assert_func>:
 801b490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b492:	4614      	mov	r4, r2
 801b494:	461a      	mov	r2, r3
 801b496:	4b09      	ldr	r3, [pc, #36]	; (801b4bc <__assert_func+0x2c>)
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	4605      	mov	r5, r0
 801b49c:	68d8      	ldr	r0, [r3, #12]
 801b49e:	b14c      	cbz	r4, 801b4b4 <__assert_func+0x24>
 801b4a0:	4b07      	ldr	r3, [pc, #28]	; (801b4c0 <__assert_func+0x30>)
 801b4a2:	9100      	str	r1, [sp, #0]
 801b4a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b4a8:	4906      	ldr	r1, [pc, #24]	; (801b4c4 <__assert_func+0x34>)
 801b4aa:	462b      	mov	r3, r5
 801b4ac:	f001 fc72 	bl	801cd94 <fiprintf>
 801b4b0:	f001 fd28 	bl	801cf04 <abort>
 801b4b4:	4b04      	ldr	r3, [pc, #16]	; (801b4c8 <__assert_func+0x38>)
 801b4b6:	461c      	mov	r4, r3
 801b4b8:	e7f3      	b.n	801b4a2 <__assert_func+0x12>
 801b4ba:	bf00      	nop
 801b4bc:	20000090 	.word	0x20000090
 801b4c0:	08020748 	.word	0x08020748
 801b4c4:	08020755 	.word	0x08020755
 801b4c8:	08020783 	.word	0x08020783

0801b4cc <quorem>:
 801b4cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4d0:	6903      	ldr	r3, [r0, #16]
 801b4d2:	690c      	ldr	r4, [r1, #16]
 801b4d4:	42a3      	cmp	r3, r4
 801b4d6:	4607      	mov	r7, r0
 801b4d8:	db7e      	blt.n	801b5d8 <quorem+0x10c>
 801b4da:	3c01      	subs	r4, #1
 801b4dc:	f101 0814 	add.w	r8, r1, #20
 801b4e0:	f100 0514 	add.w	r5, r0, #20
 801b4e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b4e8:	9301      	str	r3, [sp, #4]
 801b4ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b4ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b4f2:	3301      	adds	r3, #1
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b4fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b4fe:	fbb2 f6f3 	udiv	r6, r2, r3
 801b502:	d331      	bcc.n	801b568 <quorem+0x9c>
 801b504:	f04f 0e00 	mov.w	lr, #0
 801b508:	4640      	mov	r0, r8
 801b50a:	46ac      	mov	ip, r5
 801b50c:	46f2      	mov	sl, lr
 801b50e:	f850 2b04 	ldr.w	r2, [r0], #4
 801b512:	b293      	uxth	r3, r2
 801b514:	fb06 e303 	mla	r3, r6, r3, lr
 801b518:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b51c:	0c1a      	lsrs	r2, r3, #16
 801b51e:	b29b      	uxth	r3, r3
 801b520:	ebaa 0303 	sub.w	r3, sl, r3
 801b524:	f8dc a000 	ldr.w	sl, [ip]
 801b528:	fa13 f38a 	uxtah	r3, r3, sl
 801b52c:	fb06 220e 	mla	r2, r6, lr, r2
 801b530:	9300      	str	r3, [sp, #0]
 801b532:	9b00      	ldr	r3, [sp, #0]
 801b534:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b538:	b292      	uxth	r2, r2
 801b53a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b53e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b542:	f8bd 3000 	ldrh.w	r3, [sp]
 801b546:	4581      	cmp	r9, r0
 801b548:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b54c:	f84c 3b04 	str.w	r3, [ip], #4
 801b550:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b554:	d2db      	bcs.n	801b50e <quorem+0x42>
 801b556:	f855 300b 	ldr.w	r3, [r5, fp]
 801b55a:	b92b      	cbnz	r3, 801b568 <quorem+0x9c>
 801b55c:	9b01      	ldr	r3, [sp, #4]
 801b55e:	3b04      	subs	r3, #4
 801b560:	429d      	cmp	r5, r3
 801b562:	461a      	mov	r2, r3
 801b564:	d32c      	bcc.n	801b5c0 <quorem+0xf4>
 801b566:	613c      	str	r4, [r7, #16]
 801b568:	4638      	mov	r0, r7
 801b56a:	f001 f921 	bl	801c7b0 <__mcmp>
 801b56e:	2800      	cmp	r0, #0
 801b570:	db22      	blt.n	801b5b8 <quorem+0xec>
 801b572:	3601      	adds	r6, #1
 801b574:	4629      	mov	r1, r5
 801b576:	2000      	movs	r0, #0
 801b578:	f858 2b04 	ldr.w	r2, [r8], #4
 801b57c:	f8d1 c000 	ldr.w	ip, [r1]
 801b580:	b293      	uxth	r3, r2
 801b582:	1ac3      	subs	r3, r0, r3
 801b584:	0c12      	lsrs	r2, r2, #16
 801b586:	fa13 f38c 	uxtah	r3, r3, ip
 801b58a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801b58e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b592:	b29b      	uxth	r3, r3
 801b594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b598:	45c1      	cmp	r9, r8
 801b59a:	f841 3b04 	str.w	r3, [r1], #4
 801b59e:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b5a2:	d2e9      	bcs.n	801b578 <quorem+0xac>
 801b5a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b5a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b5ac:	b922      	cbnz	r2, 801b5b8 <quorem+0xec>
 801b5ae:	3b04      	subs	r3, #4
 801b5b0:	429d      	cmp	r5, r3
 801b5b2:	461a      	mov	r2, r3
 801b5b4:	d30a      	bcc.n	801b5cc <quorem+0x100>
 801b5b6:	613c      	str	r4, [r7, #16]
 801b5b8:	4630      	mov	r0, r6
 801b5ba:	b003      	add	sp, #12
 801b5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5c0:	6812      	ldr	r2, [r2, #0]
 801b5c2:	3b04      	subs	r3, #4
 801b5c4:	2a00      	cmp	r2, #0
 801b5c6:	d1ce      	bne.n	801b566 <quorem+0x9a>
 801b5c8:	3c01      	subs	r4, #1
 801b5ca:	e7c9      	b.n	801b560 <quorem+0x94>
 801b5cc:	6812      	ldr	r2, [r2, #0]
 801b5ce:	3b04      	subs	r3, #4
 801b5d0:	2a00      	cmp	r2, #0
 801b5d2:	d1f0      	bne.n	801b5b6 <quorem+0xea>
 801b5d4:	3c01      	subs	r4, #1
 801b5d6:	e7eb      	b.n	801b5b0 <quorem+0xe4>
 801b5d8:	2000      	movs	r0, #0
 801b5da:	e7ee      	b.n	801b5ba <quorem+0xee>
 801b5dc:	0000      	movs	r0, r0
	...

0801b5e0 <_dtoa_r>:
 801b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5e4:	ed2d 8b02 	vpush	{d8}
 801b5e8:	69c5      	ldr	r5, [r0, #28]
 801b5ea:	b091      	sub	sp, #68	; 0x44
 801b5ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b5f0:	ec59 8b10 	vmov	r8, r9, d0
 801b5f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801b5f6:	9106      	str	r1, [sp, #24]
 801b5f8:	4606      	mov	r6, r0
 801b5fa:	9208      	str	r2, [sp, #32]
 801b5fc:	930c      	str	r3, [sp, #48]	; 0x30
 801b5fe:	b975      	cbnz	r5, 801b61e <_dtoa_r+0x3e>
 801b600:	2010      	movs	r0, #16
 801b602:	f000 fda5 	bl	801c150 <malloc>
 801b606:	4602      	mov	r2, r0
 801b608:	61f0      	str	r0, [r6, #28]
 801b60a:	b920      	cbnz	r0, 801b616 <_dtoa_r+0x36>
 801b60c:	4ba6      	ldr	r3, [pc, #664]	; (801b8a8 <_dtoa_r+0x2c8>)
 801b60e:	21ef      	movs	r1, #239	; 0xef
 801b610:	48a6      	ldr	r0, [pc, #664]	; (801b8ac <_dtoa_r+0x2cc>)
 801b612:	f7ff ff3d 	bl	801b490 <__assert_func>
 801b616:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b61a:	6005      	str	r5, [r0, #0]
 801b61c:	60c5      	str	r5, [r0, #12]
 801b61e:	69f3      	ldr	r3, [r6, #28]
 801b620:	6819      	ldr	r1, [r3, #0]
 801b622:	b151      	cbz	r1, 801b63a <_dtoa_r+0x5a>
 801b624:	685a      	ldr	r2, [r3, #4]
 801b626:	604a      	str	r2, [r1, #4]
 801b628:	2301      	movs	r3, #1
 801b62a:	4093      	lsls	r3, r2
 801b62c:	608b      	str	r3, [r1, #8]
 801b62e:	4630      	mov	r0, r6
 801b630:	f000 fe82 	bl	801c338 <_Bfree>
 801b634:	69f3      	ldr	r3, [r6, #28]
 801b636:	2200      	movs	r2, #0
 801b638:	601a      	str	r2, [r3, #0]
 801b63a:	f1b9 0300 	subs.w	r3, r9, #0
 801b63e:	bfbb      	ittet	lt
 801b640:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b644:	9303      	strlt	r3, [sp, #12]
 801b646:	2300      	movge	r3, #0
 801b648:	2201      	movlt	r2, #1
 801b64a:	bfac      	ite	ge
 801b64c:	6023      	strge	r3, [r4, #0]
 801b64e:	6022      	strlt	r2, [r4, #0]
 801b650:	4b97      	ldr	r3, [pc, #604]	; (801b8b0 <_dtoa_r+0x2d0>)
 801b652:	9c03      	ldr	r4, [sp, #12]
 801b654:	43a3      	bics	r3, r4
 801b656:	d11c      	bne.n	801b692 <_dtoa_r+0xb2>
 801b658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b65a:	f242 730f 	movw	r3, #9999	; 0x270f
 801b65e:	6013      	str	r3, [r2, #0]
 801b660:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801b664:	ea53 0308 	orrs.w	r3, r3, r8
 801b668:	f000 84fb 	beq.w	801c062 <_dtoa_r+0xa82>
 801b66c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b66e:	b963      	cbnz	r3, 801b68a <_dtoa_r+0xaa>
 801b670:	4b90      	ldr	r3, [pc, #576]	; (801b8b4 <_dtoa_r+0x2d4>)
 801b672:	e020      	b.n	801b6b6 <_dtoa_r+0xd6>
 801b674:	4b90      	ldr	r3, [pc, #576]	; (801b8b8 <_dtoa_r+0x2d8>)
 801b676:	9301      	str	r3, [sp, #4]
 801b678:	3308      	adds	r3, #8
 801b67a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b67c:	6013      	str	r3, [r2, #0]
 801b67e:	9801      	ldr	r0, [sp, #4]
 801b680:	b011      	add	sp, #68	; 0x44
 801b682:	ecbd 8b02 	vpop	{d8}
 801b686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b68a:	4b8a      	ldr	r3, [pc, #552]	; (801b8b4 <_dtoa_r+0x2d4>)
 801b68c:	9301      	str	r3, [sp, #4]
 801b68e:	3303      	adds	r3, #3
 801b690:	e7f3      	b.n	801b67a <_dtoa_r+0x9a>
 801b692:	ed9d 8b02 	vldr	d8, [sp, #8]
 801b696:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b69e:	d10c      	bne.n	801b6ba <_dtoa_r+0xda>
 801b6a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b6a2:	2301      	movs	r3, #1
 801b6a4:	6013      	str	r3, [r2, #0]
 801b6a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	f000 84d7 	beq.w	801c05c <_dtoa_r+0xa7c>
 801b6ae:	4b83      	ldr	r3, [pc, #524]	; (801b8bc <_dtoa_r+0x2dc>)
 801b6b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b6b2:	6013      	str	r3, [r2, #0]
 801b6b4:	3b01      	subs	r3, #1
 801b6b6:	9301      	str	r3, [sp, #4]
 801b6b8:	e7e1      	b.n	801b67e <_dtoa_r+0x9e>
 801b6ba:	aa0e      	add	r2, sp, #56	; 0x38
 801b6bc:	a90f      	add	r1, sp, #60	; 0x3c
 801b6be:	4630      	mov	r0, r6
 801b6c0:	eeb0 0b48 	vmov.f64	d0, d8
 801b6c4:	f001 f91a 	bl	801c8fc <__d2b>
 801b6c8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801b6cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b6ce:	4605      	mov	r5, r0
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d046      	beq.n	801b762 <_dtoa_r+0x182>
 801b6d4:	eeb0 7b48 	vmov.f64	d7, d8
 801b6d8:	ee18 1a90 	vmov	r1, s17
 801b6dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801b6e0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801b6e4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801b6e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b6ec:	2000      	movs	r0, #0
 801b6ee:	ee07 1a90 	vmov	s15, r1
 801b6f2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801b6f6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801b890 <_dtoa_r+0x2b0>
 801b6fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b6fe:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801b898 <_dtoa_r+0x2b8>
 801b702:	eea7 6b05 	vfma.f64	d6, d7, d5
 801b706:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801b8a0 <_dtoa_r+0x2c0>
 801b70a:	ee07 3a90 	vmov	s15, r3
 801b70e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801b712:	eeb0 7b46 	vmov.f64	d7, d6
 801b716:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b71a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801b71e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b726:	ee16 ba90 	vmov	fp, s13
 801b72a:	9009      	str	r0, [sp, #36]	; 0x24
 801b72c:	d508      	bpl.n	801b740 <_dtoa_r+0x160>
 801b72e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b732:	eeb4 6b47 	vcmp.f64	d6, d7
 801b736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b73a:	bf18      	it	ne
 801b73c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801b740:	f1bb 0f16 	cmp.w	fp, #22
 801b744:	d82b      	bhi.n	801b79e <_dtoa_r+0x1be>
 801b746:	495e      	ldr	r1, [pc, #376]	; (801b8c0 <_dtoa_r+0x2e0>)
 801b748:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801b74c:	ed91 7b00 	vldr	d7, [r1]
 801b750:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801b754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b758:	d501      	bpl.n	801b75e <_dtoa_r+0x17e>
 801b75a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b75e:	2100      	movs	r1, #0
 801b760:	e01e      	b.n	801b7a0 <_dtoa_r+0x1c0>
 801b762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b764:	4413      	add	r3, r2
 801b766:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801b76a:	2920      	cmp	r1, #32
 801b76c:	bfc1      	itttt	gt
 801b76e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801b772:	408c      	lslgt	r4, r1
 801b774:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801b778:	fa28 f101 	lsrgt.w	r1, r8, r1
 801b77c:	bfd6      	itet	le
 801b77e:	f1c1 0120 	rsble	r1, r1, #32
 801b782:	4321      	orrgt	r1, r4
 801b784:	fa08 f101 	lslle.w	r1, r8, r1
 801b788:	ee07 1a90 	vmov	s15, r1
 801b78c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b790:	3b01      	subs	r3, #1
 801b792:	ee17 1a90 	vmov	r1, s15
 801b796:	2001      	movs	r0, #1
 801b798:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801b79c:	e7a7      	b.n	801b6ee <_dtoa_r+0x10e>
 801b79e:	2101      	movs	r1, #1
 801b7a0:	1ad2      	subs	r2, r2, r3
 801b7a2:	1e53      	subs	r3, r2, #1
 801b7a4:	9305      	str	r3, [sp, #20]
 801b7a6:	bf45      	ittet	mi
 801b7a8:	f1c2 0301 	rsbmi	r3, r2, #1
 801b7ac:	9304      	strmi	r3, [sp, #16]
 801b7ae:	2300      	movpl	r3, #0
 801b7b0:	2300      	movmi	r3, #0
 801b7b2:	bf4c      	ite	mi
 801b7b4:	9305      	strmi	r3, [sp, #20]
 801b7b6:	9304      	strpl	r3, [sp, #16]
 801b7b8:	f1bb 0f00 	cmp.w	fp, #0
 801b7bc:	910b      	str	r1, [sp, #44]	; 0x2c
 801b7be:	db18      	blt.n	801b7f2 <_dtoa_r+0x212>
 801b7c0:	9b05      	ldr	r3, [sp, #20]
 801b7c2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801b7c6:	445b      	add	r3, fp
 801b7c8:	9305      	str	r3, [sp, #20]
 801b7ca:	2300      	movs	r3, #0
 801b7cc:	9a06      	ldr	r2, [sp, #24]
 801b7ce:	2a09      	cmp	r2, #9
 801b7d0:	d848      	bhi.n	801b864 <_dtoa_r+0x284>
 801b7d2:	2a05      	cmp	r2, #5
 801b7d4:	bfc4      	itt	gt
 801b7d6:	3a04      	subgt	r2, #4
 801b7d8:	9206      	strgt	r2, [sp, #24]
 801b7da:	9a06      	ldr	r2, [sp, #24]
 801b7dc:	f1a2 0202 	sub.w	r2, r2, #2
 801b7e0:	bfcc      	ite	gt
 801b7e2:	2400      	movgt	r4, #0
 801b7e4:	2401      	movle	r4, #1
 801b7e6:	2a03      	cmp	r2, #3
 801b7e8:	d847      	bhi.n	801b87a <_dtoa_r+0x29a>
 801b7ea:	e8df f002 	tbb	[pc, r2]
 801b7ee:	2d0b      	.short	0x2d0b
 801b7f0:	392b      	.short	0x392b
 801b7f2:	9b04      	ldr	r3, [sp, #16]
 801b7f4:	2200      	movs	r2, #0
 801b7f6:	eba3 030b 	sub.w	r3, r3, fp
 801b7fa:	9304      	str	r3, [sp, #16]
 801b7fc:	920a      	str	r2, [sp, #40]	; 0x28
 801b7fe:	f1cb 0300 	rsb	r3, fp, #0
 801b802:	e7e3      	b.n	801b7cc <_dtoa_r+0x1ec>
 801b804:	2200      	movs	r2, #0
 801b806:	9207      	str	r2, [sp, #28]
 801b808:	9a08      	ldr	r2, [sp, #32]
 801b80a:	2a00      	cmp	r2, #0
 801b80c:	dc38      	bgt.n	801b880 <_dtoa_r+0x2a0>
 801b80e:	f04f 0a01 	mov.w	sl, #1
 801b812:	46d1      	mov	r9, sl
 801b814:	4652      	mov	r2, sl
 801b816:	f8cd a020 	str.w	sl, [sp, #32]
 801b81a:	69f7      	ldr	r7, [r6, #28]
 801b81c:	2100      	movs	r1, #0
 801b81e:	2004      	movs	r0, #4
 801b820:	f100 0c14 	add.w	ip, r0, #20
 801b824:	4594      	cmp	ip, r2
 801b826:	d930      	bls.n	801b88a <_dtoa_r+0x2aa>
 801b828:	6079      	str	r1, [r7, #4]
 801b82a:	4630      	mov	r0, r6
 801b82c:	930d      	str	r3, [sp, #52]	; 0x34
 801b82e:	f000 fd43 	bl	801c2b8 <_Balloc>
 801b832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b834:	9001      	str	r0, [sp, #4]
 801b836:	4602      	mov	r2, r0
 801b838:	2800      	cmp	r0, #0
 801b83a:	d145      	bne.n	801b8c8 <_dtoa_r+0x2e8>
 801b83c:	4b21      	ldr	r3, [pc, #132]	; (801b8c4 <_dtoa_r+0x2e4>)
 801b83e:	f240 11af 	movw	r1, #431	; 0x1af
 801b842:	e6e5      	b.n	801b610 <_dtoa_r+0x30>
 801b844:	2201      	movs	r2, #1
 801b846:	e7de      	b.n	801b806 <_dtoa_r+0x226>
 801b848:	2200      	movs	r2, #0
 801b84a:	9207      	str	r2, [sp, #28]
 801b84c:	9a08      	ldr	r2, [sp, #32]
 801b84e:	eb0b 0a02 	add.w	sl, fp, r2
 801b852:	f10a 0901 	add.w	r9, sl, #1
 801b856:	464a      	mov	r2, r9
 801b858:	2a01      	cmp	r2, #1
 801b85a:	bfb8      	it	lt
 801b85c:	2201      	movlt	r2, #1
 801b85e:	e7dc      	b.n	801b81a <_dtoa_r+0x23a>
 801b860:	2201      	movs	r2, #1
 801b862:	e7f2      	b.n	801b84a <_dtoa_r+0x26a>
 801b864:	2401      	movs	r4, #1
 801b866:	2200      	movs	r2, #0
 801b868:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801b86c:	f04f 3aff 	mov.w	sl, #4294967295
 801b870:	2100      	movs	r1, #0
 801b872:	46d1      	mov	r9, sl
 801b874:	2212      	movs	r2, #18
 801b876:	9108      	str	r1, [sp, #32]
 801b878:	e7cf      	b.n	801b81a <_dtoa_r+0x23a>
 801b87a:	2201      	movs	r2, #1
 801b87c:	9207      	str	r2, [sp, #28]
 801b87e:	e7f5      	b.n	801b86c <_dtoa_r+0x28c>
 801b880:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b884:	46d1      	mov	r9, sl
 801b886:	4652      	mov	r2, sl
 801b888:	e7c7      	b.n	801b81a <_dtoa_r+0x23a>
 801b88a:	3101      	adds	r1, #1
 801b88c:	0040      	lsls	r0, r0, #1
 801b88e:	e7c7      	b.n	801b820 <_dtoa_r+0x240>
 801b890:	636f4361 	.word	0x636f4361
 801b894:	3fd287a7 	.word	0x3fd287a7
 801b898:	8b60c8b3 	.word	0x8b60c8b3
 801b89c:	3fc68a28 	.word	0x3fc68a28
 801b8a0:	509f79fb 	.word	0x509f79fb
 801b8a4:	3fd34413 	.word	0x3fd34413
 801b8a8:	080205a4 	.word	0x080205a4
 801b8ac:	08020791 	.word	0x08020791
 801b8b0:	7ff00000 	.word	0x7ff00000
 801b8b4:	0802078d 	.word	0x0802078d
 801b8b8:	08020784 	.word	0x08020784
 801b8bc:	08020725 	.word	0x08020725
 801b8c0:	08020880 	.word	0x08020880
 801b8c4:	080207e9 	.word	0x080207e9
 801b8c8:	69f2      	ldr	r2, [r6, #28]
 801b8ca:	9901      	ldr	r1, [sp, #4]
 801b8cc:	6011      	str	r1, [r2, #0]
 801b8ce:	f1b9 0f0e 	cmp.w	r9, #14
 801b8d2:	d86c      	bhi.n	801b9ae <_dtoa_r+0x3ce>
 801b8d4:	2c00      	cmp	r4, #0
 801b8d6:	d06a      	beq.n	801b9ae <_dtoa_r+0x3ce>
 801b8d8:	f1bb 0f00 	cmp.w	fp, #0
 801b8dc:	f340 80a0 	ble.w	801ba20 <_dtoa_r+0x440>
 801b8e0:	4ac1      	ldr	r2, [pc, #772]	; (801bbe8 <_dtoa_r+0x608>)
 801b8e2:	f00b 010f 	and.w	r1, fp, #15
 801b8e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801b8ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801b8ee:	ed92 7b00 	vldr	d7, [r2]
 801b8f2:	ea4f 122b 	mov.w	r2, fp, asr #4
 801b8f6:	f000 8087 	beq.w	801ba08 <_dtoa_r+0x428>
 801b8fa:	49bc      	ldr	r1, [pc, #752]	; (801bbec <_dtoa_r+0x60c>)
 801b8fc:	ed91 6b08 	vldr	d6, [r1, #32]
 801b900:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801b904:	ed8d 6b02 	vstr	d6, [sp, #8]
 801b908:	f002 020f 	and.w	r2, r2, #15
 801b90c:	2103      	movs	r1, #3
 801b90e:	48b7      	ldr	r0, [pc, #732]	; (801bbec <_dtoa_r+0x60c>)
 801b910:	2a00      	cmp	r2, #0
 801b912:	d17b      	bne.n	801ba0c <_dtoa_r+0x42c>
 801b914:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b918:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801b91c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b920:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b922:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b926:	2a00      	cmp	r2, #0
 801b928:	f000 80a0 	beq.w	801ba6c <_dtoa_r+0x48c>
 801b92c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b930:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b938:	f140 8098 	bpl.w	801ba6c <_dtoa_r+0x48c>
 801b93c:	f1b9 0f00 	cmp.w	r9, #0
 801b940:	f000 8094 	beq.w	801ba6c <_dtoa_r+0x48c>
 801b944:	f1ba 0f00 	cmp.w	sl, #0
 801b948:	dd2f      	ble.n	801b9aa <_dtoa_r+0x3ca>
 801b94a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801b94e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b952:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b956:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b95a:	3101      	adds	r1, #1
 801b95c:	4654      	mov	r4, sl
 801b95e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b962:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801b966:	ee07 1a90 	vmov	s15, r1
 801b96a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b96e:	eea7 5b06 	vfma.f64	d5, d7, d6
 801b972:	ee15 7a90 	vmov	r7, s11
 801b976:	ec51 0b15 	vmov	r0, r1, d5
 801b97a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801b97e:	2c00      	cmp	r4, #0
 801b980:	d177      	bne.n	801ba72 <_dtoa_r+0x492>
 801b982:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801b986:	ee36 6b47 	vsub.f64	d6, d6, d7
 801b98a:	ec41 0b17 	vmov	d7, r0, r1
 801b98e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b996:	f300 826a 	bgt.w	801be6e <_dtoa_r+0x88e>
 801b99a:	eeb1 7b47 	vneg.f64	d7, d7
 801b99e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9a6:	f100 8260 	bmi.w	801be6a <_dtoa_r+0x88a>
 801b9aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b9ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b9b0:	2a00      	cmp	r2, #0
 801b9b2:	f2c0 811d 	blt.w	801bbf0 <_dtoa_r+0x610>
 801b9b6:	f1bb 0f0e 	cmp.w	fp, #14
 801b9ba:	f300 8119 	bgt.w	801bbf0 <_dtoa_r+0x610>
 801b9be:	4b8a      	ldr	r3, [pc, #552]	; (801bbe8 <_dtoa_r+0x608>)
 801b9c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b9c4:	ed93 6b00 	vldr	d6, [r3]
 801b9c8:	9b08      	ldr	r3, [sp, #32]
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	f280 80b7 	bge.w	801bb3e <_dtoa_r+0x55e>
 801b9d0:	f1b9 0f00 	cmp.w	r9, #0
 801b9d4:	f300 80b3 	bgt.w	801bb3e <_dtoa_r+0x55e>
 801b9d8:	f040 8246 	bne.w	801be68 <_dtoa_r+0x888>
 801b9dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801b9e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 801b9e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b9e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9f0:	464c      	mov	r4, r9
 801b9f2:	464f      	mov	r7, r9
 801b9f4:	f280 821c 	bge.w	801be30 <_dtoa_r+0x850>
 801b9f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b9fc:	2331      	movs	r3, #49	; 0x31
 801b9fe:	f808 3b01 	strb.w	r3, [r8], #1
 801ba02:	f10b 0b01 	add.w	fp, fp, #1
 801ba06:	e218      	b.n	801be3a <_dtoa_r+0x85a>
 801ba08:	2102      	movs	r1, #2
 801ba0a:	e780      	b.n	801b90e <_dtoa_r+0x32e>
 801ba0c:	07d4      	lsls	r4, r2, #31
 801ba0e:	d504      	bpl.n	801ba1a <_dtoa_r+0x43a>
 801ba10:	ed90 6b00 	vldr	d6, [r0]
 801ba14:	3101      	adds	r1, #1
 801ba16:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ba1a:	1052      	asrs	r2, r2, #1
 801ba1c:	3008      	adds	r0, #8
 801ba1e:	e777      	b.n	801b910 <_dtoa_r+0x330>
 801ba20:	d022      	beq.n	801ba68 <_dtoa_r+0x488>
 801ba22:	f1cb 0200 	rsb	r2, fp, #0
 801ba26:	4970      	ldr	r1, [pc, #448]	; (801bbe8 <_dtoa_r+0x608>)
 801ba28:	f002 000f 	and.w	r0, r2, #15
 801ba2c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801ba30:	ed91 7b00 	vldr	d7, [r1]
 801ba34:	ee28 7b07 	vmul.f64	d7, d8, d7
 801ba38:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ba3c:	486b      	ldr	r0, [pc, #428]	; (801bbec <_dtoa_r+0x60c>)
 801ba3e:	1112      	asrs	r2, r2, #4
 801ba40:	2400      	movs	r4, #0
 801ba42:	2102      	movs	r1, #2
 801ba44:	b92a      	cbnz	r2, 801ba52 <_dtoa_r+0x472>
 801ba46:	2c00      	cmp	r4, #0
 801ba48:	f43f af6a 	beq.w	801b920 <_dtoa_r+0x340>
 801ba4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ba50:	e766      	b.n	801b920 <_dtoa_r+0x340>
 801ba52:	07d7      	lsls	r7, r2, #31
 801ba54:	d505      	bpl.n	801ba62 <_dtoa_r+0x482>
 801ba56:	ed90 6b00 	vldr	d6, [r0]
 801ba5a:	3101      	adds	r1, #1
 801ba5c:	2401      	movs	r4, #1
 801ba5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ba62:	1052      	asrs	r2, r2, #1
 801ba64:	3008      	adds	r0, #8
 801ba66:	e7ed      	b.n	801ba44 <_dtoa_r+0x464>
 801ba68:	2102      	movs	r1, #2
 801ba6a:	e759      	b.n	801b920 <_dtoa_r+0x340>
 801ba6c:	465a      	mov	r2, fp
 801ba6e:	464c      	mov	r4, r9
 801ba70:	e775      	b.n	801b95e <_dtoa_r+0x37e>
 801ba72:	ec41 0b17 	vmov	d7, r0, r1
 801ba76:	495c      	ldr	r1, [pc, #368]	; (801bbe8 <_dtoa_r+0x608>)
 801ba78:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801ba7c:	ed11 4b02 	vldr	d4, [r1, #-8]
 801ba80:	9901      	ldr	r1, [sp, #4]
 801ba82:	440c      	add	r4, r1
 801ba84:	9907      	ldr	r1, [sp, #28]
 801ba86:	b351      	cbz	r1, 801bade <_dtoa_r+0x4fe>
 801ba88:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801ba8c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801ba90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ba94:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801ba98:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ba9c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801baa0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801baa4:	ee14 1a90 	vmov	r1, s9
 801baa8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801baac:	3130      	adds	r1, #48	; 0x30
 801baae:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bab2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801baba:	f808 1b01 	strb.w	r1, [r8], #1
 801babe:	d439      	bmi.n	801bb34 <_dtoa_r+0x554>
 801bac0:	ee32 5b46 	vsub.f64	d5, d2, d6
 801bac4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801bac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bacc:	d472      	bmi.n	801bbb4 <_dtoa_r+0x5d4>
 801bace:	45a0      	cmp	r8, r4
 801bad0:	f43f af6b 	beq.w	801b9aa <_dtoa_r+0x3ca>
 801bad4:	ee27 7b03 	vmul.f64	d7, d7, d3
 801bad8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801badc:	e7e0      	b.n	801baa0 <_dtoa_r+0x4c0>
 801bade:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bae2:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bae6:	4620      	mov	r0, r4
 801bae8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801baec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801baf0:	ee14 1a90 	vmov	r1, s9
 801baf4:	3130      	adds	r1, #48	; 0x30
 801baf6:	f808 1b01 	strb.w	r1, [r8], #1
 801bafa:	45a0      	cmp	r8, r4
 801bafc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bb00:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bb04:	d118      	bne.n	801bb38 <_dtoa_r+0x558>
 801bb06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801bb0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801bb0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801bb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb16:	dc4d      	bgt.n	801bbb4 <_dtoa_r+0x5d4>
 801bb18:	ee35 5b47 	vsub.f64	d5, d5, d7
 801bb1c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801bb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb24:	f57f af41 	bpl.w	801b9aa <_dtoa_r+0x3ca>
 801bb28:	4680      	mov	r8, r0
 801bb2a:	3801      	subs	r0, #1
 801bb2c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801bb30:	2b30      	cmp	r3, #48	; 0x30
 801bb32:	d0f9      	beq.n	801bb28 <_dtoa_r+0x548>
 801bb34:	4693      	mov	fp, r2
 801bb36:	e02a      	b.n	801bb8e <_dtoa_r+0x5ae>
 801bb38:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bb3c:	e7d6      	b.n	801baec <_dtoa_r+0x50c>
 801bb3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bb42:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801bb46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bb4a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801bb4e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801bb52:	ee15 3a10 	vmov	r3, s10
 801bb56:	3330      	adds	r3, #48	; 0x30
 801bb58:	f808 3b01 	strb.w	r3, [r8], #1
 801bb5c:	9b01      	ldr	r3, [sp, #4]
 801bb5e:	eba8 0303 	sub.w	r3, r8, r3
 801bb62:	4599      	cmp	r9, r3
 801bb64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801bb68:	eea3 7b46 	vfms.f64	d7, d3, d6
 801bb6c:	d133      	bne.n	801bbd6 <_dtoa_r+0x5f6>
 801bb6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 801bb72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801bb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb7a:	dc1a      	bgt.n	801bbb2 <_dtoa_r+0x5d2>
 801bb7c:	eeb4 7b46 	vcmp.f64	d7, d6
 801bb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb84:	d103      	bne.n	801bb8e <_dtoa_r+0x5ae>
 801bb86:	ee15 3a10 	vmov	r3, s10
 801bb8a:	07d9      	lsls	r1, r3, #31
 801bb8c:	d411      	bmi.n	801bbb2 <_dtoa_r+0x5d2>
 801bb8e:	4629      	mov	r1, r5
 801bb90:	4630      	mov	r0, r6
 801bb92:	f000 fbd1 	bl	801c338 <_Bfree>
 801bb96:	2300      	movs	r3, #0
 801bb98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bb9a:	f888 3000 	strb.w	r3, [r8]
 801bb9e:	f10b 0301 	add.w	r3, fp, #1
 801bba2:	6013      	str	r3, [r2, #0]
 801bba4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	f43f ad69 	beq.w	801b67e <_dtoa_r+0x9e>
 801bbac:	f8c3 8000 	str.w	r8, [r3]
 801bbb0:	e565      	b.n	801b67e <_dtoa_r+0x9e>
 801bbb2:	465a      	mov	r2, fp
 801bbb4:	4643      	mov	r3, r8
 801bbb6:	4698      	mov	r8, r3
 801bbb8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801bbbc:	2939      	cmp	r1, #57	; 0x39
 801bbbe:	d106      	bne.n	801bbce <_dtoa_r+0x5ee>
 801bbc0:	9901      	ldr	r1, [sp, #4]
 801bbc2:	4299      	cmp	r1, r3
 801bbc4:	d1f7      	bne.n	801bbb6 <_dtoa_r+0x5d6>
 801bbc6:	9801      	ldr	r0, [sp, #4]
 801bbc8:	2130      	movs	r1, #48	; 0x30
 801bbca:	3201      	adds	r2, #1
 801bbcc:	7001      	strb	r1, [r0, #0]
 801bbce:	7819      	ldrb	r1, [r3, #0]
 801bbd0:	3101      	adds	r1, #1
 801bbd2:	7019      	strb	r1, [r3, #0]
 801bbd4:	e7ae      	b.n	801bb34 <_dtoa_r+0x554>
 801bbd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bbda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbe2:	d1b2      	bne.n	801bb4a <_dtoa_r+0x56a>
 801bbe4:	e7d3      	b.n	801bb8e <_dtoa_r+0x5ae>
 801bbe6:	bf00      	nop
 801bbe8:	08020880 	.word	0x08020880
 801bbec:	08020858 	.word	0x08020858
 801bbf0:	9907      	ldr	r1, [sp, #28]
 801bbf2:	2900      	cmp	r1, #0
 801bbf4:	f000 80d0 	beq.w	801bd98 <_dtoa_r+0x7b8>
 801bbf8:	9906      	ldr	r1, [sp, #24]
 801bbfa:	2901      	cmp	r1, #1
 801bbfc:	f300 80b4 	bgt.w	801bd68 <_dtoa_r+0x788>
 801bc00:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bc02:	2900      	cmp	r1, #0
 801bc04:	f000 80ac 	beq.w	801bd60 <_dtoa_r+0x780>
 801bc08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801bc0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801bc10:	461c      	mov	r4, r3
 801bc12:	9309      	str	r3, [sp, #36]	; 0x24
 801bc14:	9b04      	ldr	r3, [sp, #16]
 801bc16:	4413      	add	r3, r2
 801bc18:	9304      	str	r3, [sp, #16]
 801bc1a:	9b05      	ldr	r3, [sp, #20]
 801bc1c:	2101      	movs	r1, #1
 801bc1e:	4413      	add	r3, r2
 801bc20:	4630      	mov	r0, r6
 801bc22:	9305      	str	r3, [sp, #20]
 801bc24:	f000 fc3e 	bl	801c4a4 <__i2b>
 801bc28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc2a:	4607      	mov	r7, r0
 801bc2c:	f1b8 0f00 	cmp.w	r8, #0
 801bc30:	d00d      	beq.n	801bc4e <_dtoa_r+0x66e>
 801bc32:	9a05      	ldr	r2, [sp, #20]
 801bc34:	2a00      	cmp	r2, #0
 801bc36:	dd0a      	ble.n	801bc4e <_dtoa_r+0x66e>
 801bc38:	4542      	cmp	r2, r8
 801bc3a:	9904      	ldr	r1, [sp, #16]
 801bc3c:	bfa8      	it	ge
 801bc3e:	4642      	movge	r2, r8
 801bc40:	1a89      	subs	r1, r1, r2
 801bc42:	9104      	str	r1, [sp, #16]
 801bc44:	9905      	ldr	r1, [sp, #20]
 801bc46:	eba8 0802 	sub.w	r8, r8, r2
 801bc4a:	1a8a      	subs	r2, r1, r2
 801bc4c:	9205      	str	r2, [sp, #20]
 801bc4e:	b303      	cbz	r3, 801bc92 <_dtoa_r+0x6b2>
 801bc50:	9a07      	ldr	r2, [sp, #28]
 801bc52:	2a00      	cmp	r2, #0
 801bc54:	f000 80a5 	beq.w	801bda2 <_dtoa_r+0x7c2>
 801bc58:	2c00      	cmp	r4, #0
 801bc5a:	dd13      	ble.n	801bc84 <_dtoa_r+0x6a4>
 801bc5c:	4639      	mov	r1, r7
 801bc5e:	4622      	mov	r2, r4
 801bc60:	4630      	mov	r0, r6
 801bc62:	930d      	str	r3, [sp, #52]	; 0x34
 801bc64:	f000 fcde 	bl	801c624 <__pow5mult>
 801bc68:	462a      	mov	r2, r5
 801bc6a:	4601      	mov	r1, r0
 801bc6c:	4607      	mov	r7, r0
 801bc6e:	4630      	mov	r0, r6
 801bc70:	f000 fc2e 	bl	801c4d0 <__multiply>
 801bc74:	4629      	mov	r1, r5
 801bc76:	9009      	str	r0, [sp, #36]	; 0x24
 801bc78:	4630      	mov	r0, r6
 801bc7a:	f000 fb5d 	bl	801c338 <_Bfree>
 801bc7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bc80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc82:	4615      	mov	r5, r2
 801bc84:	1b1a      	subs	r2, r3, r4
 801bc86:	d004      	beq.n	801bc92 <_dtoa_r+0x6b2>
 801bc88:	4629      	mov	r1, r5
 801bc8a:	4630      	mov	r0, r6
 801bc8c:	f000 fcca 	bl	801c624 <__pow5mult>
 801bc90:	4605      	mov	r5, r0
 801bc92:	2101      	movs	r1, #1
 801bc94:	4630      	mov	r0, r6
 801bc96:	f000 fc05 	bl	801c4a4 <__i2b>
 801bc9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	4604      	mov	r4, r0
 801bca0:	f340 8081 	ble.w	801bda6 <_dtoa_r+0x7c6>
 801bca4:	461a      	mov	r2, r3
 801bca6:	4601      	mov	r1, r0
 801bca8:	4630      	mov	r0, r6
 801bcaa:	f000 fcbb 	bl	801c624 <__pow5mult>
 801bcae:	9b06      	ldr	r3, [sp, #24]
 801bcb0:	2b01      	cmp	r3, #1
 801bcb2:	4604      	mov	r4, r0
 801bcb4:	dd7a      	ble.n	801bdac <_dtoa_r+0x7cc>
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	9309      	str	r3, [sp, #36]	; 0x24
 801bcba:	6922      	ldr	r2, [r4, #16]
 801bcbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bcc0:	6910      	ldr	r0, [r2, #16]
 801bcc2:	f000 fba1 	bl	801c408 <__hi0bits>
 801bcc6:	f1c0 0020 	rsb	r0, r0, #32
 801bcca:	9b05      	ldr	r3, [sp, #20]
 801bccc:	4418      	add	r0, r3
 801bcce:	f010 001f 	ands.w	r0, r0, #31
 801bcd2:	f000 8093 	beq.w	801bdfc <_dtoa_r+0x81c>
 801bcd6:	f1c0 0220 	rsb	r2, r0, #32
 801bcda:	2a04      	cmp	r2, #4
 801bcdc:	f340 8085 	ble.w	801bdea <_dtoa_r+0x80a>
 801bce0:	9b04      	ldr	r3, [sp, #16]
 801bce2:	f1c0 001c 	rsb	r0, r0, #28
 801bce6:	4403      	add	r3, r0
 801bce8:	9304      	str	r3, [sp, #16]
 801bcea:	9b05      	ldr	r3, [sp, #20]
 801bcec:	4480      	add	r8, r0
 801bcee:	4403      	add	r3, r0
 801bcf0:	9305      	str	r3, [sp, #20]
 801bcf2:	9b04      	ldr	r3, [sp, #16]
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	dd05      	ble.n	801bd04 <_dtoa_r+0x724>
 801bcf8:	4629      	mov	r1, r5
 801bcfa:	461a      	mov	r2, r3
 801bcfc:	4630      	mov	r0, r6
 801bcfe:	f000 fceb 	bl	801c6d8 <__lshift>
 801bd02:	4605      	mov	r5, r0
 801bd04:	9b05      	ldr	r3, [sp, #20]
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	dd05      	ble.n	801bd16 <_dtoa_r+0x736>
 801bd0a:	4621      	mov	r1, r4
 801bd0c:	461a      	mov	r2, r3
 801bd0e:	4630      	mov	r0, r6
 801bd10:	f000 fce2 	bl	801c6d8 <__lshift>
 801bd14:	4604      	mov	r4, r0
 801bd16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d071      	beq.n	801be00 <_dtoa_r+0x820>
 801bd1c:	4621      	mov	r1, r4
 801bd1e:	4628      	mov	r0, r5
 801bd20:	f000 fd46 	bl	801c7b0 <__mcmp>
 801bd24:	2800      	cmp	r0, #0
 801bd26:	da6b      	bge.n	801be00 <_dtoa_r+0x820>
 801bd28:	2300      	movs	r3, #0
 801bd2a:	4629      	mov	r1, r5
 801bd2c:	220a      	movs	r2, #10
 801bd2e:	4630      	mov	r0, r6
 801bd30:	f000 fb24 	bl	801c37c <__multadd>
 801bd34:	9b07      	ldr	r3, [sp, #28]
 801bd36:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bd3a:	4605      	mov	r5, r0
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	f000 8197 	beq.w	801c070 <_dtoa_r+0xa90>
 801bd42:	4639      	mov	r1, r7
 801bd44:	2300      	movs	r3, #0
 801bd46:	220a      	movs	r2, #10
 801bd48:	4630      	mov	r0, r6
 801bd4a:	f000 fb17 	bl	801c37c <__multadd>
 801bd4e:	f1ba 0f00 	cmp.w	sl, #0
 801bd52:	4607      	mov	r7, r0
 801bd54:	f300 8093 	bgt.w	801be7e <_dtoa_r+0x89e>
 801bd58:	9b06      	ldr	r3, [sp, #24]
 801bd5a:	2b02      	cmp	r3, #2
 801bd5c:	dc57      	bgt.n	801be0e <_dtoa_r+0x82e>
 801bd5e:	e08e      	b.n	801be7e <_dtoa_r+0x89e>
 801bd60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bd62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bd66:	e751      	b.n	801bc0c <_dtoa_r+0x62c>
 801bd68:	f109 34ff 	add.w	r4, r9, #4294967295
 801bd6c:	42a3      	cmp	r3, r4
 801bd6e:	bfbf      	itttt	lt
 801bd70:	1ae2      	sublt	r2, r4, r3
 801bd72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bd74:	189b      	addlt	r3, r3, r2
 801bd76:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bd78:	bfae      	itee	ge
 801bd7a:	1b1c      	subge	r4, r3, r4
 801bd7c:	4623      	movlt	r3, r4
 801bd7e:	2400      	movlt	r4, #0
 801bd80:	f1b9 0f00 	cmp.w	r9, #0
 801bd84:	bfb5      	itete	lt
 801bd86:	9a04      	ldrlt	r2, [sp, #16]
 801bd88:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801bd8c:	eba2 0809 	sublt.w	r8, r2, r9
 801bd90:	464a      	movge	r2, r9
 801bd92:	bfb8      	it	lt
 801bd94:	2200      	movlt	r2, #0
 801bd96:	e73c      	b.n	801bc12 <_dtoa_r+0x632>
 801bd98:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801bd9c:	9f07      	ldr	r7, [sp, #28]
 801bd9e:	461c      	mov	r4, r3
 801bda0:	e744      	b.n	801bc2c <_dtoa_r+0x64c>
 801bda2:	461a      	mov	r2, r3
 801bda4:	e770      	b.n	801bc88 <_dtoa_r+0x6a8>
 801bda6:	9b06      	ldr	r3, [sp, #24]
 801bda8:	2b01      	cmp	r3, #1
 801bdaa:	dc18      	bgt.n	801bdde <_dtoa_r+0x7fe>
 801bdac:	9b02      	ldr	r3, [sp, #8]
 801bdae:	b9b3      	cbnz	r3, 801bdde <_dtoa_r+0x7fe>
 801bdb0:	9b03      	ldr	r3, [sp, #12]
 801bdb2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801bdb6:	b9a2      	cbnz	r2, 801bde2 <_dtoa_r+0x802>
 801bdb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801bdbc:	0d12      	lsrs	r2, r2, #20
 801bdbe:	0512      	lsls	r2, r2, #20
 801bdc0:	b18a      	cbz	r2, 801bde6 <_dtoa_r+0x806>
 801bdc2:	9b04      	ldr	r3, [sp, #16]
 801bdc4:	3301      	adds	r3, #1
 801bdc6:	9304      	str	r3, [sp, #16]
 801bdc8:	9b05      	ldr	r3, [sp, #20]
 801bdca:	3301      	adds	r3, #1
 801bdcc:	9305      	str	r3, [sp, #20]
 801bdce:	2301      	movs	r3, #1
 801bdd0:	9309      	str	r3, [sp, #36]	; 0x24
 801bdd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	f47f af70 	bne.w	801bcba <_dtoa_r+0x6da>
 801bdda:	2001      	movs	r0, #1
 801bddc:	e775      	b.n	801bcca <_dtoa_r+0x6ea>
 801bdde:	2300      	movs	r3, #0
 801bde0:	e7f6      	b.n	801bdd0 <_dtoa_r+0x7f0>
 801bde2:	9b02      	ldr	r3, [sp, #8]
 801bde4:	e7f4      	b.n	801bdd0 <_dtoa_r+0x7f0>
 801bde6:	9209      	str	r2, [sp, #36]	; 0x24
 801bde8:	e7f3      	b.n	801bdd2 <_dtoa_r+0x7f2>
 801bdea:	d082      	beq.n	801bcf2 <_dtoa_r+0x712>
 801bdec:	9b04      	ldr	r3, [sp, #16]
 801bdee:	321c      	adds	r2, #28
 801bdf0:	4413      	add	r3, r2
 801bdf2:	9304      	str	r3, [sp, #16]
 801bdf4:	9b05      	ldr	r3, [sp, #20]
 801bdf6:	4490      	add	r8, r2
 801bdf8:	4413      	add	r3, r2
 801bdfa:	e779      	b.n	801bcf0 <_dtoa_r+0x710>
 801bdfc:	4602      	mov	r2, r0
 801bdfe:	e7f5      	b.n	801bdec <_dtoa_r+0x80c>
 801be00:	f1b9 0f00 	cmp.w	r9, #0
 801be04:	dc36      	bgt.n	801be74 <_dtoa_r+0x894>
 801be06:	9b06      	ldr	r3, [sp, #24]
 801be08:	2b02      	cmp	r3, #2
 801be0a:	dd33      	ble.n	801be74 <_dtoa_r+0x894>
 801be0c:	46ca      	mov	sl, r9
 801be0e:	f1ba 0f00 	cmp.w	sl, #0
 801be12:	d10d      	bne.n	801be30 <_dtoa_r+0x850>
 801be14:	4621      	mov	r1, r4
 801be16:	4653      	mov	r3, sl
 801be18:	2205      	movs	r2, #5
 801be1a:	4630      	mov	r0, r6
 801be1c:	f000 faae 	bl	801c37c <__multadd>
 801be20:	4601      	mov	r1, r0
 801be22:	4604      	mov	r4, r0
 801be24:	4628      	mov	r0, r5
 801be26:	f000 fcc3 	bl	801c7b0 <__mcmp>
 801be2a:	2800      	cmp	r0, #0
 801be2c:	f73f ade4 	bgt.w	801b9f8 <_dtoa_r+0x418>
 801be30:	9b08      	ldr	r3, [sp, #32]
 801be32:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801be36:	ea6f 0b03 	mvn.w	fp, r3
 801be3a:	f04f 0900 	mov.w	r9, #0
 801be3e:	4621      	mov	r1, r4
 801be40:	4630      	mov	r0, r6
 801be42:	f000 fa79 	bl	801c338 <_Bfree>
 801be46:	2f00      	cmp	r7, #0
 801be48:	f43f aea1 	beq.w	801bb8e <_dtoa_r+0x5ae>
 801be4c:	f1b9 0f00 	cmp.w	r9, #0
 801be50:	d005      	beq.n	801be5e <_dtoa_r+0x87e>
 801be52:	45b9      	cmp	r9, r7
 801be54:	d003      	beq.n	801be5e <_dtoa_r+0x87e>
 801be56:	4649      	mov	r1, r9
 801be58:	4630      	mov	r0, r6
 801be5a:	f000 fa6d 	bl	801c338 <_Bfree>
 801be5e:	4639      	mov	r1, r7
 801be60:	4630      	mov	r0, r6
 801be62:	f000 fa69 	bl	801c338 <_Bfree>
 801be66:	e692      	b.n	801bb8e <_dtoa_r+0x5ae>
 801be68:	2400      	movs	r4, #0
 801be6a:	4627      	mov	r7, r4
 801be6c:	e7e0      	b.n	801be30 <_dtoa_r+0x850>
 801be6e:	4693      	mov	fp, r2
 801be70:	4627      	mov	r7, r4
 801be72:	e5c1      	b.n	801b9f8 <_dtoa_r+0x418>
 801be74:	9b07      	ldr	r3, [sp, #28]
 801be76:	46ca      	mov	sl, r9
 801be78:	2b00      	cmp	r3, #0
 801be7a:	f000 8100 	beq.w	801c07e <_dtoa_r+0xa9e>
 801be7e:	f1b8 0f00 	cmp.w	r8, #0
 801be82:	dd05      	ble.n	801be90 <_dtoa_r+0x8b0>
 801be84:	4639      	mov	r1, r7
 801be86:	4642      	mov	r2, r8
 801be88:	4630      	mov	r0, r6
 801be8a:	f000 fc25 	bl	801c6d8 <__lshift>
 801be8e:	4607      	mov	r7, r0
 801be90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be92:	2b00      	cmp	r3, #0
 801be94:	d05d      	beq.n	801bf52 <_dtoa_r+0x972>
 801be96:	6879      	ldr	r1, [r7, #4]
 801be98:	4630      	mov	r0, r6
 801be9a:	f000 fa0d 	bl	801c2b8 <_Balloc>
 801be9e:	4680      	mov	r8, r0
 801bea0:	b928      	cbnz	r0, 801beae <_dtoa_r+0x8ce>
 801bea2:	4b82      	ldr	r3, [pc, #520]	; (801c0ac <_dtoa_r+0xacc>)
 801bea4:	4602      	mov	r2, r0
 801bea6:	f240 21ef 	movw	r1, #751	; 0x2ef
 801beaa:	f7ff bbb1 	b.w	801b610 <_dtoa_r+0x30>
 801beae:	693a      	ldr	r2, [r7, #16]
 801beb0:	3202      	adds	r2, #2
 801beb2:	0092      	lsls	r2, r2, #2
 801beb4:	f107 010c 	add.w	r1, r7, #12
 801beb8:	300c      	adds	r0, #12
 801beba:	f7ff fada 	bl	801b472 <memcpy>
 801bebe:	2201      	movs	r2, #1
 801bec0:	4641      	mov	r1, r8
 801bec2:	4630      	mov	r0, r6
 801bec4:	f000 fc08 	bl	801c6d8 <__lshift>
 801bec8:	9b01      	ldr	r3, [sp, #4]
 801beca:	3301      	adds	r3, #1
 801becc:	9304      	str	r3, [sp, #16]
 801bece:	9b01      	ldr	r3, [sp, #4]
 801bed0:	4453      	add	r3, sl
 801bed2:	9308      	str	r3, [sp, #32]
 801bed4:	9b02      	ldr	r3, [sp, #8]
 801bed6:	f003 0301 	and.w	r3, r3, #1
 801beda:	46b9      	mov	r9, r7
 801bedc:	9307      	str	r3, [sp, #28]
 801bede:	4607      	mov	r7, r0
 801bee0:	9b04      	ldr	r3, [sp, #16]
 801bee2:	4621      	mov	r1, r4
 801bee4:	3b01      	subs	r3, #1
 801bee6:	4628      	mov	r0, r5
 801bee8:	9302      	str	r3, [sp, #8]
 801beea:	f7ff faef 	bl	801b4cc <quorem>
 801beee:	4603      	mov	r3, r0
 801bef0:	3330      	adds	r3, #48	; 0x30
 801bef2:	9005      	str	r0, [sp, #20]
 801bef4:	4649      	mov	r1, r9
 801bef6:	4628      	mov	r0, r5
 801bef8:	9309      	str	r3, [sp, #36]	; 0x24
 801befa:	f000 fc59 	bl	801c7b0 <__mcmp>
 801befe:	463a      	mov	r2, r7
 801bf00:	4682      	mov	sl, r0
 801bf02:	4621      	mov	r1, r4
 801bf04:	4630      	mov	r0, r6
 801bf06:	f000 fc6f 	bl	801c7e8 <__mdiff>
 801bf0a:	68c2      	ldr	r2, [r0, #12]
 801bf0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf0e:	4680      	mov	r8, r0
 801bf10:	bb0a      	cbnz	r2, 801bf56 <_dtoa_r+0x976>
 801bf12:	4601      	mov	r1, r0
 801bf14:	4628      	mov	r0, r5
 801bf16:	f000 fc4b 	bl	801c7b0 <__mcmp>
 801bf1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf1c:	4602      	mov	r2, r0
 801bf1e:	4641      	mov	r1, r8
 801bf20:	4630      	mov	r0, r6
 801bf22:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801bf26:	f000 fa07 	bl	801c338 <_Bfree>
 801bf2a:	9b06      	ldr	r3, [sp, #24]
 801bf2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bf2e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801bf32:	ea43 0102 	orr.w	r1, r3, r2
 801bf36:	9b07      	ldr	r3, [sp, #28]
 801bf38:	4319      	orrs	r1, r3
 801bf3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf3c:	d10d      	bne.n	801bf5a <_dtoa_r+0x97a>
 801bf3e:	2b39      	cmp	r3, #57	; 0x39
 801bf40:	d029      	beq.n	801bf96 <_dtoa_r+0x9b6>
 801bf42:	f1ba 0f00 	cmp.w	sl, #0
 801bf46:	dd01      	ble.n	801bf4c <_dtoa_r+0x96c>
 801bf48:	9b05      	ldr	r3, [sp, #20]
 801bf4a:	3331      	adds	r3, #49	; 0x31
 801bf4c:	9a02      	ldr	r2, [sp, #8]
 801bf4e:	7013      	strb	r3, [r2, #0]
 801bf50:	e775      	b.n	801be3e <_dtoa_r+0x85e>
 801bf52:	4638      	mov	r0, r7
 801bf54:	e7b8      	b.n	801bec8 <_dtoa_r+0x8e8>
 801bf56:	2201      	movs	r2, #1
 801bf58:	e7e1      	b.n	801bf1e <_dtoa_r+0x93e>
 801bf5a:	f1ba 0f00 	cmp.w	sl, #0
 801bf5e:	db06      	blt.n	801bf6e <_dtoa_r+0x98e>
 801bf60:	9906      	ldr	r1, [sp, #24]
 801bf62:	ea41 0a0a 	orr.w	sl, r1, sl
 801bf66:	9907      	ldr	r1, [sp, #28]
 801bf68:	ea5a 0a01 	orrs.w	sl, sl, r1
 801bf6c:	d120      	bne.n	801bfb0 <_dtoa_r+0x9d0>
 801bf6e:	2a00      	cmp	r2, #0
 801bf70:	ddec      	ble.n	801bf4c <_dtoa_r+0x96c>
 801bf72:	4629      	mov	r1, r5
 801bf74:	2201      	movs	r2, #1
 801bf76:	4630      	mov	r0, r6
 801bf78:	9304      	str	r3, [sp, #16]
 801bf7a:	f000 fbad 	bl	801c6d8 <__lshift>
 801bf7e:	4621      	mov	r1, r4
 801bf80:	4605      	mov	r5, r0
 801bf82:	f000 fc15 	bl	801c7b0 <__mcmp>
 801bf86:	2800      	cmp	r0, #0
 801bf88:	9b04      	ldr	r3, [sp, #16]
 801bf8a:	dc02      	bgt.n	801bf92 <_dtoa_r+0x9b2>
 801bf8c:	d1de      	bne.n	801bf4c <_dtoa_r+0x96c>
 801bf8e:	07da      	lsls	r2, r3, #31
 801bf90:	d5dc      	bpl.n	801bf4c <_dtoa_r+0x96c>
 801bf92:	2b39      	cmp	r3, #57	; 0x39
 801bf94:	d1d8      	bne.n	801bf48 <_dtoa_r+0x968>
 801bf96:	9a02      	ldr	r2, [sp, #8]
 801bf98:	2339      	movs	r3, #57	; 0x39
 801bf9a:	7013      	strb	r3, [r2, #0]
 801bf9c:	4643      	mov	r3, r8
 801bf9e:	4698      	mov	r8, r3
 801bfa0:	3b01      	subs	r3, #1
 801bfa2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801bfa6:	2a39      	cmp	r2, #57	; 0x39
 801bfa8:	d051      	beq.n	801c04e <_dtoa_r+0xa6e>
 801bfaa:	3201      	adds	r2, #1
 801bfac:	701a      	strb	r2, [r3, #0]
 801bfae:	e746      	b.n	801be3e <_dtoa_r+0x85e>
 801bfb0:	2a00      	cmp	r2, #0
 801bfb2:	dd03      	ble.n	801bfbc <_dtoa_r+0x9dc>
 801bfb4:	2b39      	cmp	r3, #57	; 0x39
 801bfb6:	d0ee      	beq.n	801bf96 <_dtoa_r+0x9b6>
 801bfb8:	3301      	adds	r3, #1
 801bfba:	e7c7      	b.n	801bf4c <_dtoa_r+0x96c>
 801bfbc:	9a04      	ldr	r2, [sp, #16]
 801bfbe:	9908      	ldr	r1, [sp, #32]
 801bfc0:	f802 3c01 	strb.w	r3, [r2, #-1]
 801bfc4:	428a      	cmp	r2, r1
 801bfc6:	d02b      	beq.n	801c020 <_dtoa_r+0xa40>
 801bfc8:	4629      	mov	r1, r5
 801bfca:	2300      	movs	r3, #0
 801bfcc:	220a      	movs	r2, #10
 801bfce:	4630      	mov	r0, r6
 801bfd0:	f000 f9d4 	bl	801c37c <__multadd>
 801bfd4:	45b9      	cmp	r9, r7
 801bfd6:	4605      	mov	r5, r0
 801bfd8:	f04f 0300 	mov.w	r3, #0
 801bfdc:	f04f 020a 	mov.w	r2, #10
 801bfe0:	4649      	mov	r1, r9
 801bfe2:	4630      	mov	r0, r6
 801bfe4:	d107      	bne.n	801bff6 <_dtoa_r+0xa16>
 801bfe6:	f000 f9c9 	bl	801c37c <__multadd>
 801bfea:	4681      	mov	r9, r0
 801bfec:	4607      	mov	r7, r0
 801bfee:	9b04      	ldr	r3, [sp, #16]
 801bff0:	3301      	adds	r3, #1
 801bff2:	9304      	str	r3, [sp, #16]
 801bff4:	e774      	b.n	801bee0 <_dtoa_r+0x900>
 801bff6:	f000 f9c1 	bl	801c37c <__multadd>
 801bffa:	4639      	mov	r1, r7
 801bffc:	4681      	mov	r9, r0
 801bffe:	2300      	movs	r3, #0
 801c000:	220a      	movs	r2, #10
 801c002:	4630      	mov	r0, r6
 801c004:	f000 f9ba 	bl	801c37c <__multadd>
 801c008:	4607      	mov	r7, r0
 801c00a:	e7f0      	b.n	801bfee <_dtoa_r+0xa0e>
 801c00c:	f1ba 0f00 	cmp.w	sl, #0
 801c010:	9a01      	ldr	r2, [sp, #4]
 801c012:	bfcc      	ite	gt
 801c014:	46d0      	movgt	r8, sl
 801c016:	f04f 0801 	movle.w	r8, #1
 801c01a:	4490      	add	r8, r2
 801c01c:	f04f 0900 	mov.w	r9, #0
 801c020:	4629      	mov	r1, r5
 801c022:	2201      	movs	r2, #1
 801c024:	4630      	mov	r0, r6
 801c026:	9302      	str	r3, [sp, #8]
 801c028:	f000 fb56 	bl	801c6d8 <__lshift>
 801c02c:	4621      	mov	r1, r4
 801c02e:	4605      	mov	r5, r0
 801c030:	f000 fbbe 	bl	801c7b0 <__mcmp>
 801c034:	2800      	cmp	r0, #0
 801c036:	dcb1      	bgt.n	801bf9c <_dtoa_r+0x9bc>
 801c038:	d102      	bne.n	801c040 <_dtoa_r+0xa60>
 801c03a:	9b02      	ldr	r3, [sp, #8]
 801c03c:	07db      	lsls	r3, r3, #31
 801c03e:	d4ad      	bmi.n	801bf9c <_dtoa_r+0x9bc>
 801c040:	4643      	mov	r3, r8
 801c042:	4698      	mov	r8, r3
 801c044:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c048:	2a30      	cmp	r2, #48	; 0x30
 801c04a:	d0fa      	beq.n	801c042 <_dtoa_r+0xa62>
 801c04c:	e6f7      	b.n	801be3e <_dtoa_r+0x85e>
 801c04e:	9a01      	ldr	r2, [sp, #4]
 801c050:	429a      	cmp	r2, r3
 801c052:	d1a4      	bne.n	801bf9e <_dtoa_r+0x9be>
 801c054:	f10b 0b01 	add.w	fp, fp, #1
 801c058:	2331      	movs	r3, #49	; 0x31
 801c05a:	e778      	b.n	801bf4e <_dtoa_r+0x96e>
 801c05c:	4b14      	ldr	r3, [pc, #80]	; (801c0b0 <_dtoa_r+0xad0>)
 801c05e:	f7ff bb2a 	b.w	801b6b6 <_dtoa_r+0xd6>
 801c062:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c064:	2b00      	cmp	r3, #0
 801c066:	f47f ab05 	bne.w	801b674 <_dtoa_r+0x94>
 801c06a:	4b12      	ldr	r3, [pc, #72]	; (801c0b4 <_dtoa_r+0xad4>)
 801c06c:	f7ff bb23 	b.w	801b6b6 <_dtoa_r+0xd6>
 801c070:	f1ba 0f00 	cmp.w	sl, #0
 801c074:	dc03      	bgt.n	801c07e <_dtoa_r+0xa9e>
 801c076:	9b06      	ldr	r3, [sp, #24]
 801c078:	2b02      	cmp	r3, #2
 801c07a:	f73f aec8 	bgt.w	801be0e <_dtoa_r+0x82e>
 801c07e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c082:	4621      	mov	r1, r4
 801c084:	4628      	mov	r0, r5
 801c086:	f7ff fa21 	bl	801b4cc <quorem>
 801c08a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801c08e:	f808 3b01 	strb.w	r3, [r8], #1
 801c092:	9a01      	ldr	r2, [sp, #4]
 801c094:	eba8 0202 	sub.w	r2, r8, r2
 801c098:	4592      	cmp	sl, r2
 801c09a:	ddb7      	ble.n	801c00c <_dtoa_r+0xa2c>
 801c09c:	4629      	mov	r1, r5
 801c09e:	2300      	movs	r3, #0
 801c0a0:	220a      	movs	r2, #10
 801c0a2:	4630      	mov	r0, r6
 801c0a4:	f000 f96a 	bl	801c37c <__multadd>
 801c0a8:	4605      	mov	r5, r0
 801c0aa:	e7ea      	b.n	801c082 <_dtoa_r+0xaa2>
 801c0ac:	080207e9 	.word	0x080207e9
 801c0b0:	08020724 	.word	0x08020724
 801c0b4:	08020784 	.word	0x08020784

0801c0b8 <_free_r>:
 801c0b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c0ba:	2900      	cmp	r1, #0
 801c0bc:	d044      	beq.n	801c148 <_free_r+0x90>
 801c0be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c0c2:	9001      	str	r0, [sp, #4]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	f1a1 0404 	sub.w	r4, r1, #4
 801c0ca:	bfb8      	it	lt
 801c0cc:	18e4      	addlt	r4, r4, r3
 801c0ce:	f000 f8e7 	bl	801c2a0 <__malloc_lock>
 801c0d2:	4a1e      	ldr	r2, [pc, #120]	; (801c14c <_free_r+0x94>)
 801c0d4:	9801      	ldr	r0, [sp, #4]
 801c0d6:	6813      	ldr	r3, [r2, #0]
 801c0d8:	b933      	cbnz	r3, 801c0e8 <_free_r+0x30>
 801c0da:	6063      	str	r3, [r4, #4]
 801c0dc:	6014      	str	r4, [r2, #0]
 801c0de:	b003      	add	sp, #12
 801c0e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c0e4:	f000 b8e2 	b.w	801c2ac <__malloc_unlock>
 801c0e8:	42a3      	cmp	r3, r4
 801c0ea:	d908      	bls.n	801c0fe <_free_r+0x46>
 801c0ec:	6825      	ldr	r5, [r4, #0]
 801c0ee:	1961      	adds	r1, r4, r5
 801c0f0:	428b      	cmp	r3, r1
 801c0f2:	bf01      	itttt	eq
 801c0f4:	6819      	ldreq	r1, [r3, #0]
 801c0f6:	685b      	ldreq	r3, [r3, #4]
 801c0f8:	1949      	addeq	r1, r1, r5
 801c0fa:	6021      	streq	r1, [r4, #0]
 801c0fc:	e7ed      	b.n	801c0da <_free_r+0x22>
 801c0fe:	461a      	mov	r2, r3
 801c100:	685b      	ldr	r3, [r3, #4]
 801c102:	b10b      	cbz	r3, 801c108 <_free_r+0x50>
 801c104:	42a3      	cmp	r3, r4
 801c106:	d9fa      	bls.n	801c0fe <_free_r+0x46>
 801c108:	6811      	ldr	r1, [r2, #0]
 801c10a:	1855      	adds	r5, r2, r1
 801c10c:	42a5      	cmp	r5, r4
 801c10e:	d10b      	bne.n	801c128 <_free_r+0x70>
 801c110:	6824      	ldr	r4, [r4, #0]
 801c112:	4421      	add	r1, r4
 801c114:	1854      	adds	r4, r2, r1
 801c116:	42a3      	cmp	r3, r4
 801c118:	6011      	str	r1, [r2, #0]
 801c11a:	d1e0      	bne.n	801c0de <_free_r+0x26>
 801c11c:	681c      	ldr	r4, [r3, #0]
 801c11e:	685b      	ldr	r3, [r3, #4]
 801c120:	6053      	str	r3, [r2, #4]
 801c122:	440c      	add	r4, r1
 801c124:	6014      	str	r4, [r2, #0]
 801c126:	e7da      	b.n	801c0de <_free_r+0x26>
 801c128:	d902      	bls.n	801c130 <_free_r+0x78>
 801c12a:	230c      	movs	r3, #12
 801c12c:	6003      	str	r3, [r0, #0]
 801c12e:	e7d6      	b.n	801c0de <_free_r+0x26>
 801c130:	6825      	ldr	r5, [r4, #0]
 801c132:	1961      	adds	r1, r4, r5
 801c134:	428b      	cmp	r3, r1
 801c136:	bf04      	itt	eq
 801c138:	6819      	ldreq	r1, [r3, #0]
 801c13a:	685b      	ldreq	r3, [r3, #4]
 801c13c:	6063      	str	r3, [r4, #4]
 801c13e:	bf04      	itt	eq
 801c140:	1949      	addeq	r1, r1, r5
 801c142:	6021      	streq	r1, [r4, #0]
 801c144:	6054      	str	r4, [r2, #4]
 801c146:	e7ca      	b.n	801c0de <_free_r+0x26>
 801c148:	b003      	add	sp, #12
 801c14a:	bd30      	pop	{r4, r5, pc}
 801c14c:	2001df88 	.word	0x2001df88

0801c150 <malloc>:
 801c150:	4b02      	ldr	r3, [pc, #8]	; (801c15c <malloc+0xc>)
 801c152:	4601      	mov	r1, r0
 801c154:	6818      	ldr	r0, [r3, #0]
 801c156:	f000 b823 	b.w	801c1a0 <_malloc_r>
 801c15a:	bf00      	nop
 801c15c:	20000090 	.word	0x20000090

0801c160 <sbrk_aligned>:
 801c160:	b570      	push	{r4, r5, r6, lr}
 801c162:	4e0e      	ldr	r6, [pc, #56]	; (801c19c <sbrk_aligned+0x3c>)
 801c164:	460c      	mov	r4, r1
 801c166:	6831      	ldr	r1, [r6, #0]
 801c168:	4605      	mov	r5, r0
 801c16a:	b911      	cbnz	r1, 801c172 <sbrk_aligned+0x12>
 801c16c:	f000 feba 	bl	801cee4 <_sbrk_r>
 801c170:	6030      	str	r0, [r6, #0]
 801c172:	4621      	mov	r1, r4
 801c174:	4628      	mov	r0, r5
 801c176:	f000 feb5 	bl	801cee4 <_sbrk_r>
 801c17a:	1c43      	adds	r3, r0, #1
 801c17c:	d00a      	beq.n	801c194 <sbrk_aligned+0x34>
 801c17e:	1cc4      	adds	r4, r0, #3
 801c180:	f024 0403 	bic.w	r4, r4, #3
 801c184:	42a0      	cmp	r0, r4
 801c186:	d007      	beq.n	801c198 <sbrk_aligned+0x38>
 801c188:	1a21      	subs	r1, r4, r0
 801c18a:	4628      	mov	r0, r5
 801c18c:	f000 feaa 	bl	801cee4 <_sbrk_r>
 801c190:	3001      	adds	r0, #1
 801c192:	d101      	bne.n	801c198 <sbrk_aligned+0x38>
 801c194:	f04f 34ff 	mov.w	r4, #4294967295
 801c198:	4620      	mov	r0, r4
 801c19a:	bd70      	pop	{r4, r5, r6, pc}
 801c19c:	2001df8c 	.word	0x2001df8c

0801c1a0 <_malloc_r>:
 801c1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1a4:	1ccd      	adds	r5, r1, #3
 801c1a6:	f025 0503 	bic.w	r5, r5, #3
 801c1aa:	3508      	adds	r5, #8
 801c1ac:	2d0c      	cmp	r5, #12
 801c1ae:	bf38      	it	cc
 801c1b0:	250c      	movcc	r5, #12
 801c1b2:	2d00      	cmp	r5, #0
 801c1b4:	4607      	mov	r7, r0
 801c1b6:	db01      	blt.n	801c1bc <_malloc_r+0x1c>
 801c1b8:	42a9      	cmp	r1, r5
 801c1ba:	d905      	bls.n	801c1c8 <_malloc_r+0x28>
 801c1bc:	230c      	movs	r3, #12
 801c1be:	603b      	str	r3, [r7, #0]
 801c1c0:	2600      	movs	r6, #0
 801c1c2:	4630      	mov	r0, r6
 801c1c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c1c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c29c <_malloc_r+0xfc>
 801c1cc:	f000 f868 	bl	801c2a0 <__malloc_lock>
 801c1d0:	f8d8 3000 	ldr.w	r3, [r8]
 801c1d4:	461c      	mov	r4, r3
 801c1d6:	bb5c      	cbnz	r4, 801c230 <_malloc_r+0x90>
 801c1d8:	4629      	mov	r1, r5
 801c1da:	4638      	mov	r0, r7
 801c1dc:	f7ff ffc0 	bl	801c160 <sbrk_aligned>
 801c1e0:	1c43      	adds	r3, r0, #1
 801c1e2:	4604      	mov	r4, r0
 801c1e4:	d155      	bne.n	801c292 <_malloc_r+0xf2>
 801c1e6:	f8d8 4000 	ldr.w	r4, [r8]
 801c1ea:	4626      	mov	r6, r4
 801c1ec:	2e00      	cmp	r6, #0
 801c1ee:	d145      	bne.n	801c27c <_malloc_r+0xdc>
 801c1f0:	2c00      	cmp	r4, #0
 801c1f2:	d048      	beq.n	801c286 <_malloc_r+0xe6>
 801c1f4:	6823      	ldr	r3, [r4, #0]
 801c1f6:	4631      	mov	r1, r6
 801c1f8:	4638      	mov	r0, r7
 801c1fa:	eb04 0903 	add.w	r9, r4, r3
 801c1fe:	f000 fe71 	bl	801cee4 <_sbrk_r>
 801c202:	4581      	cmp	r9, r0
 801c204:	d13f      	bne.n	801c286 <_malloc_r+0xe6>
 801c206:	6821      	ldr	r1, [r4, #0]
 801c208:	1a6d      	subs	r5, r5, r1
 801c20a:	4629      	mov	r1, r5
 801c20c:	4638      	mov	r0, r7
 801c20e:	f7ff ffa7 	bl	801c160 <sbrk_aligned>
 801c212:	3001      	adds	r0, #1
 801c214:	d037      	beq.n	801c286 <_malloc_r+0xe6>
 801c216:	6823      	ldr	r3, [r4, #0]
 801c218:	442b      	add	r3, r5
 801c21a:	6023      	str	r3, [r4, #0]
 801c21c:	f8d8 3000 	ldr.w	r3, [r8]
 801c220:	2b00      	cmp	r3, #0
 801c222:	d038      	beq.n	801c296 <_malloc_r+0xf6>
 801c224:	685a      	ldr	r2, [r3, #4]
 801c226:	42a2      	cmp	r2, r4
 801c228:	d12b      	bne.n	801c282 <_malloc_r+0xe2>
 801c22a:	2200      	movs	r2, #0
 801c22c:	605a      	str	r2, [r3, #4]
 801c22e:	e00f      	b.n	801c250 <_malloc_r+0xb0>
 801c230:	6822      	ldr	r2, [r4, #0]
 801c232:	1b52      	subs	r2, r2, r5
 801c234:	d41f      	bmi.n	801c276 <_malloc_r+0xd6>
 801c236:	2a0b      	cmp	r2, #11
 801c238:	d917      	bls.n	801c26a <_malloc_r+0xca>
 801c23a:	1961      	adds	r1, r4, r5
 801c23c:	42a3      	cmp	r3, r4
 801c23e:	6025      	str	r5, [r4, #0]
 801c240:	bf18      	it	ne
 801c242:	6059      	strne	r1, [r3, #4]
 801c244:	6863      	ldr	r3, [r4, #4]
 801c246:	bf08      	it	eq
 801c248:	f8c8 1000 	streq.w	r1, [r8]
 801c24c:	5162      	str	r2, [r4, r5]
 801c24e:	604b      	str	r3, [r1, #4]
 801c250:	4638      	mov	r0, r7
 801c252:	f104 060b 	add.w	r6, r4, #11
 801c256:	f000 f829 	bl	801c2ac <__malloc_unlock>
 801c25a:	f026 0607 	bic.w	r6, r6, #7
 801c25e:	1d23      	adds	r3, r4, #4
 801c260:	1af2      	subs	r2, r6, r3
 801c262:	d0ae      	beq.n	801c1c2 <_malloc_r+0x22>
 801c264:	1b9b      	subs	r3, r3, r6
 801c266:	50a3      	str	r3, [r4, r2]
 801c268:	e7ab      	b.n	801c1c2 <_malloc_r+0x22>
 801c26a:	42a3      	cmp	r3, r4
 801c26c:	6862      	ldr	r2, [r4, #4]
 801c26e:	d1dd      	bne.n	801c22c <_malloc_r+0x8c>
 801c270:	f8c8 2000 	str.w	r2, [r8]
 801c274:	e7ec      	b.n	801c250 <_malloc_r+0xb0>
 801c276:	4623      	mov	r3, r4
 801c278:	6864      	ldr	r4, [r4, #4]
 801c27a:	e7ac      	b.n	801c1d6 <_malloc_r+0x36>
 801c27c:	4634      	mov	r4, r6
 801c27e:	6876      	ldr	r6, [r6, #4]
 801c280:	e7b4      	b.n	801c1ec <_malloc_r+0x4c>
 801c282:	4613      	mov	r3, r2
 801c284:	e7cc      	b.n	801c220 <_malloc_r+0x80>
 801c286:	230c      	movs	r3, #12
 801c288:	603b      	str	r3, [r7, #0]
 801c28a:	4638      	mov	r0, r7
 801c28c:	f000 f80e 	bl	801c2ac <__malloc_unlock>
 801c290:	e797      	b.n	801c1c2 <_malloc_r+0x22>
 801c292:	6025      	str	r5, [r4, #0]
 801c294:	e7dc      	b.n	801c250 <_malloc_r+0xb0>
 801c296:	605b      	str	r3, [r3, #4]
 801c298:	deff      	udf	#255	; 0xff
 801c29a:	bf00      	nop
 801c29c:	2001df88 	.word	0x2001df88

0801c2a0 <__malloc_lock>:
 801c2a0:	4801      	ldr	r0, [pc, #4]	; (801c2a8 <__malloc_lock+0x8>)
 801c2a2:	f7ff b8e4 	b.w	801b46e <__retarget_lock_acquire_recursive>
 801c2a6:	bf00      	nop
 801c2a8:	2001df84 	.word	0x2001df84

0801c2ac <__malloc_unlock>:
 801c2ac:	4801      	ldr	r0, [pc, #4]	; (801c2b4 <__malloc_unlock+0x8>)
 801c2ae:	f7ff b8df 	b.w	801b470 <__retarget_lock_release_recursive>
 801c2b2:	bf00      	nop
 801c2b4:	2001df84 	.word	0x2001df84

0801c2b8 <_Balloc>:
 801c2b8:	b570      	push	{r4, r5, r6, lr}
 801c2ba:	69c6      	ldr	r6, [r0, #28]
 801c2bc:	4604      	mov	r4, r0
 801c2be:	460d      	mov	r5, r1
 801c2c0:	b976      	cbnz	r6, 801c2e0 <_Balloc+0x28>
 801c2c2:	2010      	movs	r0, #16
 801c2c4:	f7ff ff44 	bl	801c150 <malloc>
 801c2c8:	4602      	mov	r2, r0
 801c2ca:	61e0      	str	r0, [r4, #28]
 801c2cc:	b920      	cbnz	r0, 801c2d8 <_Balloc+0x20>
 801c2ce:	4b18      	ldr	r3, [pc, #96]	; (801c330 <_Balloc+0x78>)
 801c2d0:	4818      	ldr	r0, [pc, #96]	; (801c334 <_Balloc+0x7c>)
 801c2d2:	216b      	movs	r1, #107	; 0x6b
 801c2d4:	f7ff f8dc 	bl	801b490 <__assert_func>
 801c2d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c2dc:	6006      	str	r6, [r0, #0]
 801c2de:	60c6      	str	r6, [r0, #12]
 801c2e0:	69e6      	ldr	r6, [r4, #28]
 801c2e2:	68f3      	ldr	r3, [r6, #12]
 801c2e4:	b183      	cbz	r3, 801c308 <_Balloc+0x50>
 801c2e6:	69e3      	ldr	r3, [r4, #28]
 801c2e8:	68db      	ldr	r3, [r3, #12]
 801c2ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c2ee:	b9b8      	cbnz	r0, 801c320 <_Balloc+0x68>
 801c2f0:	2101      	movs	r1, #1
 801c2f2:	fa01 f605 	lsl.w	r6, r1, r5
 801c2f6:	1d72      	adds	r2, r6, #5
 801c2f8:	0092      	lsls	r2, r2, #2
 801c2fa:	4620      	mov	r0, r4
 801c2fc:	f000 fe09 	bl	801cf12 <_calloc_r>
 801c300:	b160      	cbz	r0, 801c31c <_Balloc+0x64>
 801c302:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c306:	e00e      	b.n	801c326 <_Balloc+0x6e>
 801c308:	2221      	movs	r2, #33	; 0x21
 801c30a:	2104      	movs	r1, #4
 801c30c:	4620      	mov	r0, r4
 801c30e:	f000 fe00 	bl	801cf12 <_calloc_r>
 801c312:	69e3      	ldr	r3, [r4, #28]
 801c314:	60f0      	str	r0, [r6, #12]
 801c316:	68db      	ldr	r3, [r3, #12]
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d1e4      	bne.n	801c2e6 <_Balloc+0x2e>
 801c31c:	2000      	movs	r0, #0
 801c31e:	bd70      	pop	{r4, r5, r6, pc}
 801c320:	6802      	ldr	r2, [r0, #0]
 801c322:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c326:	2300      	movs	r3, #0
 801c328:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c32c:	e7f7      	b.n	801c31e <_Balloc+0x66>
 801c32e:	bf00      	nop
 801c330:	080205a4 	.word	0x080205a4
 801c334:	080207fa 	.word	0x080207fa

0801c338 <_Bfree>:
 801c338:	b570      	push	{r4, r5, r6, lr}
 801c33a:	69c6      	ldr	r6, [r0, #28]
 801c33c:	4605      	mov	r5, r0
 801c33e:	460c      	mov	r4, r1
 801c340:	b976      	cbnz	r6, 801c360 <_Bfree+0x28>
 801c342:	2010      	movs	r0, #16
 801c344:	f7ff ff04 	bl	801c150 <malloc>
 801c348:	4602      	mov	r2, r0
 801c34a:	61e8      	str	r0, [r5, #28]
 801c34c:	b920      	cbnz	r0, 801c358 <_Bfree+0x20>
 801c34e:	4b09      	ldr	r3, [pc, #36]	; (801c374 <_Bfree+0x3c>)
 801c350:	4809      	ldr	r0, [pc, #36]	; (801c378 <_Bfree+0x40>)
 801c352:	218f      	movs	r1, #143	; 0x8f
 801c354:	f7ff f89c 	bl	801b490 <__assert_func>
 801c358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c35c:	6006      	str	r6, [r0, #0]
 801c35e:	60c6      	str	r6, [r0, #12]
 801c360:	b13c      	cbz	r4, 801c372 <_Bfree+0x3a>
 801c362:	69eb      	ldr	r3, [r5, #28]
 801c364:	6862      	ldr	r2, [r4, #4]
 801c366:	68db      	ldr	r3, [r3, #12]
 801c368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c36c:	6021      	str	r1, [r4, #0]
 801c36e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c372:	bd70      	pop	{r4, r5, r6, pc}
 801c374:	080205a4 	.word	0x080205a4
 801c378:	080207fa 	.word	0x080207fa

0801c37c <__multadd>:
 801c37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c380:	690d      	ldr	r5, [r1, #16]
 801c382:	4607      	mov	r7, r0
 801c384:	460c      	mov	r4, r1
 801c386:	461e      	mov	r6, r3
 801c388:	f101 0c14 	add.w	ip, r1, #20
 801c38c:	2000      	movs	r0, #0
 801c38e:	f8dc 3000 	ldr.w	r3, [ip]
 801c392:	b299      	uxth	r1, r3
 801c394:	fb02 6101 	mla	r1, r2, r1, r6
 801c398:	0c1e      	lsrs	r6, r3, #16
 801c39a:	0c0b      	lsrs	r3, r1, #16
 801c39c:	fb02 3306 	mla	r3, r2, r6, r3
 801c3a0:	b289      	uxth	r1, r1
 801c3a2:	3001      	adds	r0, #1
 801c3a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c3a8:	4285      	cmp	r5, r0
 801c3aa:	f84c 1b04 	str.w	r1, [ip], #4
 801c3ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c3b2:	dcec      	bgt.n	801c38e <__multadd+0x12>
 801c3b4:	b30e      	cbz	r6, 801c3fa <__multadd+0x7e>
 801c3b6:	68a3      	ldr	r3, [r4, #8]
 801c3b8:	42ab      	cmp	r3, r5
 801c3ba:	dc19      	bgt.n	801c3f0 <__multadd+0x74>
 801c3bc:	6861      	ldr	r1, [r4, #4]
 801c3be:	4638      	mov	r0, r7
 801c3c0:	3101      	adds	r1, #1
 801c3c2:	f7ff ff79 	bl	801c2b8 <_Balloc>
 801c3c6:	4680      	mov	r8, r0
 801c3c8:	b928      	cbnz	r0, 801c3d6 <__multadd+0x5a>
 801c3ca:	4602      	mov	r2, r0
 801c3cc:	4b0c      	ldr	r3, [pc, #48]	; (801c400 <__multadd+0x84>)
 801c3ce:	480d      	ldr	r0, [pc, #52]	; (801c404 <__multadd+0x88>)
 801c3d0:	21ba      	movs	r1, #186	; 0xba
 801c3d2:	f7ff f85d 	bl	801b490 <__assert_func>
 801c3d6:	6922      	ldr	r2, [r4, #16]
 801c3d8:	3202      	adds	r2, #2
 801c3da:	f104 010c 	add.w	r1, r4, #12
 801c3de:	0092      	lsls	r2, r2, #2
 801c3e0:	300c      	adds	r0, #12
 801c3e2:	f7ff f846 	bl	801b472 <memcpy>
 801c3e6:	4621      	mov	r1, r4
 801c3e8:	4638      	mov	r0, r7
 801c3ea:	f7ff ffa5 	bl	801c338 <_Bfree>
 801c3ee:	4644      	mov	r4, r8
 801c3f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c3f4:	3501      	adds	r5, #1
 801c3f6:	615e      	str	r6, [r3, #20]
 801c3f8:	6125      	str	r5, [r4, #16]
 801c3fa:	4620      	mov	r0, r4
 801c3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c400:	080207e9 	.word	0x080207e9
 801c404:	080207fa 	.word	0x080207fa

0801c408 <__hi0bits>:
 801c408:	0c03      	lsrs	r3, r0, #16
 801c40a:	041b      	lsls	r3, r3, #16
 801c40c:	b9d3      	cbnz	r3, 801c444 <__hi0bits+0x3c>
 801c40e:	0400      	lsls	r0, r0, #16
 801c410:	2310      	movs	r3, #16
 801c412:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c416:	bf04      	itt	eq
 801c418:	0200      	lsleq	r0, r0, #8
 801c41a:	3308      	addeq	r3, #8
 801c41c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c420:	bf04      	itt	eq
 801c422:	0100      	lsleq	r0, r0, #4
 801c424:	3304      	addeq	r3, #4
 801c426:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c42a:	bf04      	itt	eq
 801c42c:	0080      	lsleq	r0, r0, #2
 801c42e:	3302      	addeq	r3, #2
 801c430:	2800      	cmp	r0, #0
 801c432:	db05      	blt.n	801c440 <__hi0bits+0x38>
 801c434:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c438:	f103 0301 	add.w	r3, r3, #1
 801c43c:	bf08      	it	eq
 801c43e:	2320      	moveq	r3, #32
 801c440:	4618      	mov	r0, r3
 801c442:	4770      	bx	lr
 801c444:	2300      	movs	r3, #0
 801c446:	e7e4      	b.n	801c412 <__hi0bits+0xa>

0801c448 <__lo0bits>:
 801c448:	6803      	ldr	r3, [r0, #0]
 801c44a:	f013 0207 	ands.w	r2, r3, #7
 801c44e:	d00c      	beq.n	801c46a <__lo0bits+0x22>
 801c450:	07d9      	lsls	r1, r3, #31
 801c452:	d422      	bmi.n	801c49a <__lo0bits+0x52>
 801c454:	079a      	lsls	r2, r3, #30
 801c456:	bf49      	itett	mi
 801c458:	085b      	lsrmi	r3, r3, #1
 801c45a:	089b      	lsrpl	r3, r3, #2
 801c45c:	6003      	strmi	r3, [r0, #0]
 801c45e:	2201      	movmi	r2, #1
 801c460:	bf5c      	itt	pl
 801c462:	6003      	strpl	r3, [r0, #0]
 801c464:	2202      	movpl	r2, #2
 801c466:	4610      	mov	r0, r2
 801c468:	4770      	bx	lr
 801c46a:	b299      	uxth	r1, r3
 801c46c:	b909      	cbnz	r1, 801c472 <__lo0bits+0x2a>
 801c46e:	0c1b      	lsrs	r3, r3, #16
 801c470:	2210      	movs	r2, #16
 801c472:	b2d9      	uxtb	r1, r3
 801c474:	b909      	cbnz	r1, 801c47a <__lo0bits+0x32>
 801c476:	3208      	adds	r2, #8
 801c478:	0a1b      	lsrs	r3, r3, #8
 801c47a:	0719      	lsls	r1, r3, #28
 801c47c:	bf04      	itt	eq
 801c47e:	091b      	lsreq	r3, r3, #4
 801c480:	3204      	addeq	r2, #4
 801c482:	0799      	lsls	r1, r3, #30
 801c484:	bf04      	itt	eq
 801c486:	089b      	lsreq	r3, r3, #2
 801c488:	3202      	addeq	r2, #2
 801c48a:	07d9      	lsls	r1, r3, #31
 801c48c:	d403      	bmi.n	801c496 <__lo0bits+0x4e>
 801c48e:	085b      	lsrs	r3, r3, #1
 801c490:	f102 0201 	add.w	r2, r2, #1
 801c494:	d003      	beq.n	801c49e <__lo0bits+0x56>
 801c496:	6003      	str	r3, [r0, #0]
 801c498:	e7e5      	b.n	801c466 <__lo0bits+0x1e>
 801c49a:	2200      	movs	r2, #0
 801c49c:	e7e3      	b.n	801c466 <__lo0bits+0x1e>
 801c49e:	2220      	movs	r2, #32
 801c4a0:	e7e1      	b.n	801c466 <__lo0bits+0x1e>
	...

0801c4a4 <__i2b>:
 801c4a4:	b510      	push	{r4, lr}
 801c4a6:	460c      	mov	r4, r1
 801c4a8:	2101      	movs	r1, #1
 801c4aa:	f7ff ff05 	bl	801c2b8 <_Balloc>
 801c4ae:	4602      	mov	r2, r0
 801c4b0:	b928      	cbnz	r0, 801c4be <__i2b+0x1a>
 801c4b2:	4b05      	ldr	r3, [pc, #20]	; (801c4c8 <__i2b+0x24>)
 801c4b4:	4805      	ldr	r0, [pc, #20]	; (801c4cc <__i2b+0x28>)
 801c4b6:	f240 1145 	movw	r1, #325	; 0x145
 801c4ba:	f7fe ffe9 	bl	801b490 <__assert_func>
 801c4be:	2301      	movs	r3, #1
 801c4c0:	6144      	str	r4, [r0, #20]
 801c4c2:	6103      	str	r3, [r0, #16]
 801c4c4:	bd10      	pop	{r4, pc}
 801c4c6:	bf00      	nop
 801c4c8:	080207e9 	.word	0x080207e9
 801c4cc:	080207fa 	.word	0x080207fa

0801c4d0 <__multiply>:
 801c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4d4:	4691      	mov	r9, r2
 801c4d6:	690a      	ldr	r2, [r1, #16]
 801c4d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c4dc:	429a      	cmp	r2, r3
 801c4de:	bfb8      	it	lt
 801c4e0:	460b      	movlt	r3, r1
 801c4e2:	460c      	mov	r4, r1
 801c4e4:	bfbc      	itt	lt
 801c4e6:	464c      	movlt	r4, r9
 801c4e8:	4699      	movlt	r9, r3
 801c4ea:	6927      	ldr	r7, [r4, #16]
 801c4ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c4f0:	68a3      	ldr	r3, [r4, #8]
 801c4f2:	6861      	ldr	r1, [r4, #4]
 801c4f4:	eb07 060a 	add.w	r6, r7, sl
 801c4f8:	42b3      	cmp	r3, r6
 801c4fa:	b085      	sub	sp, #20
 801c4fc:	bfb8      	it	lt
 801c4fe:	3101      	addlt	r1, #1
 801c500:	f7ff feda 	bl	801c2b8 <_Balloc>
 801c504:	b930      	cbnz	r0, 801c514 <__multiply+0x44>
 801c506:	4602      	mov	r2, r0
 801c508:	4b44      	ldr	r3, [pc, #272]	; (801c61c <__multiply+0x14c>)
 801c50a:	4845      	ldr	r0, [pc, #276]	; (801c620 <__multiply+0x150>)
 801c50c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801c510:	f7fe ffbe 	bl	801b490 <__assert_func>
 801c514:	f100 0514 	add.w	r5, r0, #20
 801c518:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c51c:	462b      	mov	r3, r5
 801c51e:	2200      	movs	r2, #0
 801c520:	4543      	cmp	r3, r8
 801c522:	d321      	bcc.n	801c568 <__multiply+0x98>
 801c524:	f104 0314 	add.w	r3, r4, #20
 801c528:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c52c:	f109 0314 	add.w	r3, r9, #20
 801c530:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c534:	9202      	str	r2, [sp, #8]
 801c536:	1b3a      	subs	r2, r7, r4
 801c538:	3a15      	subs	r2, #21
 801c53a:	f022 0203 	bic.w	r2, r2, #3
 801c53e:	3204      	adds	r2, #4
 801c540:	f104 0115 	add.w	r1, r4, #21
 801c544:	428f      	cmp	r7, r1
 801c546:	bf38      	it	cc
 801c548:	2204      	movcc	r2, #4
 801c54a:	9201      	str	r2, [sp, #4]
 801c54c:	9a02      	ldr	r2, [sp, #8]
 801c54e:	9303      	str	r3, [sp, #12]
 801c550:	429a      	cmp	r2, r3
 801c552:	d80c      	bhi.n	801c56e <__multiply+0x9e>
 801c554:	2e00      	cmp	r6, #0
 801c556:	dd03      	ble.n	801c560 <__multiply+0x90>
 801c558:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d05b      	beq.n	801c618 <__multiply+0x148>
 801c560:	6106      	str	r6, [r0, #16]
 801c562:	b005      	add	sp, #20
 801c564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c568:	f843 2b04 	str.w	r2, [r3], #4
 801c56c:	e7d8      	b.n	801c520 <__multiply+0x50>
 801c56e:	f8b3 a000 	ldrh.w	sl, [r3]
 801c572:	f1ba 0f00 	cmp.w	sl, #0
 801c576:	d024      	beq.n	801c5c2 <__multiply+0xf2>
 801c578:	f104 0e14 	add.w	lr, r4, #20
 801c57c:	46a9      	mov	r9, r5
 801c57e:	f04f 0c00 	mov.w	ip, #0
 801c582:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c586:	f8d9 1000 	ldr.w	r1, [r9]
 801c58a:	fa1f fb82 	uxth.w	fp, r2
 801c58e:	b289      	uxth	r1, r1
 801c590:	fb0a 110b 	mla	r1, sl, fp, r1
 801c594:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c598:	f8d9 2000 	ldr.w	r2, [r9]
 801c59c:	4461      	add	r1, ip
 801c59e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c5a2:	fb0a c20b 	mla	r2, sl, fp, ip
 801c5a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c5aa:	b289      	uxth	r1, r1
 801c5ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c5b0:	4577      	cmp	r7, lr
 801c5b2:	f849 1b04 	str.w	r1, [r9], #4
 801c5b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c5ba:	d8e2      	bhi.n	801c582 <__multiply+0xb2>
 801c5bc:	9a01      	ldr	r2, [sp, #4]
 801c5be:	f845 c002 	str.w	ip, [r5, r2]
 801c5c2:	9a03      	ldr	r2, [sp, #12]
 801c5c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c5c8:	3304      	adds	r3, #4
 801c5ca:	f1b9 0f00 	cmp.w	r9, #0
 801c5ce:	d021      	beq.n	801c614 <__multiply+0x144>
 801c5d0:	6829      	ldr	r1, [r5, #0]
 801c5d2:	f104 0c14 	add.w	ip, r4, #20
 801c5d6:	46ae      	mov	lr, r5
 801c5d8:	f04f 0a00 	mov.w	sl, #0
 801c5dc:	f8bc b000 	ldrh.w	fp, [ip]
 801c5e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c5e4:	fb09 220b 	mla	r2, r9, fp, r2
 801c5e8:	4452      	add	r2, sl
 801c5ea:	b289      	uxth	r1, r1
 801c5ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c5f0:	f84e 1b04 	str.w	r1, [lr], #4
 801c5f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 801c5f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c5fc:	f8be 1000 	ldrh.w	r1, [lr]
 801c600:	fb09 110a 	mla	r1, r9, sl, r1
 801c604:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801c608:	4567      	cmp	r7, ip
 801c60a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c60e:	d8e5      	bhi.n	801c5dc <__multiply+0x10c>
 801c610:	9a01      	ldr	r2, [sp, #4]
 801c612:	50a9      	str	r1, [r5, r2]
 801c614:	3504      	adds	r5, #4
 801c616:	e799      	b.n	801c54c <__multiply+0x7c>
 801c618:	3e01      	subs	r6, #1
 801c61a:	e79b      	b.n	801c554 <__multiply+0x84>
 801c61c:	080207e9 	.word	0x080207e9
 801c620:	080207fa 	.word	0x080207fa

0801c624 <__pow5mult>:
 801c624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c628:	4615      	mov	r5, r2
 801c62a:	f012 0203 	ands.w	r2, r2, #3
 801c62e:	4606      	mov	r6, r0
 801c630:	460f      	mov	r7, r1
 801c632:	d007      	beq.n	801c644 <__pow5mult+0x20>
 801c634:	4c25      	ldr	r4, [pc, #148]	; (801c6cc <__pow5mult+0xa8>)
 801c636:	3a01      	subs	r2, #1
 801c638:	2300      	movs	r3, #0
 801c63a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c63e:	f7ff fe9d 	bl	801c37c <__multadd>
 801c642:	4607      	mov	r7, r0
 801c644:	10ad      	asrs	r5, r5, #2
 801c646:	d03d      	beq.n	801c6c4 <__pow5mult+0xa0>
 801c648:	69f4      	ldr	r4, [r6, #28]
 801c64a:	b97c      	cbnz	r4, 801c66c <__pow5mult+0x48>
 801c64c:	2010      	movs	r0, #16
 801c64e:	f7ff fd7f 	bl	801c150 <malloc>
 801c652:	4602      	mov	r2, r0
 801c654:	61f0      	str	r0, [r6, #28]
 801c656:	b928      	cbnz	r0, 801c664 <__pow5mult+0x40>
 801c658:	4b1d      	ldr	r3, [pc, #116]	; (801c6d0 <__pow5mult+0xac>)
 801c65a:	481e      	ldr	r0, [pc, #120]	; (801c6d4 <__pow5mult+0xb0>)
 801c65c:	f240 11b3 	movw	r1, #435	; 0x1b3
 801c660:	f7fe ff16 	bl	801b490 <__assert_func>
 801c664:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c668:	6004      	str	r4, [r0, #0]
 801c66a:	60c4      	str	r4, [r0, #12]
 801c66c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801c670:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c674:	b94c      	cbnz	r4, 801c68a <__pow5mult+0x66>
 801c676:	f240 2171 	movw	r1, #625	; 0x271
 801c67a:	4630      	mov	r0, r6
 801c67c:	f7ff ff12 	bl	801c4a4 <__i2b>
 801c680:	2300      	movs	r3, #0
 801c682:	f8c8 0008 	str.w	r0, [r8, #8]
 801c686:	4604      	mov	r4, r0
 801c688:	6003      	str	r3, [r0, #0]
 801c68a:	f04f 0900 	mov.w	r9, #0
 801c68e:	07eb      	lsls	r3, r5, #31
 801c690:	d50a      	bpl.n	801c6a8 <__pow5mult+0x84>
 801c692:	4639      	mov	r1, r7
 801c694:	4622      	mov	r2, r4
 801c696:	4630      	mov	r0, r6
 801c698:	f7ff ff1a 	bl	801c4d0 <__multiply>
 801c69c:	4639      	mov	r1, r7
 801c69e:	4680      	mov	r8, r0
 801c6a0:	4630      	mov	r0, r6
 801c6a2:	f7ff fe49 	bl	801c338 <_Bfree>
 801c6a6:	4647      	mov	r7, r8
 801c6a8:	106d      	asrs	r5, r5, #1
 801c6aa:	d00b      	beq.n	801c6c4 <__pow5mult+0xa0>
 801c6ac:	6820      	ldr	r0, [r4, #0]
 801c6ae:	b938      	cbnz	r0, 801c6c0 <__pow5mult+0x9c>
 801c6b0:	4622      	mov	r2, r4
 801c6b2:	4621      	mov	r1, r4
 801c6b4:	4630      	mov	r0, r6
 801c6b6:	f7ff ff0b 	bl	801c4d0 <__multiply>
 801c6ba:	6020      	str	r0, [r4, #0]
 801c6bc:	f8c0 9000 	str.w	r9, [r0]
 801c6c0:	4604      	mov	r4, r0
 801c6c2:	e7e4      	b.n	801c68e <__pow5mult+0x6a>
 801c6c4:	4638      	mov	r0, r7
 801c6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c6ca:	bf00      	nop
 801c6cc:	08020948 	.word	0x08020948
 801c6d0:	080205a4 	.word	0x080205a4
 801c6d4:	080207fa 	.word	0x080207fa

0801c6d8 <__lshift>:
 801c6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6dc:	460c      	mov	r4, r1
 801c6de:	6849      	ldr	r1, [r1, #4]
 801c6e0:	6923      	ldr	r3, [r4, #16]
 801c6e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c6e6:	68a3      	ldr	r3, [r4, #8]
 801c6e8:	4607      	mov	r7, r0
 801c6ea:	4691      	mov	r9, r2
 801c6ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c6f0:	f108 0601 	add.w	r6, r8, #1
 801c6f4:	42b3      	cmp	r3, r6
 801c6f6:	db0b      	blt.n	801c710 <__lshift+0x38>
 801c6f8:	4638      	mov	r0, r7
 801c6fa:	f7ff fddd 	bl	801c2b8 <_Balloc>
 801c6fe:	4605      	mov	r5, r0
 801c700:	b948      	cbnz	r0, 801c716 <__lshift+0x3e>
 801c702:	4602      	mov	r2, r0
 801c704:	4b28      	ldr	r3, [pc, #160]	; (801c7a8 <__lshift+0xd0>)
 801c706:	4829      	ldr	r0, [pc, #164]	; (801c7ac <__lshift+0xd4>)
 801c708:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801c70c:	f7fe fec0 	bl	801b490 <__assert_func>
 801c710:	3101      	adds	r1, #1
 801c712:	005b      	lsls	r3, r3, #1
 801c714:	e7ee      	b.n	801c6f4 <__lshift+0x1c>
 801c716:	2300      	movs	r3, #0
 801c718:	f100 0114 	add.w	r1, r0, #20
 801c71c:	f100 0210 	add.w	r2, r0, #16
 801c720:	4618      	mov	r0, r3
 801c722:	4553      	cmp	r3, sl
 801c724:	db33      	blt.n	801c78e <__lshift+0xb6>
 801c726:	6920      	ldr	r0, [r4, #16]
 801c728:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c72c:	f104 0314 	add.w	r3, r4, #20
 801c730:	f019 091f 	ands.w	r9, r9, #31
 801c734:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c738:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c73c:	d02b      	beq.n	801c796 <__lshift+0xbe>
 801c73e:	f1c9 0e20 	rsb	lr, r9, #32
 801c742:	468a      	mov	sl, r1
 801c744:	2200      	movs	r2, #0
 801c746:	6818      	ldr	r0, [r3, #0]
 801c748:	fa00 f009 	lsl.w	r0, r0, r9
 801c74c:	4310      	orrs	r0, r2
 801c74e:	f84a 0b04 	str.w	r0, [sl], #4
 801c752:	f853 2b04 	ldr.w	r2, [r3], #4
 801c756:	459c      	cmp	ip, r3
 801c758:	fa22 f20e 	lsr.w	r2, r2, lr
 801c75c:	d8f3      	bhi.n	801c746 <__lshift+0x6e>
 801c75e:	ebac 0304 	sub.w	r3, ip, r4
 801c762:	3b15      	subs	r3, #21
 801c764:	f023 0303 	bic.w	r3, r3, #3
 801c768:	3304      	adds	r3, #4
 801c76a:	f104 0015 	add.w	r0, r4, #21
 801c76e:	4584      	cmp	ip, r0
 801c770:	bf38      	it	cc
 801c772:	2304      	movcc	r3, #4
 801c774:	50ca      	str	r2, [r1, r3]
 801c776:	b10a      	cbz	r2, 801c77c <__lshift+0xa4>
 801c778:	f108 0602 	add.w	r6, r8, #2
 801c77c:	3e01      	subs	r6, #1
 801c77e:	4638      	mov	r0, r7
 801c780:	612e      	str	r6, [r5, #16]
 801c782:	4621      	mov	r1, r4
 801c784:	f7ff fdd8 	bl	801c338 <_Bfree>
 801c788:	4628      	mov	r0, r5
 801c78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c78e:	f842 0f04 	str.w	r0, [r2, #4]!
 801c792:	3301      	adds	r3, #1
 801c794:	e7c5      	b.n	801c722 <__lshift+0x4a>
 801c796:	3904      	subs	r1, #4
 801c798:	f853 2b04 	ldr.w	r2, [r3], #4
 801c79c:	f841 2f04 	str.w	r2, [r1, #4]!
 801c7a0:	459c      	cmp	ip, r3
 801c7a2:	d8f9      	bhi.n	801c798 <__lshift+0xc0>
 801c7a4:	e7ea      	b.n	801c77c <__lshift+0xa4>
 801c7a6:	bf00      	nop
 801c7a8:	080207e9 	.word	0x080207e9
 801c7ac:	080207fa 	.word	0x080207fa

0801c7b0 <__mcmp>:
 801c7b0:	b530      	push	{r4, r5, lr}
 801c7b2:	6902      	ldr	r2, [r0, #16]
 801c7b4:	690c      	ldr	r4, [r1, #16]
 801c7b6:	1b12      	subs	r2, r2, r4
 801c7b8:	d10e      	bne.n	801c7d8 <__mcmp+0x28>
 801c7ba:	f100 0314 	add.w	r3, r0, #20
 801c7be:	3114      	adds	r1, #20
 801c7c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c7c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c7c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c7cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c7d0:	42a5      	cmp	r5, r4
 801c7d2:	d003      	beq.n	801c7dc <__mcmp+0x2c>
 801c7d4:	d305      	bcc.n	801c7e2 <__mcmp+0x32>
 801c7d6:	2201      	movs	r2, #1
 801c7d8:	4610      	mov	r0, r2
 801c7da:	bd30      	pop	{r4, r5, pc}
 801c7dc:	4283      	cmp	r3, r0
 801c7de:	d3f3      	bcc.n	801c7c8 <__mcmp+0x18>
 801c7e0:	e7fa      	b.n	801c7d8 <__mcmp+0x28>
 801c7e2:	f04f 32ff 	mov.w	r2, #4294967295
 801c7e6:	e7f7      	b.n	801c7d8 <__mcmp+0x28>

0801c7e8 <__mdiff>:
 801c7e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7ec:	460c      	mov	r4, r1
 801c7ee:	4606      	mov	r6, r0
 801c7f0:	4611      	mov	r1, r2
 801c7f2:	4620      	mov	r0, r4
 801c7f4:	4690      	mov	r8, r2
 801c7f6:	f7ff ffdb 	bl	801c7b0 <__mcmp>
 801c7fa:	1e05      	subs	r5, r0, #0
 801c7fc:	d110      	bne.n	801c820 <__mdiff+0x38>
 801c7fe:	4629      	mov	r1, r5
 801c800:	4630      	mov	r0, r6
 801c802:	f7ff fd59 	bl	801c2b8 <_Balloc>
 801c806:	b930      	cbnz	r0, 801c816 <__mdiff+0x2e>
 801c808:	4b3a      	ldr	r3, [pc, #232]	; (801c8f4 <__mdiff+0x10c>)
 801c80a:	4602      	mov	r2, r0
 801c80c:	f240 2137 	movw	r1, #567	; 0x237
 801c810:	4839      	ldr	r0, [pc, #228]	; (801c8f8 <__mdiff+0x110>)
 801c812:	f7fe fe3d 	bl	801b490 <__assert_func>
 801c816:	2301      	movs	r3, #1
 801c818:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c81c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c820:	bfa4      	itt	ge
 801c822:	4643      	movge	r3, r8
 801c824:	46a0      	movge	r8, r4
 801c826:	4630      	mov	r0, r6
 801c828:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c82c:	bfa6      	itte	ge
 801c82e:	461c      	movge	r4, r3
 801c830:	2500      	movge	r5, #0
 801c832:	2501      	movlt	r5, #1
 801c834:	f7ff fd40 	bl	801c2b8 <_Balloc>
 801c838:	b920      	cbnz	r0, 801c844 <__mdiff+0x5c>
 801c83a:	4b2e      	ldr	r3, [pc, #184]	; (801c8f4 <__mdiff+0x10c>)
 801c83c:	4602      	mov	r2, r0
 801c83e:	f240 2145 	movw	r1, #581	; 0x245
 801c842:	e7e5      	b.n	801c810 <__mdiff+0x28>
 801c844:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801c848:	6926      	ldr	r6, [r4, #16]
 801c84a:	60c5      	str	r5, [r0, #12]
 801c84c:	f104 0914 	add.w	r9, r4, #20
 801c850:	f108 0514 	add.w	r5, r8, #20
 801c854:	f100 0e14 	add.w	lr, r0, #20
 801c858:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801c85c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801c860:	f108 0210 	add.w	r2, r8, #16
 801c864:	46f2      	mov	sl, lr
 801c866:	2100      	movs	r1, #0
 801c868:	f859 3b04 	ldr.w	r3, [r9], #4
 801c86c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c870:	fa11 f88b 	uxtah	r8, r1, fp
 801c874:	b299      	uxth	r1, r3
 801c876:	0c1b      	lsrs	r3, r3, #16
 801c878:	eba8 0801 	sub.w	r8, r8, r1
 801c87c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c880:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c884:	fa1f f888 	uxth.w	r8, r8
 801c888:	1419      	asrs	r1, r3, #16
 801c88a:	454e      	cmp	r6, r9
 801c88c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c890:	f84a 3b04 	str.w	r3, [sl], #4
 801c894:	d8e8      	bhi.n	801c868 <__mdiff+0x80>
 801c896:	1b33      	subs	r3, r6, r4
 801c898:	3b15      	subs	r3, #21
 801c89a:	f023 0303 	bic.w	r3, r3, #3
 801c89e:	3304      	adds	r3, #4
 801c8a0:	3415      	adds	r4, #21
 801c8a2:	42a6      	cmp	r6, r4
 801c8a4:	bf38      	it	cc
 801c8a6:	2304      	movcc	r3, #4
 801c8a8:	441d      	add	r5, r3
 801c8aa:	4473      	add	r3, lr
 801c8ac:	469e      	mov	lr, r3
 801c8ae:	462e      	mov	r6, r5
 801c8b0:	4566      	cmp	r6, ip
 801c8b2:	d30e      	bcc.n	801c8d2 <__mdiff+0xea>
 801c8b4:	f10c 0203 	add.w	r2, ip, #3
 801c8b8:	1b52      	subs	r2, r2, r5
 801c8ba:	f022 0203 	bic.w	r2, r2, #3
 801c8be:	3d03      	subs	r5, #3
 801c8c0:	45ac      	cmp	ip, r5
 801c8c2:	bf38      	it	cc
 801c8c4:	2200      	movcc	r2, #0
 801c8c6:	4413      	add	r3, r2
 801c8c8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c8cc:	b17a      	cbz	r2, 801c8ee <__mdiff+0x106>
 801c8ce:	6107      	str	r7, [r0, #16]
 801c8d0:	e7a4      	b.n	801c81c <__mdiff+0x34>
 801c8d2:	f856 8b04 	ldr.w	r8, [r6], #4
 801c8d6:	fa11 f288 	uxtah	r2, r1, r8
 801c8da:	1414      	asrs	r4, r2, #16
 801c8dc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801c8e0:	b292      	uxth	r2, r2
 801c8e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801c8e6:	f84e 2b04 	str.w	r2, [lr], #4
 801c8ea:	1421      	asrs	r1, r4, #16
 801c8ec:	e7e0      	b.n	801c8b0 <__mdiff+0xc8>
 801c8ee:	3f01      	subs	r7, #1
 801c8f0:	e7ea      	b.n	801c8c8 <__mdiff+0xe0>
 801c8f2:	bf00      	nop
 801c8f4:	080207e9 	.word	0x080207e9
 801c8f8:	080207fa 	.word	0x080207fa

0801c8fc <__d2b>:
 801c8fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c900:	460f      	mov	r7, r1
 801c902:	2101      	movs	r1, #1
 801c904:	ec59 8b10 	vmov	r8, r9, d0
 801c908:	4616      	mov	r6, r2
 801c90a:	f7ff fcd5 	bl	801c2b8 <_Balloc>
 801c90e:	4604      	mov	r4, r0
 801c910:	b930      	cbnz	r0, 801c920 <__d2b+0x24>
 801c912:	4602      	mov	r2, r0
 801c914:	4b24      	ldr	r3, [pc, #144]	; (801c9a8 <__d2b+0xac>)
 801c916:	4825      	ldr	r0, [pc, #148]	; (801c9ac <__d2b+0xb0>)
 801c918:	f240 310f 	movw	r1, #783	; 0x30f
 801c91c:	f7fe fdb8 	bl	801b490 <__assert_func>
 801c920:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c928:	bb2d      	cbnz	r5, 801c976 <__d2b+0x7a>
 801c92a:	9301      	str	r3, [sp, #4]
 801c92c:	f1b8 0300 	subs.w	r3, r8, #0
 801c930:	d026      	beq.n	801c980 <__d2b+0x84>
 801c932:	4668      	mov	r0, sp
 801c934:	9300      	str	r3, [sp, #0]
 801c936:	f7ff fd87 	bl	801c448 <__lo0bits>
 801c93a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c93e:	b1e8      	cbz	r0, 801c97c <__d2b+0x80>
 801c940:	f1c0 0320 	rsb	r3, r0, #32
 801c944:	fa02 f303 	lsl.w	r3, r2, r3
 801c948:	430b      	orrs	r3, r1
 801c94a:	40c2      	lsrs	r2, r0
 801c94c:	6163      	str	r3, [r4, #20]
 801c94e:	9201      	str	r2, [sp, #4]
 801c950:	9b01      	ldr	r3, [sp, #4]
 801c952:	61a3      	str	r3, [r4, #24]
 801c954:	2b00      	cmp	r3, #0
 801c956:	bf14      	ite	ne
 801c958:	2202      	movne	r2, #2
 801c95a:	2201      	moveq	r2, #1
 801c95c:	6122      	str	r2, [r4, #16]
 801c95e:	b1bd      	cbz	r5, 801c990 <__d2b+0x94>
 801c960:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c964:	4405      	add	r5, r0
 801c966:	603d      	str	r5, [r7, #0]
 801c968:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c96c:	6030      	str	r0, [r6, #0]
 801c96e:	4620      	mov	r0, r4
 801c970:	b003      	add	sp, #12
 801c972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c97a:	e7d6      	b.n	801c92a <__d2b+0x2e>
 801c97c:	6161      	str	r1, [r4, #20]
 801c97e:	e7e7      	b.n	801c950 <__d2b+0x54>
 801c980:	a801      	add	r0, sp, #4
 801c982:	f7ff fd61 	bl	801c448 <__lo0bits>
 801c986:	9b01      	ldr	r3, [sp, #4]
 801c988:	6163      	str	r3, [r4, #20]
 801c98a:	3020      	adds	r0, #32
 801c98c:	2201      	movs	r2, #1
 801c98e:	e7e5      	b.n	801c95c <__d2b+0x60>
 801c990:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c994:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c998:	6038      	str	r0, [r7, #0]
 801c99a:	6918      	ldr	r0, [r3, #16]
 801c99c:	f7ff fd34 	bl	801c408 <__hi0bits>
 801c9a0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c9a4:	e7e2      	b.n	801c96c <__d2b+0x70>
 801c9a6:	bf00      	nop
 801c9a8:	080207e9 	.word	0x080207e9
 801c9ac:	080207fa 	.word	0x080207fa

0801c9b0 <__sfputc_r>:
 801c9b0:	6893      	ldr	r3, [r2, #8]
 801c9b2:	3b01      	subs	r3, #1
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	b410      	push	{r4}
 801c9b8:	6093      	str	r3, [r2, #8]
 801c9ba:	da08      	bge.n	801c9ce <__sfputc_r+0x1e>
 801c9bc:	6994      	ldr	r4, [r2, #24]
 801c9be:	42a3      	cmp	r3, r4
 801c9c0:	db01      	blt.n	801c9c6 <__sfputc_r+0x16>
 801c9c2:	290a      	cmp	r1, #10
 801c9c4:	d103      	bne.n	801c9ce <__sfputc_r+0x1e>
 801c9c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9ca:	f000 b9f5 	b.w	801cdb8 <__swbuf_r>
 801c9ce:	6813      	ldr	r3, [r2, #0]
 801c9d0:	1c58      	adds	r0, r3, #1
 801c9d2:	6010      	str	r0, [r2, #0]
 801c9d4:	7019      	strb	r1, [r3, #0]
 801c9d6:	4608      	mov	r0, r1
 801c9d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9dc:	4770      	bx	lr

0801c9de <__sfputs_r>:
 801c9de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9e0:	4606      	mov	r6, r0
 801c9e2:	460f      	mov	r7, r1
 801c9e4:	4614      	mov	r4, r2
 801c9e6:	18d5      	adds	r5, r2, r3
 801c9e8:	42ac      	cmp	r4, r5
 801c9ea:	d101      	bne.n	801c9f0 <__sfputs_r+0x12>
 801c9ec:	2000      	movs	r0, #0
 801c9ee:	e007      	b.n	801ca00 <__sfputs_r+0x22>
 801c9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9f4:	463a      	mov	r2, r7
 801c9f6:	4630      	mov	r0, r6
 801c9f8:	f7ff ffda 	bl	801c9b0 <__sfputc_r>
 801c9fc:	1c43      	adds	r3, r0, #1
 801c9fe:	d1f3      	bne.n	801c9e8 <__sfputs_r+0xa>
 801ca00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ca04 <_vfiprintf_r>:
 801ca04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca08:	460d      	mov	r5, r1
 801ca0a:	b09d      	sub	sp, #116	; 0x74
 801ca0c:	4614      	mov	r4, r2
 801ca0e:	4698      	mov	r8, r3
 801ca10:	4606      	mov	r6, r0
 801ca12:	b118      	cbz	r0, 801ca1c <_vfiprintf_r+0x18>
 801ca14:	6a03      	ldr	r3, [r0, #32]
 801ca16:	b90b      	cbnz	r3, 801ca1c <_vfiprintf_r+0x18>
 801ca18:	f7fe fbc0 	bl	801b19c <__sinit>
 801ca1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ca1e:	07d9      	lsls	r1, r3, #31
 801ca20:	d405      	bmi.n	801ca2e <_vfiprintf_r+0x2a>
 801ca22:	89ab      	ldrh	r3, [r5, #12]
 801ca24:	059a      	lsls	r2, r3, #22
 801ca26:	d402      	bmi.n	801ca2e <_vfiprintf_r+0x2a>
 801ca28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ca2a:	f7fe fd20 	bl	801b46e <__retarget_lock_acquire_recursive>
 801ca2e:	89ab      	ldrh	r3, [r5, #12]
 801ca30:	071b      	lsls	r3, r3, #28
 801ca32:	d501      	bpl.n	801ca38 <_vfiprintf_r+0x34>
 801ca34:	692b      	ldr	r3, [r5, #16]
 801ca36:	b99b      	cbnz	r3, 801ca60 <_vfiprintf_r+0x5c>
 801ca38:	4629      	mov	r1, r5
 801ca3a:	4630      	mov	r0, r6
 801ca3c:	f000 f9fa 	bl	801ce34 <__swsetup_r>
 801ca40:	b170      	cbz	r0, 801ca60 <_vfiprintf_r+0x5c>
 801ca42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ca44:	07dc      	lsls	r4, r3, #31
 801ca46:	d504      	bpl.n	801ca52 <_vfiprintf_r+0x4e>
 801ca48:	f04f 30ff 	mov.w	r0, #4294967295
 801ca4c:	b01d      	add	sp, #116	; 0x74
 801ca4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca52:	89ab      	ldrh	r3, [r5, #12]
 801ca54:	0598      	lsls	r0, r3, #22
 801ca56:	d4f7      	bmi.n	801ca48 <_vfiprintf_r+0x44>
 801ca58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ca5a:	f7fe fd09 	bl	801b470 <__retarget_lock_release_recursive>
 801ca5e:	e7f3      	b.n	801ca48 <_vfiprintf_r+0x44>
 801ca60:	2300      	movs	r3, #0
 801ca62:	9309      	str	r3, [sp, #36]	; 0x24
 801ca64:	2320      	movs	r3, #32
 801ca66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ca6a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ca6e:	2330      	movs	r3, #48	; 0x30
 801ca70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801cc24 <_vfiprintf_r+0x220>
 801ca74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ca78:	f04f 0901 	mov.w	r9, #1
 801ca7c:	4623      	mov	r3, r4
 801ca7e:	469a      	mov	sl, r3
 801ca80:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ca84:	b10a      	cbz	r2, 801ca8a <_vfiprintf_r+0x86>
 801ca86:	2a25      	cmp	r2, #37	; 0x25
 801ca88:	d1f9      	bne.n	801ca7e <_vfiprintf_r+0x7a>
 801ca8a:	ebba 0b04 	subs.w	fp, sl, r4
 801ca8e:	d00b      	beq.n	801caa8 <_vfiprintf_r+0xa4>
 801ca90:	465b      	mov	r3, fp
 801ca92:	4622      	mov	r2, r4
 801ca94:	4629      	mov	r1, r5
 801ca96:	4630      	mov	r0, r6
 801ca98:	f7ff ffa1 	bl	801c9de <__sfputs_r>
 801ca9c:	3001      	adds	r0, #1
 801ca9e:	f000 80a9 	beq.w	801cbf4 <_vfiprintf_r+0x1f0>
 801caa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801caa4:	445a      	add	r2, fp
 801caa6:	9209      	str	r2, [sp, #36]	; 0x24
 801caa8:	f89a 3000 	ldrb.w	r3, [sl]
 801caac:	2b00      	cmp	r3, #0
 801caae:	f000 80a1 	beq.w	801cbf4 <_vfiprintf_r+0x1f0>
 801cab2:	2300      	movs	r3, #0
 801cab4:	f04f 32ff 	mov.w	r2, #4294967295
 801cab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cabc:	f10a 0a01 	add.w	sl, sl, #1
 801cac0:	9304      	str	r3, [sp, #16]
 801cac2:	9307      	str	r3, [sp, #28]
 801cac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cac8:	931a      	str	r3, [sp, #104]	; 0x68
 801caca:	4654      	mov	r4, sl
 801cacc:	2205      	movs	r2, #5
 801cace:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cad2:	4854      	ldr	r0, [pc, #336]	; (801cc24 <_vfiprintf_r+0x220>)
 801cad4:	f7e3 fbb4 	bl	8000240 <memchr>
 801cad8:	9a04      	ldr	r2, [sp, #16]
 801cada:	b9d8      	cbnz	r0, 801cb14 <_vfiprintf_r+0x110>
 801cadc:	06d1      	lsls	r1, r2, #27
 801cade:	bf44      	itt	mi
 801cae0:	2320      	movmi	r3, #32
 801cae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cae6:	0713      	lsls	r3, r2, #28
 801cae8:	bf44      	itt	mi
 801caea:	232b      	movmi	r3, #43	; 0x2b
 801caec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801caf0:	f89a 3000 	ldrb.w	r3, [sl]
 801caf4:	2b2a      	cmp	r3, #42	; 0x2a
 801caf6:	d015      	beq.n	801cb24 <_vfiprintf_r+0x120>
 801caf8:	9a07      	ldr	r2, [sp, #28]
 801cafa:	4654      	mov	r4, sl
 801cafc:	2000      	movs	r0, #0
 801cafe:	f04f 0c0a 	mov.w	ip, #10
 801cb02:	4621      	mov	r1, r4
 801cb04:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cb08:	3b30      	subs	r3, #48	; 0x30
 801cb0a:	2b09      	cmp	r3, #9
 801cb0c:	d94d      	bls.n	801cbaa <_vfiprintf_r+0x1a6>
 801cb0e:	b1b0      	cbz	r0, 801cb3e <_vfiprintf_r+0x13a>
 801cb10:	9207      	str	r2, [sp, #28]
 801cb12:	e014      	b.n	801cb3e <_vfiprintf_r+0x13a>
 801cb14:	eba0 0308 	sub.w	r3, r0, r8
 801cb18:	fa09 f303 	lsl.w	r3, r9, r3
 801cb1c:	4313      	orrs	r3, r2
 801cb1e:	9304      	str	r3, [sp, #16]
 801cb20:	46a2      	mov	sl, r4
 801cb22:	e7d2      	b.n	801caca <_vfiprintf_r+0xc6>
 801cb24:	9b03      	ldr	r3, [sp, #12]
 801cb26:	1d19      	adds	r1, r3, #4
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	9103      	str	r1, [sp, #12]
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	bfbb      	ittet	lt
 801cb30:	425b      	neglt	r3, r3
 801cb32:	f042 0202 	orrlt.w	r2, r2, #2
 801cb36:	9307      	strge	r3, [sp, #28]
 801cb38:	9307      	strlt	r3, [sp, #28]
 801cb3a:	bfb8      	it	lt
 801cb3c:	9204      	strlt	r2, [sp, #16]
 801cb3e:	7823      	ldrb	r3, [r4, #0]
 801cb40:	2b2e      	cmp	r3, #46	; 0x2e
 801cb42:	d10c      	bne.n	801cb5e <_vfiprintf_r+0x15a>
 801cb44:	7863      	ldrb	r3, [r4, #1]
 801cb46:	2b2a      	cmp	r3, #42	; 0x2a
 801cb48:	d134      	bne.n	801cbb4 <_vfiprintf_r+0x1b0>
 801cb4a:	9b03      	ldr	r3, [sp, #12]
 801cb4c:	1d1a      	adds	r2, r3, #4
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	9203      	str	r2, [sp, #12]
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	bfb8      	it	lt
 801cb56:	f04f 33ff 	movlt.w	r3, #4294967295
 801cb5a:	3402      	adds	r4, #2
 801cb5c:	9305      	str	r3, [sp, #20]
 801cb5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801cc34 <_vfiprintf_r+0x230>
 801cb62:	7821      	ldrb	r1, [r4, #0]
 801cb64:	2203      	movs	r2, #3
 801cb66:	4650      	mov	r0, sl
 801cb68:	f7e3 fb6a 	bl	8000240 <memchr>
 801cb6c:	b138      	cbz	r0, 801cb7e <_vfiprintf_r+0x17a>
 801cb6e:	9b04      	ldr	r3, [sp, #16]
 801cb70:	eba0 000a 	sub.w	r0, r0, sl
 801cb74:	2240      	movs	r2, #64	; 0x40
 801cb76:	4082      	lsls	r2, r0
 801cb78:	4313      	orrs	r3, r2
 801cb7a:	3401      	adds	r4, #1
 801cb7c:	9304      	str	r3, [sp, #16]
 801cb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb82:	4829      	ldr	r0, [pc, #164]	; (801cc28 <_vfiprintf_r+0x224>)
 801cb84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cb88:	2206      	movs	r2, #6
 801cb8a:	f7e3 fb59 	bl	8000240 <memchr>
 801cb8e:	2800      	cmp	r0, #0
 801cb90:	d03f      	beq.n	801cc12 <_vfiprintf_r+0x20e>
 801cb92:	4b26      	ldr	r3, [pc, #152]	; (801cc2c <_vfiprintf_r+0x228>)
 801cb94:	bb1b      	cbnz	r3, 801cbde <_vfiprintf_r+0x1da>
 801cb96:	9b03      	ldr	r3, [sp, #12]
 801cb98:	3307      	adds	r3, #7
 801cb9a:	f023 0307 	bic.w	r3, r3, #7
 801cb9e:	3308      	adds	r3, #8
 801cba0:	9303      	str	r3, [sp, #12]
 801cba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cba4:	443b      	add	r3, r7
 801cba6:	9309      	str	r3, [sp, #36]	; 0x24
 801cba8:	e768      	b.n	801ca7c <_vfiprintf_r+0x78>
 801cbaa:	fb0c 3202 	mla	r2, ip, r2, r3
 801cbae:	460c      	mov	r4, r1
 801cbb0:	2001      	movs	r0, #1
 801cbb2:	e7a6      	b.n	801cb02 <_vfiprintf_r+0xfe>
 801cbb4:	2300      	movs	r3, #0
 801cbb6:	3401      	adds	r4, #1
 801cbb8:	9305      	str	r3, [sp, #20]
 801cbba:	4619      	mov	r1, r3
 801cbbc:	f04f 0c0a 	mov.w	ip, #10
 801cbc0:	4620      	mov	r0, r4
 801cbc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cbc6:	3a30      	subs	r2, #48	; 0x30
 801cbc8:	2a09      	cmp	r2, #9
 801cbca:	d903      	bls.n	801cbd4 <_vfiprintf_r+0x1d0>
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d0c6      	beq.n	801cb5e <_vfiprintf_r+0x15a>
 801cbd0:	9105      	str	r1, [sp, #20]
 801cbd2:	e7c4      	b.n	801cb5e <_vfiprintf_r+0x15a>
 801cbd4:	fb0c 2101 	mla	r1, ip, r1, r2
 801cbd8:	4604      	mov	r4, r0
 801cbda:	2301      	movs	r3, #1
 801cbdc:	e7f0      	b.n	801cbc0 <_vfiprintf_r+0x1bc>
 801cbde:	ab03      	add	r3, sp, #12
 801cbe0:	9300      	str	r3, [sp, #0]
 801cbe2:	462a      	mov	r2, r5
 801cbe4:	4b12      	ldr	r3, [pc, #72]	; (801cc30 <_vfiprintf_r+0x22c>)
 801cbe6:	a904      	add	r1, sp, #16
 801cbe8:	4630      	mov	r0, r6
 801cbea:	f7fd fea1 	bl	801a930 <_printf_float>
 801cbee:	4607      	mov	r7, r0
 801cbf0:	1c78      	adds	r0, r7, #1
 801cbf2:	d1d6      	bne.n	801cba2 <_vfiprintf_r+0x19e>
 801cbf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cbf6:	07d9      	lsls	r1, r3, #31
 801cbf8:	d405      	bmi.n	801cc06 <_vfiprintf_r+0x202>
 801cbfa:	89ab      	ldrh	r3, [r5, #12]
 801cbfc:	059a      	lsls	r2, r3, #22
 801cbfe:	d402      	bmi.n	801cc06 <_vfiprintf_r+0x202>
 801cc00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cc02:	f7fe fc35 	bl	801b470 <__retarget_lock_release_recursive>
 801cc06:	89ab      	ldrh	r3, [r5, #12]
 801cc08:	065b      	lsls	r3, r3, #25
 801cc0a:	f53f af1d 	bmi.w	801ca48 <_vfiprintf_r+0x44>
 801cc0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cc10:	e71c      	b.n	801ca4c <_vfiprintf_r+0x48>
 801cc12:	ab03      	add	r3, sp, #12
 801cc14:	9300      	str	r3, [sp, #0]
 801cc16:	462a      	mov	r2, r5
 801cc18:	4b05      	ldr	r3, [pc, #20]	; (801cc30 <_vfiprintf_r+0x22c>)
 801cc1a:	a904      	add	r1, sp, #16
 801cc1c:	4630      	mov	r0, r6
 801cc1e:	f7fe f90f 	bl	801ae40 <_printf_i>
 801cc22:	e7e4      	b.n	801cbee <_vfiprintf_r+0x1ea>
 801cc24:	08020954 	.word	0x08020954
 801cc28:	0802095e 	.word	0x0802095e
 801cc2c:	0801a931 	.word	0x0801a931
 801cc30:	0801c9df 	.word	0x0801c9df
 801cc34:	0802095a 	.word	0x0802095a

0801cc38 <__sflush_r>:
 801cc38:	898a      	ldrh	r2, [r1, #12]
 801cc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc3e:	4605      	mov	r5, r0
 801cc40:	0710      	lsls	r0, r2, #28
 801cc42:	460c      	mov	r4, r1
 801cc44:	d458      	bmi.n	801ccf8 <__sflush_r+0xc0>
 801cc46:	684b      	ldr	r3, [r1, #4]
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	dc05      	bgt.n	801cc58 <__sflush_r+0x20>
 801cc4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	dc02      	bgt.n	801cc58 <__sflush_r+0x20>
 801cc52:	2000      	movs	r0, #0
 801cc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cc5a:	2e00      	cmp	r6, #0
 801cc5c:	d0f9      	beq.n	801cc52 <__sflush_r+0x1a>
 801cc5e:	2300      	movs	r3, #0
 801cc60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cc64:	682f      	ldr	r7, [r5, #0]
 801cc66:	6a21      	ldr	r1, [r4, #32]
 801cc68:	602b      	str	r3, [r5, #0]
 801cc6a:	d032      	beq.n	801ccd2 <__sflush_r+0x9a>
 801cc6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cc6e:	89a3      	ldrh	r3, [r4, #12]
 801cc70:	075a      	lsls	r2, r3, #29
 801cc72:	d505      	bpl.n	801cc80 <__sflush_r+0x48>
 801cc74:	6863      	ldr	r3, [r4, #4]
 801cc76:	1ac0      	subs	r0, r0, r3
 801cc78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cc7a:	b10b      	cbz	r3, 801cc80 <__sflush_r+0x48>
 801cc7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cc7e:	1ac0      	subs	r0, r0, r3
 801cc80:	2300      	movs	r3, #0
 801cc82:	4602      	mov	r2, r0
 801cc84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cc86:	6a21      	ldr	r1, [r4, #32]
 801cc88:	4628      	mov	r0, r5
 801cc8a:	47b0      	blx	r6
 801cc8c:	1c43      	adds	r3, r0, #1
 801cc8e:	89a3      	ldrh	r3, [r4, #12]
 801cc90:	d106      	bne.n	801cca0 <__sflush_r+0x68>
 801cc92:	6829      	ldr	r1, [r5, #0]
 801cc94:	291d      	cmp	r1, #29
 801cc96:	d82b      	bhi.n	801ccf0 <__sflush_r+0xb8>
 801cc98:	4a29      	ldr	r2, [pc, #164]	; (801cd40 <__sflush_r+0x108>)
 801cc9a:	410a      	asrs	r2, r1
 801cc9c:	07d6      	lsls	r6, r2, #31
 801cc9e:	d427      	bmi.n	801ccf0 <__sflush_r+0xb8>
 801cca0:	2200      	movs	r2, #0
 801cca2:	6062      	str	r2, [r4, #4]
 801cca4:	04d9      	lsls	r1, r3, #19
 801cca6:	6922      	ldr	r2, [r4, #16]
 801cca8:	6022      	str	r2, [r4, #0]
 801ccaa:	d504      	bpl.n	801ccb6 <__sflush_r+0x7e>
 801ccac:	1c42      	adds	r2, r0, #1
 801ccae:	d101      	bne.n	801ccb4 <__sflush_r+0x7c>
 801ccb0:	682b      	ldr	r3, [r5, #0]
 801ccb2:	b903      	cbnz	r3, 801ccb6 <__sflush_r+0x7e>
 801ccb4:	6560      	str	r0, [r4, #84]	; 0x54
 801ccb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ccb8:	602f      	str	r7, [r5, #0]
 801ccba:	2900      	cmp	r1, #0
 801ccbc:	d0c9      	beq.n	801cc52 <__sflush_r+0x1a>
 801ccbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ccc2:	4299      	cmp	r1, r3
 801ccc4:	d002      	beq.n	801cccc <__sflush_r+0x94>
 801ccc6:	4628      	mov	r0, r5
 801ccc8:	f7ff f9f6 	bl	801c0b8 <_free_r>
 801cccc:	2000      	movs	r0, #0
 801ccce:	6360      	str	r0, [r4, #52]	; 0x34
 801ccd0:	e7c0      	b.n	801cc54 <__sflush_r+0x1c>
 801ccd2:	2301      	movs	r3, #1
 801ccd4:	4628      	mov	r0, r5
 801ccd6:	47b0      	blx	r6
 801ccd8:	1c41      	adds	r1, r0, #1
 801ccda:	d1c8      	bne.n	801cc6e <__sflush_r+0x36>
 801ccdc:	682b      	ldr	r3, [r5, #0]
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d0c5      	beq.n	801cc6e <__sflush_r+0x36>
 801cce2:	2b1d      	cmp	r3, #29
 801cce4:	d001      	beq.n	801ccea <__sflush_r+0xb2>
 801cce6:	2b16      	cmp	r3, #22
 801cce8:	d101      	bne.n	801ccee <__sflush_r+0xb6>
 801ccea:	602f      	str	r7, [r5, #0]
 801ccec:	e7b1      	b.n	801cc52 <__sflush_r+0x1a>
 801ccee:	89a3      	ldrh	r3, [r4, #12]
 801ccf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ccf4:	81a3      	strh	r3, [r4, #12]
 801ccf6:	e7ad      	b.n	801cc54 <__sflush_r+0x1c>
 801ccf8:	690f      	ldr	r7, [r1, #16]
 801ccfa:	2f00      	cmp	r7, #0
 801ccfc:	d0a9      	beq.n	801cc52 <__sflush_r+0x1a>
 801ccfe:	0793      	lsls	r3, r2, #30
 801cd00:	680e      	ldr	r6, [r1, #0]
 801cd02:	bf08      	it	eq
 801cd04:	694b      	ldreq	r3, [r1, #20]
 801cd06:	600f      	str	r7, [r1, #0]
 801cd08:	bf18      	it	ne
 801cd0a:	2300      	movne	r3, #0
 801cd0c:	eba6 0807 	sub.w	r8, r6, r7
 801cd10:	608b      	str	r3, [r1, #8]
 801cd12:	f1b8 0f00 	cmp.w	r8, #0
 801cd16:	dd9c      	ble.n	801cc52 <__sflush_r+0x1a>
 801cd18:	6a21      	ldr	r1, [r4, #32]
 801cd1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cd1c:	4643      	mov	r3, r8
 801cd1e:	463a      	mov	r2, r7
 801cd20:	4628      	mov	r0, r5
 801cd22:	47b0      	blx	r6
 801cd24:	2800      	cmp	r0, #0
 801cd26:	dc06      	bgt.n	801cd36 <__sflush_r+0xfe>
 801cd28:	89a3      	ldrh	r3, [r4, #12]
 801cd2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cd2e:	81a3      	strh	r3, [r4, #12]
 801cd30:	f04f 30ff 	mov.w	r0, #4294967295
 801cd34:	e78e      	b.n	801cc54 <__sflush_r+0x1c>
 801cd36:	4407      	add	r7, r0
 801cd38:	eba8 0800 	sub.w	r8, r8, r0
 801cd3c:	e7e9      	b.n	801cd12 <__sflush_r+0xda>
 801cd3e:	bf00      	nop
 801cd40:	dfbffffe 	.word	0xdfbffffe

0801cd44 <_fflush_r>:
 801cd44:	b538      	push	{r3, r4, r5, lr}
 801cd46:	690b      	ldr	r3, [r1, #16]
 801cd48:	4605      	mov	r5, r0
 801cd4a:	460c      	mov	r4, r1
 801cd4c:	b913      	cbnz	r3, 801cd54 <_fflush_r+0x10>
 801cd4e:	2500      	movs	r5, #0
 801cd50:	4628      	mov	r0, r5
 801cd52:	bd38      	pop	{r3, r4, r5, pc}
 801cd54:	b118      	cbz	r0, 801cd5e <_fflush_r+0x1a>
 801cd56:	6a03      	ldr	r3, [r0, #32]
 801cd58:	b90b      	cbnz	r3, 801cd5e <_fflush_r+0x1a>
 801cd5a:	f7fe fa1f 	bl	801b19c <__sinit>
 801cd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	d0f3      	beq.n	801cd4e <_fflush_r+0xa>
 801cd66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cd68:	07d0      	lsls	r0, r2, #31
 801cd6a:	d404      	bmi.n	801cd76 <_fflush_r+0x32>
 801cd6c:	0599      	lsls	r1, r3, #22
 801cd6e:	d402      	bmi.n	801cd76 <_fflush_r+0x32>
 801cd70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd72:	f7fe fb7c 	bl	801b46e <__retarget_lock_acquire_recursive>
 801cd76:	4628      	mov	r0, r5
 801cd78:	4621      	mov	r1, r4
 801cd7a:	f7ff ff5d 	bl	801cc38 <__sflush_r>
 801cd7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cd80:	07da      	lsls	r2, r3, #31
 801cd82:	4605      	mov	r5, r0
 801cd84:	d4e4      	bmi.n	801cd50 <_fflush_r+0xc>
 801cd86:	89a3      	ldrh	r3, [r4, #12]
 801cd88:	059b      	lsls	r3, r3, #22
 801cd8a:	d4e1      	bmi.n	801cd50 <_fflush_r+0xc>
 801cd8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd8e:	f7fe fb6f 	bl	801b470 <__retarget_lock_release_recursive>
 801cd92:	e7dd      	b.n	801cd50 <_fflush_r+0xc>

0801cd94 <fiprintf>:
 801cd94:	b40e      	push	{r1, r2, r3}
 801cd96:	b503      	push	{r0, r1, lr}
 801cd98:	4601      	mov	r1, r0
 801cd9a:	ab03      	add	r3, sp, #12
 801cd9c:	4805      	ldr	r0, [pc, #20]	; (801cdb4 <fiprintf+0x20>)
 801cd9e:	f853 2b04 	ldr.w	r2, [r3], #4
 801cda2:	6800      	ldr	r0, [r0, #0]
 801cda4:	9301      	str	r3, [sp, #4]
 801cda6:	f7ff fe2d 	bl	801ca04 <_vfiprintf_r>
 801cdaa:	b002      	add	sp, #8
 801cdac:	f85d eb04 	ldr.w	lr, [sp], #4
 801cdb0:	b003      	add	sp, #12
 801cdb2:	4770      	bx	lr
 801cdb4:	20000090 	.word	0x20000090

0801cdb8 <__swbuf_r>:
 801cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cdba:	460e      	mov	r6, r1
 801cdbc:	4614      	mov	r4, r2
 801cdbe:	4605      	mov	r5, r0
 801cdc0:	b118      	cbz	r0, 801cdca <__swbuf_r+0x12>
 801cdc2:	6a03      	ldr	r3, [r0, #32]
 801cdc4:	b90b      	cbnz	r3, 801cdca <__swbuf_r+0x12>
 801cdc6:	f7fe f9e9 	bl	801b19c <__sinit>
 801cdca:	69a3      	ldr	r3, [r4, #24]
 801cdcc:	60a3      	str	r3, [r4, #8]
 801cdce:	89a3      	ldrh	r3, [r4, #12]
 801cdd0:	071a      	lsls	r2, r3, #28
 801cdd2:	d525      	bpl.n	801ce20 <__swbuf_r+0x68>
 801cdd4:	6923      	ldr	r3, [r4, #16]
 801cdd6:	b31b      	cbz	r3, 801ce20 <__swbuf_r+0x68>
 801cdd8:	6823      	ldr	r3, [r4, #0]
 801cdda:	6922      	ldr	r2, [r4, #16]
 801cddc:	1a98      	subs	r0, r3, r2
 801cdde:	6963      	ldr	r3, [r4, #20]
 801cde0:	b2f6      	uxtb	r6, r6
 801cde2:	4283      	cmp	r3, r0
 801cde4:	4637      	mov	r7, r6
 801cde6:	dc04      	bgt.n	801cdf2 <__swbuf_r+0x3a>
 801cde8:	4621      	mov	r1, r4
 801cdea:	4628      	mov	r0, r5
 801cdec:	f7ff ffaa 	bl	801cd44 <_fflush_r>
 801cdf0:	b9e0      	cbnz	r0, 801ce2c <__swbuf_r+0x74>
 801cdf2:	68a3      	ldr	r3, [r4, #8]
 801cdf4:	3b01      	subs	r3, #1
 801cdf6:	60a3      	str	r3, [r4, #8]
 801cdf8:	6823      	ldr	r3, [r4, #0]
 801cdfa:	1c5a      	adds	r2, r3, #1
 801cdfc:	6022      	str	r2, [r4, #0]
 801cdfe:	701e      	strb	r6, [r3, #0]
 801ce00:	6962      	ldr	r2, [r4, #20]
 801ce02:	1c43      	adds	r3, r0, #1
 801ce04:	429a      	cmp	r2, r3
 801ce06:	d004      	beq.n	801ce12 <__swbuf_r+0x5a>
 801ce08:	89a3      	ldrh	r3, [r4, #12]
 801ce0a:	07db      	lsls	r3, r3, #31
 801ce0c:	d506      	bpl.n	801ce1c <__swbuf_r+0x64>
 801ce0e:	2e0a      	cmp	r6, #10
 801ce10:	d104      	bne.n	801ce1c <__swbuf_r+0x64>
 801ce12:	4621      	mov	r1, r4
 801ce14:	4628      	mov	r0, r5
 801ce16:	f7ff ff95 	bl	801cd44 <_fflush_r>
 801ce1a:	b938      	cbnz	r0, 801ce2c <__swbuf_r+0x74>
 801ce1c:	4638      	mov	r0, r7
 801ce1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ce20:	4621      	mov	r1, r4
 801ce22:	4628      	mov	r0, r5
 801ce24:	f000 f806 	bl	801ce34 <__swsetup_r>
 801ce28:	2800      	cmp	r0, #0
 801ce2a:	d0d5      	beq.n	801cdd8 <__swbuf_r+0x20>
 801ce2c:	f04f 37ff 	mov.w	r7, #4294967295
 801ce30:	e7f4      	b.n	801ce1c <__swbuf_r+0x64>
	...

0801ce34 <__swsetup_r>:
 801ce34:	b538      	push	{r3, r4, r5, lr}
 801ce36:	4b2a      	ldr	r3, [pc, #168]	; (801cee0 <__swsetup_r+0xac>)
 801ce38:	4605      	mov	r5, r0
 801ce3a:	6818      	ldr	r0, [r3, #0]
 801ce3c:	460c      	mov	r4, r1
 801ce3e:	b118      	cbz	r0, 801ce48 <__swsetup_r+0x14>
 801ce40:	6a03      	ldr	r3, [r0, #32]
 801ce42:	b90b      	cbnz	r3, 801ce48 <__swsetup_r+0x14>
 801ce44:	f7fe f9aa 	bl	801b19c <__sinit>
 801ce48:	89a3      	ldrh	r3, [r4, #12]
 801ce4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ce4e:	0718      	lsls	r0, r3, #28
 801ce50:	d422      	bmi.n	801ce98 <__swsetup_r+0x64>
 801ce52:	06d9      	lsls	r1, r3, #27
 801ce54:	d407      	bmi.n	801ce66 <__swsetup_r+0x32>
 801ce56:	2309      	movs	r3, #9
 801ce58:	602b      	str	r3, [r5, #0]
 801ce5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ce5e:	81a3      	strh	r3, [r4, #12]
 801ce60:	f04f 30ff 	mov.w	r0, #4294967295
 801ce64:	e034      	b.n	801ced0 <__swsetup_r+0x9c>
 801ce66:	0758      	lsls	r0, r3, #29
 801ce68:	d512      	bpl.n	801ce90 <__swsetup_r+0x5c>
 801ce6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce6c:	b141      	cbz	r1, 801ce80 <__swsetup_r+0x4c>
 801ce6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ce72:	4299      	cmp	r1, r3
 801ce74:	d002      	beq.n	801ce7c <__swsetup_r+0x48>
 801ce76:	4628      	mov	r0, r5
 801ce78:	f7ff f91e 	bl	801c0b8 <_free_r>
 801ce7c:	2300      	movs	r3, #0
 801ce7e:	6363      	str	r3, [r4, #52]	; 0x34
 801ce80:	89a3      	ldrh	r3, [r4, #12]
 801ce82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ce86:	81a3      	strh	r3, [r4, #12]
 801ce88:	2300      	movs	r3, #0
 801ce8a:	6063      	str	r3, [r4, #4]
 801ce8c:	6923      	ldr	r3, [r4, #16]
 801ce8e:	6023      	str	r3, [r4, #0]
 801ce90:	89a3      	ldrh	r3, [r4, #12]
 801ce92:	f043 0308 	orr.w	r3, r3, #8
 801ce96:	81a3      	strh	r3, [r4, #12]
 801ce98:	6923      	ldr	r3, [r4, #16]
 801ce9a:	b94b      	cbnz	r3, 801ceb0 <__swsetup_r+0x7c>
 801ce9c:	89a3      	ldrh	r3, [r4, #12]
 801ce9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cea6:	d003      	beq.n	801ceb0 <__swsetup_r+0x7c>
 801cea8:	4621      	mov	r1, r4
 801ceaa:	4628      	mov	r0, r5
 801ceac:	f000 f88c 	bl	801cfc8 <__smakebuf_r>
 801ceb0:	89a0      	ldrh	r0, [r4, #12]
 801ceb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ceb6:	f010 0301 	ands.w	r3, r0, #1
 801ceba:	d00a      	beq.n	801ced2 <__swsetup_r+0x9e>
 801cebc:	2300      	movs	r3, #0
 801cebe:	60a3      	str	r3, [r4, #8]
 801cec0:	6963      	ldr	r3, [r4, #20]
 801cec2:	425b      	negs	r3, r3
 801cec4:	61a3      	str	r3, [r4, #24]
 801cec6:	6923      	ldr	r3, [r4, #16]
 801cec8:	b943      	cbnz	r3, 801cedc <__swsetup_r+0xa8>
 801ceca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cece:	d1c4      	bne.n	801ce5a <__swsetup_r+0x26>
 801ced0:	bd38      	pop	{r3, r4, r5, pc}
 801ced2:	0781      	lsls	r1, r0, #30
 801ced4:	bf58      	it	pl
 801ced6:	6963      	ldrpl	r3, [r4, #20]
 801ced8:	60a3      	str	r3, [r4, #8]
 801ceda:	e7f4      	b.n	801cec6 <__swsetup_r+0x92>
 801cedc:	2000      	movs	r0, #0
 801cede:	e7f7      	b.n	801ced0 <__swsetup_r+0x9c>
 801cee0:	20000090 	.word	0x20000090

0801cee4 <_sbrk_r>:
 801cee4:	b538      	push	{r3, r4, r5, lr}
 801cee6:	4d06      	ldr	r5, [pc, #24]	; (801cf00 <_sbrk_r+0x1c>)
 801cee8:	2300      	movs	r3, #0
 801ceea:	4604      	mov	r4, r0
 801ceec:	4608      	mov	r0, r1
 801ceee:	602b      	str	r3, [r5, #0]
 801cef0:	f7e4 fd12 	bl	8001918 <_sbrk>
 801cef4:	1c43      	adds	r3, r0, #1
 801cef6:	d102      	bne.n	801cefe <_sbrk_r+0x1a>
 801cef8:	682b      	ldr	r3, [r5, #0]
 801cefa:	b103      	cbz	r3, 801cefe <_sbrk_r+0x1a>
 801cefc:	6023      	str	r3, [r4, #0]
 801cefe:	bd38      	pop	{r3, r4, r5, pc}
 801cf00:	2001df80 	.word	0x2001df80

0801cf04 <abort>:
 801cf04:	b508      	push	{r3, lr}
 801cf06:	2006      	movs	r0, #6
 801cf08:	f000 f8c2 	bl	801d090 <raise>
 801cf0c:	2001      	movs	r0, #1
 801cf0e:	f7e4 fc8b 	bl	8001828 <_exit>

0801cf12 <_calloc_r>:
 801cf12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cf14:	fba1 2402 	umull	r2, r4, r1, r2
 801cf18:	b94c      	cbnz	r4, 801cf2e <_calloc_r+0x1c>
 801cf1a:	4611      	mov	r1, r2
 801cf1c:	9201      	str	r2, [sp, #4]
 801cf1e:	f7ff f93f 	bl	801c1a0 <_malloc_r>
 801cf22:	9a01      	ldr	r2, [sp, #4]
 801cf24:	4605      	mov	r5, r0
 801cf26:	b930      	cbnz	r0, 801cf36 <_calloc_r+0x24>
 801cf28:	4628      	mov	r0, r5
 801cf2a:	b003      	add	sp, #12
 801cf2c:	bd30      	pop	{r4, r5, pc}
 801cf2e:	220c      	movs	r2, #12
 801cf30:	6002      	str	r2, [r0, #0]
 801cf32:	2500      	movs	r5, #0
 801cf34:	e7f8      	b.n	801cf28 <_calloc_r+0x16>
 801cf36:	4621      	mov	r1, r4
 801cf38:	f7fe f9cb 	bl	801b2d2 <memset>
 801cf3c:	e7f4      	b.n	801cf28 <_calloc_r+0x16>

0801cf3e <__ascii_mbtowc>:
 801cf3e:	b082      	sub	sp, #8
 801cf40:	b901      	cbnz	r1, 801cf44 <__ascii_mbtowc+0x6>
 801cf42:	a901      	add	r1, sp, #4
 801cf44:	b142      	cbz	r2, 801cf58 <__ascii_mbtowc+0x1a>
 801cf46:	b14b      	cbz	r3, 801cf5c <__ascii_mbtowc+0x1e>
 801cf48:	7813      	ldrb	r3, [r2, #0]
 801cf4a:	600b      	str	r3, [r1, #0]
 801cf4c:	7812      	ldrb	r2, [r2, #0]
 801cf4e:	1e10      	subs	r0, r2, #0
 801cf50:	bf18      	it	ne
 801cf52:	2001      	movne	r0, #1
 801cf54:	b002      	add	sp, #8
 801cf56:	4770      	bx	lr
 801cf58:	4610      	mov	r0, r2
 801cf5a:	e7fb      	b.n	801cf54 <__ascii_mbtowc+0x16>
 801cf5c:	f06f 0001 	mvn.w	r0, #1
 801cf60:	e7f8      	b.n	801cf54 <__ascii_mbtowc+0x16>

0801cf62 <__ascii_wctomb>:
 801cf62:	b149      	cbz	r1, 801cf78 <__ascii_wctomb+0x16>
 801cf64:	2aff      	cmp	r2, #255	; 0xff
 801cf66:	bf85      	ittet	hi
 801cf68:	238a      	movhi	r3, #138	; 0x8a
 801cf6a:	6003      	strhi	r3, [r0, #0]
 801cf6c:	700a      	strbls	r2, [r1, #0]
 801cf6e:	f04f 30ff 	movhi.w	r0, #4294967295
 801cf72:	bf98      	it	ls
 801cf74:	2001      	movls	r0, #1
 801cf76:	4770      	bx	lr
 801cf78:	4608      	mov	r0, r1
 801cf7a:	4770      	bx	lr

0801cf7c <__swhatbuf_r>:
 801cf7c:	b570      	push	{r4, r5, r6, lr}
 801cf7e:	460c      	mov	r4, r1
 801cf80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf84:	2900      	cmp	r1, #0
 801cf86:	b096      	sub	sp, #88	; 0x58
 801cf88:	4615      	mov	r5, r2
 801cf8a:	461e      	mov	r6, r3
 801cf8c:	da0d      	bge.n	801cfaa <__swhatbuf_r+0x2e>
 801cf8e:	89a3      	ldrh	r3, [r4, #12]
 801cf90:	f013 0f80 	tst.w	r3, #128	; 0x80
 801cf94:	f04f 0100 	mov.w	r1, #0
 801cf98:	bf0c      	ite	eq
 801cf9a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801cf9e:	2340      	movne	r3, #64	; 0x40
 801cfa0:	2000      	movs	r0, #0
 801cfa2:	6031      	str	r1, [r6, #0]
 801cfa4:	602b      	str	r3, [r5, #0]
 801cfa6:	b016      	add	sp, #88	; 0x58
 801cfa8:	bd70      	pop	{r4, r5, r6, pc}
 801cfaa:	466a      	mov	r2, sp
 801cfac:	f000 f878 	bl	801d0a0 <_fstat_r>
 801cfb0:	2800      	cmp	r0, #0
 801cfb2:	dbec      	blt.n	801cf8e <__swhatbuf_r+0x12>
 801cfb4:	9901      	ldr	r1, [sp, #4]
 801cfb6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801cfba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801cfbe:	4259      	negs	r1, r3
 801cfc0:	4159      	adcs	r1, r3
 801cfc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cfc6:	e7eb      	b.n	801cfa0 <__swhatbuf_r+0x24>

0801cfc8 <__smakebuf_r>:
 801cfc8:	898b      	ldrh	r3, [r1, #12]
 801cfca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cfcc:	079d      	lsls	r5, r3, #30
 801cfce:	4606      	mov	r6, r0
 801cfd0:	460c      	mov	r4, r1
 801cfd2:	d507      	bpl.n	801cfe4 <__smakebuf_r+0x1c>
 801cfd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cfd8:	6023      	str	r3, [r4, #0]
 801cfda:	6123      	str	r3, [r4, #16]
 801cfdc:	2301      	movs	r3, #1
 801cfde:	6163      	str	r3, [r4, #20]
 801cfe0:	b002      	add	sp, #8
 801cfe2:	bd70      	pop	{r4, r5, r6, pc}
 801cfe4:	ab01      	add	r3, sp, #4
 801cfe6:	466a      	mov	r2, sp
 801cfe8:	f7ff ffc8 	bl	801cf7c <__swhatbuf_r>
 801cfec:	9900      	ldr	r1, [sp, #0]
 801cfee:	4605      	mov	r5, r0
 801cff0:	4630      	mov	r0, r6
 801cff2:	f7ff f8d5 	bl	801c1a0 <_malloc_r>
 801cff6:	b948      	cbnz	r0, 801d00c <__smakebuf_r+0x44>
 801cff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cffc:	059a      	lsls	r2, r3, #22
 801cffe:	d4ef      	bmi.n	801cfe0 <__smakebuf_r+0x18>
 801d000:	f023 0303 	bic.w	r3, r3, #3
 801d004:	f043 0302 	orr.w	r3, r3, #2
 801d008:	81a3      	strh	r3, [r4, #12]
 801d00a:	e7e3      	b.n	801cfd4 <__smakebuf_r+0xc>
 801d00c:	89a3      	ldrh	r3, [r4, #12]
 801d00e:	6020      	str	r0, [r4, #0]
 801d010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d014:	81a3      	strh	r3, [r4, #12]
 801d016:	9b00      	ldr	r3, [sp, #0]
 801d018:	6163      	str	r3, [r4, #20]
 801d01a:	9b01      	ldr	r3, [sp, #4]
 801d01c:	6120      	str	r0, [r4, #16]
 801d01e:	b15b      	cbz	r3, 801d038 <__smakebuf_r+0x70>
 801d020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d024:	4630      	mov	r0, r6
 801d026:	f000 f84d 	bl	801d0c4 <_isatty_r>
 801d02a:	b128      	cbz	r0, 801d038 <__smakebuf_r+0x70>
 801d02c:	89a3      	ldrh	r3, [r4, #12]
 801d02e:	f023 0303 	bic.w	r3, r3, #3
 801d032:	f043 0301 	orr.w	r3, r3, #1
 801d036:	81a3      	strh	r3, [r4, #12]
 801d038:	89a3      	ldrh	r3, [r4, #12]
 801d03a:	431d      	orrs	r5, r3
 801d03c:	81a5      	strh	r5, [r4, #12]
 801d03e:	e7cf      	b.n	801cfe0 <__smakebuf_r+0x18>

0801d040 <_raise_r>:
 801d040:	291f      	cmp	r1, #31
 801d042:	b538      	push	{r3, r4, r5, lr}
 801d044:	4604      	mov	r4, r0
 801d046:	460d      	mov	r5, r1
 801d048:	d904      	bls.n	801d054 <_raise_r+0x14>
 801d04a:	2316      	movs	r3, #22
 801d04c:	6003      	str	r3, [r0, #0]
 801d04e:	f04f 30ff 	mov.w	r0, #4294967295
 801d052:	bd38      	pop	{r3, r4, r5, pc}
 801d054:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d056:	b112      	cbz	r2, 801d05e <_raise_r+0x1e>
 801d058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d05c:	b94b      	cbnz	r3, 801d072 <_raise_r+0x32>
 801d05e:	4620      	mov	r0, r4
 801d060:	f000 f852 	bl	801d108 <_getpid_r>
 801d064:	462a      	mov	r2, r5
 801d066:	4601      	mov	r1, r0
 801d068:	4620      	mov	r0, r4
 801d06a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d06e:	f000 b839 	b.w	801d0e4 <_kill_r>
 801d072:	2b01      	cmp	r3, #1
 801d074:	d00a      	beq.n	801d08c <_raise_r+0x4c>
 801d076:	1c59      	adds	r1, r3, #1
 801d078:	d103      	bne.n	801d082 <_raise_r+0x42>
 801d07a:	2316      	movs	r3, #22
 801d07c:	6003      	str	r3, [r0, #0]
 801d07e:	2001      	movs	r0, #1
 801d080:	e7e7      	b.n	801d052 <_raise_r+0x12>
 801d082:	2400      	movs	r4, #0
 801d084:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d088:	4628      	mov	r0, r5
 801d08a:	4798      	blx	r3
 801d08c:	2000      	movs	r0, #0
 801d08e:	e7e0      	b.n	801d052 <_raise_r+0x12>

0801d090 <raise>:
 801d090:	4b02      	ldr	r3, [pc, #8]	; (801d09c <raise+0xc>)
 801d092:	4601      	mov	r1, r0
 801d094:	6818      	ldr	r0, [r3, #0]
 801d096:	f7ff bfd3 	b.w	801d040 <_raise_r>
 801d09a:	bf00      	nop
 801d09c:	20000090 	.word	0x20000090

0801d0a0 <_fstat_r>:
 801d0a0:	b538      	push	{r3, r4, r5, lr}
 801d0a2:	4d07      	ldr	r5, [pc, #28]	; (801d0c0 <_fstat_r+0x20>)
 801d0a4:	2300      	movs	r3, #0
 801d0a6:	4604      	mov	r4, r0
 801d0a8:	4608      	mov	r0, r1
 801d0aa:	4611      	mov	r1, r2
 801d0ac:	602b      	str	r3, [r5, #0]
 801d0ae:	f7e4 fc0a 	bl	80018c6 <_fstat>
 801d0b2:	1c43      	adds	r3, r0, #1
 801d0b4:	d102      	bne.n	801d0bc <_fstat_r+0x1c>
 801d0b6:	682b      	ldr	r3, [r5, #0]
 801d0b8:	b103      	cbz	r3, 801d0bc <_fstat_r+0x1c>
 801d0ba:	6023      	str	r3, [r4, #0]
 801d0bc:	bd38      	pop	{r3, r4, r5, pc}
 801d0be:	bf00      	nop
 801d0c0:	2001df80 	.word	0x2001df80

0801d0c4 <_isatty_r>:
 801d0c4:	b538      	push	{r3, r4, r5, lr}
 801d0c6:	4d06      	ldr	r5, [pc, #24]	; (801d0e0 <_isatty_r+0x1c>)
 801d0c8:	2300      	movs	r3, #0
 801d0ca:	4604      	mov	r4, r0
 801d0cc:	4608      	mov	r0, r1
 801d0ce:	602b      	str	r3, [r5, #0]
 801d0d0:	f7e4 fc09 	bl	80018e6 <_isatty>
 801d0d4:	1c43      	adds	r3, r0, #1
 801d0d6:	d102      	bne.n	801d0de <_isatty_r+0x1a>
 801d0d8:	682b      	ldr	r3, [r5, #0]
 801d0da:	b103      	cbz	r3, 801d0de <_isatty_r+0x1a>
 801d0dc:	6023      	str	r3, [r4, #0]
 801d0de:	bd38      	pop	{r3, r4, r5, pc}
 801d0e0:	2001df80 	.word	0x2001df80

0801d0e4 <_kill_r>:
 801d0e4:	b538      	push	{r3, r4, r5, lr}
 801d0e6:	4d07      	ldr	r5, [pc, #28]	; (801d104 <_kill_r+0x20>)
 801d0e8:	2300      	movs	r3, #0
 801d0ea:	4604      	mov	r4, r0
 801d0ec:	4608      	mov	r0, r1
 801d0ee:	4611      	mov	r1, r2
 801d0f0:	602b      	str	r3, [r5, #0]
 801d0f2:	f7e4 fb87 	bl	8001804 <_kill>
 801d0f6:	1c43      	adds	r3, r0, #1
 801d0f8:	d102      	bne.n	801d100 <_kill_r+0x1c>
 801d0fa:	682b      	ldr	r3, [r5, #0]
 801d0fc:	b103      	cbz	r3, 801d100 <_kill_r+0x1c>
 801d0fe:	6023      	str	r3, [r4, #0]
 801d100:	bd38      	pop	{r3, r4, r5, pc}
 801d102:	bf00      	nop
 801d104:	2001df80 	.word	0x2001df80

0801d108 <_getpid_r>:
 801d108:	f7e4 bb74 	b.w	80017f4 <_getpid>

0801d10c <_init>:
 801d10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d10e:	bf00      	nop
 801d110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d112:	bc08      	pop	{r3}
 801d114:	469e      	mov	lr, r3
 801d116:	4770      	bx	lr

0801d118 <_fini>:
 801d118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d11a:	bf00      	nop
 801d11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d11e:	bc08      	pop	{r3}
 801d120:	469e      	mov	lr, r3
 801d122:	4770      	bx	lr
